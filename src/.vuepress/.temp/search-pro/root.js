export default "{\"documentCount\":938,\"nextId\":938,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-184f4da6#关于郑天祺\",\"2\":\"v-184f4da6#微信\",\"3\":\"v-009e1325\",\"4\":\"v-10802f86\",\"5\":\"v-0f311d3e\",\"6\":\"v-0f311d3e#_1、创建一个hdfs目录\",\"7\":\"v-0f311d3e#_2、本地文件上传到hdfs\",\"8\":\"v-0f311d3e#_3、查看-usr-local-hadoop-data-txtdir目录结构\",\"9\":\"v-0f311d3e#_4、查看hdfs上-usr-local-hadoop-data-txtdir下的文件内容\",\"10\":\"v-0f311d3e#_5、合并本地多个小文件上传到hdfs\",\"11\":\"v-0f311d3e#_6、-下载a-txt到本地文件系统\",\"12\":\"v-0f311d3e#_7、删除hdfs上的-usr-local-hadoop-data-txtdir\",\"13\":\"v-690c877f\",\"14\":\"v-6129c42d\",\"15\":\"v-518e86aa\",\"16\":\"v-518e86aa#_1-namenode\",\"17\":\"v-518e86aa#_2-datanode\",\"18\":\"v-518e86aa#_3-元信息的持久化\",\"19\":\"v-518e86aa#_4-secondarynamenode\",\"20\":\"v-d0b2db80\",\"21\":\"v-3a9c347f\",\"22\":\"v-4eefe5a0\",\"23\":\"v-0f9a80e9\",\"24\":\"v-6975eb2a\",\"25\":\"v-3f344948\",\"26\":\"v-6148d7ca\",\"27\":\"v-6148d7ca#二、同一份数据多种处理\",\"28\":\"v-a21f62e0\",\"29\":\"v-12693d7d\",\"30\":\"v-3a09eea1\",\"31\":\"v-3a09eea1#_1、建立三个文档\",\"32\":\"v-3a09eea1#_2、代码\",\"33\":\"v-7eedf06f\",\"34\":\"v-7eedf06f#_1-拆分输入数据\",\"35\":\"v-7eedf06f#_2-执行map方法\",\"36\":\"v-7eedf06f#_3-排序与合并处理\",\"37\":\"v-7eedf06f#_4-reduce-阶段的排序与合并\",\"38\":\"v-7eedf06f#a-map\",\"39\":\"v-7eedf06f#a-read\",\"40\":\"v-7eedf06f#b-map\",\"41\":\"v-7eedf06f#c-collect\",\"42\":\"v-7eedf06f#d-spill\",\"43\":\"v-7eedf06f#e-combine\",\"44\":\"v-7eedf06f#b-reduce\",\"45\":\"v-7eedf06f#a-shuffle\",\"46\":\"v-7eedf06f#b-merge\",\"47\":\"v-7eedf06f#c-sort\",\"48\":\"v-7eedf06f#d-reduce\",\"49\":\"v-7eedf06f#e-write\",\"50\":\"v-8e71288c\",\"51\":\"v-8e71288c#milvus支持的索引和指标\",\"52\":\"v-8e71288c#索引\",\"53\":\"v-8e71288c#相似性指标\",\"54\":\"v-8e71288c#广泛用于二进制嵌入的指标包括\",\"55\":\"v-8e71288c#用途\",\"56\":\"v-8e71288c#_1、单机版下载安装\",\"57\":\"v-8e71288c#_2、python版sdk\",\"58\":\"v-8e71288c#_3、示例\",\"59\":\"v-8e71288c#_1、建立图片模型-采用vgg16模型\",\"60\":\"v-8e71288c#_2、建立集合实体\",\"61\":\"v-8e71288c#_3、训练数据\",\"62\":\"v-8e71288c#_4、搜索相似图片\",\"63\":\"v-2b508b84\",\"64\":\"v-0e578957\",\"65\":\"v-0554738e\",\"66\":\"v-0554738e#举例\",\"67\":\"v-0554738e#原子性与隔离行\",\"68\":\"v-0554738e#_1-read-uncommited\",\"69\":\"v-0554738e#_2-read-commited\",\"70\":\"v-0554738e#_3-repeatable-read\",\"71\":\"v-0554738e#_4-serializable\",\"72\":\"v-0554738e#_5-脏读、不可重复读、幻象\",\"73\":\"v-369ebcf4\",\"74\":\"v-68529b50\",\"75\":\"v-44cd2c90\",\"76\":\"v-44cd2c90#step1、删除自带mariadb\",\"77\":\"v-44cd2c90#step2、安装mysql\",\"78\":\"v-44cd2c90#step3、启动并创建用户\",\"79\":\"v-44cd2c90#step4、my-cnf配置\",\"80\":\"v-44cd2c90#step5、slave启动\",\"81\":\"v-56c522dd\",\"82\":\"v-56c522dd#一、一些建议\",\"83\":\"v-56c522dd#二、算是面试题吧\",\"84\":\"v-56c522dd#_1-为什么一定要设一个主键\",\"85\":\"v-56c522dd#_2-主键是自增还是uuid\",\"86\":\"v-56c522dd#_3-主键为什么不推荐有业务含义\",\"87\":\"v-56c522dd#_5-为什么不直接存储图片、音频、视频等大容量内容\",\"88\":\"v-56c522dd#_6-字段为什么要定义not-null-default\",\"89\":\"v-56c522dd#_7-看建表语法\",\"90\":\"v-56c522dd#_8-mysql存储引擎\",\"91\":\"v-56c522dd#_9-常用的2种存储引擎\",\"92\":\"v-56c522dd#_10-可以针对表设置引擎吗-如何设置\",\"93\":\"v-56c522dd#_11-选择合适的存储引擎\",\"94\":\"v-56c522dd#_12-选择合适的数据类型\",\"95\":\"v-56c522dd#myisam-数据存储引擎和数据列\",\"96\":\"v-56c522dd#memory存储引擎和数据列\",\"97\":\"v-56c522dd#innodb-存储引擎和数据列\",\"98\":\"v-56c522dd#_13-char-varchar\",\"99\":\"v-56c522dd#_14-mysql字符集\",\"100\":\"v-56c522dd#_15-索引设计原则\",\"101\":\"v-56c522dd#_16-mysql有哪些索引\",\"102\":\"v-56c522dd#_17-hash索引和b-树索引的底层实现原理\",\"103\":\"v-56c522dd#_18-非聚簇索引一定会回表查询吗\",\"104\":\"v-56c522dd#_19-如何避免回表查询-什么是索引覆盖\",\"105\":\"v-56c522dd#_20-事务4个特性\",\"106\":\"v-56c522dd#_21-事务隔离级别分别是\",\"107\":\"v-56c522dd#_22-innodb默认事务隔离级别-如何查看当前隔离级别\",\"108\":\"v-56c522dd#_23-如何查看表结构\",\"109\":\"v-56c522dd#_24-mysql删除表的几种方式-区别\",\"110\":\"v-56c522dd#_25-主键和唯一索引区别\",\"111\":\"v-56c522dd#_26、查看当前表有哪些索引\",\"112\":\"v-56c522dd#_27、索引不生效的情况\",\"113\":\"v-56c522dd#_28、explain列有哪些-含义\",\"114\":\"v-56c522dd#_29、mysql最多创建多少列索引\",\"115\":\"v-56c522dd#_30、varchar-10-和int-10-代表什么含义\",\"116\":\"v-56c522dd#_31、count-在不同引擎的实现方式\",\"117\":\"v-56c522dd#三、数据结构\",\"118\":\"v-44ec5644\",\"119\":\"v-44ec5644#链表和链表节点的实现\",\"120\":\"v-44ec5644#链表和链表节点的-api\",\"121\":\"v-44ec5644#回顾\",\"122\":\"v-4c7466b4\",\"123\":\"v-4c7466b4#字典的实现\",\"124\":\"v-4c7466b4#哈希表\",\"125\":\"v-4c7466b4#哈希表节点\",\"126\":\"v-4c7466b4#字典\",\"127\":\"v-4c7466b4#哈希算法\",\"128\":\"v-c29db88e\",\"129\":\"v-c29db88e#_1-垂直分表\",\"130\":\"v-c29db88e#_2-垂直分库\",\"131\":\"v-c29db88e#_3-水平分库\",\"132\":\"v-c29db88e#_4-水平分表\",\"133\":\"v-7824978a\",\"134\":\"v-7824978a#_1-string字符串命令\",\"135\":\"v-7824978a#_2-list列表命令\",\"136\":\"v-7824978a#用于组合和处理多个集合的redis命令\",\"137\":\"v-7824978a#散列的更高级特性\",\"138\":\"v-7824978a#有序集合的范围型数据获取命令和范围型数据删除命令-以及并集命令和交集命令\",\"139\":\"v-5bfffc6a\",\"140\":\"v-2c13bb28\",\"141\":\"v-2c13bb28#配置选项\",\"142\":\"v-2c13bb28#rdb-相关\",\"143\":\"v-2c13bb28#•save\",\"144\":\"v-2c13bb28#•bgsave\",\"145\":\"v-2c13bb28#•lastsave\",\"146\":\"v-2c13bb28#配置选项-1\",\"147\":\"v-2c13bb28#aof-相关\",\"148\":\"v-2c13bb28#appendfsync-配置选项\",\"149\":\"v-2c13bb28#no-appendfsync-on-rewrite-配置选项\",\"150\":\"v-2c13bb28#aof-文件-rewrite\",\"151\":\"v-2c13bb28#bgrewriteaof-命令\",\"152\":\"v-2c13bb28#auto-aof-rewrite-percentage-auto-aof-rewrite-min-size-配置选项\",\"153\":\"v-997da1a6\",\"154\":\"v-997da1a6#主-从-数据复制的基本工作机制\",\"155\":\"v-997da1a6#关于-半-重新同步-重新同步\",\"156\":\"v-61cafd0d\",\"157\":\"v-61cafd0d#ziplist-优化机制\",\"158\":\"v-61cafd0d#intset-优化机制\",\"159\":\"v-61cafd0d#分布式-数据分片\",\"160\":\"v-61cafd0d#单实例-数据分片\",\"161\":\"v-61cafd0d#基于业务进行优化\",\"162\":\"v-24145a40\",\"163\":\"v-24145a40#增信型再担保\",\"164\":\"v-24145a40#分险型再担保\",\"165\":\"v-24145a40#具体业务模式\",\"166\":\"v-cd0e6eaa\",\"167\":\"v-1b671100\",\"168\":\"v-6cbdb318\",\"169\":\"v-6cbdb318#融资类担保产品\",\"170\":\"v-6cbdb318#间接融资担保的银行贷款担保\",\"171\":\"v-6cbdb318#什么是间接融资\",\"172\":\"v-6cbdb318#间接融资的优点\",\"173\":\"v-6cbdb318#贸易融资-票据和信用证-担保\",\"174\":\"v-6cbdb318#票据分类\",\"175\":\"v-6cbdb318#票据\",\"176\":\"v-6cbdb318#信用证\",\"177\":\"v-6cbdb318#直接融资担保的债券\",\"178\":\"v-6cbdb318#中期票据\",\"179\":\"v-6cbdb318#信托计划\",\"180\":\"v-6cbdb318#非融资类担保产品。\",\"181\":\"v-6cbdb318#履约保函\",\"182\":\"v-6cbdb318#预付款保函\",\"183\":\"v-6cbdb318#投标保函\",\"184\":\"v-6cbdb318#农民工工资\",\"185\":\"v-6cbdb318#财产保全\",\"186\":\"v-6cbdb318#商业票据\",\"187\":\"v-6cbdb318#融资租赁担保\",\"188\":\"v-6cbdb318#政府采购担保\",\"189\":\"v-2bdbe6b3\",\"190\":\"v-1fd5a678\",\"191\":\"v-1fd5a678#cap原理概述\",\"192\":\"v-1fd5a678#consistency-一致性\",\"193\":\"v-1fd5a678#三种一致性策略\",\"194\":\"v-1fd5a678#availability-可用性\",\"195\":\"v-1fd5a678#partition-tolerance分区容错性\",\"196\":\"v-1fd5a678#ca-without-p\",\"197\":\"v-1fd5a678#cp-without-a\",\"198\":\"v-1fd5a678#cpwithouta示例说明\",\"199\":\"v-1fd5a678#hbase是强一致性系统\",\"200\":\"v-1fd5a678#cpwithouta示例说明-1\",\"201\":\"v-1fd5a678#ap-wihtout-c\",\"202\":\"v-1fd5a678#apwithoutc示例说明\",\"203\":\"v-1fd5a678#apwithoutc示例说明-1\",\"204\":\"v-046c70dc\",\"205\":\"v-046c70dc#_1、雪花算法-snowflake\",\"206\":\"v-046c70dc#_1-优点\",\"207\":\"v-046c70dc#_2-缺点\",\"208\":\"v-046c70dc#_2、uuid\",\"209\":\"v-046c70dc#_1-优点-1\",\"210\":\"v-046c70dc#_2-缺点-1\",\"211\":\"v-046c70dc#_3、利用数据库\",\"212\":\"v-89fe1148\",\"213\":\"v-89fe1148#_1-、redis分布式锁的实现\",\"214\":\"v-89fe1148#_2-、基于etcd实现分布式锁分析\",\"215\":\"v-89fe1148#_1-公共方法的提取\",\"216\":\"v-89fe1148#_2-实现\",\"217\":\"v-89fe1148#_3-加锁-解锁的归一化\",\"218\":\"v-89fe1148#_4-可重入发布式锁实现\",\"219\":\"v-89fe1148#_5-分布式自旋锁实现\",\"220\":\"v-89fe1148#_6-超时问题\",\"221\":\"v-89fe1148#_7-高并发\",\"222\":\"v-ff5aa5a6\",\"223\":\"v-6ac2d27a\",\"224\":\"v-6ac2d27a#_1-安装gcc\",\"225\":\"v-6ac2d27a#_2-卸载旧版本\",\"226\":\"v-6ac2d27a#_3-设置stable镜像仓库\",\"227\":\"v-6ac2d27a#_4-更新yum软件包索引\",\"228\":\"v-6ac2d27a#_5-安装docker-ce\",\"229\":\"v-6ac2d27a#_6-启动docker\",\"230\":\"v-6ac2d27a#_2、开启2375端口-提供外部访问docker\",\"231\":\"v-074faff6\",\"232\":\"v-074faff6#docker概念\",\"233\":\"v-074faff6#docker架构\",\"234\":\"v-074faff6#docker的组成元素\",\"235\":\"v-074faff6#docker安装\",\"236\":\"v-074faff6#测试镜像库\",\"237\":\"v-074faff6#重启docker\",\"238\":\"v-074faff6#查看资源库有tomcat镜像\",\"239\":\"v-074faff6#从国内docker镜像库下载tomcat、centos\",\"240\":\"v-074faff6#查看有哪些镜像\",\"241\":\"v-074faff6#启动基于tomcat-centos镜像启动容器\",\"242\":\"v-074faff6#进去伪终端查看\",\"243\":\"v-074faff6#本地文件复制容器中\",\"244\":\"v-074faff6#构建nginx-v1版本镜像\",\"245\":\"v-074faff6#观察日志\",\"246\":\"v-074faff6#构建步骤\",\"247\":\"v-074faff6#启动容器\",\"248\":\"v-074faff6#查看镜像对外暴露端口号\",\"249\":\"v-074faff6#浏览器查看nginx启动状态\",\"250\":\"v-439970e4\",\"251\":\"v-439970e4#桥接模式-bridge\",\"252\":\"v-439970e4#_1-hostport-containerport-映射所有接口地址\",\"253\":\"v-439970e4#_2-ip-hostport-containerport\",\"254\":\"v-439970e4#_3-ip-containerport-映射指定地址的任意端口\",\"255\":\"v-439970e4#主机模式-host\",\"256\":\"v-439970e4#容器模式-container\",\"257\":\"v-439970e4#无网络模式-none\",\"258\":\"v-439970e4#查看网络模式\",\"259\":\"v-439970e4#查看容器信息-包含配置、环境、网关、挂载、cmd等等信息\",\"260\":\"v-439970e4#暴露端口\",\"261\":\"v-439970e4#创建网络\",\"262\":\"v-439970e4#容器绑定网络\",\"263\":\"v-5a6aceaf\",\"264\":\"v-059090ba\",\"265\":\"v-059090ba#pod中附加专用日志收集的容器\",\"266\":\"v-059090ba#_3-1-安装jdk\",\"267\":\"v-059090ba#_3-2-配置yum源\",\"268\":\"v-059090ba#_3-3-安装elk\",\"269\":\"v-059090ba#_3-4-elk相关配置\",\"270\":\"v-059090ba#配置es\",\"271\":\"v-059090ba#运行\",\"272\":\"v-059090ba#配置kibana\",\"273\":\"v-059090ba#_3-5-启动es和kibana\",\"274\":\"v-059090ba#_4-1-部署filebeat日志收集客户端\",\"275\":\"v-059090ba#_4-1-1-编写filebeat配置文件\",\"276\":\"v-059090ba#_4-1-2-上传filebeat配置文件\",\"277\":\"v-059090ba#_4-1-3-上传filebeat配置文件是否成功\",\"278\":\"v-059090ba#_4-1-4-创建-修改pod-更新项目配置文件\",\"279\":\"v-059090ba#_4-2-配置logstash接收日志\",\"280\":\"v-059090ba#_4-2-1-配置logstash配置文件\",\"281\":\"v-059090ba#_4-2-2-启动-重启logstash\",\"282\":\"v-059090ba#_4-2-3-logstash部署是否成功\",\"283\":\"v-059090ba#_5-1-配置kibana展示日志\",\"284\":\"v-059090ba#_5-2-查看kibana日志\",\"285\":\"v-059090ba#_5-3-绘制kibana图表\",\"286\":\"v-37b39ec5\",\"287\":\"v-37b39ec5#_1-安装要求\",\"288\":\"v-37b39ec5#_2-准备环境\",\"289\":\"v-37b39ec5#_3-所有节点安装docker-kubeadm-kubelet\",\"290\":\"v-37b39ec5#_3-1-安装docker\",\"291\":\"v-37b39ec5#_3-2-添加阿里云yum软件源\",\"292\":\"v-37b39ec5#_3-3-安装kubeadm-kubelet和kubectl\",\"293\":\"v-37b39ec5#_4-部署kubernetes-master\",\"294\":\"v-37b39ec5#_5-加入kubernetes-node\",\"295\":\"v-37b39ec5#_6-部署cni网络插件\",\"296\":\"v-37b39ec5#_7-测试kubernetes集群\",\"297\":\"v-607ce1a9\",\"298\":\"v-737184aa\",\"299\":\"v-737184aa#_1、轮询\",\"300\":\"v-737184aa#_2、weight\",\"301\":\"v-737184aa#_3、ip-hash\",\"302\":\"v-737184aa#_4、least-conn\",\"303\":\"v-737184aa#_5、第三方策略\",\"304\":\"v-737184aa#_1-fair\",\"305\":\"v-737184aa#_2-url-hash\",\"306\":\"v-737184aa#_1-语法\",\"307\":\"v-737184aa#_2-规则\",\"308\":\"v-737184aa#rewrite使用场景\",\"309\":\"v-737184aa#四种方案\",\"310\":\"v-737184aa#返回状态码\",\"311\":\"v-737184aa#返回字符串\",\"312\":\"v-737184aa#地址跳转\",\"313\":\"v-737184aa#返回自定义变量\",\"314\":\"v-737184aa#返回内置变量\",\"315\":\"v-737184aa#返回日志信息实例\",\"316\":\"v-737184aa#root\",\"317\":\"v-737184aa#alias\",\"318\":\"v-ae9e19a4\",\"319\":\"v-ae9e19a4#安装源\",\"320\":\"v-ae9e19a4#mysql安装版本选择\",\"321\":\"v-ae9e19a4#mysql安装\",\"322\":\"v-ae9e19a4#默认路径的密码-未修改配置文件\",\"323\":\"v-ae9e19a4#登录mysql-master服务器-主库修改配置文件-vim-etc-my-cnf-。\",\"324\":\"v-ae9e19a4#登录mysql-master服务器-先进入主库-进行锁表-防止数据写入。\",\"325\":\"v-ae9e19a4#登录mysql-backup服务器-修改从库数据库配置文件。\",\"326\":\"v-ae9e19a4#登录mysql-master服务器-导出数据。\",\"327\":\"v-ae9e19a4#登录mysql-backup服务器-导入数据。\",\"328\":\"v-ae9e19a4#登录mysql-master服务器-登录数据库查看主库同步信息。\",\"329\":\"v-ae9e19a4#登录mysql-backup服务器-登录数据库配置同步信息。\",\"330\":\"v-ae9e19a4#登录mysql-master服务器-解除锁表。\",\"331\":\"v-ae9e19a4#在mysql-master服务器上修改keepalived配置文件。\",\"332\":\"v-ae9e19a4#在mysql-master服务器上创建检测脚本。\",\"333\":\"v-ae9e19a4#为检测脚本添加可执行权限。\",\"334\":\"v-ae9e19a4#在mysql-master服务器上验证虚拟ip是否绑定。\",\"335\":\"v-ae9e19a4#mysql从库配置\",\"336\":\"v-ae9e19a4#在mysql-backup服务器上修改keepalived配置文件。\",\"337\":\"v-ae9e19a4#在mysql-backup服务器上创建检测脚本。\",\"338\":\"v-ae9e19a4#为检测脚本添加可执行权限。-1\",\"339\":\"v-ae9e19a4#在mysql-backup服务器上创建处理脚本。\",\"340\":\"v-ae9e19a4#为处理脚本添加可执行权限。\",\"341\":\"v-ae9e19a4#在mysql-backup服务器上验证虚拟ip是否绑定-从库是否升级为主库。\",\"342\":\"v-ae9e19a4#恢复从库数据到主库\",\"343\":\"v-1fad5f26\",\"344\":\"v-1fad5f26#nginx-master配置\",\"345\":\"v-1fad5f26#在nginx-master服务器上创建检测脚本。\",\"346\":\"v-1fad5f26#为检测脚本添加可执行权限。\",\"347\":\"v-1fad5f26#在nginx-master服务器上验证虚拟ip是否绑定。\",\"348\":\"v-1fad5f26#nginx-backup配置\",\"349\":\"v-1fad5f26#在nginx-backup服务器上创建检测脚本。\",\"350\":\"v-1fad5f26#为检测脚本添加可执行权限。-1\",\"351\":\"v-1fad5f26#在nginx-backup服务器上验证虚拟ip是否绑定。\",\"352\":\"v-28bbcd58\",\"353\":\"v-28bbcd58#修改启动文件\",\"354\":\"v-28bbcd58#重载系统服务\",\"355\":\"v-28bbcd58#添加自启\",\"356\":\"v-28bbcd58#在redis-master服务器上修改keepalived配置文件。\",\"357\":\"v-28bbcd58#在redis-master服务器上创建检测脚本。\",\"358\":\"v-28bbcd58#为检测脚本添加可执行权限。\",\"359\":\"v-28bbcd58#在redis-master服务器上验证虚拟ip是否绑定。\",\"360\":\"v-28bbcd58#验证keepalived服务是否可用。\",\"361\":\"v-28bbcd58#在redis-backup服务器上修改keepalived配置文件。\",\"362\":\"v-28bbcd58#在redis-backup服务器上创建检测脚本。\",\"363\":\"v-28bbcd58#为检测脚本添加可执行权限。-1\",\"364\":\"v-28bbcd58#在redis-backup服务器上创建处理脚本。\",\"365\":\"v-28bbcd58#为处理脚本添加可执行权限。\",\"366\":\"v-28bbcd58#在redis-backup服务器上-验证redis从库是否可以升级为主库。\",\"367\":\"v-28bbcd58#恢复使用主库redis\",\"368\":\"v-a75e0f00\",\"369\":\"v-a75e0f00#_1-查看设备的挂载情况\",\"370\":\"v-a75e0f00#_2-分区\",\"371\":\"v-a75e0f00#_3-格式化\",\"372\":\"v-a75e0f00#_4-挂载\",\"373\":\"v-a75e0f00#_5-设置可以自动挂载-永久挂载-当你重启-linux-之后-仍然可以挂载\",\"374\":\"v-a75e0f00#_6-查看\",\"375\":\"v-a75e0f00#_1-官网下载需要安装版本jdk-下载地址\",\"376\":\"v-a75e0f00#_2-拷贝至linux安装目录\",\"377\":\"v-a75e0f00#_3-配置环境变量\",\"378\":\"v-a75e0f00#_4-验证是否安装成功\",\"379\":\"v-a75e0f00#_1-安装\",\"380\":\"v-a75e0f00#_2-配置\",\"381\":\"v-0176754a\",\"382\":\"v-0176754a#_1、使用-profile\",\"383\":\"v-0176754a#_1-假设存在dev-spring-boot-和-test-spring-boot两个数据库-使用注解-profile定义两个bean\",\"384\":\"v-0176754a#_2-在-java-启动项目中-我们只需要如下配置就能启动profile机制\",\"385\":\"v-0176754a#_3-按照-springboot-的规则\",\"386\":\"v-0176754a#_2、使用-spring-el\",\"387\":\"v-0176754a#_1-读取属性文件的值-如\",\"388\":\"v-0176754a#_2-记录一个bean初始化事件-如\",\"389\":\"v-482aa01e\",\"390\":\"v-333dedde\",\"391\":\"v-333dedde#_1、引入依赖\",\"392\":\"v-333dedde#_2、配置application-yml\",\"393\":\"v-333dedde#_3、springboot启动类\",\"394\":\"v-333dedde#_4、确认注册成功\",\"395\":\"v-333dedde#_1、引入依赖-1\",\"396\":\"v-333dedde#_2、配置文件配置\",\"397\":\"v-333dedde#_3、开启服务发现、负载均衡、熔断器功能\",\"398\":\"v-333dedde#_4、创建服务代理类\",\"399\":\"v-333dedde#_5、创建hystrix的断路器工厂类\",\"400\":\"v-333dedde#_6、通用代理类的实例进行服务调用-与本地调用无异。如下\",\"401\":\"v-162dc78b\",\"402\":\"v-196985c4\",\"403\":\"v-04b60d4e\",\"404\":\"v-5d0db34d\",\"405\":\"v-5d0db34d#_1-启动两个服务端-端口分别为8080-8090\",\"406\":\"v-5d0db34d#_2-启动服务消费端-多次调用对应的服务\",\"407\":\"v-5d0db34d#_3-关掉两个服务端实例\",\"408\":\"v-1b8bf3cf\",\"409\":\"v-8d2d4300\",\"410\":\"v-53b15af6\",\"411\":\"v-11f4e933\",\"412\":\"v-3a0d7ffc\",\"413\":\"v-369d2626\",\"414\":\"v-b676a5e8\",\"415\":\"v-51332418\",\"416\":\"v-9f58c1c2\",\"417\":\"v-6cef594f\",\"418\":\"v-8916f478\",\"419\":\"v-7cc91ae3\",\"420\":\"v-9d6f2886\",\"421\":\"v-9d6f2886#at-模式\",\"422\":\"v-9d6f2886#tcc-模式\",\"423\":\"v-9d6f2886#saga-模式\",\"424\":\"v-9d6f2886#step1、registry-conf\",\"425\":\"v-9d6f2886#step2、pom-xml\",\"426\":\"v-9d6f2886#step3-application-property\",\"427\":\"v-9d6f2886#step4-code\",\"428\":\"v-6c74d0a8\",\"429\":\"v-6c74d0a8#_1-kafka中的主题-topic\",\"430\":\"v-6c74d0a8#_2-kafka中的分区-partition\",\"431\":\"v-6c74d0a8#_3-kafka中的消费组\",\"432\":\"v-6c74d0a8#_4-kafka怎么保证高可用\",\"433\":\"v-6c74d0a8#_5-kafka整体架构\",\"434\":\"v-6c74d0a8#_1-引入依赖\",\"435\":\"v-6c74d0a8#_2-修改application-yml\",\"436\":\"v-6c74d0a8#_3-增加constant-java\",\"437\":\"v-6c74d0a8#_4-增加生产者messageservicekafkaimpl-java和messageservice-java\",\"438\":\"v-6c74d0a8#_5-增加消费者messagelistener-java\",\"439\":\"v-6c74d0a8#_6-增加测试类sendmessagetest-java\",\"440\":\"v-377c8284\",\"441\":\"v-377c8284#_1-、源码分析\",\"442\":\"v-377c8284#_1-u\",\"443\":\"v-377c8284#_2-value\",\"444\":\"v-377c8284#_2-、源码注释\",\"445\":\"v-e024eca0\",\"446\":\"v-30d3aaa4\",\"447\":\"v-fa81f68e\",\"448\":\"v-fa81f68e#介绍\",\"449\":\"v-fa81f68e#类图\",\"450\":\"v-fa81f68e#核心概念\",\"451\":\"v-fa81f68e#dsl图\",\"452\":\"v-fa81f68e#ringbuffer实现\",\"453\":\"v-fa81f68e#这样做有助于平缓延迟的峰值\",\"454\":\"v-fa81f68e#生产者写入数据\",\"455\":\"v-fa81f68e#申请下一个节点\",\"456\":\"v-fa81f68e#提交新的数据\",\"457\":\"v-fa81f68e#producerbarrier上的批处理\",\"458\":\"v-fa81f68e#多个生产者的场景\",\"459\":\"v-74c989ca\",\"460\":\"v-74c989ca#disruptor中发布事件相关类\",\"461\":\"v-74c989ca#ringbuffer、eventfactory\",\"462\":\"v-74c989ca#disruptor中的等待策略\",\"463\":\"v-74c989ca#waitstrategy\",\"464\":\"v-74c989ca#blockingwaitstrategy\",\"465\":\"v-74c989ca#busyspinwaitstrategy\",\"466\":\"v-74c989ca#liteblockingwaitstrategy\",\"467\":\"v-74c989ca#litetimeoutblockingwaitstrategy\",\"468\":\"v-74c989ca#phasedbackoffwaitstrategy\",\"469\":\"v-74c989ca#sleepingwaitstrategy\",\"470\":\"v-74c989ca#timeoutblockingwaitstrategy\",\"471\":\"v-74c989ca#yieldingwaitstrategy\",\"472\":\"v-74c989ca#总结\",\"473\":\"v-51b48361\",\"474\":\"v-51b48361#作用\",\"475\":\"v-51b48361#流程\",\"476\":\"v-7fc656df\",\"477\":\"v-7fc656df#get请求\",\"478\":\"v-7fc656df#get响应\",\"479\":\"v-7fc656df#post请求\",\"480\":\"v-7fc656df#post响应\",\"481\":\"v-7fc656df#_1-表格对比\",\"482\":\"v-7fc656df#_2-交互对比\",\"483\":\"v-7fc656df#_1-get方法的参数写法是固定的吗\",\"484\":\"v-7fc656df#_2-get-方法的长度限制是怎么回事\",\"485\":\"v-7fc656df#_3-post-方法比-get-方法安全\",\"486\":\"v-7fc656df#_4-post-方法会产生两个-tcp-数据包\",\"487\":\"v-216ba257\",\"488\":\"v-216ba257#_1、git介绍\",\"489\":\"v-216ba257#_2、为什么用gitlab\",\"490\":\"v-216ba257#_3、git-工作区、暂存区和版本库\",\"491\":\"v-216ba257#_4、git工作流程\",\"492\":\"v-216ba257#_1、一个分支\",\"493\":\"v-216ba257#_2、多个分支\",\"494\":\"v-216ba257#_5、git配置及使用\",\"495\":\"v-216ba257#_1-配置用户信息\",\"496\":\"v-216ba257#_2-查看配置\",\"497\":\"v-216ba257#_3-创建仓库\",\"498\":\"v-216ba257#_4-基本操作\",\"499\":\"v-216ba257#a-远程仓库相关命令\",\"500\":\"v-216ba257#b-分支-branch-操作相关命令\",\"501\":\"v-216ba257#c-版本-tag-操作相关命令\",\"502\":\"v-216ba257#d-子模块-submodule-相关操作命令\",\"503\":\"v-216ba257#e-补充\",\"504\":\"v-216ba257#f-忽略一些文件、文件夹不提交\",\"505\":\"v-216ba257#_5-解决冲突\",\"506\":\"v-1c6d7040\",\"507\":\"v-1c6d7040#_1、直接定址法\",\"508\":\"v-1c6d7040#_2、除留余数法\",\"509\":\"v-1c6d7040#_3、数字分析法\",\"510\":\"v-1c6d7040#_4、平方区中法\",\"511\":\"v-1c6d7040#_1、开放定址法\",\"512\":\"v-1c6d7040#_2、再哈希法\",\"513\":\"v-1c6d7040#_3、链地址法\",\"514\":\"v-1c6d7040#_4、建立公共溢出区\",\"515\":\"v-1d4d0eae\",\"516\":\"v-1d4d0eae#_1-引入依赖\",\"517\":\"v-1d4d0eae#_2-返回实体\",\"518\":\"v-1d4d0eae#_3-工具类\",\"519\":\"v-69273b25\",\"520\":\"v-69273b25#_1、http\",\"521\":\"v-69273b25#_2、https\",\"522\":\"v-69273b25#_3、https和http的区别\",\"523\":\"v-7e41bf2e\",\"524\":\"v-e815bbd8\",\"525\":\"v-e815bbd8#类范围\",\"526\":\"v-e815bbd8#类默认子网掩\",\"527\":\"v-4c8eb189\",\"528\":\"v-2af9d8a0\",\"529\":\"v-2af9d8a0#_1-没有实现的阻塞接口队列\",\"530\":\"v-2af9d8a0#_2-实现阻塞接口的队列\",\"531\":\"v-2af9d8a0#_1-arrayblockingqueue\",\"532\":\"v-2af9d8a0#_2-linkedblockingqueue\",\"533\":\"v-2af9d8a0#_3-priorityblockingqueue\",\"534\":\"v-2af9d8a0#_4-synchronousqueue\",\"535\":\"v-6039ae94\",\"536\":\"v-6039ae94#_1-java-io包\",\"537\":\"v-6039ae94#file类\",\"538\":\"v-6039ae94#_2-stream流-字节流\",\"539\":\"v-6039ae94#使用fileinputstream和fileoutputstream类\",\"540\":\"v-6039ae94#_3-stream流-字符流\",\"541\":\"v-6039ae94#filewriter类-与-bufferedwriter类使用\",\"542\":\"v-6039ae94#filereader和bufferedreader类使用\",\"543\":\"v-6039ae94#_4-序列化与反序列化\",\"544\":\"v-6039ae94#序列化利用fileoutputstream和objectoutputstream类\",\"545\":\"v-6039ae94#反序列化利用fileinputstream和objectinputstream类\",\"546\":\"v-6039ae94#_1-读取文件为流\",\"547\":\"v-6039ae94#_2-写入字节流到文件\",\"548\":\"v-6039ae94#_3-commons-io中用一行代码实现文件读写操作\",\"549\":\"v-4818b76e\",\"550\":\"v-90c01520\",\"551\":\"v-90c01520#countdownlatch\",\"552\":\"v-90c01520#cyclicbarrier\",\"553\":\"v-90c01520#countdownlatch和cyclicbarrier区别\",\"554\":\"v-90c01520#semaphore\",\"555\":\"v-90c01520#exchanger\",\"556\":\"v-16b85c84\",\"557\":\"v-462bb9bf\",\"558\":\"v-66cd05be\",\"559\":\"v-2409ceb4\",\"560\":\"v-2409ceb4#_1-文件格式验证\",\"561\":\"v-2409ceb4#_2-元数据验证\",\"562\":\"v-2409ceb4#_3-字节码验证\",\"563\":\"v-2409ceb4#_4-符号引用验证\",\"564\":\"v-343cfb76\",\"565\":\"v-328c165e\",\"566\":\"v-328c165e#maven的命令\",\"567\":\"v-328c165e#_1、maven的简介\",\"568\":\"v-328c165e#_1-1-构建-build\",\"569\":\"v-328c165e#_1-2-maven的用途\",\"570\":\"v-328c165e#_2、maven的安装和配置\",\"571\":\"v-328c165e#_2-1-maven怎么升级\",\"572\":\"v-328c165e#_2-2-maven目录介绍\",\"573\":\"v-328c165e#_2-3-设置http代理\",\"574\":\"v-328c165e#_2-4-设置maven-opts环境变量\",\"575\":\"v-328c165e#_2-5-参数设置\",\"576\":\"v-328c165e#_2-6-用户配置\",\"577\":\"v-328c165e#_3、使用入门\",\"578\":\"v-328c165e#_3-1-编写pom-xml\",\"579\":\"v-328c165e#_3-2编写主代码-项目打包过程\",\"580\":\"v-328c165e#_3-2-1使用maven编译项目\",\"581\":\"v-328c165e#_3-2-2-使用maven编译测试类\",\"582\":\"v-328c165e#_3-2-3-使用maven将项目打包和运行\",\"583\":\"v-328c165e#_3-2-4-使用maven运行带main方法的类\",\"584\":\"v-328c165e#_3-2-5-将项目打包放到本地maven仓库\",\"585\":\"v-328c165e#_4、坐标和依赖\",\"586\":\"v-328c165e#_4-1-坐标详解\",\"587\":\"v-328c165e#_4-1-1-groupid定义到项目\",\"588\":\"v-328c165e#_4-1-2-artifactid定义到项目其中的一个模块\",\"589\":\"v-328c165e#_4-1-3-version为版本\",\"590\":\"v-328c165e#_4-1-4-packaging为该项目的打包方式-默认jar-可选\",\"591\":\"v-328c165e#_4-1-5-classifier为-可选-不能直接定义-由附加插件帮助生成\",\"592\":\"v-328c165e#_5、依赖\",\"593\":\"v-328c165e#_5-1-依赖范围\",\"594\":\"v-328c165e#_5-2-传递性依赖\",\"595\":\"v-328c165e#_5-3-排除依赖\",\"596\":\"v-328c165e#_5-3-1引入相同版本的依赖\",\"597\":\"v-328c165e#_5-3-2-依赖优化\",\"598\":\"v-328c165e#_6、仓库\",\"599\":\"v-328c165e#_6-1概念\",\"600\":\"v-328c165e#_6-2-仓库的布局\",\"601\":\"v-328c165e#_6-3-仓库的分类\",\"602\":\"v-328c165e#_6-4-仓库的配置\",\"603\":\"v-328c165e#_6-4-1设置仓库\",\"604\":\"v-328c165e#_6-4-2-上传构件到私有仓库\",\"605\":\"v-328c165e#_6-4-3-maven版本号机制\",\"606\":\"v-ce2e1062\",\"607\":\"v-ce2e1062#简介\",\"608\":\"v-ce2e1062#互联网行业\",\"609\":\"v-ce2e1062#游戏行业\",\"610\":\"v-ce2e1062#大数据领域\",\"611\":\"v-ce2e1062#_1-引入依赖\",\"612\":\"v-ce2e1062#_2-服务端\",\"613\":\"v-ce2e1062#_3-处理函数\",\"614\":\"v-79b413ba\",\"615\":\"v-79b413ba#简单动态字符串\",\"616\":\"v-79b413ba#sds的定义\",\"617\":\"v-79b413ba#sds-与-c-字符串的区别\",\"618\":\"v-79b413ba#常数复杂度获取字符串长度\",\"619\":\"v-79b413ba#杜绝缓冲区溢出\",\"620\":\"v-79b413ba#减少修改字符串时带来的内存重分配次数\",\"621\":\"v-79b413ba#空间预分配\",\"622\":\"v-79b413ba#惰性空间释放\",\"623\":\"v-79b413ba#二进制安全\",\"624\":\"v-79b413ba#兼容部分-c-字符串函数\",\"625\":\"v-79b413ba#总结\",\"626\":\"v-22792c59\",\"627\":\"v-4b15bec8\",\"628\":\"v-0c5c8a22\",\"629\":\"v-0c5c8a22#_1-运行速度\",\"630\":\"v-0c5c8a22#_2-线程安全\",\"631\":\"v-0c5c8a22#_3-继承关系\",\"632\":\"v-299bf5aa\",\"633\":\"v-299bf5aa#_1、用户发送请求\",\"634\":\"v-299bf5aa#_2、服务器接收请求\",\"635\":\"v-299bf5aa#_3、网络连接模型\",\"636\":\"v-299bf5aa#_4、使用协议进行通讯\",\"637\":\"v-299bf5aa#_5、socket通讯模型\",\"638\":\"v-6a29a8e0\",\"639\":\"v-6a29a8e0#_1-面向无连接\",\"640\":\"v-6a29a8e0#_2-单播、多播、广播\",\"641\":\"v-6a29a8e0#_3-不可靠性\",\"642\":\"v-6a29a8e0#_4-头部开销小、传输高效\",\"643\":\"v-6a29a8e0#_1-tcp连接\",\"644\":\"v-6a29a8e0#_2-特点\",\"645\":\"v-6a29a8e0#_4、对比\",\"646\":\"v-5e484e54\",\"647\":\"v-5e484e54#_1、tcp三次握手协议-打开连接\",\"648\":\"v-5e484e54#_2、tcp四次挥手协议-关闭连接\",\"649\":\"v-5e484e54#_2-四次挥手\",\"650\":\"v-465e1e90\",\"651\":\"v-4a5dcb0b\",\"652\":\"v-749e3436\",\"653\":\"v-98e8f354\",\"654\":\"v-98e8f354#_1-resource-manager\",\"655\":\"v-98e8f354#_2-application-master\",\"656\":\"v-98e8f354#_3-node-manager\",\"657\":\"v-98e8f354#_4-resource-request-和-container\",\"658\":\"v-a5c5d70e\",\"659\":\"v-a5c5d70e#_1、关于-互斥-和-同步-的概念\",\"660\":\"v-a5c5d70e#_2、java中synchronized和lock是互斥锁\",\"661\":\"v-a5c5d70e#_3、synchronized的用法\",\"662\":\"v-5d4e5aa2\",\"663\":\"v-5d4e5aa2#产生原因\",\"664\":\"v-5d4e5aa2#解决方法\",\"665\":\"v-5d4e5aa2#_6-1、伪共享的产生\",\"666\":\"v-5d4e5aa2#_6-2、解决方法\",\"667\":\"v-5d4e5aa2#_1-缓存行的填充\",\"668\":\"v-5d4e5aa2#_6-2、解决方法-1\",\"669\":\"v-5d4e5aa2#_2-contended注解方式\",\"670\":\"v-7f0726f4\",\"671\":\"v-7f0726f4#_0、从偏向锁到重量锁\",\"672\":\"v-7f0726f4#_1、先了解一下对象在jvm内存中的布局-如下图\",\"673\":\"v-7f0726f4#_2、锁的创建\",\"674\":\"v-4ae6cd47\",\"675\":\"v-60883b58\",\"676\":\"v-60883b58#_1-对称加密算法\",\"677\":\"v-60883b58#_2-非对称加密算法\",\"678\":\"v-60883b58#_3-混合加密机制\",\"679\":\"v-60883b58#加密过程\",\"680\":\"v-60883b58#解密过程\",\"681\":\"v-60883b58#_4-为什么需要混合加密机制\",\"682\":\"v-60883b58#安全-速度快\",\"683\":\"v-ebea36d0\",\"684\":\"v-25b1d899\",\"685\":\"v-28cfa8bd\",\"686\":\"v-28cfa8bd#_1-可信1-0-软件容错\",\"687\":\"v-28cfa8bd#_2-可信2-0-硬件可信\",\"688\":\"v-28cfa8bd#_3-可信3-0-主动防御体系\",\"689\":\"v-28cfa8bd#a-tpcm\",\"690\":\"v-28cfa8bd#b-可信基础支撑软件框架\",\"691\":\"v-28cfa8bd#c-三层三元对等的可信连接框架\",\"692\":\"v-28cfa8bd#d-加密算法均自主设计\",\"693\":\"v-28cfa8bd#f-主动免疫可信架构信任链传递示意图\",\"694\":\"v-28cfa8bd#_2、可信的应用\",\"695\":\"v-28cfa8bd#_1-基础架构图\",\"696\":\"v-28cfa8bd#_2-可信的安全保障机制\",\"697\":\"v-28cfa8bd#a-运行环境\",\"698\":\"v-28cfa8bd#b-监控技术\",\"699\":\"v-28cfa8bd#c-隔离技术\",\"700\":\"v-28cfa8bd#d-接入技术\",\"701\":\"v-a3c1aec8\",\"702\":\"v-a3c1aec8#_1、可重入锁\",\"703\":\"v-a3c1aec8#_2、synchronized和reentrantlock\",\"704\":\"v-de5f48ca\",\"705\":\"v-26f8708b\",\"706\":\"v-24dd8c92\",\"707\":\"v-24dd8c92#_1-建立maven的空java项目\",\"708\":\"v-24dd8c92#_2-manifest-mf-文件\",\"709\":\"v-24dd8c92#_3-写一个main函数\",\"710\":\"v-24dd8c92#_4-打包\",\"711\":\"v-24dd8c92#_1-主程序运行前\",\"712\":\"v-24dd8c92#_2-主程序运行后加载\",\"713\":\"v-7eb8f6d3\",\"714\":\"v-7eb8f6d3#_1、介绍\",\"715\":\"v-7eb8f6d3#_2、pom-xml\",\"716\":\"v-7eb8f6d3#_3、methodcosttime-java\",\"717\":\"v-7eb8f6d3#_4、myagent-java\",\"718\":\"v-7eb8f6d3#_5、manifest-mf\",\"719\":\"v-7eb8f6d3#_6、测试\",\"720\":\"v-4ed73dd8\",\"721\":\"v-4ed73dd8#_1-myagent-java\",\"722\":\"v-1ca902f2\",\"723\":\"v-758cf1ca\",\"724\":\"v-32837462\",\"725\":\"v-32837462#_1、悲观锁\",\"726\":\"v-32837462#_2、缺点\",\"727\":\"v-32837462#_3、实现方法\",\"728\":\"v-32837462#_4、使用场景举例\",\"729\":\"v-32837462#_0、乐观锁\",\"730\":\"v-32837462#_1、乐观锁\",\"731\":\"v-32837462#_2、优缺点\",\"732\":\"v-32837462#_3、步骤\",\"733\":\"v-6b4aae5b\",\"734\":\"v-1ee555de\",\"735\":\"v-18d1297e\",\"736\":\"v-5da32946\",\"737\":\"v-5da32946#_1-椭圆曲线数字签名算法\",\"738\":\"v-5da32946#生成数字签名\",\"739\":\"v-5da32946#验证数字签名\",\"740\":\"v-5da32946#验证方法解释\",\"741\":\"v-5da32946#原理解释\",\"742\":\"v-5da32946#_2-schnorr数字签名算法\",\"743\":\"v-5da32946#生成数字签名-1\",\"744\":\"v-5da32946#验证数字签名-1\",\"745\":\"v-5da32946#验证方法解释-1\",\"746\":\"v-ead4e8d4\",\"747\":\"v-ead4e8d4#_1、content-type介绍\",\"748\":\"v-ead4e8d4#_1-1、常见的页面资源类型\",\"749\":\"v-ead4e8d4#_1-2、form表单可以定义enctype属性-该属性是发送到服务器之前应该如何对表单数据进行编码\",\"750\":\"v-e6bf3f22\",\"751\":\"v-e6bf3f22#_1、池化技术\",\"752\":\"v-e6bf3f22#_2、线程池好处\",\"753\":\"v-e6bf3f22#_3、线程池工作流程\",\"754\":\"v-e6bf3f22#_4、线程池的创建\",\"755\":\"v-e6bf3f22#_1-corepoolsize\",\"756\":\"v-e6bf3f22#_2-maximumpoolsize\",\"757\":\"v-e6bf3f22#_3-keepalivetime\",\"758\":\"v-e6bf3f22#_4-unit\",\"759\":\"v-e6bf3f22#_5-workqueue\",\"760\":\"v-e6bf3f22#_6-threadfactory\",\"761\":\"v-e6bf3f22#_7-handler\",\"762\":\"v-e6bf3f22#_5、向线程池提交任务\",\"763\":\"v-e6bf3f22#_6、线程池的关闭\",\"764\":\"v-e6bf3f22#_1-正常关闭\",\"765\":\"v-e6bf3f22#_2-中断异常处理\",\"766\":\"v-e6bf3f22#_3-库代码中断异常处理\",\"767\":\"v-e6bf3f22#_4-检查中断状态\",\"768\":\"v-e6bf3f22#_5-线程内有迭代逻辑时的中断处理参考代码模板\",\"769\":\"v-e6bf3f22#_7、线程池如何配置合理\",\"770\":\"v-e6bf3f22#_8、jdk线程示例\",\"771\":\"v-e6bf3f22#_0-fixedthreadpool\",\"772\":\"v-e6bf3f22#_1-singlethreadexecutor\",\"773\":\"v-e6bf3f22#_2-cachedthreadpool\",\"774\":\"v-e6bf3f22#_3-创建定时任务\",\"775\":\"v-e6bf3f22#_9、建议\",\"776\":\"v-e6bf3f22#countdownlatch实现所有线程达到某一个目标后-再继续进行下一步工作\",\"777\":\"v-e6bf3f22#采用lock加锁在finally块中释放锁-保证不论是否抛出异常锁一定会被释放\",\"778\":\"v-e6bf3f22#方式一\",\"779\":\"v-e6bf3f22#方式二-直接调用threadpooltaskexecutor\",\"780\":\"v-25f60d02\",\"781\":\"v-25f60d02#_1-、时延\",\"782\":\"v-25f60d02#_2-、吞吐量\",\"783\":\"v-25f60d02#_3-、应用\",\"784\":\"v-25f60d02#_1-统计结果\",\"785\":\"v-25f60d02#_2-分析项目的目的\",\"786\":\"v-25f60d02#_1-数据源-与-统计指标-kpi-分析\",\"787\":\"v-25f60d02#_2-数据源-与-统计指标-kpi-的关系\",\"788\":\"v-25f60d02#_1-流程设计\",\"789\":\"v-25f60d02#_2-统计指标设计\",\"790\":\"v-2ba24008\",\"791\":\"v-2ba24008#_1、饭店吃饭的例子\",\"792\":\"v-2ba24008#_2、阻塞与非阻塞调用对比\",\"793\":\"v-2ba24008#_3、阻塞io\",\"794\":\"v-2ba24008#_4、非阻塞io\",\"795\":\"v-2ba24008#_5、i-o复用模型\",\"796\":\"v-2ba24008#_6、i-o复用select模型\",\"797\":\"v-2ba24008#_7、select、epoll、poll模型对比\",\"798\":\"v-2ba24008#_1-select-时间复杂度o-n\",\"799\":\"v-2ba24008#过程\",\"800\":\"v-2ba24008#总结\",\"801\":\"v-2ba24008#_2-poll-时间复杂度o-n\",\"802\":\"v-2ba24008#过程-1\",\"803\":\"v-2ba24008#总结-1\",\"804\":\"v-2ba24008#_3-epoll-时间复杂度o-1\",\"805\":\"v-2ba24008#过程-2\",\"806\":\"v-2ba24008#总结-2\",\"807\":\"v-2ba24008#总结-3\",\"808\":\"v-2ba24008#_8、多路复用的好处\",\"809\":\"v-62a9a386\",\"810\":\"v-56aa1363\",\"811\":\"v-56aa1363#_1、自旋锁概念-spinlock\",\"812\":\"v-56aa1363#_2、自旋锁的优点\",\"813\":\"v-56aa1363#_3、自旋锁应用\",\"814\":\"v-56aa1363#_4、简单自旋锁的实现\",\"815\":\"v-56aa1363#_5、可重入的自旋锁和不可重入的自旋锁\",\"816\":\"v-56aa1363#_6、-另有三种常见的形式\",\"817\":\"v-7809d5c4\",\"818\":\"v-7809d5c4#_1、读写锁介绍\",\"819\":\"v-7809d5c4#_2、总结\",\"820\":\"v-7809d5c4#_3、写锁的获取\",\"821\":\"v-7809d5c4#_4、写锁的释放\",\"822\":\"v-7809d5c4#_5、读锁的获取\",\"823\":\"v-7809d5c4#_6、读锁的释放\",\"824\":\"v-7809d5c4#_7、锁降级\",\"825\":\"v-5e856e98\",\"826\":\"v-2f5cfd06\",\"827\":\"v-2f5cfd06#_1、轻量级锁\",\"828\":\"v-2f5cfd06#_2、锁消除\",\"829\":\"v-2f5cfd06#_3、锁膨胀\",\"830\":\"v-53b4a8ee\",\"831\":\"v-53b4a8ee#_1-规划安装用户和用户组\",\"832\":\"v-53b4a8ee#_2-规划安装目录\",\"833\":\"v-53b4a8ee#_3-挂载-iso-镜像文件\",\"834\":\"v-53b4a8ee#_4-安装方式\",\"835\":\"v-53b4a8ee#_5-卸载-dm-数据库\",\"836\":\"v-53b4a8ee#方式1-dm-数据库配置助手图形化界面方式创建数据库\",\"837\":\"v-53b4a8ee#方式2-dminit-命令行创建数据库实例\",\"838\":\"v-53b4a8ee#两种方式注册数据库服务\",\"839\":\"v-53b4a8ee#_1-连接数据库\",\"840\":\"v-53b4a8ee#方式一-dm-管理工具图形化界面连接数据库\",\"841\":\"v-53b4a8ee#方式二-disql-命令行方式连接数据库\",\"842\":\"v-53b4a8ee#网络配置助手配置连接串\",\"843\":\"v-53b4a8ee#dm-数据库\",\"844\":\"v-53b4a8ee#root-启动\",\"845\":\"v-53b4a8ee#dmdba-用户启动\",\"846\":\"v-53b4a8ee#dm-管理工具-manager\",\"847\":\"v-53b4a8ee#dm-控制台工具-console\",\"848\":\"v-53b4a8ee#dm-数据迁移工具-dts\",\"849\":\"v-53b4a8ee#dm-性能监视工具-monitor\",\"850\":\"v-53b4a8ee#dm8-数据库是由数据库和实例构成\",\"851\":\"v-53b4a8ee#数据库\",\"852\":\"v-53b4a8ee#实例\",\"853\":\"v-53b4a8ee#dm-存储结构\",\"854\":\"v-53b4a8ee#dm-数据库参数的类型\",\"855\":\"v-53b4a8ee#运行时的内存池\",\"856\":\"v-53b4a8ee#dm-线程\",\"857\":\"v-53b4a8ee#监听线程\",\"858\":\"v-53b4a8ee#工作线程\",\"859\":\"v-53b4a8ee#io-线程\",\"860\":\"v-53b4a8ee#日志刷新线程\",\"861\":\"v-53b4a8ee#日志归档线程\",\"862\":\"v-53b4a8ee#日志重做线程\",\"863\":\"v-53b4a8ee#调度线程\",\"864\":\"v-53b4a8ee#管理表空间\",\"865\":\"v-53b4a8ee#修改tmp表空间\",\"866\":\"v-53b4a8ee#创建表空间\",\"867\":\"v-53b4a8ee#表空间重命名\",\"868\":\"v-53b4a8ee#归档管理\",\"869\":\"v-53b4a8ee#sql-开启归档\",\"870\":\"v-53b4a8ee#修改-dm-ini-和-dmarch-ini-配置文件开启归档\",\"871\":\"v-53b4a8ee#归档日志文件的切换和删除\",\"872\":\"v-53b4a8ee#归档文件的删除\",\"873\":\"v-53b4a8ee#用户类型\",\"874\":\"v-53b4a8ee#系统口令策略\",\"875\":\"v-53b4a8ee#修改系统口令策略\",\"876\":\"v-53b4a8ee#sql-管理用户\",\"877\":\"v-53b4a8ee#用户输入错误多次-默认-3-次-将会被锁定。\",\"878\":\"v-53b4a8ee#创建用户\",\"879\":\"v-53b4a8ee#用户锁定和解锁\",\"880\":\"v-53b4a8ee#修改用户的默认表空间\",\"881\":\"v-53b4a8ee#修改用户密码\",\"882\":\"v-53b4a8ee#删除用户\",\"883\":\"v-53b4a8ee#用户资源限制\",\"884\":\"v-53b4a8ee#赋予数据库权限-系统权限\",\"885\":\"v-53b4a8ee#赋予对象权限\",\"886\":\"v-53b4a8ee#查看当前用户拥有的权限\",\"887\":\"v-53b4a8ee#权限的回收\",\"888\":\"v-53b4a8ee#角色类型\",\"889\":\"v-53b4a8ee#备份还原基本概念\",\"890\":\"v-53b4a8ee#备份-还原与恢复的关系\",\"891\":\"v-53b4a8ee#查看-ap-服务是否启动\",\"892\":\"v-53b4a8ee#脱机备份与还原数据库\",\"893\":\"v-53b4a8ee#表空间的还原和恢复\",\"894\":\"v-53b4a8ee#联机备份与还原数据库\",\"895\":\"v-b8e59ce6\",\"896\":\"v-b8e59ce6#位异或运算\",\"897\":\"v-aef92024\",\"898\":\"v-12af33c1\",\"899\":\"v-12af33c1#step1、重构第一步-可靠的测试\",\"900\":\"v-12af33c1#step2、重构第二步-分解重组statement-找出代码的逻辑泥团并运用extract-method\",\"901\":\"v-12af33c1#step3、重构第三步-更改amountfor中的变量名\",\"902\":\"v-12af33c1#step4、重构第四步-搬移金额计算代码\",\"903\":\"v-12af33c1#step5、重构第五步-运用extract-method-参考抽取计算金额-来抽取积分\",\"904\":\"v-12af33c1#step6、重构第六步-去掉临时变量\",\"905\":\"v-12af33c1#step7、重构第七步-运用多态取代与价格相关的条件逻辑\",\"906\":\"v-12af33c1#step8、重构第八步-运用多态取代与价格相关的条件逻辑\",\"907\":\"v-12af33c1#_1-、什么时候重构\",\"908\":\"v-12af33c1#_2-、什么时候不重构\",\"909\":\"v-12af33c1#_1-、改善重复代码\",\"910\":\"v-12af33c1#_2-、改善过长的函数、过大的类、-过长的参数列\",\"911\":\"v-12af33c1#_3-、发散式变化\",\"912\":\"v-12af33c1#_4-、霾弹式修改\",\"913\":\"v-12af33c1#_5-、-依恋情节\",\"914\":\"v-12af33c1#_6-、数据泥团\",\"915\":\"v-12af33c1#_7-、基本类型偏执\",\"916\":\"v-12af33c1#_8-、switch惊悚现身\",\"917\":\"v-12af33c1#_9-、平行继承体系\",\"918\":\"v-12af33c1#_10-、冗赘类\",\"919\":\"v-12af33c1#_11-、夸夸其谈未来性\",\"920\":\"v-12af33c1#_12-、令人迷惑的暂时字段\",\"921\":\"v-12af33c1#_13-、-过度耦合的消息链\",\"922\":\"v-12af33c1#_14-、中间人\",\"923\":\"v-12af33c1#_15-、狎昵关系\",\"924\":\"v-f2a9ac90\",\"925\":\"v-93c4c91e\",\"926\":\"v-93c4c91e#_1、阻塞锁优势\",\"927\":\"v-93c4c91e#_2、阻塞锁的优势\",\"928\":\"v-93c4c91e#_3、阻塞锁应用\",\"929\":\"v-93c4c91e#_4、阻塞锁的简单实现\",\"930\":\"v-93c4c91e#_5、demo\",\"931\":\"v-5f688ebf\",\"932\":\"v-e1e3da16\",\"933\":\"v-67169148\",\"934\":\"v-f49eed3e\",\"935\":\"v-04ff44bd\",\"936\":\"v-644641a6\",\"937\":\"v-09041878\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,6],\"2\":[1,2],\"3\":[1,216],\"4\":[1,56],\"5\":[4],\"6\":[2,12],\"7\":[2,27],\"8\":[7,13],\"9\":[7,16],\"10\":[2,15],\"11\":[3,13],\"12\":[7,12],\"13\":[4,78],\"14\":[1,133],\"15\":[1,40],\"16\":[3,18],\"17\":[3,24],\"18\":[3,5],\"19\":[3,75],\"20\":[1,86],\"21\":[1,219],\"22\":[3,241],\"23\":[3,242],\"24\":[3,88],\"25\":[1,134],\"26\":[1,52],\"27\":[2,152],\"28\":[1,89],\"29\":[1,41],\"30\":[1],\"31\":[2,7],\"32\":[2,119],\"33\":[1,29],\"34\":[3,25],\"35\":[3,12],\"36\":[3,18],\"37\":[4,17],\"38\":[3],\"39\":[3,11],\"40\":[3,7],\"41\":[3,16],\"42\":[3,9],\"43\":[3,6],\"44\":[3],\"45\":[3,10],\"46\":[3,7],\"47\":[3,12],\"48\":[3,5],\"49\":[3,2],\"50\":[1,38],\"51\":[1],\"52\":[2,27],\"53\":[2,14],\"54\":[2,12],\"55\":[1,27],\"56\":[2,34],\"57\":[2,6],\"58\":[2,117],\"59\":[3,67],\"60\":[2,48],\"61\":[2,66],\"62\":[2,83],\"63\":[1,381],\"64\":[4,109],\"65\":[1,30],\"66\":[2,56],\"67\":[1,18],\"68\":[4,4],\"69\":[4,4],\"70\":[4,6],\"71\":[3,6],\"72\":[5,45],\"73\":[1,128],\"74\":[1,281],\"75\":[1,16],\"76\":[2,15],\"77\":[2,22],\"78\":[2,34],\"79\":[3,37],\"80\":[2,30],\"81\":[1],\"82\":[2,197],\"83\":[2],\"84\":[3,5],\"85\":[3,6],\"86\":[3,9],\"87\":[5,14],\"88\":[5,5],\"89\":[2,4],\"90\":[2,16],\"91\":[3,29],\"92\":[4,18],\"93\":[3,39],\"94\":[2,6],\"95\":[2,3],\"96\":[1,5],\"97\":[2,21],\"98\":[3,5],\"99\":[2,16],\"100\":[3,98],\"101\":[3,32],\"102\":[2,43],\"103\":[3,19],\"104\":[4,46],\"105\":[3,23],\"106\":[3,29],\"107\":[3,20],\"108\":[3,5],\"109\":[4,23],\"110\":[3,18],\"111\":[3,6],\"112\":[3,12],\"113\":[4,48],\"114\":[3,1],\"115\":[5,13],\"116\":[4,13],\"117\":[2,2],\"118\":[3,57],\"119\":[1,90],\"120\":[2,8],\"121\":[1,25],\"122\":[3],\"123\":[1,9],\"124\":[1,44],\"125\":[1,47],\"126\":[1,83],\"127\":[1,82],\"128\":[1,18],\"129\":[3,43],\"130\":[3,39],\"131\":[3,34],\"132\":[3,46],\"133\":[3,57],\"134\":[3,41],\"135\":[3,95],\"136\":[1,31],\"137\":[1,42],\"138\":[2,36],\"139\":[3,112],\"140\":[3,58],\"141\":[1,61],\"142\":[2],\"143\":[2,11],\"144\":[2,16],\"145\":[2,6],\"146\":[1,43],\"147\":[2,14],\"148\":[3,14],\"149\":[6,19],\"150\":[3,23],\"151\":[3,15],\"152\":[8,24],\"153\":[3,18],\"154\":[4,18],\"155\":[4,132],\"156\":[3,8],\"157\":[2,54],\"158\":[2,57],\"159\":[3,8],\"160\":[3,25],\"161\":[1,92],\"162\":[1,19],\"163\":[1,9],\"164\":[1,12],\"165\":[1,18],\"166\":[1,44],\"167\":[1,54],\"168\":[1,17],\"169\":[1,10],\"170\":[1],\"171\":[2,13],\"172\":[1,23],\"173\":[3],\"174\":[1,2],\"175\":[1,27],\"176\":[1,40],\"177\":[1,7],\"178\":[1,19],\"179\":[1,14],\"180\":[2,20],\"181\":[1,5],\"182\":[1,4],\"183\":[1,3],\"184\":[1,5],\"185\":[1,6],\"186\":[1,31],\"187\":[1,14],\"188\":[1,29],\"189\":[3,256],\"190\":[1,15],\"191\":[1,11],\"192\":[2,31],\"193\":[1,11],\"194\":[2,41],\"195\":[2,34],\"196\":[3,43],\"197\":[3,23],\"198\":[1,16],\"199\":[1,37],\"200\":[1],\"201\":[3,18],\"202\":[1,52],\"203\":[1,24],\"204\":[1,19],\"205\":[3,49],\"206\":[3,17],\"207\":[3,18],\"208\":[2,67],\"209\":[3,4],\"210\":[3,13],\"211\":[2,52],\"212\":[1,13],\"213\":[3,147],\"214\":[3,477],\"215\":[2,19],\"216\":[2,31],\"217\":[3,133],\"218\":[2,119],\"219\":[2,76],\"220\":[2,25],\"221\":[2,111],\"222\":[1,217],\"223\":[1],\"224\":[3,6],\"225\":[3,11],\"226\":[3,14],\"227\":[3,7],\"228\":[4,9],\"229\":[3,69],\"230\":[3,142],\"231\":[1],\"232\":[1,16],\"233\":[1,2],\"234\":[1,68],\"235\":[1,7],\"236\":[1,24],\"237\":[1,4],\"238\":[1,5],\"239\":[2,6],\"240\":[1,4],\"241\":[2,30],\"242\":[1,10],\"243\":[1,125],\"244\":[2,7],\"245\":[1,3],\"246\":[1,8],\"247\":[1,16],\"248\":[1,5],\"249\":[1,4],\"250\":[1,81],\"251\":[3,34],\"252\":[5,14],\"253\":[5,16],\"254\":[5,27],\"255\":[3,41],\"256\":[3,24],\"257\":[3,18],\"258\":[1,8],\"259\":[7,4],\"260\":[1,5],\"261\":[1,19],\"262\":[1,67],\"263\":[1,308],\"264\":[1],\"265\":[1,29],\"266\":[3,10],\"267\":[3,31],\"268\":[2,12],\"269\":[3,3],\"270\":[2,50],\"271\":[2,7],\"272\":[2,29],\"273\":[3,30],\"274\":[3],\"275\":[3,92],\"276\":[4,45],\"277\":[4,59],\"278\":[5,47],\"279\":[3],\"280\":[4,42],\"281\":[4,8],\"282\":[4,38],\"283\":[3,12],\"284\":[3,5],\"285\":[3,23],\"286\":[1],\"287\":[2,19],\"288\":[2,74],\"289\":[4,5],\"290\":[3,41],\"291\":[3,29],\"292\":[3,15],\"293\":[3,77],\"294\":[3,38],\"295\":[2,36],\"296\":[2,18],\"297\":[1,248],\"298\":[1,38],\"299\":[2,13],\"300\":[2,37],\"301\":[3,40],\"302\":[3,32],\"303\":[2],\"304\":[3,20],\"305\":[4,71],\"306\":[3,39],\"307\":[3,72],\"308\":[2,17],\"309\":[1,19],\"310\":[1,8],\"311\":[1,6],\"312\":[1,8],\"313\":[1,6],\"314\":[1,3],\"315\":[1,39],\"316\":[1,16],\"317\":[1,311],\"318\":[3,25],\"319\":[1,37],\"320\":[1,29],\"321\":[1,134],\"322\":[3,46],\"323\":[8,20],\"324\":[6,11],\"325\":[4,15],\"326\":[4,20],\"327\":[4,14],\"328\":[4,27],\"329\":[4,30],\"330\":[4,3],\"331\":[3,62],\"332\":[3,45],\"333\":[2,10],\"334\":[3,13],\"335\":[1],\"336\":[3,64],\"337\":[3,34],\"338\":[2,10],\"339\":[3,23],\"340\":[2,10],\"341\":[4,35],\"342\":[1,109],\"343\":[3,75],\"344\":[2,63],\"345\":[3,37],\"346\":[2,10],\"347\":[3,13],\"348\":[2,64],\"349\":[3,37],\"350\":[2,10],\"351\":[3,16],\"352\":[3,81],\"353\":[1,41],\"354\":[1,4],\"355\":[1,38],\"356\":[3,58],\"357\":[3,45],\"358\":[2,9],\"359\":[3,13],\"360\":[2,7],\"361\":[3,59],\"362\":[3,36],\"363\":[2,9],\"364\":[3,22],\"365\":[2,9],\"366\":[4,33],\"367\":[1,49],\"368\":[3,3],\"369\":[3,3],\"370\":[3,8],\"371\":[3,10],\"372\":[3,14],\"373\":[8,15],\"374\":[3,3],\"375\":[4,10],\"376\":[3,16],\"377\":[3,30],\"378\":[3,3],\"379\":[3,15],\"380\":[3,22],\"381\":[2,55],\"382\":[3],\"383\":[9,2],\"384\":[6,15],\"385\":[4,11],\"386\":[4],\"387\":[4,8],\"388\":[4,33],\"389\":[1,210],\"390\":[2],\"391\":[2,15],\"392\":[3,20],\"393\":[2,18],\"394\":[2,17],\"395\":[2,24],\"396\":[2,52],\"397\":[4,31],\"398\":[2,36],\"399\":[2,27],\"400\":[5,22],\"401\":[2,77],\"402\":[2,132],\"403\":[2,60],\"404\":[1,101],\"405\":[4,2],\"406\":[3,7],\"407\":[2,4],\"408\":[1,127],\"409\":[1,91],\"410\":[1,167],\"411\":[1,79],\"412\":[1,65],\"413\":[1,217],\"414\":[1,107],\"415\":[1,80],\"416\":[1,117],\"417\":[1,88],\"418\":[1,63],\"419\":[1,104],\"420\":[4,21],\"421\":[2,21],\"422\":[2,17],\"423\":[2,8],\"424\":[3,4],\"425\":[3,19],\"426\":[3,14],\"427\":[2,99],\"428\":[1,41],\"429\":[4,5],\"430\":[4,14],\"431\":[3,32],\"432\":[3,25],\"433\":[3,129],\"434\":[3,14],\"435\":[4,104],\"436\":[4,19],\"437\":[5,67],\"438\":[4,60],\"439\":[4,39],\"440\":[1,110],\"441\":[3,31],\"442\":[3,31],\"443\":[3,53],\"444\":[3,123],\"445\":[1,225],\"446\":[1,181],\"447\":[1,2],\"448\":[2,21],\"449\":[2,1],\"450\":[2,52],\"451\":[2,23],\"452\":[2,72],\"453\":[2,22],\"454\":[2,65],\"455\":[2,19],\"456\":[2,43],\"457\":[1,21],\"458\":[1,96],\"459\":[1],\"460\":[1],\"461\":[2,10],\"462\":[1],\"463\":[1,1],\"464\":[1,3],\"465\":[1,7],\"466\":[1,9],\"467\":[1,3],\"468\":[1,8],\"469\":[1,9],\"470\":[1,3],\"471\":[1,15],\"472\":[1,203],\"473\":[1,9],\"474\":[1,6],\"475\":[1,313],\"476\":[1,10],\"477\":[1,63],\"478\":[1,41],\"479\":[1,79],\"480\":[1,80],\"481\":[3,16],\"482\":[3,16],\"483\":[3,21],\"484\":[4,21],\"485\":[6,32],\"486\":[6,27],\"487\":[1],\"488\":[3,29],\"489\":[3,8],\"490\":[4,17],\"491\":[2],\"492\":[2,9],\"493\":[2,19],\"494\":[3],\"495\":[2,45],\"496\":[2,5],\"497\":[2,66],\"498\":[2],\"499\":[2,42],\"500\":[4,68],\"501\":[4,35],\"502\":[4,38],\"503\":[2,41],\"504\":[3,10],\"505\":[2,11],\"506\":[1,39],\"507\":[2,11],\"508\":[2,13],\"509\":[2,3],\"510\":[2,1],\"511\":[2,18],\"512\":[2,12],\"513\":[2,17],\"514\":[2,9],\"515\":[1,50],\"516\":[3,20],\"517\":[3,41],\"518\":[3,171],\"519\":[1],\"520\":[2,33],\"521\":[2,21],\"522\":[2,145],\"523\":[1,70],\"524\":[1,2],\"525\":[1,11],\"526\":[1,267],\"527\":[1,293],\"528\":[1,14],\"529\":[3,34],\"530\":[3,85],\"531\":[2,43],\"532\":[2,37],\"533\":[2,85],\"534\":[2,7],\"535\":[1],\"536\":[4],\"537\":[1,83],\"538\":[4,25],\"539\":[1,101],\"540\":[4],\"541\":[3,71],\"542\":[1,49],\"543\":[3,5],\"544\":[1,53],\"545\":[1,51],\"546\":[3,13],\"547\":[3,11],\"548\":[4,40],\"549\":[1,194],\"550\":[1,6],\"551\":[2,23],\"552\":[1,65],\"553\":[1,13],\"554\":[1,74],\"555\":[1,19],\"556\":[1,26],\"557\":[1,43],\"558\":[1,177],\"559\":[1,15],\"560\":[3,7],\"561\":[3,4],\"562\":[3,8],\"563\":[3,103],\"564\":[1,171],\"565\":[1],\"566\":[2,101],\"567\":[2],\"568\":[4,9],\"569\":[3,15],\"570\":[2],\"571\":[4,3],\"572\":[3,32],\"573\":[3,4],\"574\":[4,11],\"575\":[4,14],\"576\":[4,48],\"577\":[2],\"578\":[4,22],\"579\":[3,7],\"580\":[3,40],\"581\":[3,14],\"582\":[3,9],\"583\":[4,8],\"584\":[4,6],\"585\":[2],\"586\":[3,8],\"587\":[3,11],\"588\":[4,4],\"589\":[4],\"590\":[6],\"591\":[8],\"592\":[2],\"593\":[3,25],\"594\":[3,11],\"595\":[3],\"596\":[3,11],\"597\":[4,8],\"598\":[2],\"599\":[2,3],\"600\":[3,2],\"601\":[3,5],\"602\":[3],\"603\":[3,12],\"604\":[4,17],\"605\":[4,40],\"606\":[1],\"607\":[1,19],\"608\":[1,19],\"609\":[1,12],\"610\":[1,15],\"611\":[3,26],\"612\":[3,121],\"613\":[3,110],\"614\":[3],\"615\":[1],\"616\":[1,87],\"617\":[4,32],\"618\":[1,65],\"619\":[1,120],\"620\":[1,81],\"621\":[1,97],\"622\":[1,75],\"623\":[1,65],\"624\":[3,60],\"625\":[1,11],\"626\":[1,187],\"627\":[1,76],\"628\":[3],\"629\":[3,19],\"630\":[3,2],\"631\":[3,13],\"632\":[2],\"633\":[2],\"634\":[2],\"635\":[2,3],\"636\":[2,15],\"637\":[2,7],\"638\":[1,33],\"639\":[3,21],\"640\":[5,11],\"641\":[3,5],\"642\":[4,33],\"643\":[3,2],\"644\":[3,43],\"645\":[2,13],\"646\":[2],\"647\":[4,17],\"648\":[4,55],\"649\":[3,54],\"650\":[1,288],\"651\":[1,194],\"652\":[1,174],\"653\":[1,27],\"654\":[4,19],\"655\":[4,11],\"656\":[4,11],\"657\":[6,36],\"658\":[1],\"659\":[6,27],\"660\":[2,9],\"661\":[2,28],\"662\":[1,72],\"663\":[2,37],\"664\":[2,30],\"665\":[3,29],\"666\":[3],\"667\":[3,12],\"668\":[3],\"669\":[3,21],\"670\":[1],\"671\":[2,18],\"672\":[3,24],\"673\":[2,99],\"674\":[2,34],\"675\":[1,18],\"676\":[3,4],\"677\":[3,4],\"678\":[3,4],\"679\":[1,7],\"680\":[1,5],\"681\":[3],\"682\":[3,21],\"683\":[1,83],\"684\":[1,146],\"685\":[1,10],\"686\":[5,11],\"687\":[5,24],\"688\":[5,10],\"689\":[3,17],\"690\":[3,5],\"691\":[3,4],\"692\":[3,5],\"693\":[3,2],\"694\":[2],\"695\":[3,2],\"696\":[3],\"697\":[3,3],\"698\":[3,4],\"699\":[3,4],\"700\":[3,3],\"701\":[1],\"702\":[3,19],\"703\":[2,91],\"704\":[1,72],\"705\":[1,143],\"706\":[3,42],\"707\":[3,96],\"708\":[5,27],\"709\":[3,53],\"710\":[3,20],\"711\":[3,31],\"712\":[3,91],\"713\":[3],\"714\":[2,13],\"715\":[3,163],\"716\":[3,51],\"717\":[3,94],\"718\":[3,16],\"719\":[2,17],\"720\":[3,13],\"721\":[4,54],\"722\":[1,164],\"723\":[1,160],\"724\":[2],\"725\":[2,22],\"726\":[2,3],\"727\":[2,46],\"728\":[2,29],\"729\":[3,3],\"730\":[3,23],\"731\":[3,19],\"732\":[3,23],\"733\":[1,76],\"734\":[1,103],\"735\":[1,85],\"736\":[1,7],\"737\":[3],\"738\":[1,22],\"739\":[1,12],\"740\":[1,17],\"741\":[2,8],\"742\":[3],\"743\":[1,25],\"744\":[1,22],\"745\":[1,17],\"746\":[2],\"747\":[3,10],\"748\":[2,21],\"749\":[4,73],\"750\":[1,3],\"751\":[2,41],\"752\":[2,12],\"753\":[2,15],\"754\":[2,28],\"755\":[3,6],\"756\":[3,8],\"757\":[3,8],\"758\":[3,13],\"759\":[3,17],\"760\":[3,3],\"761\":[3,22],\"762\":[2,20],\"763\":[2],\"764\":[3,29],\"765\":[3,15],\"766\":[3,12],\"767\":[3,10],\"768\":[3,17],\"769\":[2,24],\"770\":[2],\"771\":[3,49],\"772\":[3,21],\"773\":[3,58],\"774\":[3,36],\"775\":[2],\"776\":[2,56],\"777\":[3,27],\"778\":[2,4],\"779\":[2,71],\"780\":[1,6],\"781\":[3,26],\"782\":[3,13],\"783\":[3,25],\"784\":[3,7],\"785\":[3,20],\"786\":[7,12],\"787\":[7,2],\"788\":[3,21],\"789\":[3,87],\"790\":[1],\"791\":[2,16],\"792\":[2],\"793\":[2],\"794\":[2],\"795\":[3,18],\"796\":[3],\"797\":[4],\"798\":[5],\"799\":[1,43],\"800\":[1,16],\"801\":[5],\"802\":[1,17],\"803\":[1,8],\"804\":[5],\"805\":[1,14],\"806\":[1,26],\"807\":[2,6],\"808\":[2,17],\"809\":[1,160],\"810\":[1],\"811\":[4,10],\"812\":[3,15],\"813\":[3,11],\"814\":[3,62],\"815\":[3,13],\"816\":[3,12],\"817\":[1],\"818\":[3,45],\"819\":[3,14],\"820\":[3,101],\"821\":[3,36],\"822\":[2,64],\"823\":[2,69],\"824\":[2,47],\"825\":[1,100],\"826\":[1],\"827\":[2,15],\"828\":[2,20],\"829\":[2,5],\"830\":[1,1],\"831\":[3,25],\"832\":[3,24],\"833\":[5,51],\"834\":[3,147],\"835\":[4,35],\"836\":[3,64],\"837\":[3,155],\"838\":[2,88],\"839\":[2,24],\"840\":[3,10],\"841\":[3,55],\"842\":[1,29],\"843\":[2,156],\"844\":[3,20],\"845\":[2,159],\"846\":[4,21],\"847\":[4,12],\"848\":[4,9],\"849\":[4,9],\"850\":[2],\"851\":[2,3],\"852\":[2,4],\"853\":[2,34],\"854\":[3,34],\"855\":[2,34],\"856\":[2,5],\"857\":[1,19],\"858\":[1,6],\"859\":[2,9],\"860\":[1,6],\"861\":[1,4],\"862\":[1,4],\"863\":[1,84],\"864\":[1,74],\"865\":[1,41],\"866\":[1,29],\"867\":[1,10],\"868\":[1,41],\"869\":[2,55],\"870\":[6,40],\"871\":[1,13],\"872\":[1,35],\"873\":[1,19],\"874\":[1,61],\"875\":[2,9],\"876\":[2,7],\"877\":[6,14],\"878\":[1,10],\"879\":[2,7],\"880\":[2,7],\"881\":[2,8],\"882\":[2,8],\"883\":[1,96],\"884\":[3,14],\"885\":[2,16],\"886\":[2,5],\"887\":[2,81],\"888\":[1,73],\"889\":[1,30],\"890\":[2,24],\"891\":[4,32],\"892\":[1,61],\"893\":[1,210],\"894\":[1,83],\"895\":[1],\"896\":[2,19],\"897\":[1,80],\"898\":[1,204],\"899\":[3,8],\"900\":[5,25],\"901\":[3,10],\"902\":[3,20],\"903\":[6,6],\"904\":[3,18],\"905\":[3,15],\"906\":[3,39],\"907\":[3,22],\"908\":[3,6],\"909\":[3,20],\"910\":[5,71],\"911\":[3,30],\"912\":[3,14],\"913\":[3,21],\"914\":[3,24],\"915\":[3,25],\"916\":[3,18],\"917\":[3,11],\"918\":[3,25],\"919\":[3,24],\"920\":[3,16],\"921\":[3,32],\"922\":[3,25],\"923\":[3,25],\"924\":[1,81],\"925\":[1],\"926\":[2,35],\"927\":[3,9],\"928\":[3,7],\"929\":[3,75],\"930\":[3,46],\"931\":[1],\"932\":[1],\"933\":[1],\"934\":[1],\"935\":[2],\"936\":[1],\"937\":[1]},\"averageFieldLength\":[2.3869936034115105,41.055435644115036],\"storedFields\":{\"0\":{\"h\":\"介绍页\"},\"1\":{\"h\":\"关于郑天祺\",\"t\":[\"郑天祺 此站是郑天祺的个人站，记录分享学习平时学习，喜欢编程的小伙伴可以加我共同探讨，一起进步。\"]},\"2\":{\"h\":\"微信\",\"t\":[\"image-wechat\"]},\"3\":{\"h\":\"ElasticSearch客户端\",\"t\":[\"以下为springboot整合elasticsearch\",\"es版本为7.2.1\",\" <!-- ES --> <dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>elasticsearch-rest-high-level-client</artifactId> <version>7.2.1</version> </dependency> <dependency> <groupId>org.elasticsearch</groupId> <artifactId>elasticsearch</artifactId> <version>7.2.1</version> </dependency> <dependency> <groupId>org.elasticsearch.client</groupId> <artifactId>elasticsearch-rest-client-sniffer</artifactId> <version>7.2.1</version> </dependency> \",\"EsRestHighLevelClient.java\",\"package com.example.utils; import com.example.constant.Constants; import org.apache.http.HttpHost; import org.elasticsearch.action.search.SearchRequest; import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestClientBuilder; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.client.sniff.SniffOnFailureListener; import org.elasticsearch.index.query.BoolQueryBuilder; import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.search.builder.SearchSourceBuilder; import java.io.IOException; import java.util.Optional; import java.util.logging.Logger; /** * es连接客户端 * * @author zhengtianqi */ public class EsRestHighLevelClient { public static Logger log = Logger.getLogger(EsRestHighLevelClient.class.toString()); private EsRestHighLevelClient() { } /** * 返回单例的Client(ES) */ public static RestHighLevelClient getEsClient() { return InternalClass.client; } private static class InternalClass { private static RestHighLevelClient client; static { try { String ip = Constants.ES_HTTP_PORT; String[] ips = ip.split(Constants.COMMA_SPLIT); HttpHost[] httpHosts = new HttpHost[ips.length]; for (int i = 0; i < ips.length; i++) { httpHosts[i] = new HttpHost(ips[i], 9200, \\\"http\\\"); } SniffOnFailureListener sniffOnFailureListener = new SniffOnFailureListener(); RestClientBuilder restClientBuilder = RestClient.builder(httpHosts).setFailureListener(sniffOnFailureListener).setHttpClientConfigCallback(httpClientBuilder -> { //最大连接数 httpClientBuilder.setMaxConnTotal(100); httpClientBuilder.setMaxConnPerRoute(50); return httpClientBuilder; }).setRequestConfigCallback(requestConfigBuilder -> { // 超时设置 requestConfigBuilder.setConnectTimeout(2000).setConnectionRequestTimeout(2000); return requestConfigBuilder; }); client = Optional.of(restClientBuilder).map(RestHighLevelClient::new).orElse(null); } catch (Exception e) { log.severe(\\\"初始化RestHighLevelClient时出错!\\\"); } if (null == client) { log.severe(\\\"创建ES连接失败!\\\"); } } } /** * 测试类 * * @param args main方法参数 * @throws IOException 抛出异常 无需处理 */ public static void main(String[] args) throws IOException { RestHighLevelClient esClient = EsRestHighLevelClient.getEsClient(); BoolQueryBuilder query = QueryBuilders.boolQuery(); SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder().query(query).size(10); SearchRequest searchRequest = new SearchRequest(Constants.INDEX_PERSON).source(searchSourceBuilder); SearchResponse search = esClient.search(searchRequest, RequestOptions.DEFAULT); System.out.println(search); esClient = getEsClient(); search = esClient.search(searchRequest, RequestOptions.DEFAULT); System.out.println(search); } } \",\" /** * 查询 * * @return 返回SearchHit 篮子对象 */ public SearchHit[] listPerson(String name) { try { SearchRequest searchRequest = new SearchRequest(\\\"person\\\"); SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(); BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery(); if (null != name && !\\\"\\\".equals(name)) { boolQueryBuilder.must(QueryBuilders.matchQuery(\\\"name\\\", name)); } sourceBuilder.query(boolQueryBuilder); searchRequest.source(sourceBuilder); SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT); SearchHit[] hs = searchResponse.getHits().getHits(); return hs; } catch (Exception e) { log.warning(\\\"查询信息时异常，查询es失败\\\"); return null; } } \",\" try { BulkRequest bulkRequest = new BulkRequest(); Map<String, Object> jsonMap = new HashMap<>(1); jsonMap.put(\\\"id\\\", person.getId()); jsonMap.put(\\\"name\\\", person.getName()); jsonMap.put(\\\"age\\\", person.getAge()); jsonMap.put(\\\"isNeighbourhood\\\", person.getIsNeighbourhood()); IndexRequest indexRequest = new IndexRequest(\\\"person\\\") .id(String.valueOf(person.getId())).source(jsonMap); bulkRequest.add(indexRequest); BulkResponse bulk = client.bulk(bulkRequest, RequestOptions.DEFAULT); log.warning(\\\"数据库写入/更新 ES成功\\\"); } catch (IOException e) { log.warning(\\\"数据写入/更新 ES发生IO异常!\\\"); } catch (Throwable e) { log.warning(\\\"数据写入/更新 ES发生异常!\\\"); } \",\" DeleteRequest deleteRequest = new DeleteRequest(\\\"person\\\", String.valueOf(person.getId())); try { DeleteResponse deleteResponse = client.delete(deleteRequest, RequestOptions.DEFAULT); log.info(\\\"删除\\\" + deleteResponse.getId() + \\\", 状态为:\\\" + deleteResponse.status()); } catch (IOException e) { log.warning(\\\"ES删除数据发生IO异常!\\\"); } \",\" @Override public List<Person> listPerson(String name) { SearchHit[] hs = personDao.listPerson(name); List<Person> personList = new ArrayList<>(64); for (SearchHit searchHit : hs) { Map<String, Object> hitMap = searchHit.getSourceAsMap(); Person person = new Person(); person.setId((Integer) hitMap.get(\\\"id\\\")); person.setName((String) hitMap.get(\\\"name\\\")); person.setAge((Integer) hitMap.get(\\\"age\\\")); person.setIsNeighbourhood((String) hitMap.get(\\\"isNeighbourhood\\\")); personList.add(person); } return personList; } \"]},\"4\":{\"h\":\"ElasticSearch近实时性介绍\",\"t\":[\"​ Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。\",\"​ Elasticsearch 是一款功能强大的分布式搜索引擎，支持近实时的存储、搜索数据。\",\"​ Elasticsearch和磁盘之间是文件系统缓存，在内存索引缓冲区中的文档 会被写入到一个新的段中 ，但是这里新段会被先写入到文件系统缓存，这一步代价会比较低，稍后再被刷新到磁盘—这一步代价比较高。不过只要文件已经在缓存中， 就可以像其它文件一样被打开和读取了。\",\"图1、在内存缓冲区中包含了新文档的 Lucene 索引\",\"image-20200715110330925\",\"Lucene 允许新段被写入和打开，使其包含的文档在未进行一次完整提交时便对搜索可见。 这种方式比进行一次提交代价要小得多，并且在不影响性能的前提下可以被频繁地执行。\",\"图2、缓冲区的内容已经被写入一个可被搜索的段中，但还没有进行提交\",\"image-20200715110718600\",\"​ 在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 refresh 。 默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch 是 近 实时搜索: 文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。\",\"​\\t\\t尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候， 手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。 相反，你的应用需要意识到 Elasticsearch 的近实时的性质，并接受它的不足。\"]},\"5\":{\"h\":\"HDFS shell操作（1）\"},\"6\":{\"h\":\"1、创建一个HDFS目录\",\"t\":[\"命令：hdfs dfs -mkdir -p /usr/local/hadoop/data/txtdir\",\"截图：\"]},\"7\":{\"h\":\"2、本地文件上传到HDFS\",\"t\":[\"本地创建文件a.txt,b.txt,c.txt上传到HDFS /usr/local/hadoop/data/txtdir\",\"命令：echo “I am student” > a.txt\",\"​ echo “I am teacher” > c.txt\",\"​ echo “I like hadoop” > b.txt\",\"​ hdfs dfs -put a.txt /usr/local/hadoop/data/txtdir\",\"​ hdfs dfs -copyFromLocal b.txt /usr/local/hadoop/data/txtdir\",\"​ hdfs dfs -moveFromLocal c.txt /usr/local/hadoop/data/txtdir\",\"截图：\"]},\"8\":{\"h\":\"3、查看/usr/local/hadoop/data/txtdir目录结构\",\"t\":[\"命令：hdfs dfs -ls -R /usr/local/hadoop/data/txtdir\",\"截图：\",\"image-20201206115459406\"]},\"9\":{\"h\":\"4、查看HDFS上/usr/local/hadoop/data/txtdir下的文件内容\",\"t\":[\"命令：hdfs dfs -cat /usr/local/hadoop/data/txtdir/a.txt\",\"​ hdfs dfs -cat /usr/local/hadoop/data/txtdir/b.txt\",\"​ hdfs dfs -cat /usr/local/hadoop/data/txtdir/c.txt\",\"截图：\"]},\"10\":{\"h\":\"5、合并本地多个小文件上传到HDFS\",\"t\":[\"命令：hdfs dfs -appendToFile a.txt b.txt /usr/local/hadoop/data/txtdir/merges.txt\",\"截图：\"]},\"11\":{\"h\":\"6、 下载a.txt到本地文件系统\",\"t\":[\"命令：hdfs dfs -get /usr/local/hadoop/data/txtdir/a.txt\",\"截图：\"]},\"12\":{\"h\":\"7、删除HDFS上的/usr/local/hadoop/data/txtdir\",\"t\":[\"命令：hdfs dfs -rm -r /usr/local/hadoop/data/txtdir/\",\"截图：\"]},\"13\":{\"h\":\"HBASE shell操作（2）\",\"t\":[\"a.创建学生成绩表，结果如下。\",\"Rowkey：id\",\"列族：info和course，course包括3个版本数据\",\"b.插入数据\",\"数据包括\",\"学生学号\",\"Info\",\"course\",\"name\",\"age\",\"sex\",\"address\",\"Chinese\",\"math\",\"english\",\"95001\",\"Jom\",\"20\",\"男\",\"山东省济南市\",\"80\",\"85\",\"89\",\"95002\",\"Tom\",\"19\",\"男\",\"山东省济南市\",\"55，60\",\"80\",\"71\",\"95003\",\"Lily\",\"20\",\"女\",\"北京市\",\"65\",\"c.查询数据\",\"查找95001的相关数据\",\"查找95002 行、course 列族中 math 列的值\",\"查找成绩为80-90之间的相关数据\",\"查找名字为Jom的相关数据\",\"查找学生地址是山东省的相关数据\",\"d.删除学生95003的相关数据\",\"2、使用HBase Java API（选做）\",\"a.查询所有表\",\"b.创建表test，包括列族f1和f2\",\"c.插入数据，rk001 ，f1中列name为zhangsan，f2中列number为135\",\"d.插入数据，rk002 ，f1中列name为lisi\",\"e.查看rk001的数据\",\"创建学生成绩表\",\"create 'student','pratice','info',\",\"插入数据\",\"put 'student','95001','info:name','Jom'\",\"put 'student','95001','info:age','20'\",\"put 'student','95001','info:sex','男'\",\"put 'student','95001','info:address','山东省济南市'\",\"put 'student','95001','course:chinese','80'\",\"put 'student','95001','course:math','85'\",\"put 'student','95001','course:english','89'\",\"put 'student','95002','info:name','Tom'\",\"put 'student','95002','info:age','19'\",\"put 'student','95002','info:sex','男'\",\"put 'student','95002','info:address','山东省济南市'\",\"put 'student','95002','course:chinese','55,60'\",\"put 'student','95002','course:math','80'\",\"put 'student','95002','course:english','71'\",\"put 'student','95003','info:name','Lily'\",\"put 'student','95003','info:age','20'\",\"put 'student','95003','info:sex','女'\",\"put 'student','95003','info:address','北京市'\",\"put 'student','95003','course:chinese',''\",\"put 'student','95003','course:math','65'\",\"put 'student','95003','course:english',''\",\"查找95001的相关数据\",\"get 'student','95001'\",\"查找95002 行、course 列族中 math 列的值\",\"get 'student','95002',\",\"查找成绩为80-90之间的相关数据\",\"scan 'student',\",\"查找名字为Jom的相关数据\",\"scan 'student',\",\"查找学生地址是山东省的相关数据\",\"scan 'student',\",\"删除学生95003的相关数据\",\"deleteall 'student','95003'\"]},\"14\":{\"h\":\"HDFS文件操作\",\"t\":[\"​ HDFS有一个文件系统实例，客户端通过调用这个实例的open()方法就可以打开系统中希望读取的文件。\",\"​ HDFS通过RPC调用NameNode获取文件块的位置信息，对于文件的每一个块，NameNode会返回该块副本DataNode的节点地址。\",\"​ 另外，客户端还会根据网络拓扑来确定它与每一个DataNode的位置信息，从离它最近的那个DataNode获取数据块的副本，最理想的情况是数据块就储存在客户端所在的节点上。\",\"​ 具体过程：\",\"​ \",\"​ （1）客户端发起请求\",\"​ （2）客户端与NameNode得到文件的块及位置信息列表\",\"​ （3）客户端直接和DataNode交互读取数据\",\"​ （4）读取完成关闭连接\",\"​ 这样设计的巧妙之处有：\",\"​ （1）在运行MapReduce任务时，每个客户端就是一个DataNode节点。\",\"​ （2）NameNode 仅需要相应块的位置信息请求，否则随着客户端的增加，NameNode会很快成为瓶颈。\",\"​ Hadoop的网络拓扑。在海量数据处理过程中，主要限制因素时节点之间的带宽。衡量两个节点之间的带宽往往很难实现，在这里Hadoop采取了一个简单的方法，它把网络拓扑看成一棵树，两个节点的距离等于他们到最近共同祖先距离的综合，而树的层次可以这么划分：\",\"​ a、同一个节点中的进程\",\"​ b、同一机架上的不同节点\",\"​ c、同一数据中心不同机架\",\"​ d、不同数据中心的节点\",\"例如：数据中心d1中有一个机架r1中一个节点n1表示为d1/r1/n1\",\"​ a、distance(d1/r1/n1,d1/r1/n1)=0;\",\"​ b、distance(d1/r1/n1,d1/r1/n2)=2;\",\"​ c、distance(d1/r1/n1,d1/r2/n3)=4;\",\"​ d、distance(d1/r1/n1,d2/r3/n4)=6;\",\"HDFS有一个分布式系统，客户端通过调用这个实例的create()方法就可以创建文件。\",\"DFS会发给NameNode一个RPC调用，在文件系统的命名空间创建一个新文件。\",\"在创建文件前NameNode会做一些检查，看看文件是否存在，客户端是否有创建权限等。\",\"若检查通过，NameNode会为创建文件写一条记录到本地磁盘的EditLog；\",\"若不通过会向客户端抛出IOException。\",\"image-20191216163905988\",\"（1）首先，第一个DataNode是以数据包（4KB）的形式从客户端接收数据的，DataNode在把数据包写入到本地磁盘的同时会向第二个DataNode（作为副本节点）传送数据。\",\"（2）在第二个DataNode把接收到的数据包写入本地磁盘时会向第三个DataNode发送数据包。\",\"（3）第三个DataNode开始向本地磁盘写入数据包。此时，数据包以流水线的形式被写入和备份到所有DataNode节点。\",\"（4）传送管道中的每个DataNode节点在收到数据后都会向前面那个DataNode发送一个ACK，最终 第一个DataNode会向客户端发回一个ACK。\",\"（感觉这个ACK和TCP/IP协议中的差不多：ACK (Acknowledge character）即是确认字符，在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误。）\",\"（5）当客户端收到数据块的确认之后，数据块被认为已经持久化到所有节点，然后客户端会向NameNode发送一个确认。\",\"（这里是最后一次ACK吗？还有有一个seq？因为上边说每次发送的数据包是4KB比较小，每次都有ACK吧应该，还是最后检验程序完整性？感觉和文件上传很类似，期待研究源码！）\",\"（6）如果管道中的任何一个DataNode失败，管道会被关闭，数据将会继续写到剩余的DataNode中。同时NameNode会被告知待备份状态，NameNode会继续备份数据到新的可用的节点。\",\"解答上述疑问：数据块都会通过计算校验和来检测数据的完整性，校验和以隐藏文件的形式被单独存放在HDFS中，供读取时进行完整性校验。\",\"HADOOP 删除文件三部曲\",\"（1）NameNode只是重命名被删除的文件到 /trash 目录，因为重命名操作只是元信息的变动，所以整个过程非常快。在 /trash 中文件会被保留一定间隔的时间（默认6h）\",\"​ （在这个期间文件可以恢复）；\",\"（2）当指定的时间到达，NameNode将会把文件从命名空间中删除；\",\"（3）标记删除的文件块释放空间，HDFS文件系统显示空间增加。\",\"想啥呢?\"]},\"15\":{\"h\":\"HDFS概述\",\"t\":[\"本文权威指南读书笔记\",\"​ （1）存储大文件：HDFS支持GB级别大小的文件；\",\"​ （2）流式数据访问：保证高吞吐量\",\"​ （3）容错性：完善的冗余备份机制；\",\"​ （4）简单的一致性模型：一次写入多次读取；\",\"​ （5）移动计算优于移动数据：HDFS使应用计算移动到离他最近数据位置的接口；\",\"​ （6）兼容各种硬件和软件平台。\",\"​ HDFS不适合的场景：\",\"​ （1）大量小文件：文件的元数据存储在NameNode内容中，大量小文件意味着元数据增加，会占用大量内存；\",\"​ （2）低延迟数据访问：HDFS是专门针对吞吐量而不是用户低延迟；\",\"​ （3）多用户写入：导致一致性维护困难。\",\"​ 主要三个组件：NameNode、SecondaryNameNode 和 DataNode\",\"​ （HDFS以主从模式运行，其中NameNode、SecondaryNameNode运行再Master节点，DataNode运行再Slave节点上）\",\"​ NameNode负责信息维护者，DateNode负责存取数据。\",\"​ \"]},\"16\":{\"h\":\"(1) NameNode\",\"t\":[\"​ NameNode管理着文件系统的命名空间 , 它维护文件系统树及树中的所有文件和目录\",\"​ NameNode也负责维护所有这些文件或目录的打开、关闭、移动、重命名等操作。\",\"​ a. 文件名目录名及它们之间的层级关系\",\"​ b. 文件目录的所有者及其权限\",\"​ c.每个文件块的名及文件有哪些块组成\",\"​ NameNode启动时加载到内存中，元信息会保存各个块的名称及文件由哪些块组成。\",\"​ NameNode占用大量内存和I/O资源，对Name容错机制也十分重要\"]},\"17\":{\"h\":\"(2) DataNode\",\"t\":[\"​ DataNode是HDFS中的Worker节点，它负责存储数据块，也负责为系统客户端提供数据块的读写服务，同时还会根据NameNode的指示来进行创建、删除和复制等操作。此外，它还会通过心跳定期向NameNode发送所存储文件块列表信息。\",\"​ 负责实际文件数据的保存于操作，与客户端直接交互。\",\"​ 例子：一条元信息记录会占用200B内存空间。 假设块大小为64MB，备份数量是3，那么一个1GB大小的文件将占用163=48个文件块。如果现在有1000个1MB大小的文件，则会占用10003=3000个文件块（多个文件不能放到一个块中）。\",\"​ 可以得出，如果文件越小，存储同等大小文件所需要的元信息就越多，所以，Hadoop更喜欢大文件。\"]},\"18\":{\"h\":\"（3）元信息的持久化\",\"t\":[\"​ 在NameNode中存放元信息的文件是fsimage。在系统运行期间所有对元信息的操作都保存在内存中并被持久化到另一个edits中，并且edits文件和fsimage文件会SecondaryNameNode周期性地合并。\"]},\"19\":{\"h\":\"（4）SecondaryNameNode\",\"t\":[\"​ 在NameNode启动时，首先会加载fsimage到内存中，在系统运行期间，所有对NameNode的操作也都保存在内存中，同时为了防止数据丢失，这些操作又会不断的持久化到本地edits文件中。\",\"​ edits文件的目的是为了提高系统的操作效率，NameNode在更新内存的元信息之前都会先将操作写入edits文件。在NameNode重启的过程中，edits会和fsimage合并到一起，但是合并的过程会影响到Hadoop重启的速度，SecondaryNameNode就是为了解决这个问题：\",\"​ SecondaryNameNode的角色就是定期合并edits和fsimage文件：\",\"​ a、合并之前告知NameNode把所有的操作写到新的edites文件并将其命名为edits.new。\",\"​ b、SecondaryNameNode从NameNode请求fsimage和edits文件。\",\"​ c、SecondaryNameNode把fsimage和edits文件合并成新的fsimage文件。\",\"​ d、NameNode从SecondaryName获取合并好的新的fsimage并将旧的替换掉，并\",\"​ 使用的检查点：\",\"​ fsimage：保存的是上个检查点的HDFS的元信息\",\"​ edits：保存的是从上个检查点开始发生的HDFS元信息状态改变信息\",\"​ fstime：保存了最后一个检查点的时间戳\",\"​ HDFS通过备份数据块的形式来实现容错，除了文件的最后一个数据块外，其他所有数据块大小都是一样的，数据块的大小和备份银子都是可以配置的。\",\"​ NmaeNode负责各个数据块的备份，DataNode会通过心跳的方式定期向NameNode发送自己节点上的Block报告，这个报告包含了DataNode节点上的所有数据块的列表。\",\"​ 写数据时候通过负载均衡，进行同步，但是会影响效率。当Hadoop的NameNode节点启动时，会进入安全模式。当副本数满足最小副本数，系统会退出安全模式。\",\"​ 所有的HDFS中的沟通协议都是基于TCP/IP协议的\",\"​ （1）一个客户端通过指定的TCP端口与NameNode机器建立连接，并通过Client Protocol协议与NameNode交互。 NameNode只被动接受请求。\",\"​ （2）DataNode则通过DataNode Protocol协议与NameNode进行沟通。\",\"​ （3）HDFS的RPC对Client Protocol 和 DataNode Protocol做了封装。\",\"​ HDFS可以允许DataNode失败。\",\"​ DataNode会定期（默认3s）向NameNode发送心跳，若NameNode在指定时间间隔内没有收到心跳，它就认为此节点已经失败。此时NameNode把失败节点的数据备份到另一个健康的节点，这就保证了集群始终维持指定的副本数。\",\"​\\tHDFS可以检测到数据块损坏。在读取数据块时，HDFS会对数据块和保存的校验和文件匹配，如果不匹配，NameNode会重新备份损坏的数据块。\"]},\"20\":{\"h\":\"HiveQL视图\",\"t\":[\"​ 视图可以允许保存一个查询（并）像对待表一样对这个查询进行操作。（这是一个逻辑结构，因为它不像一个表会存储数据。\",\"​ 当查询长且复杂，通过使用视图将这个查询语句分割成多个小的、更可控的片段可以降低这种复杂度。\",\"例如：\",\"改进前：Hive 查询语句中含有多层嵌套\",\"FROM( SELECT * FROM people JOIN cart ON (cart.people_id=people.id) WHERE firstname='john' ) a SELECT a.lastname WHERE a.id=3; \",\"改进后：利用视图进行查询\",\"CREATE VIEW shorter_join AS SELECT * FROM people JOIN cart ON (cart.people_id=people.id) WHERE firstname='john' // 这样就可以像操作表一样来操作这个视图了，简化了查询语句 SELECT lastname FROM shorter_join WHERE id=3; \",\"​ 基于一个 或者 多个列的值 来限制 输出结果。可以通过创建视图来限制数据访问，可以用来保护信息不被随意查询：\",\"hive> CREATE TABLE userinfo( > firstname string, lastname string, ssn string, password string); hive> CREATE VIEW safer_user_info AS > SELECT firstname, lastname FROM userinfo; \",\"​ Hive目前不支持的功能：有的数据库，允许将视图作为一个安全机制，也就是不给用户直接访问具有敏感数据的原始表，而是提供给用户一个通过WHERE子句限制了的视图，以供访问。Hive中用户必须能够访问整个底层的原始表的权限，视图才能工作。\",\"​ Hive 支持 array、map 和 struct 数据类型，这些数据类型在传统的数据库中并不常见，因为他们破坏了第一范式。\",\"​ Hive 可将一整行文本作为一个 map，加上视图功能，就允许用户可以基于同一个物理表构建多个逻辑表。\",\"​ 视图如下：三个字段作为key, 视图名为 orders\",\"CREATE VIEW orders(state, city, part) AS SELECT cols[\\\"state\\\"], cols[\\\"city\\\"], cols[\\\"part\\\"] FROM dynamicatable WHERE cols[\\\"type\\\"] = \\\"request\\\"; \"]},\"21\":{\"h\":\"Hive数据定义\",\"t\":[\"​ Hive不支持行级插入操作、更新操作和删除操作，\",\"​ Hive不支持事务。\",\"Hive 中数据库的概念本质上仅仅是表的一个目录或者命名空间。\",\"// 1、数据库目录为： hive.metastore.warehouse.dir // 2、创建数据库 ： CREATE DATABASE financials; // 3、已经存在则： CREATE DATABASE IF NOT EXISTS financials; // 4、查看数据库： SHOW DATABASES; SHOW DATABASES LIKE 'f.*'; // 5、修改默数据库位置： CREATE DATABASE financials LOCATION '/my/preferred/directory'; // 6、切换工作数据库： USE financials; (Hive v0.8.0，可以修改当前工作数据库为默认数据库，set hive.cli.print.current.db=true;) // 7、删除数据库： DROP DATABASE IF EXISTS financials; \",\"​\",\"// 8、级联删除数据库（含表）： DROP DATABASE IF EXISTS financials CASCADE; // 9、可以使用 ALTER DATABASE 为数据库的 DBPROPERTIES 设置键-值对属性值，来描述数据库的属性信息，其他不可以更改： ALTER DATABASES financials SET DBPROPERTIES('edited-by' = 'Joe Dba') // 10、删除表 DROP TABLE IF EXISTS employees; // 11、表重命名 ALTER TABLE log_messages RENAME TO logmsgs; // 12、 对某个字段重命名，并修改位置、类型或者注释 ALTER TABLE log_messages CHANGE COLUMN hms hours_minutes_seconds INT COMMENT 'The hours, minutes, and seconds part of the timestamp' AFTER severity; // 13、增加列 ALTER TABLE log_messages ADD COLUMNS( app_name STRING COMMENT 'Application name', session_id LONG COMMENT 'The current session id' ); // 14、删除或者替换列 ALTER TABLE log_messages REPLACE COLUMNS( hours_mins_secs INT COMMENT 'hour, minute, seconds from timestamp', severity STRING COMMENT 'The message severity' message STRING COMMENT 'The rest of the message' ); // 15、修改表属性 ALTER TABLE log_messages SET TBLPROPERTIES( 'notes' = 'The process id is no longer captured; this column is always NULL' ); // 16、修改存储属性 ALTER TABLE log_messages PARTITION(year = 2012, month = 1, day =1) SET FILEFORMAT SEQUENCEFILE; \",\"​ 数据分区：通常使用分区来水平分散压力，将数据从物理上转移到和使用最频繁的用户更近的地方，以及实现其他目的。\",\"​ 先按照 国家 ， 后按照 州 分区\",\"CREATE TABLE employees( name STRING, salary FLOAT, subordinates ARRAY<STRING>, deductions MAP<STRING, FLOAT>, adress STRUCT<street:STRING, city:STRING, state:STRING, zip:INT> ) PARTITIONED BY (country STRING, state STRING) \",\"分区表改变了 Hive 对数据存储的组织方式。\",\"对比：\",\"​ （1）如果我们是在mydb数据库中创建的这个表，那么对于这个表只会有一个employees目录与之对应：\",\"​\",\"hdfs://master_server/user/hive/warehouse/mydb.db/employees \",\"​ （2）但是，Hive 现在将会创建好可以反映分区结构的子目录。如：\",\"... .../employees/country=CA/state=AB .../employees/country=CA/state=BC ... .../employees/country=US/state=AL .../employees/country=US/state=AK ... \",\"当我们查询美国伊利诺斯州所有雇员：\",\"SELECT * FROM employees WHERE country = 'US' AND state = 'IL'; \",\"更快，所以分区显著的提高查询性能。\",\"但是如果全查询数据非常大，会执行巨大的 MapReduce 任务。\",\"建议将Hive设置为 “strict(严格)” 模式，如果没有WHERE过滤的话，会禁止提交这个任务：\",\"set hive.mapred.mode=strict // SHOW PARTITIONS命令查看表中存在的所有分区： SHOW PARTITION employees; // 查看指定分区 SHOW PARTITIONS employees PARTITION(country='US') SHOW PARTITIONS employees PARTITION(country='US', state='AK') \",\"// 日志文件 ALTER TABLE log_messages ADD PARTITION(year = 2012,month = 1,day = 2) LOCATION 'hdfs://master_server/data/log_message/2012/01/02'; \"]},\"22\":{\"h\":\"Hive数据操作（1）\",\"t\":[\"Hive 没有行级别的数据插入、数据更新和删除操作，那么网表中装载数据的唯一途径就是使用一种 “ 大量 ” 的数据装载操作。或者通过其他方式仅仅将文件写入到正确的目录下。\",\"// OVERWRITE关键字换成INTO关键字的话，Hive将会以追加的方式写入数据而不会覆盖之前已经存在的内容 LOAD DATA LOCAL INPATH '${env:HOME}/california-employees' OVERWRITE INTO TABLE employees // 非分区表省略此行 PARTITION (country = 'US', state = 'CA') \",\"​ 如果分区目录不存在的话，会先创建分区目录，然后再将数据拷贝到该目录下。\",\"image-20200119115936949\",\"上表为动态分区属性，如果不小心按照秒分区，每秒建立一个分区，则十分浪费资源，设置hive.exec.max.dynamic.partitions可以创建最大动态分区个数，如果超过这个值就会抛出一个致命错误。\",\"设置分区的方式\",\"hive> set hive.exec.dynamic.partition=true; hive> set hive.exec.dynamic.partition.mode=nonstrict; hive> set hive.exec.max.dynamic.partitions.pernode=1000; hive> INSERT OVERWRITE TABLE employees > PARTITION (country, state) > PARTITION ..., se.cty, se.st > FROM staged_employees se; \",\"CREATE TABLE ca_employees AS SELECT name, salary, address FROM employees WHERE se.state = 'CA'; \",\"//（1）直接拷贝文件夹 hadoop fs -cp source_path DIRECTORY '/tmp/ca_employees' //（2）或者用INSERT ... DICTORY ..., // 也可以写成全路径 hdfs://master-server/tmp/ca_employees INSERT OVERWRITE LOCAL DIRECTORY '/tmp/ca_employees' SELECT name, salary, adress FROM employees WHERE se.state = 'CA'; \",\"SELECT是SQL中的映射算子，指定了要保存的列以输出函数需要调用的一个或多个列；\",\"FROM子句标识了从哪个表、试图或嵌套查询中选择记录。\",\"// 查询ARRAY的第一个元素 SELECT name, subordinates[0] FROM employees; // 查询键值 SELECT name, deductions[\\\"State Taxes\\\"] FROM employees; // 查询一个元素，也可以用 ‘点’ SELECT name, address.city FROM employees; \",\"（1）Hive支持的算数运算符\",\"image-20200119143105348\",\"（2）Hive 内置数学函数\",\"image-20200119143246489\",\"image-20200119143332168\",\"image-20200119143405105\",\"image-20200119143501626\",\"（3）Hive聚合函数\",\"最有名的是count avg\",\"image-20200119143648157\",\"image-20200119143701027\",\"image-20200119143709165\",\"// 下边设置可以调高聚合的性能,这个设置会触发map阶段进行“顶级”聚合过秤，非顶级将会在执行一个GROUP BY后进行，不过这个设置会需要更多的内存。 hive> SET hive.map.aggr=true; hive> SELECT count(*), avg(salary) FROM employees; // 多个函数排重后的孤僻交易码个数 hive> SELECT count(DISTINCT symbol) FROM stocks; \",\"与聚合函数“相反的”一类函数就是表生成函数，其可以将单列扩展成多列或者多行。例如 AS 语句\",\"例子：\",\"SELECT parse_url_tuple(url, 'HOST', 'PATH', 'QUERY') AS (host, path, query) FROM url_table; \",\"image-20200119145321380\",\"有很多，关于时间的和关于字符串的。\",\"LIMIT子句勇于限制返回的行数。\",\"// 下面只返回两行 hive> SELECT upper(name), salary, deductions[\\\"Federal Taxes\\\"], > round(salary * (1 - deductions[\\\"Federal Taxes\\\"])) FROM employees > LIMIT 2; \",\"和if条件语句类似，用于处理单个列的查询结果。\",\"hive> SELECT name, salary, > CASE > WHEN salary < 50000.0 THEN 'low' > WHEN salary >= 50000.0 AND salary < 70000.0 THEN 'middle' > WHEN salary >= 70000.0 AND salary < 100000.0 THEN 'high' > ELSE 'very high' > END AS bracket FROM employees; //返回结果 John Doe 100000.0 veryhigh Mary Smith 80000.0 high ... \",\"RLIKE 是 Hive 功能的拓展，可以通过 Java 的正则表达式来指定匹配条件。\",\"// LIKE hive> SELECT name, address.street FROM employees WHERE address.street LIKE '%Ave.' John Doe 1 Michigan Ave. Todd Jones 200 Chicago Ave. ... // RLIKE 后加正则表达式 //（参照Tony Stubbleine《正则表达式参考手册》、JanGoyvaerts和Tony Stubbleine（O' Reilly）所著的《正则表达式参考手册》） // '.'表示和任意的字符匹配 // '*'表示重复“左边的字符串”零次到无数次 // '|'表示和x或者y匹配 hive> SELECT name, address.street > FROM employees WHERE address.street RLIKE '.*(Chicago|Ontario).*'; Mary Smith 100 Ontario St. Todd Jones 200 Chicago Ave. \",\"GROUP BY语句通常会和聚合函数一起使用，按照一个或者多个列对结果进行分组，然后对每个组执行聚合操作。\",\"例如：\",\"hive> SELECT year(ymd), avg(price_close) FROM stocks >WHERE exchange = 'NASDAQ' AND symbol = 'AAPL' >GROUP BY year(ymd); 1984 25.123142341341 1985 20.123145234131 ... // 有时候会用HAVING子句来补充条件查询 hive> SELECT year(ymd), avg(price_close) FROM stocks >WHERE exchange = 'NASDAQ' AND symbol = 'AAPL' >GROUP BY year(ymd); >HAVING avg(price_close) > 50.0 // 等价于下边嵌套查询 hive> SELECT s2.year, s2.avg FROM >(SELECT year(ymd) AS year, avg(price_close) AS avg FROM stocks) >WHERE exchange = 'NASDAQ' AND symbol = 'AAPL' >GROUP BY year(yml)) s2 >WHERE s2.avg > 50.0 1987 53.88923482352342 ... \"]},\"23\":{\"h\":\"Hive数据操作（2）\",\"t\":[\"Hive 中 SQL JOIN 语句，只支持等值连接\",\"​ 内连接（INNER JOIN）中，只有进行连接的两个表中都存在于连接标准相匹配的数据才会被保留下来。不支持 >= 等不相等匹配、ON子句中谓词之间不能使用OR。\",\"// 苹果公司股价 AAPL IBM股价IBM // ON子句指定了两个表间数据进行连接的条件 // WHERE子句限制了左边表是AAPL的记录，右边表是IBM的记录 hive> SELECT a.ymd, a.price_close, b.price_close >FROM stocks a JOIN stocks b ON a.ymd = b.ymd >WHERE a.symbol = 'AAPL' AND b.symbol = 'IBM'; 2010-01-04 214.01 132.45 2010-01-05 214.38 130.85 ... \",\"大多数情况下，Hive会对每对 JOIN 连接对象启动一个 MapReduce 任务。\",\"​ Hive同时假定查询中最后一个表是对打的那个表。在对每行记录进行连接操作时，它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。\",\"​ 所以优化JOIN的时候，将小表放在前边，大表放到后边。\",\"... 小表 JOIN 大表 ON ... \",\"​ 用法和 INNER JOIN 一致，但是这种操作，会返回左侧表所有的记录，当右边表根据连接条件没有对应的记录时，那么右表响应的列的值是NULL\",\"... 全部数据表 LEFT OUTER JOIN 对应条件的表 ON ... \",\"​ 用法和 INNER JOIN 一致，右外连接（RIGHT OUTER JOIN）会返回右边表所有符合WHERE语句的记录。左表中匹配不上的字段值用NULL代替。\",\"​ 最后介绍的完全外连接（FULL OUTER JOIN）将会返回所有表中符合 WHERE 语句条件的所有记录。\",\"​ 如果任一表的指定字段没有符合条件的值的话，那么就使用 NULL 值代替。\",\"hive>SELECT s.ymd, s.symbol, s.price_close, d.divided >FROM dividends d FULL OUTER JOIN stocks s ON d.ymd = s.ymd AND d.symbol = s.symbol >WHERE s.symbol = 'AAPL'; ... 1987-05-07 AAPL 80.25 NULL 1987-05-08 AAPL 97.0 NULL 1987-05-11 AAPL 77.0 0.015 ... \",\"​ 左开半连接（LEFT SEMI-JOIN）会返回左边表的记录，前提是其记录对于右表满足 ON 语句中的判定条件。\",\"​ 这个子句的出现是为了解决 IN ... EXISTS结构的。\",\"// 因为 Hive 不支持以下查询： SELECT s.ymd, s.symbol, s.price_close FROM stocks s WHERE s.ymd, s.symbol IN(SELECT d.yml, d.symbol FROM dividends d); // 所以利用 LEFT SEMI JOIN // SELECT 和 WHERE 语句中不能引用到右边表中的字段 hive> SELECT s.yml, s.symbol, s.price_close > FROM stocks s LEFT SEMI JOIN dividends d ON s.ymd = d.ymd AND s.symbol = d.symbol; ... 1962-11-05 IBM 361.5 1962-08-07 IBM 373.25 1962-05-08 IBM 459.5 1962-02-06 IBM 551.5 \",\"​ 注：SEMI-JOIN 比通常的 INNER JOIN 要更加高效：对于左表的一条指定的记录，在右边表中一旦找到匹配的记录，Hive 就会立即停止扫描。从这点来看，左边表中选择的列是可以预测的。\",\"​ 如果所有表中只有一张表是小表，那么可以在最大的表通过 mapper 的时候将小表完全放到内存中。\",\"​ Hive 可以在 map 段执行连接过程（称为 map-side JOIN），这是因为 Hive 可以和内存中的小表进行逐一匹配，从而省略掉常规连接操作所需要的 reduce 过程。即使对于很小的数据集，这个优化也明显地要快于常规的连接操作：不仅减少了 reduce 过程，而且有时还可以同时减少 map 过程的执行步骤。\",\"// 当设置了以下的属性，内连接也可以使用这个优化(hive v0.7+) // 但是右外连接（RIGHT OUTER JOIN）和全外连接（FULL OUTER JOIN）不支持此优化 hive>set hive.auto.convert.join=true hive> SELECT s.ymd, s.symbol, s.price_close, d.dividend > FROM stocks s JOIN dividends d ON s.ymd = d.ymd AND s.symbol = d.symbol > WHERE s.symbol = 'AAPL'; // 属于小表的属性 hive.mapjoin.smalltable.filesize=25000000 \",\"类似的：\",\"​ 表中的数据必须是按照 ON 语句中的键进行分桶的，而且其中一张表的分桶的个数必须是另一张表分桶个数的若干倍，当满足这些条件时：\",\"​ Hive 可以在 map 阶段按照分桶数据进行连接。因此这种情况下，不需要先获取到表中所有的内容，之后采取和另一张表中每个分桶进行匹配连接。\",\"// 默认没有开启 set hive.optimize.bucketmapJOIN=true // 涉及的分桶表具有相同的分桶数，而且数据是按照 连接键 或 桶的键进行排序的 // 此时 Hive 可以执行一个更快的分类-合并连接（sort-merge JOIN） // 默认没有开启 set hive.input.format=org.apache.hadoop.hive.ql.io.BucketizedHiveInputFormat; set hive.optimize.bucketmapjoin=true; set hive.optimize.bucketmapjoin.sortedmerge=true; \",\"​ Hive 中 ORDER BY 语句和其他的 SQL 方言中的定义是一样的。会对查询结果集执行一个全局排序：所有数据都通过一个 reducer 进行处理的过程。对于大数据集，这个过程可能会消耗太漫长的时间来执行。（全局有序）\",\"​ Hive 增加了一个可供选择的方式，也就是 SORT BY，其只会在每个 reducer 中对数据进行排序，也就是执行一个局部排序过程。这可以保证每个 reducer 的输出数据都是有序的（但并非全局有序）。这样可以提高后面进行的全局排序的效率。（每个reducer有序）\",\"​ 注：当只有一个reducer时上述结果相同；默认升序ASC 降序DESC；若hive.maperd.mode=strict 时，语句必须加 LIMIT\",\"// CLUSTER BY = DISTRIBUTE BY ... SORT BY 语句。 // 此语句会剥夺 SORT BY 的并行性 hive> SELECT a.ymd, s.symbol, s.price_close > FROM stocks s CLUSTER BY s.symbol 2010-02-08 AAPL 194.12 2010-02-05 AAPL 195.46 2010-02-04 AAPL 192.05 ... 2010-01-27 AAPL 207.88 ... \"]},\"24\":{\"h\":\"Hive数据操作（3）\",\"t\":[\"​ （1）cast() 函数，可以使用这个函数对指定的值进行显式的类型转换。\",\"例如：\",\"// 当salary字段的值是不合法的浮点数字符串的话，Hive会返回NULL SELECT name, salary FROM employees WHERE cast(salary AS FLOAT) < 100000.0; \",\"注：将浮点数转换成整数的推荐方式是round()或者floor()函数，而不是使用类型转换操作符cast\",\"​ （2）类型转换 BINARY 值（hive v0.8.0）\",\"// 只支持将 BINARY 转换为 STRING 类型(也可以 STRING 转为 BINARY) SELECT (2.0 * cast(cast(b string) as double)) from src; \",\"​ 对于非常大的数据集，有时用户需要使用的是一个具有代表性的查询结果而不是全部结果。Hive可以通过对表进行分桶抽样来满足这个需求。\",\"例如：\",\"// 假设 numbers 表只有 number 字段，其值是 1 到 10 // 可以利用 rand() 函数进行抽样，这个函数会返回一个随机值。 // 以下的语句返回的值会不相同 hive> SELECT * from numbers TABLESAMPLE(BUCKET 3 OUT OF 10 ON rand()) s; hive> SELECT * from numbers TABLESAMPLE(BUCKET 3 OUT OF 10 ON rand()) s; hive> SELECT * from numbers TABLESAMPLE(BUCKET 3 OUT OF 10 ON rand()) s; // 如果按照指定的列而不是rand()函数进行分桶，同一语句多次执行的返回值是相同的 hive> SELECT * from numbers TABLESAMPLE(BUCKET 3 OUT OF 10 ON number) s; hive> SELECT * from numbers TABLESAMPLE(BUCKET 5 OUT OF 10 ON number) s; hive> SELECT * from numbers TABLESAMPLE(BUCKET 3 OUT OF 10 ON number) s; // 分桶语句中的分母表示的是数据将会被散列的桶的个数?，而分子表示将会选择的桶的个数： hive> SELECT * from numbers TABLESAMPLE(BUCKET 1 OUT OF 2 ON number) s; hive> SELECT * from numbers TABLESAMPLE(BUCKET 2 OUT OF 2 ON number) s; \",\"​ Hive 提供了另一种按照抽样百分比进行抽样的方式，这种是基于行数的，按照输入路径下的数据块百分比进行抽样：\",\"hive> SELECT * from numbersflat TABLESAMPLE(0.1 * PERCENT) s; \",\"注：这种抽样方式不一定适用于所有的文件格式。\",\"​ UNION ALL 可以将 2个或多个表进行合并。\",\"​\\t\\t每一个 union 子查询都必须具有相同的列，而且对应的每个字段的字段类型必须是一致的。\"]},\"25\":{\"h\":\"Hive数据类型和文件格式\",\"t\":[\"image-20200117105348449\",\"image-20200117105505918\",\"上面图列表了Hive所支持的基本数据类型。\",\"相同：这些数据类型是对 JAVA 中接口的实现，例如STRING是java中的String\",\"不同：\",\"​ 1、在其他SQL方言中，通常会提供限制最大长度的 “字符数组” ，但是Hive不支持。\",\"​ 因为 Hive 是为了优化磁盘的读和写的性能，列长度不重要（定长易于索引）\",\"​ 2、TIMESTAMP的值可以是整数（距离Unix新纪元时间1970年1月1日，午夜12点的秒数）\",\"​ ；也可以是浮点数，精确到纳秒（小数点后9位）；还可以是字符号串，YYYY-MM-DD hh:mm:ss.fffffffff\",\"​ 3、TIMESTAMPS表示 UTC 时间。Hive 本身提供了不同时区相互转换的内置函数，to_utc_timestamp函数和 from_utc_timestamp函数\",\"​ 4、BINARY 和 VARCHAR 类似，但和 BLOB 不同。BINARY可以在记录中包含任意字节，这样可以防止Hive尝试将其作为数字，字符串等进行解析。\",\"​ 如果需要省略每行记录的尾部，无需使用 BINARY 数据类型。如果一个表的标结果指定的是3列，而实际数据文件每行记录包含有 5 个字段的话，那么 在 Hive 中最后 2 列数据将会被省略掉。\",\"​ 当 查询 将float与double对比，或者 int 和 float对比时，隐式使用较大的类型。\",\"​ 5、当需要把 字符串 转成 数值，那么需要显式：... cast(s AS INT) ... ;\",\"Hive 中的列支持使用 strut map 和 array 集合数据类型，如下图\",\"image-20200117111045081\",\"Hive 中没有 键 的概念，但是用户可以对表建立索引。\",\"人力资源的员工表\",\"CREATE TABLE employees( name STRTING, salary FLOAT, subordinates ARRAY<STRING>, deductions MAP<STRING, STRING>; adress STRUCT<street:STRING, city:STRING>, state:STRING, zip:INT) ); \",\"Hive中默认的记录和 字段分隔符\",\"image-20200117113506023\",\"实例使用：\",\"CREATE TABLE some_data( first FLOAT, second FLOAT, third FLOAT ) ROW FORMAT DELIMITED FIELDS TERMINQTED BY ',' ; \",\"用例如使用  '\\\\t' (也就是指标建) 作为字段分隔符。可以利用他处理CSV格式数据。\"]},\"26\":{\"h\":\"Hive模式设计\",\"t\":[\"Hive 中分区的功能是非常有用的。因为通常要对输入进行全盘扫描，来满足查询条件。\",\"如：存储日志，log_2020_01_01、log_2020_01_02等\",\"hive> CREATE TABLE hive> CREATE TABLE log_2020_01_01 (id int, part string, quantity int); hive> CREATE TABLE log_2020_01_02 (id int, part string, quantity int); hive> CREATE TABLE log_2020_01_04 (id int, part string, quantity int); hive> SELECT part,quantity log_2020_01_01 > UNION ALL > SELECT part,quantity from log_2020_01_04 > WHERE quantity < 4; \",\"Hive 通过 WHERE 子句中表达式来选择查询所需要的指定的分区。这样效率高且清晰明了：\",\"hive> CREATE TABLE supply(id int, part string, quantity int) > PARTITIONED BY(int day); hive> ALTER TABLE supply add PARTITION (day=20200201) hive> ALTER TABLE supply add PARTITION (day=20200202) hive> ALTER TABLE supply add PARTITION (day=20200203) hive> ...load data... hive> SELECT part,quantity FROM supply WHERE day>=20200201 AND day<20200203 AND quantity<4; \",\"但是不要存储太多的分区和文件夹目录，并且每一个文件要足够大。应该是文件系统中块的若干倍。\"]},\"27\":{\"h\":\"二、同一份数据多种处理\",\"t\":[\"hive> INSERT OVERWRITE TABLE sales > SELECT * FROM history WHERE action='purchased' hive> INSERT OVERWRITE TABLE credits > SELECT * FROM history WHERE action='returned' // 可以优化上边两边编程下边，而且可以提高扫描速度，扫描一次 hive> FROM history > INSERT OVERWRITE sales SELECT * WHERE action='phrchased' > INSERT OVERWRITE credits SELECT * WHERE action='returned'; \",\"​ ELT 处理过程会涉及到多个处理步骤，每个步骤可能会产生一到多个临时表，这些表仅供下一个job使用。\",\"​ 问题：由于查询或原始数据处理的某个步骤出现问题而导致需要对好几天的输入数据重跑 ETL 过程。这时用户可能就需要执行那些一天执行一次的处理过程，来保证在所有的任务都完成之前不会有 job 将临时表覆盖重写。\",\"// 如：有中间表distinct_ip_in_logs hive> INSERT OVERWRITE table distinct_ip_in_logs > SELECT distict(ip) as ip from weblogs > WHERE hit_date='${hiveconf:dt}'; hive> CREATE TABLE state_city_for_day (state string, city, string); hive> INSERT OVERWRITE state_city_for_day > SELECT distinct(state, city) FROM distinct_ip_in_logs > JOIN geodata ON (distinct_ip_in_logs.ip=geodata.ip); \",\"​ 当计算某一天的数据时会导致前一天数据被 INSERT OVERWRITE 语句覆盖掉。\",\"​ 如果同时运行两个这样的实例，处理不同日期的数据的话，那么它们就可能会相互影响对方的结果数据。\",\"​ 改进方法, 建立分区：\",\"hive -hiveconf dt=2020-01-01 hive> INSERT OVERWRITE table distinct_ip_in_logs > PARTITION(hit_date=${dt}) > SELECT distinct(ip) as ip from weblogs > WHERE hit_date='${hiveconf:dt}' hive> CREATE TABLE state_city_for_day(state string,city string) > PARTITIION BY (hit_date string) hive> INSERT OVERWRITE table state_city_for_day PARTITION(${hiveconf:dt}) > SELECT distinct(state,city) FROM distinct_ip_in_logs > JOIN geodata ON (distinct_ip_in_logs.ip=geodata.ip) > WHERE (hit_date='${hiveconf:dt}') \",\"​ 分区提供一个数据隔离和优化查询的遍历的方式。不过，并非所有的数据集都可形成合理的分区。\",\"​ 分桶是将数据集分解成更统一管理的若干部分的另一个技术。利用哈希分发到不同的桶中。\",\"// 分区：如果根据user_id分区，会创建太多分区 hive> CREATE TABLE weblog (url STRING, source_ip STRING)>PARTITIONED BY (dt STRING, user_id INT); hive> FROM raw_weblog > INSERT OVERWRITE TABLE page_view PARTITION(dt='2020-06-08', user_id) > SELECT server_name, url, source_ip, dt, user_id; // 分桶：用户数比桶数多，每个桶就会有多个用户的记录 hive> CREATE TABLE weblog (user_id INT, url STRING, source_ip STRING) > PARTITIONED BY (dt STRING) > CLUSTERED BY (user_id) INTO 96 BUCKETS; // 此属性强制hive为目标表初始化过程设置一个正确的 reducer 个数。 hive> SET hive.enforce.bucketing=true; hive> FROM raw_logs > INSERT OVERWRITE TABLE weblog > PARTITION (dt='2020-02-25') > SELECT user_id, url, source_ip WHERE dt = '2020-02-25' \",\"hive> CREATE TABLE weblogs (version LONG, url STRING) > PARTITIONED BY (hit_date int) > ROW FORMAT DELIMITED FIELDS TERMINATED BY '\\\\t'; hive> ! cat log1.txt 1 /mystuff 1 /toys hive> LOAD DATA LOCAL INPATH 'log1.txt' int weblogs partition(20200101); hive> SELECT * FROM weblogs; 1 /mystuff 20200101 1 /toys 20200101 // 加新字段 hive> ! cat log2.txt 2 /cars bob 2 /stuff terrys hive> ALTER TABLE weblogs ADD COLUMNS (user_id string); hive> LOAD DATA LOCAL INPATH 'log2.txt' int weblogs partition(20200101); hive> SELECT * from weblogs 1 /mystuff 20200101 NULL 2 /toys 20200101 NULL 3 /cars 20200102 bob 4 /stuff 20200102 terry \"]},\"28\":{\"h\":\"Hive索引\",\"t\":[\"​ Hive没有键的概念，可以对一些字段建立索引来加速某些操作，一张表的索引储存在另外一张表中。EXPLAIN命令可以查看某个查询语句是否用到了索引。\",\"// 定义表 CREATE TABLE employees( name STRING, salary FLOAT, subordinates ARRAY<STRING>, deductions MAP<STRING, FLOAT>, address STRUCT<street:STRING, city:STRING, state:STRING, zip:INT> ) PARTITIONED BY (country STRING, state STRING); // 分区：hdfs://xxx/2020/02/20/xx // 建立索引,仅对字段country建立索引 CREATE INDEX employees_index ON TABLE employees(country) // AS ... 指定索引处理器 AS 'org.apache.hadoop.hive.ql.index.compact.CompactIndexHandler' WITH DEFERRED REBUILD IDXPROPERTIES('creator' = 'me', 'created_at' = 'some_time') IN TABLE employees_index_table PARTITIONED BY (country, name) COMMENT 'Employees indexed by country and name.' \",\"Bitmap索引：适用于排重后值较少的列。\",\"​ 如果用户指定了 DEFERRED REBUILD，那么新索引将呈现空白状态。在任何时候，都可以进行第一次索引创建或者使用 ALTER INDEX 对索引进行重建：\",\"ALTER INDEX employees_index ON TABLE employees // 如果省略掉 PARTITION ，那么将会对所有分区进行重建索引 PARTITION (country = 'US') REBUILD; \",\"// 显示这个表中的所建立的索引 SHOW FORMATTED INDEX ON employees; \",\"// 如果有索引表的话，删除一个索引将会删除这个索引表 // 不允许DROP TABLE前DROP INDEX DROP INDEX IF EXISTS employees_index ON TABLE employees; \"]},\"29\":{\"h\":\"Hive调优\",\"t\":[\"​ 查看逻辑，更多用 EXPLAIN EXTENDED\",\"​ 表足够小用map-side JOIN\",\"​ 对于小数据集，单机或单线程执行时间比较短\",\"hive> set oldjobtracker=${hiveconf.mapred.job.tracker}; hive> set mapred.job.tracker=local; hive> set mapred.tmp.dir=/home/edward/tmp hive> SELECT * from people WHERE firstname=bob; hive> set mapred.job.tracker=${oldjobtracker}; \",\"hive.exec.parallell=true\",\"hive.mapred.mode=strict\",\"（1）必须有WHERE\",\"（2）对于ORDER BY 的语句必须有LIMIT\",\"（3）限制笛卡尔基的查询\"]},\"30\":{\"h\":\"MapReduce平均数计算\"},\"31\":{\"h\":\"1、建立三个文档\",\"t\":[\"image-20201206121627187\",\"image-20201206121650739\",\"image-20201206121711716\",\"上传 到hdfs\",\"image-20201206121829515\"]},\"32\":{\"h\":\"2、代码\",\"t\":[\"package cn.edu.bjut; import org.apache.hadoop.io.LongWritable; import org.apache.hadoop.io.Text; import org.apache.hadoop.mapreduce.lib.input.*; import org.apache.hadoop.mapreduce.lib.output.*; import org.apache.hadoop.mapreduce.Job; import org.apache.hadoop.mapreduce.Mapper; import org.apache.hadoop.mapreduce.Reducer; import java.io.IOException; import java.util.ArrayList; import java.util.List; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.Path; import org.apache.hadoop.io.IntWritable; public class AvgScore { public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> { @Override protected void map(LongWritable key, Text value, Mapper<LongWritable, Text, Text, IntWritable>.Context context) throws IOException, InterruptedException { String line = value.toString(); String[] nameAndScore = line.split(\\\" \\\"); List<String> list = new ArrayList<String>(2); for (String nameOrScore : nameAndScore) { if (!\\\"\\\".equals(nameOrScore)) { list.add(nameOrScore); } } context.write(new Text(list.get(0)), new IntWritable(Integer.parseInt(list.get(1)))); } } public static class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> { @Override protected void reduce(Text key, Iterable<IntWritable> values, Reducer<Text, IntWritable, Text, IntWritable>.Context context) throws IOException, InterruptedException { int sum = 0; int count = 0; for (IntWritable value : values) { sum += Integer.parseInt(value.toString()); count++; } int average = sum / count; context.write(key, new IntWritable(average)); } } public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException { Configuration conf = new Configuration(); conf.set(\\\"fs.defaultFS\\\", \\\"hdfs://localhost:9000\\\"); String[] othersArgs = new String[] {\\\"/mapreduce/inputavg\\\",\\\"/mapreduce/outputavg\\\"}; if(othersArgs.length != 2) { System.err.println(\\\"Usage:Avgscore<int><out>\\\"); System.exit(2); } Job job = Job.getInstance(conf, \\\"Avgscore\\\"); job.setJarByClass(AvgScore.class); job.setMapperClass(Map.class); job.setReducerClass(Reduce.class); job.setOutputKeyClass(Text.class); job.setOutputValueClass(IntWritable.class); job.setInputFormatClass(TextInputFormat.class); job.setOutputFormatClass(TextOutputFormat.class); FileInputFormat.addInputPath(job, new Path(othersArgs[0])); FileOutputFormat.setOutputPath(job, new Path(othersArgs[1])); System.exit(job.waitForCompletion(true) ? 0 : 1); } } \",\"3、查看结果\",\"image-20201206122126739\"]},\"33\":{\"h\":\"MapReduce概述\",\"t\":[\"​ MapReduce采取了分而治之的基本思想，将一个大的作业分解成若干小的任务，提交给集群的多台计算机处理，这样就大大提高了完成作业的效率。\",\"​ 在Hadoop平台上，MapReduce框架负责处理并行编程中分布式存储、工作调度、负载均衡、容错及网络通信等复杂工作，把处理过程高度抽象为两个函数：Map 和 Reduce。\",\"​ Map负责把作业分解成多个任务，Reduce负责把分解后多任务处理的结果汇总起来。\",\"其中：\",\"​ 执行MapReduce作业的机器角色由两个：JobTracker 和 TaskTracker\",\"​ （1）JobTracker用于调度作业（一个集群只有一个JobTracker）\",\"​ （2）TaskTracker用于跟踪任务的执行情况。\",\"​ 统计所有文件中每一个单词出现的次数（频次）。\",\"​ \",\"​ 所做的操作：\"]},\"34\":{\"h\":\"（1）拆分输入数据\",\"t\":[\"​ 拆分数据 属于 Map 的输入阶段，系统会逐行读取文件的数据，得到一系列的（key/value）\",\"image-20191216173747383\",\"​ 注意：如果只有一个文件，且很小，系统只分配一个Split；\",\"​ 如果由多个文件，或者文件很大，多个Split\",\"​ 上图 0、12为偏移量（包含回车）即：H是第0个字符 B是第12个字符\"]},\"35\":{\"h\":\"（2）执行Map方法\",\"t\":[\"​ 分割完成后，系统会将分割好的（key/value）对交给用户定义的 Map 方法进行处理，生成新的（key/value）对\",\"​ \",\"​ 注意：后边这个1是个数\"]},\"36\":{\"h\":\"（3）排序与合并处理\",\"t\":[\"​ 系统得到Map方法输出的（key/value）对后，Mapper 会将它们按照 key 值进行排序，并执行Combine 过程，将 key 值相同的 value 值累加，得到 Mapper 的最终输出结果。\",\"即：先排序 后累加\"]},\"37\":{\"h\":\"（4）Reduce 阶段的排序与合并\",\"t\":[\"​ Reducer 先对从 Mapper 接收的数据进行排序，再交由用户自定义的 Reduce 方法进行处理，得到新的（key/value）对，并作为WordCount的结果输出\",\"image-20191216174856510\",\"简述上述过程：\"]},\"38\":{\"h\":\"（A）Map\"},\"39\":{\"h\":\"（a）Read：\",\"t\":[\"​ Map Task 通过用户编写的 RecordReader，从输入 InputSplit 中解析出多个（key/value）\"]},\"40\":{\"h\":\"（b）Map：\",\"t\":[\"​ 将解析出的（key/value）交给用户编写的Map函数处理，并产生一系列新的（key/value）\"]},\"41\":{\"h\":\"（c）Collect：\",\"t\":[\"​ 在用户编写的Map函数中，数据处理完成后，一般会调用OutputCollector.collect()收集结果。在该函数内部，它会将生成（key/value）分片（通过Partitioner），并写入一个环形内存缓冲区中。（感觉像\",\"，log4j2用的队列）\"]},\"42\":{\"h\":\"（d）Spill：\",\"t\":[\"​ 环形缓冲区填满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。将数据写入本地磁盘之前，先对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。\"]},\"43\":{\"h\":\"（e）Combine：\",\"t\":[\"​ 当所有数据处理完成后，Map Task 对所有临时文件进行一次合并，以确保最终只会生成一个数据文件\"]},\"44\":{\"h\":\"（B）Reduce\"},\"45\":{\"h\":\"（a）Shuffle：\",\"t\":[\"​ 也成为Copy。Reduce Task从各个Map Task上远程复制一片数据，并针对某一篇数据进行判断，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。\"]},\"46\":{\"h\":\"（b）Merge：\",\"t\":[\"​ 在远程复制的同时，Reduce Task启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或者磁盘上文件过多。（为啥要用两个线程呢？）\"]},\"47\":{\"h\":\"（c）Sort：\",\"t\":[\"​ 按照MapReduce语义，用户编写的 Reduce 函数输入数据时按 key 进行聚集的一组数据。（采用基于排序的策略）。各个Map Task实现了局部排序，Reduce Task只需对所有的数据进行一次归并排序即可。\"]},\"48\":{\"h\":\"（d）Reduce：\",\"t\":[\"​ Reduce Task将每组数据一次交给用户编写的 reduce()函数处理\"]},\"49\":{\"h\":\"（e）Write：\",\"t\":[\"​\\t\\treduce()函数将计算结果写到HDFS\"]},\"50\":{\"h\":\"Milvus向量数据库之以图搜图\",\"t\":[\"Milvus 创建于 2019 年，其目标只有一个：存储、索引和管理由深度神经网络和其他机器学习 （ML） 模型生成的大量嵌入向量。 作为专门设计用于处理对输入向量的查询的数据库，它能够以万亿级对向量进行索引。与现有关系数据库主要按照预定义模式处理结构化数据不同，Milvus 是自下而上设计的，用于处理从非结构化数据转换的嵌入向量。\",\"随着互联网的发展和发展，非结构化数据变得越来越普遍，包括电子邮件、论文、物联网传感器数据、Facebook 照片、蛋白质结构等等。为了使计算机理解和处理非结构化数据，使用嵌入技术将这些数据转换为向量。Milvus 存储并索引这些向量。Milvus 能够通过计算两个向量的相似距离来分析它们之间的相关性。如果两个嵌入向量非常相似，则意味着原始数据源也相似。 来源：https://milvus.io/docs/v2.1.x/overview.md\"]},\"51\":{\"h\":\"milvus支持的索引和指标\"},\"52\":{\"h\":\"索引：\",\"t\":[\"Milvus 支持的大多数向量指数类型都使用近似最近邻搜索 （ANNS），包括： FLAT：FLAT最适合在百万规模的小型数据集上寻求完全准确和准确的搜索结果的方案。 IVF_FLAT：IVF_FLAT是基于量化的索引，最适合在准确性和查询速度之间寻求理想平衡的场景。 IVF_SQ8：IVF_SQ8是基于量化的索引，最适合寻求显著减少磁盘、CPU 和 GPU 内存消耗的方案，因为这些资源非常有限。 IVF_PQ：IVF_PQ是基于量化的索引，最适合以准确性为代价寻求高查询速度的方案。 HNSW：HNSW 是基于图形的索引，最适合对搜索效率有较高要求的场景。 ANNOY：ANNOY是基于树的索引，最适合寻求高召回率的方案。\"]},\"53\":{\"h\":\"相似性指标：\",\"t\":[\"欧几里得距离（Euclidean distance、L2）：该指标通常用于计算机视觉（CV）领域。 内积（Inner product、IP）：该指标通常用于自然语言处理（NLP）领域。\"]},\"54\":{\"h\":\"广泛用于二进制嵌入的指标包括：\",\"t\":[\"Hamming：这个指标通常用于自然语言处理（NLP）领域。 Jaccard：这个指标通常用于分子相似性搜索领域。 Tanimoto：这个指标通常用于分子相似性搜索领域。 Superstructure：此指标通常用于搜索分子的类似上层结构。 Substructure：此指标通常用于搜索分子的类似子结构。\"]},\"55\":{\"h\":\"用途\",\"t\":[\"图像相似性搜索：图像可搜索并立即从海量数据库中返回最相似的图像。 视频相似性搜索：通过将关键帧转换为矢量，然后将结果输入 Milvus，可以近乎实时地搜索和推荐数十亿个视频。 音频相似性搜索：快速查询语音、音乐、音效等海量音频数据，并显示相似声音。 分子相似性搜索：对指定分子进行超快速的相似性搜索、子结构搜索或上层结构搜索。 推荐系统：根据用户行为和需求推荐信息或产品。 问答系统：交互式数字QA聊天机器人，可自动回答用户问题。 DNA序列分类：通过比较相似的DNA序列，在毫秒内准确梳理出基因的分类。 文本搜索引擎：通过将关键字与文本数据库进行比较，帮助用户找到他们正在寻找的信息。\"]},\"56\":{\"h\":\"1、单机版下载安装\",\"t\":[\"手动或使用以下命令下载并保存。milvus-standalone-docker-compose.ymldocker-compose.yml\",\"$ wget https：//github.com/milvus-io/milvus/releases/download/v2.1.4/milvus-standalone-docker-compose.yml -O docker-compose.yml \",\"启动 在与文件相同的目录中，通过运行以下命令启动 Milvus：docker-compose.yml\",\"sudo docker-compose up -d sudo docker-compose ps \",\"停止\",\"sudo docker-compuse down sudo rm -rf volumes \"]},\"57\":{\"h\":\"2、python版sdk\",\"t\":[\"pip install pymilvus==2.1.3 \"]},\"58\":{\"h\":\"3、示例\",\"t\":[\"from pymilvus import ( connections, utility, FieldSchema, CollectionSchema, DataType, Collection, ) # 建立连接 connections.connect(\\\"default\\\", host=\\\"localhost\\\", port=\\\"19530\\\") # 创建集合 fields = [ FieldSchema(name=\\\"pk\\\", dtype=DataType.INT64, is_primary=True, auto_id=False), FieldSchema(name=\\\"random\\\", dtype=DataType.DOUBLE), FieldSchema(name=\\\"embeddings\\\", dtype=DataType.FLOAT_VECTOR, dim=8) ] schema = CollectionSchema(fields, \\\"hello_milvus is the simplest demo to introduce the APIs\\\") hello_milvus = Collection(\\\"hello_milvus\\\", schema) # 向集合中插入向量 import random entities = [ [i for i in range(3000)], # field pk [float(random.randrange(-20, -10)) for _ in range(3000)], # field random [[random.random() for _ in range(8)] for _ in range(3000)], # field embeddings ] insert_result = hello_milvus.insert(entities) # 在实体上构建索引 index = { \\\"index_type\\\": \\\"IVF_FLAT\\\", \\\"metric_type\\\": \\\"L2\\\", \\\"params\\\": {\\\"nlist\\\": 128}, } hello_milvus.create_index(\\\"embeddings\\\", index) # 将集合加载到内存并执行向量相似性搜索 hello_milvus.load() vectors_to_search = entities[-1][-2:] search_params = { \\\"metric_type\\\": \\\"L2\\\", \\\"params\\\": {\\\"nprobe\\\": 10}, } result = hello_milvus.search(vectors_to_search, \\\"embeddings\\\", search_params, limit=3, output_fields=[\\\"random\\\"]) # 执行矢量查询： result = hello_milvus.query(expr=\\\"random > -14\\\", output_fields=[\\\"random\\\", \\\"embeddings\\\"]) # 执行混合搜索： result = hello_milvus.search(vectors_to_search, \\\"embeddings\\\", search_params, limit=3, expr=\\\"random > -12\\\", output_fields=[\\\"random\\\"]) # 按主键删除实体： expr = f\\\"pk in [{ids[0]}, {ids[1]}]\\\" hello_milvus.delete(expr) # 删除集合： utility.drop_collection(\\\"hello_milvus\\\") \",\"以图搜图的含义是用一张图片搜索与其相似的图片并进行展示，训练集用来训练，每一张图片用VGG16提取特征值并存入milvus数据库。存储VGG16对每张图进行模型建立，将每张图的数据进行存储模型数据，并存储当前图片的路径 当使用web页面显示搜图网页，用户点击文件上传之后,走相同的VGG16模型建立，从数据库中搜索最相似的图片。当用户拿测试集图片进行比对，会走相同的VGG16模型提取特征值，并利用欧式距离计算相似度。\",\"项目完整地址：https://gitee.com/zhengtianqi/learn-samples/tree/master/pic-search\"]},\"59\":{\"h\":\"1、建立图片模型，采用VGG16模型\",\"t\":[\"# -*- coding: utf-8 -*- import keras import numpy as np from numpy import linalg as LA from keras.applications.vgg16 import VGG16 from keras.preprocessing import image from keras.applications.vgg16 import preprocess_input class VGGNet: def __init__(self): keras.backend.clear_session() self.input_shape = (224, 224, 3) self.weight = 'imagenet' self.pooling = 'max' self.model = VGG16(weights=self.weight, input_shape=(self.input_shape[0], self.input_shape[1], self.input_shape[2]), pooling=self.pooling, include_top=False) self.model.predict(np.zeros((1, 224, 224, 3))) ''' Use vgg16 model to extract features Output normalized feature vector ''' def extract_feat(self, img_path): img = image.image_utils.load_img(img_path, target_size=(self.input_shape[0], self.input_shape[1])) img = image.image_utils.img_to_array(img) img = np.expand_dims(img, axis=0) img = preprocess_input(img) feat = self.model.predict(img) norm_feat = feat[0] / LA.norm(feat[0]) return norm_feat \"]},\"60\":{\"h\":\"2、建立集合实体\",\"t\":[\"from pymilvus import CollectionSchema, FieldSchema, DataType from pymilvus import Collection from pymilvus import utility from utils.Connect import connect pic_id = FieldSchema( name=\\\"pic_id\\\", dtype=DataType.INT64, is_primary=True, ) pic_name = FieldSchema( name=\\\"pic_name\\\", dtype=DataType.VARCHAR, max_length=1200, ) pic_url = FieldSchema( name=\\\"pic_url\\\", dtype=DataType.VARCHAR, max_length=1200, ) pic_price = FieldSchema( name=\\\"pic_price\\\", dtype=DataType.VARCHAR, max_length=1200, ) pic_vector = FieldSchema( name=\\\"pic_vector\\\", dtype=DataType.FLOAT_VECTOR, dim=512 ) schema = CollectionSchema( fields=[pic_id, pic_name, pic_url, pic_price, pic_vector], description=\\\"Test pic search\\\" ) collection_name = \\\"pic\\\" def create_collection(): connect() if utility.has_collection(collection_name): utility.drop_collection(collection_name) collection = Collection( name=collection_name, schema=schema, using='default', shards_num=2, ) collection.release() \"]},\"61\":{\"h\":\"3、训练数据\",\"t\":[\"import os from time import * from PIL import Image as Im from dao.PicDao import insertBatch from service.create_collection import create_collection from utils.VggNet import VGGNet def IsValidImage(pathfile): bValid = True try: Im.open(pathfile).verify() except: bValid = False return bValid def train(url): begin_time = time() vgg = VGGNet() create_collection() data = [] pic_id = [] pic_name = [] pic_url = [] pic_price = [] pic_vector = [] cnt = 1 for root, dirs, files in os.walk(url): for file in files: path = os.path.join(root, file) if IsValidImage(path): vector = vgg.extract_feat(path) pic_id.append(cnt) pic_name.append(file) pic_url.append(path) pic_price.append(\\\"100\\\") pic_vector.append(vector) cnt += 1 data.insert(0, pic_id) data.insert(1, pic_name) data.insert(2, pic_url) data.insert(3, pic_price) data.insert(4, pic_vector) insertBatch(data) end_time = time() run_time = end_time - begin_time print('该循环程序运行时间：', run_time) \"]},\"62\":{\"h\":\"4、搜索相似图片\",\"t\":[\"from PreApp import base_dir from dao.PicDao import selectByIds from service.create_collection import collection_name, schema from utils.Connect import connect from utils.VggNet import VGGNet from pymilvus import Collection def search_pic(path): vgg = VGGNet() print(path) test_vectors = vgg.extract_feat(path) # 涉及的向量6个数 search_params = {\\\"metric_type\\\": \\\"L2\\\", \\\"params\\\": {\\\"nprobe\\\": 10}} connect() collection = Collection(collection_name) collection.load() results = collection.search( data=[test_vectors], anns_field=\\\"pic_vector\\\", param=search_params, limit=10, expr=None, consistency_level=\\\"Strong\\\" ) collection.release() result = [] ids = [] for t in results[0]: dict = {} dict['id'] = t.id dict['distance'] = t.distance result.append(dict) ids.append(str(t.id)) res = selectByIds(ids) for t in result: for s in res: if s['pic_id'] == t['id']: t['name'] = s['pic_name'] t['pic_price'] = s['pic_price'] t['pic_url'] = s['pic_name'] return result if __name__ == '__main__': search_pic(\\\"E:\\\\zhengtianqi\\\\git\\\\search-for-pictures\\\\data2\\\\ILSVRC2012_img_val\\\\cat.91.jpg\\\") \",\"结果：\"]},\"63\":{\"h\":\"MinIO单机安装以及使用\",\"t\":[\"一、简介\",\"​ MinIO 是在 GNU Affero 通用公共许可证 v3.0 下发布的高性能对象存储。它与 Amazon S3 云存储服务 API 兼容。使用 MinIO 为机器学习、分析和应用程序数据工作负载构建高性能基础架构。\",\"相关文档：\",\"官方文档：https://docs.min.io/docs/minio-quickstart-guide.html\",\"官方文档（中文）：http://docs.minio.org.cn/docs/master/minio-monitoring-guide\",\"官方首页（中文）http://www.minio.org.cn/\",\"二、单机版安装\",\"1、搜索镜像\",\"docker search minio \",\"2、拉取镜像\",\"docker pull minio/minio \",\"3、启动与安装镜像\",\"docker run \\\\ -p 9000:9000 \\\\ -p 9001:9001 \\\\ -d --restart=always \\\\ --name minio1 \\\\ -v /home/environment/minio/data:/data \\\\ -v /home/environment/minio/config:/root/.minio \\\\ --privileged=true \\\\ minio/minio server /data --console-address \\\":9001\\\" \",\"-it 表示运行参数 -p 表示暴露端口 -d 表示后台运行 -v 卷挂载（容器到主机的映射，避免存容器中丢失数据）\",\"9001是管理页，默认账号密码均为minioadmin，也可以设置密码 9000\",\"-e \\\"MINIO_ACCESS_KEY=账号\\\" \\\\ -e \\\"MINIO_SECRET_KEY=密码\\\" \\\\ \",\"4、查看运行镜像\",\"docker ps \",\"三、JAVA API demo\",\"1、引入依赖\",\"<dependency> <groupId>com.squareup.okhttp3</groupId> <artifactId>okhttp</artifactId> <version>4.8.1</version> </dependency> <dependency> <groupId>io.minio</groupId> <artifactId>minio</artifactId> <version>8.3.0</version> <exclusions> <exclusion> <groupId>com.squareup.okhttp3</groupId> <artifactId>okhttp</artifactId> </exclusion> </exclusions> </dependency> \",\"minio强依赖于okhttp3，低版本okhttp3会报错：https://blog.csdn.net/u014698745/article/details/122025869\",\"若剔除所有的okhttp3还是不能运行，则将minio版本降低。\",\"2、MinIO客户端\",\"import io.minio.*; import io.minio.http.Method; import io.minio.messages.Bucket; import io.minio.messages.Item; import org.apache.commons.lang3.StringUtils; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.stereotype.Component; import java.io.File; import java.io.FileInputStream; import java.io.InputStream; import java.net.URLEncoder; import java.util.ArrayList; import java.util.List; import java.util.concurrent.TimeUnit; public class S3Utils { private static final Logger logger = LoggerFactory.getLogger(S3Utils.class); private static MinioClient s3Client; static { try { s3Client = MinioClient.builder() .endpoint(SdkConstant.endpoint) .credentials(SdkConstant.s3AccessKey, SdkConstant.s3AccessSecret) .build(); } catch (Exception e) { logger.error(\\\"初始化s3Client时出错!\\\", e); } if (null == s3Client) { logger.error(\\\"创建s3Client时出错!\\\"); } } /** * 创建一个桶 */ public static void createBucket(String bucket) throws Exception { boolean found = s3Client.bucketExists(BucketExistsArgs.builder().bucket(bucket).build()); if (!found) { s3Client.makeBucket(MakeBucketArgs.builder().bucket(bucket).build()); } } /** * 上传一个文件 */ public static void uploadFile(InputStream stream, String bucket, String objectName) throws Exception { s3Client.putObject(PutObjectArgs.builder().bucket(bucket).object(objectName) .stream(stream, -1, 10485760).build()); } /** * 上传一个文件,并返回文件url */ public static String uploadFileReturnUrl(InputStream stream, String bucket, String objectName) throws Exception { s3Client.putObject(PutObjectArgs.builder().bucket(bucket).object(objectName) .stream(stream, -1, 10485760).build()); String url = s3Client.getPresignedObjectUrl( GetPresignedObjectUrlArgs.builder() .method(Method.GET) .bucket(bucket) .object(objectName) .expiry(7, TimeUnit.DAYS) .build()); return StringUtils.split(url, \\\"?\\\")[0]; } /** * 列出所有的桶 */ public static List<String> listBuckets() throws Exception { List<Bucket> list = s3Client.listBuckets(); List<String> names = new ArrayList<>(); list.forEach(b -> { names.add(b.name()); }); return names; } /** * 列出一个桶中的所有文件和目录 */ public static List<S3FileInfo> listFiles(String bucket) throws Exception { Iterable<Result<Item>> results = s3Client.listObjects( ListObjectsArgs.builder().bucket(bucket).recursive(true).build()); List<S3FileInfo> infos = new ArrayList<>(); results.forEach(r -> { S3FileInfo info = new S3FileInfo(); try { Item item = r.get(); info.setFileName(item.objectName()); info.setDirectory(item.isDir()); infos.add(info); } catch (Exception e) { e.printStackTrace(); } }); return infos; } /** * 下载一个文件 */ public static InputStream download(String bucket, String objectName) throws Exception { InputStream stream = s3Client.getObject( GetObjectArgs.builder().bucket(bucket).object(objectName).build()); return stream; } /** * 删除一个桶 */ public static void deleteBucket(String bucket) throws Exception { s3Client.removeBucket(RemoveBucketArgs.builder().bucket(bucket).build()); } /** * 删除一个对象 */ public static void deleteObject(String bucket, String objectName) throws Exception { s3Client.removeObject(RemoveObjectArgs.builder().bucket(bucket).object(objectName).build()); } public static void main(String[] args) throws Exception { S3Utils.createBucket(SdkConstant.bucketName); File file = new File(\\\"C:\\\\\\\\Users\\\\\\\\27049\\\\\\\\Desktop\\\\\\\\minio docker.txt\\\"); InputStream inputStream = new FileInputStream(file); System.out.println(S3Utils.uploadFileReturnUrl(inputStream, SdkConstant.bucketName, \\\"minio docker.txt\\\")); } } \",\"其中：S3FileInfo中只有两个字段，fileName和directory\",\"创建连接的参数为：\",\"SdkConstant.s3AccessKey 用户名\",\"SdkConstant.s3AccessSecret 密码\",\"SdkConstant.endpoint MinIO所在地址（ip:9000）\",\"存储位置：指定的data目录/桶名/...文件夹名.../文件名\",\"getPresignedObjectUrl()返回的url最大支持7天，若想永久使用，则配置\",\"https://blog.csdn.net/instanceof_zjl/article/details/109601131?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_ecpm_v1~rank_v31_ecpm-2-109601131.pc_agg_new_rank&utm_term=java+设置+minio永久访问链接&spm=1000.2123.3001.4430\",\"image-20220322221741703\",\"3、AmazonS3客户端（DLC）\",\"<dependency> <artifactId>aws-java-sdk-s3</artifactId> <groupId>com.amazonaws</groupId> <optional>false</optional> <version>1.11.257</version> </dependency> \",\"import com.amazonaws.auth.AWSStaticCredentialsProvider; import com.amazonaws.auth.BasicAWSCredentials; import com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration; import com.amazonaws.services.s3.AmazonS3; import com.amazonaws.services.s3.AmazonS3ClientBuilder; import com.amazonaws.services.s3.model.ObjectListing; import com.amazonaws.services.s3.model.S3ObjectSummary; import java.net.URL; import java.util.ArrayList; import java.util.Calendar; import java.util.Date; import java.util.List; public class AWSS3Util { private static String accessKey = \\\"\\\"; private static String secretKey = \\\"\\\"; private static String endpointUrl = \\\"\\\"; private volatile static AWSS3Util awsS3Util; private volatile static AmazonS3 s3; private static String region = \\\"default\\\"; private AWSS3Util() { } /** * 获取带签名认证文件的url */ public URL getPresignedUrl(String bucket, String key) { URL url = s3.generatePresignedUrl(bucket, key, getDateAfter(1)); return url; } /** * 获取文件的url */ public URL getUrl(String bucket, String key) { URL url = s3.getUrl(bucket, key); return url; } /** * 获取指定bucket内所有文件名 * * @param bucket */ public List<String> getFileNames(String bucket) { List<String> fileNames = new ArrayList<>(); ObjectListing objectListing = s3.listObjects(bucket); List<S3ObjectSummary> objectSummaries = objectListing.getObjectSummaries(); for (S3ObjectSummary s3ObjectSummary : objectSummaries) { String name = s3ObjectSummary.getKey(); fileNames.add(name.substring(name.lastIndexOf(\\\"/\\\") + 1)); } return fileNames; } /** * 获取指定路径前缀的bucket内所有文件名 * * @param bucket */ public List<String> getFiles(String bucket,String prefix) { List<String> files = new ArrayList<>(); ObjectListing objectListing = s3.listObjects(bucket,prefix); List<S3ObjectSummary> objectSummaries = objectListing.getObjectSummaries(); for (S3ObjectSummary s3ObjectSummary : objectSummaries) { String name = s3ObjectSummary.getKey(); files.add(name.substring(name.lastIndexOf(\\\"/\\\") + 1)); } return files; } public void deleteObject(String bucket, String key) { s3.deleteObject(bucket, key); } public static AWSS3Util getInstance() { if (awsS3Util == null) { synchronized (AWSS3Util.class) { if (awsS3Util == null) { awsS3Util = new AWSS3Util(); s3 = AmazonS3ClientBuilder.standard() .withCredentials(new AWSStaticCredentialsProvider(new BasicAWSCredentials(accessKey, secretKey))) .withEndpointConfiguration(new EndpointConfiguration(endpointUrl, region)).withPathStyleAccessEnabled(true) .build(); } } } return awsS3Util; } /** * 得到几天后的时间 * * @param day * @return */ private Date getDateAfter(int day) { Date date = new Date(); Calendar now = Calendar.getInstance(); now.setTime(date); now.set(Calendar.DATE, now.get(Calendar.DATE) + day); return now.getTime(); } } \"]},\"64\":{\"h\":\"mybatis-plus插件统一处理createTime，createBy，updateBy\",\"t\":[\"一、添加注解 先添加注解，有四种方式：\",\"public enum FieldFill { DEFAULT, INSERT, UPDATE, INSERT_UPDATE; } \",\"示例：\",\"public class Demo { @ApiModelProperty(value = \\\"创建者\\\", required = false) @TableField(value = \\\"create_by\\\", fill = FieldFill.INSERT) private String createBy; @ApiModelProperty(value = \\\"创建时间\\\", required = false) @TableField(value = \\\"create_time\\\", fill = FieldFill.INSERT) private Date createTime; @ApiModelProperty(value = \\\"更新者\\\", required = false) @TableField(value = \\\"update_by\\\", fill = FieldFill.INSERT_UPDATE) private String updateBy; @ApiModelProperty(value = \\\"更新时间\\\", required = false) @TableField(value = \\\"update_time\\\", fill = FieldFill.INSERT_UPDATE) private Date updateTime; } \",\"二、配置mybatis-plus\",\"@EnableTransactionManagement(proxyTargetClass = true) @Configuration public class MybatisPlusConfig { @Bean public MybatisPlusInterceptor mybatisPlusInterceptor() { MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor(); // 分页插件 interceptor.addInnerInterceptor(paginationInnerInterceptor()); // 乐观锁插件 interceptor.addInnerInterceptor(optimisticLockerInnerInterceptor()); // 阻断插件 interceptor.addInnerInterceptor(blockAttackInnerInterceptor()); return interceptor; } // -------------------- start -------------------------- // 该处配置自动填充createTime，createBy，updateBy @Bean public MetaObjectHandler metaObjectHandler(){ return new MetaObjectHandlerImpl(); } // -------------------- end ----------------------------- /** * 分页插件，自动识别数据库类型 https://baomidou.com/guide/interceptor-pagination.html */ public PaginationInnerInterceptor paginationInnerInterceptor() { PaginationInnerInterceptor paginationInnerInterceptor = new PaginationInnerInterceptor(); // 设置数据库类型为mysql paginationInnerInterceptor.setDbType(DbType.MYSQL); // 设置最大单页限制数量，默认 500 条，-1 不受限制 paginationInnerInterceptor.setMaxLimit(-1L); return paginationInnerInterceptor; } /** * 乐观锁插件 https://baomidou.com/guide/interceptor-optimistic-locker.html */ public OptimisticLockerInnerInterceptor optimisticLockerInnerInterceptor() { return new OptimisticLockerInnerInterceptor(); } /** * 如果是对全表的删除或更新操作，就会终止该操作 https://baomidou.com/guide/interceptor-block-attack.html */ public BlockAttackInnerInterceptor blockAttackInnerInterceptor() { return new BlockAttackInnerInterceptor(); } } \",\"三、处理的实现\",\"public class MetaObjectHandlerImpl implements MetaObjectHandler { @Override public void insertFill(MetaObject metaObject) { // 根据名称设置属性值 this.strictInsertFill(metaObject, \\\"createTime\\\", Date.class, new Date()); this.strictInsertFill(metaObject, \\\"updateTime\\\", Date.class, new Date()); // 获取当前的用户 LoginUser loginUser = SecurityUtils.getLoginUser(); this.strictInsertFill(metaObject, \\\"createBy\\\", String.class, loginUser.getUsername()); this.strictInsertFill(metaObject, \\\"updateBy\\\", String.class, loginUser.getUsername()); } @Override public void updateFill(MetaObject metaObject) { this.strictInsertFill(metaObject, \\\"updateTime\\\", Date.class, new Date()); // 获取当前的用户 LoginUser loginUser = SecurityUtils.getLoginUser(); this.strictInsertFill(metaObject, \\\"updateBy\\\", String.class, loginUser.getUsername()); } } \"]},\"65\":{\"h\":\"mysql事务\",\"t\":[\"​ 一个数据库事务通常包含对数据库进行读或写的一个操作序列：\",\"​ （1）为数据库操作提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。 ​ （2）当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。\",\"​ 并非任意的对数据库的操作序列都是数据库事务。事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。\",\"原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。 一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。 隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。 持久性（Durability）：一个事务一旦提交，他对数据库的修改应该永久保存在数据库中。 \"]},\"66\":{\"h\":\"举例：\",\"t\":[\"​ 用一个常用的“A账户向B账号汇钱”的例子来说明如何通过数据库事务保证数据的准确性和完整性。熟悉关系型数据库事务的都知道从帐号A到帐号B需要6个操作：\",\"1、从A账号中把余额读出来（500）。 2、对A账号做减法操作（500-100）。 3、把结果写回A账号中（400）。 4、从B账号中把余额读出来（500）。 5、对B账号做加法操作（500+100）。 6、把结果写回B账号中（600）。 \",\"原子性： 保证1-6所有过程要么都执行，要么都不执行。一旦在执行某一步骤的过程中发生问题，就需要执行回滚操作。 假如执行到第五步的时候，B账户突然不可用（比如被注销），那么之前的所有操作都应该回滚到执行事务之前的状态。\",\"一致性 在转账之前，A和B的账户中共有500+500=1000元钱。在转账之后，A和B的账户中共有400+600=1000元。也就是说，数据的状态在执行该事务操作之后从一个状态改变到了另外一个状态。同时一致性还能保证账户余额不会变成负数等。\",\"隔离性 在A向B转账的整个过程中，只要事务还没有提交（commit），查询A账户和B账户的时候，两个账户里面的钱的数量都不会有变化。 如果在A给B转账的同时，有另外一个事务执行了C给B转账的操作，那么当两个事务都结束的时候，B账户里面的钱应该是A转给B的钱加上C转给B的钱再加上自己原有的钱。\",\"持久性 一旦转账成功（事务提交），两个账户的里面的钱就会真的发生变化（会把数据写入数据库做持久化保存）\"]},\"67\":{\"h\":\"原子性与隔离行\",\"t\":[\"​ 一致性与原子性是密切相关的,原子性的破坏可能导致数据库的不一致，数据的一致性问题并不都和原子性有关。 比如刚刚的例子，在第五步的时候，对B账户做加法时只加了50元。那么该过程可以符合原子性，但是数据的一致性就出现了问题。\",\"因此，事务的原子性与一致性缺一不可。\",\"借鉴于：http://www.hollischuang.com/archives/898\"]},\"68\":{\"h\":\"（1）read uncommited\",\"t\":[\"​ 是最低的事务隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。\"]},\"69\":{\"h\":\"（2）read commited\",\"t\":[\"​ 保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。\"]},\"70\":{\"h\":\"（3）repeatable read\",\"t\":[\"​ 这种事务隔离级别可以防止脏读，不可重复读。但是可能会出现幻象读。它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生（不可重复读）。\"]},\"71\":{\"h\":\"（4）serializable\",\"t\":[\"​ 这是花费最高代价但最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读之外，还避免了幻象读\"]},\"72\":{\"h\":\"（5）脏读、不可重复读、幻象\",\"t\":[\"​ a.脏读：指当一个事务正字访问数据，并且对数据进行了修改，而这种数据还没有提交到数据库中，这时，另外一个事务也访问这个数据，然后使用了这个数据。因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据。依据脏数据所做的操作肯能是不正确的。 ​ b.不可重复读：指在一个事务内，多次读同一数据。在这个事务还没有执行结束，另外一个事务也访问该同一数据，那么在第一个事务中的两次读取数据之间，由于第二个事务的修改第一个事务两次读到的数据可能是不一样的，这样就发生了在一个事物内两次连续读到的数据是不一样的，这种情况被称为是不可重复读。 ​ c.幻象读：一个事务先后读取一个范围的记录，但两次读取的纪录数不同，我们称之为幻象读（两次执行同一条 select 语句会出现不同的结果，第二次读会增加一数据行，并没有说这两次执行是在同一个事务中）\",\"​ Spring并不直接管理事务，而是提供了多种事务管理器。事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。Spring定义了七种传播行为：\",\"image-20200721113313947\"]},\"73\":{\"h\":\"mysql排序\",\"t\":[\"image-20191120204232822\",\"，就是出现问题\",\"image-20191120204352223\",\"​ 这是因为我们在选取排序规则时，选择的不是gbk。所以想要正确的排序，需要我们了解我们选取字段的排序规则。\",\"，ci是不区分大小写\",\"image-20191120204623652\",\"这样的话，结果：\",\"image-20191120204719806\",\"image-20191120205015864\",\"​ 这个也是gbk的排序效果，但是我们想做到中英混搭的效果，我认为可以自已在mysql编译前放进自己的排序规则，\",\"先看一下效果：\",\"image-20191120205433980\",\"我们sql用引入了一个函数GET_FIRST_PINYIN_CHAR\",\"SELECT a.id, a.username FROM test AS a ORDER BY GET_FIRST_PINYIN_CHAR(a.username) \",\"这个函数需要在创建表之后定义，如下：\",\"DROP FUNCTION IF EXISTS `GET_FIRST_PINYIN_CHAR`; CREATE FUNCTION `GET_FIRST_PINYIN_CHAR`(PARAM VARCHAR(255)) RETURNS VARCHAR(2) CHARSET utf8 BEGIN DECLARE V_RETURN VARCHAR(255); DECLARE V_FIRST_CHAR VARCHAR(2); SET V_FIRST_CHAR = UPPER(LEFT(PARAM,1)); SET V_RETURN = V_FIRST_CHAR; IF LENGTH( V_FIRST_CHAR)<>CHARACTER_LENGTH(V_FIRST_CHAR) THEN SET V_RETURN = ELT(INTERVAL(CONV(HEX(LEFT(CONVERT(PARAM USING gbk),1)),16,10), 0xB0A1,0xB0C5,0xB2C1,0xB4EE,0xB6EA,0xB7A2,0xB8C1,0xB9FE,0xBBF7, 0xBFA6,0xC0AC,0xC2E8,0xC4C3,0xC5B6,0xC5BE,0xC6DA,0xC8BB, 0xC8F6,0xCBFA,0xCDDA,0xCEF4,0xD1B9,0xD4D1), 'A','B','C','D','E','F','G','H','J','K','L','M','N','O','P','Q','R','S','T','W','X','Y','Z'); END IF; RETURN V_RETURN; END \",\"这个函数创建成功后，会显示ok。有些时候不成功，可能是没有打开创建函数的权限。\",\"需要在mysql配置文件中打开 log_bin_trust_function_creators\"]},\"74\":{\"h\":\"mysql突然变慢排查\",\"t\":[\"show full processlist; \",\"show global variables like \\\"global max_allowed_packet\\\"; \",\"select * from information_schema.INNODB_TRX; \",\"show status like 'thread%'; \",\"show variables like 'slow_query%'; \",\"image-20211014175135307\",\"显示已开启慢sql的日志：去服务器上查询慢sql\",\"tail -n 100 /dev/vdc1/home/mysql/3306/log/slow.log \",\"#1.查找错误日志位置 grep log_error /etc/my.cnf > log_error = /dev/vdc1/home/mysql/3306/log/error.log # 数据库错误日志文件 #2.打开错误日志进行查看 tail -n 100 /dev/vdc1/home/mysql/3306/log/error.log \",\"mysql5.7.34-log 简单的配置文件注释\",\"[root@i-jp6npxh6 ~]# vi /etc/my.cnf port = 3306 # MySQL监听端口 basedir = /usr/local/mysql # MySQL安装根目录 datadir = /dev/vdc1/home/mysql/3306/data # MySQL数据文件所在位置 tmpdir = /dev/vdc1/home/mysql/3306/tmp # 临时目录，比如load data infile会用到 socket = /dev/vdc1/home/mysql/3306/tmp/mysql.sock # 为MySQL客户端程序和服务器之间的本地通讯指定一个套接字文件 pid-file = /dev/vdc1/home/mysql/3306/log/mysql.pid # pid文件所在目录 skip_name_resolve = 1 # 只能用IP地址检查客户端的登录，不用主机名 character-set-server = utf8mb4 # 数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节） transaction_isolation = READ-COMMITTED # 事务隔离级别，默认为可重复读，MySQL默认可重复读级别 collation-server = utf8mb4_general_ci # 数据库字符集对应一些排序等规则，注意要和character-set-server对应 init_connect='SET NAMES utf8mb4' # 设置client连接mysql时的字符集,防止乱码 lower_case_table_names = 1 # 是否对sql语句大小写敏感，1表示不敏感 max_connections = 400 # 最大连接数 max_connect_errors = 1000 # 最大错误连接数 explicit_defaults_for_timestamp = true # TIMESTAMP如果没有显示声明NOT NULL，允许NULL值 max_allowed_packet = 128M # SQL数据包发送的大小，如果有BLOB对象建议修改成1G interactive_timeout = 1800 # MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭 wait_timeout = 1800 # MySQL默认的wait_timeout值为8个小时, interactive_timeout参数需要同时配置才能生效 tmp_table_size = 16M # 内部内存临时表的最大值 ，设置成128M；比如大数据量的group by ,order by时可能用到临时表；超过了这个值将写入磁盘，系统IO压力增大 max_heap_table_size = 128M # 定义了用户可以创建的内存表(memory table)的大小 query_cache_size = 0 # 禁用mysql的缓存查询结果集功能；后期根据业务情况测试决定是否开启；大部分情况下关闭下面两项 query_cache_type = 0 # 用户进程分配到的内存设置，每个session将会分配参数设置的内存大小 read_buffer_size = 2M # MySQL读入缓冲区大小。对表进行顺序扫描的请求将分配一个读入缓冲区，MySQL会为它分配一段内存缓冲区。 read_rnd_buffer_size = 8M # MySQL的随机读缓冲区大小 sort_buffer_size = 8M # MySQL执行排序使用的缓冲大小 binlog_cache_size = 1M # 一个事务，在没有提交的时候，产生的日志，记录到Cache中；等到事务提交需要提交的时候，则把日志持久化到磁盘。默认binlog_cache_size大小32K back_log = 130 # 在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中；官方建议back_log = 50 + (max_connections / 5),封顶数为900 # 日志设置 log_error = /dev/vdc1/home/mysql/3306/log/error.log # 数据库错误日志文件 slow_query_log = 1 # 慢查询sql日志设置 long_query_time = 1 # 慢查询时间；超过1秒则为慢查询 slow_query_log_file = /dev/vdc1/home/mysql/3306/log/slow.log # 慢查询日志文件 log_queries_not_using_indexes = 1 # 检查未使用到索引的sql log_throttle_queries_not_using_indexes = 5 # 用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数。该值默认为0，表示没有限制 min_examined_row_limit = 100 # 检索的行数必须达到此值才可被记为慢查询，查询检查返回少于该参数指定行的SQL不被记录到慢查询日志 expire_logs_days = 5 # MySQL binlog日志文件保存的过期时间，过期后自动删除 # 主从复制设置 # log-bin = mysql-bin # 开启mysql binlog功能 # binlog_format = ROW # binlog记录内容的方式，记录被操作的每一行 # binlog_row_image = minimal # 对于binlog_format = ROW模式时，减少记录日志的内容，只记录受影响的列 # Innodb设置 innodb_file_per_table=1 innodb_open_files = 500 # 限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。这个值默认是300 innodb_buffer_pool_size = 64M # InnoDB使用一个缓冲池来保存索引和原始数据，一般设置物理存储的60% ~ 70%；这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少 innodb_log_buffer_size = 2M # 此参数确定写日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间 innodb_flush_method = O_DIRECT # O_DIRECT减少操作系统级别VFS的缓存和Innodb本身的buffer缓存之间的冲突 innodb_write_io_threads = 4 # CPU多核处理能力设置，根据读，写比例进行调整 innodb_read_io_threads = 4 innodb_lock_wait_timeout = 120 # InnoDB事务在被回滚之前可以等待一个锁定的超时秒数。InnoDB在它自己的锁定表中自动检测事务死锁并且回滚事务。InnoDB用LOCK TABLES语句注意到锁定设置。默认值是50秒 innodb_log_file_size = 32M # 此参数确定数据日志文件的大小，更大的设置可以提高性能，但也会增加恢复故障数据库所需的时间 \"]},\"75\":{\"h\":\"mysql简单主从搭建过程\",\"t\":[\"MySql集群简介-告诉你为什么要用集群部署 - 掘金 (juejin.cn)\",\"MySQL高可用集群方案 - 知乎 (zhihu.com)\",\"MYSQL集群简介及对比 - 掘金 (juejin.cn)\",\"MySQL八大集群架构的优点和缺点总结\",\"一台作为主服务器，一台作为从服务器，主服务器进行写操作，从服务器进行读操作。\",\"所有机器\"]},\"76\":{\"h\":\"step1、删除自带mariadb\",\"t\":[\"rpm -qa | grep mariadb rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64 \"]},\"77\":{\"h\":\"step2、安装mysql\",\"t\":[\"cd /data/environment tar -xvf mysql-5.7.37-1.el7.x86_64.rpm-bundle.tar rpm -ivh mysql-community-common-5.7.37-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-5.7.37-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.37-1.el7.x86_64.rpm rpm -ivh mysql-community-server-5.7.37-1.el7.x86_64.rpm \"]},\"78\":{\"h\":\"step3、启动并创建用户\",\"t\":[\"systemctl start mysqld systemctl enable mysqld cat /var/log/mysqld.log | grep password mysql -u root -p use mysql; alter user 'root'@'localhost' identified by 'zheng&test123'; select host from user where user='root'; update user set host = '%' where user ='root'; flush privileges; exit; \"]},\"79\":{\"h\":\"step4、my.cnf配置\",\"t\":[\"vim /etc/my.cnf 主配置 server-id=1 log-bin=mysql-bin log-slave-updates=1 binlog-do-db=repl #需要同步的数据库,如果没有本行表示同步所有的数据库 binlog-ignore-db=mysql #被忽略的数据 从配置 server-id=2 log-bin= mysql-bin relay-log= mysql-relay-bin read-only=1 #设置为只读 log-slave-updates=1 #实现级联复制需要，即把relay-log中的同步到bin-log中 replicate-do-db=repl #要同步的数据库,不写本行表示同步所有数据库 \"]},\"80\":{\"h\":\"step5、slave启动\",\"t\":[\"mysql -u root -p CHANGE MASTER TO MASTER_HOST='192.168.2.145', MASTER_USER='master', MASTER_PASSWORD='zheng&test123', MASTER_PORT=3306, MASTER_LOG_FILE='mysql-bin.000001', MASTER_LOG_POS=120; \",\"step6、启动是否成功\",\"mysql -u root -p show slave status \\\\G; \"]},\"81\":{\"h\":\"mysql表设计及优化\"},\"82\":{\"h\":\"一、一些建议\",\"t\":[\"建议来自《MYSQL 王者晋级之路》，本文做些笔记\",\"1）在创建业务表时，库名、表名、字段名必须使用小写字母，采用 “_” 分割。\",\"2）MySQL数据库中，通过lower_case_table_names参数来区别表名的大小写，默认为0，代表大小写敏感。如果是1，代表大小写不敏感，以小写存储。为字段选取数据类型时，要秉承着简单、够用的原则。表中的字段和索引数量都不宜过多，要保证SQL语句查询的高效性，快速执行完，避免出现堵塞、排队现象。\",\"3）表的存储引擎一定要选择使用InnoDB。MySQL 5.7基本已经废弃 MyISAM，8.0后彻底废弃。\",\"4）要显式地为表创建一个使用自增列 INT 或者 BIGINT 类型作为主键，可以保证写入顺序是自增的，和B+tree叶子节点分裂顺序一致。写入更加高效，TPS性能会更高，存储效率也是最高的。\",\"5）金钱、日期时间、IPV4尽量使用 int 来存储。用 int 来存储金钱，让 int 单位为分，这样就不存在四舍五入了，存储的数值更加准确。\",\"​ 日期可以选择使用datetime，datetime的可用范围比timestamp大，物理存储上仅比timestamp 多占 1 个字节多的空间，整体性能上的消耗并不算太大。因此在生产环境可以使用datetime时间类型。当然也可以使用 int 来存储时间，通过转换函数 from_unixtime 和 unix_timesstamp来实现。\",\"​ \",\"​ IPV4字段基本上可以不适用char(15)来存储，使用int来存储，通过转换函数 inet_aton 和 inet_ntoa来实现。\",\"​ \",\"​ 有些字段比如性别sex字段、状态status字段，基本上选择tinyint就可以。\",\"​ 有时候精确计算使用decimal，设计sum等统计数据时候\",\"6）text 和 blob 这种存大量文字或者存图片的大数据类型，建议不要和业务表放在一起。\",\"注：主要业务表切忌出现这样大类型的字段。\",\"​ SQL语句中尽量避免出现 or 子句，这种判断的子句可以让程序自动完成，不要交给数据库判断。也要避免使用union，尽量采用union all，减少去重和排序的工作。\",\"7）用 select 查询表时只需要获取必要的字段，避免使用 select *。这样可以减少网络带宽的消耗，还有可能利用到覆盖索引。\",\"​ 建立索引时不要在选择性低的字段上创建，比如sex、status这种字段。\",\"​ 索引的选择性计算方法：\",\" select count(distinct coll) / count(*) from table_name; // 越接近 1 ，证明选择性越高，越适合创建索引。 \",\"sum()函数容易返回null值，记得处理\",\"8）很长的字符串可以考虑创建前缀索引，提高索引利用率。\",\"​ 单表索引数量不要太多，一般建议不要超过 4~5个（根据实际业务表再确定）。当执行DML语句操作时，也会索引进行更新，如果索引数量太多，则会造成索引树的分裂，性能也会下降。\",\"9）所有字段定义中，默认都加上 not null 约束，避免出现 null 。在对该字段进行 select count() 统计计数时，可以让统计结果更准确，因为值为null的数据不会被计算进去。\",\"10）表的字符集默认使用 UTF-8 ，必要时可申请使用 UTF8mb4 字符集。因为它的通用性比 GBK 、Latin1 都要好。UTF8字符集存储汉子占用3个字节，如果遇到表情储存的需求，就可以使用UTF8mb4\",\"11）建议模糊查询 select...like '%**%' 的语句不要出现在数据库中，可以使用搜索引擎sphinx代替。\",\"12）索引字段上面不要使用函数，否则使用不到索引，也不要创建函数索引。\",\"13）join列类型要保持一致，其中包括长度、字符集都要一致。？https://blog.csdn.net/n88Lpo/article/details/78099114\",\"14）当在执行计划中的 extra 项看到 Using filesort，或者看到 Using temporary 时，也要优先考虑创建排序索引和分组索引。（排序、分组字段上都要创建索引）\",\"15）limit 语句上的优化，建议使用主键来进行范围检索，缩短结果集大小，使查询效率更高效。\"]},\"83\":{\"h\":\"二、算是面试题吧\"},\"84\":{\"h\":\"1）为什么一定要设一个主键？\",\"t\":[\"因为在不设置主键的情况下，innodb也会自动生成一个隐藏列，作为自增主键。\",\"所以自己显示指定更可以清晰的看出主键id。\"]},\"85\":{\"h\":\"2）主键是自增还是UUID?\",\"t\":[\"自增。innodb中的主键是聚簇索引。如果是自增的主键，插入数据时不会引发页分裂。性能更高。\"]},\"86\":{\"h\":\"3）主键为什么不推荐有业务含义？\",\"t\":[\"倘若主键变更会引发很多麻烦；引发页分裂。\",\"4）表示枚举的字段为什么不用enum类型？\",\"枚举字段一般用tinyint类型。因为enum类型order by效率低，而且插入阿拉伯数字有问题。\"]},\"87\":{\"h\":\"5）为什么不直接存储图片、音频、视频等大容量内容？\",\"t\":[\"在实际应用中，使用HDFS来存储文件。mysql只用来存储下载地址。\",\"当存文件的时候，比如Base64加密文件等，排序不能使用内存临时表（OOM），必须使用磁盘的临时表，导致查询缓慢；binlog太多，导致主从的效率问题。\",\"所以，不推荐使用text和blob类型。\"]},\"88\":{\"h\":\"6）字段为什么要定义NOT NULL DEFAULT ?\",\"t\":[\"有null，count（包含null的列）会出现问题。而且影响索引的性能\"]},\"89\":{\"h\":\"7）看建表语法\",\"t\":[\"mysql> ? create table \"]},\"90\":{\"h\":\"8）Mysql存储引擎\",\"t\":[\"MyISAM、 InnoDB、BDB、MEMORY、MERGE、EXAMPLE、NDB Cluster、 ARCHIVE、CSV、BLACKHOLE、FEDERATED。\",\"Tips: InnoDB和BDB提供事务安全表，其他存储引擎都是非事务安全表。\"]},\"91\":{\"h\":\"9）常用的2种存储引擎？\",\"t\":[\"1、Myisam是Mysql的默认存储引擎，当create创建新表时，未指定新表的存储引擎时，默认使用Myisam。每个MyISAM 在磁盘上存储成三个文件。\",\"文件名都和表名相同，扩展名分别是 .frm (存储表定义) MYD (MYData，存储数据)、.MYI (MYIndex，存储索引)。数据文件和索引文件可以放置在不同的目录，平均分布io，获得更快的速度。\",\"2、InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比 Myisam 的存储引擎，InnoDB 写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。\"]},\"92\":{\"h\":\"10）可以针对表设置引擎吗？如何设置？\",\"t\":[\"可以, ENGINE=xxx 设置引擎。\",\"代码示例:\",\"create table person( id int primary key auto_increment, username varchar(32) ) ENGINE=InnoDB \"]},\"93\":{\"h\":\"11）选择合适的存储引擎？\",\"t\":[\"选择标准: 根据应用特点选择合适的存储引擎,对于复杂的应用系统可以根据实际情况选择 多种存储引擎\",\"进行组合. 下面是常用存储引擎的适用环境:\",\"MyISAM:默认的 MySQL 插件式存储引擎, 它是在 Web、 数据仓储和其他应用环境下最常使用的存\",\"储引擎之一。\",\"InnoDB:用于事务处理应用程序，具有众多特性，包括 ACID 事务支持。\",\"Memory: 将 所有数据保存在RAM 中， 在 需要快速查找引用和其他类似数据的环境下，可 提供极快的访问。\",\"Merge:允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起,并作为 1个对象引用它们。对于诸如数据仓储等 VLDB 环境十分适合。\"]},\"94\":{\"h\":\"12）选择合适的数据类型\",\"t\":[\"前提: 使用适合存储引擎。\",\"选择原则: 根据选定的存储引擎,确定如何选择合适的数据类型下面的选择方法按存储引擎分类 :\"]},\"95\":{\"h\":\"MyISAM 数据存储引擎和数据列\",\"t\":[\"MyISAM数据表，最好使用固定长度的数据列代替可变长度的数据列。\"]},\"96\":{\"h\":\"MEMORY存储引擎和数据列\",\"t\":[\"MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用CHAR或VARCHAR列都没有关\",\"系。两者都是作为CHAR类型处理的。\"]},\"97\":{\"h\":\"InnoDB 存储引擎和数据列\",\"t\":[\"建议使用 VARCHAR类型\",\"对于InnoDB数据表，内部的行存储格式没有区分固定长度和可变长度列(所有数据行 都使用指向数\",\"据列值的头指针) ，因此在本质上，使用固定长度的CHAR列不一定比使 用可变长度VARCHAR列简\",\"单。 因而， 主要的性能因素是数据行使用的存储总量。 由于 CHAR 平均占用的空间多于\",\"VARCHAR，因此使用VARCHAR来最小化需要处理的数据行的存储总 量和磁盘I/O是比较好的。\"]},\"98\":{\"h\":\"13）char & varchar\",\"t\":[\"保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不\",\"进行大小写转换。\"]},\"99\":{\"h\":\"14）Mysql字符集\",\"t\":[\"mysql服务器可以支持多种字符集 (可以用show character set命令查看所有mysql支持 的字符集) ，在\",\"同一台服务器、同一个数据库、甚至同一个表的不同字段都可以指定使用不 同的字符集。\",\"mysql的字符集包括字符集(CHARACTER)和校对规则(COLLATION)两个概念。\"]},\"100\":{\"h\":\"15）索引设计原则？\",\"t\":[\"搜索的索引列：不 一定是所要选择的列。最适合索引的列是出现在WHERE子句中的列，或连接子\",\"句中指定的列，而不是出现在SELECT 关键字后的选择列表中的列。\",\"使用惟一索引：考虑某列中值的分布。 对于惟一值的列，索引的效果最好，而具有多个 重复值的\",\"列，其索引效果最差。\",\"使用短索引：如果对串列进行索引，应该指定一个前缀长度,只要有可能就应该这做样。 例如，如\",\"果有一个 CHAR(200) 列，如果在前 10 个或 20 个字符内，多数值是惟一的， 那么就不要对整个列\",\"进行索引。\",\"利用最左前缀：在创建 一个 n 列的索引时，实际是创建了 MySQL 可利用的 n 个索引。 多列索引\",\"可起几个索引的作用，因为可利用索引中最左边的列集来匹配行。 这样的列集 称为最左前缀。 (这\",\"与索引一个列的前缀不同，索引一个列的前缀是利用该的n前个字 符作为索引值 )\",\"不要过度索引：每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能，这一点我们前面\",\"已经介绍 过。在修改表的内容时，索引必须进行更新,有时可能需要重构, 因此， 索引越多，所花的\",\"时间越长。\",\"如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。 此外，MySQL 在生成\",\"一个执行计划时，要考虑各个索引，这也要费时间。\",\"创建多余的索引给查询优化带来了更多的工作。索引太多，也可能会使 MySQL选择不到所要使用\",\"的 最好索引。 只保持所需的索引有利于查询优化。 如果想给已索引的表增加索引， 应 该考虑所要\",\"增加的索引是否是现有多列索引的最左索引。\",\"考虑在列上进行的比较类型： 索引可用于“ <”、“ < = ”、“ = ”、“ > =”、“ > ”和 BETWEEN 运算。在\",\"模式具有一个直接量前缀时，索引也用于 LIKE 运算。如果只将某个列用于其他类型的运算时(如\",\"STRCMP( )) ，对其进行索引没有价值。\"]},\"101\":{\"h\":\"16）MySql有哪些索引?\",\"t\":[\"数据结构角度\",\"BTREE\",\"HASH\",\"FULLTEXT\",\"R-Tree\",\"物理存储角度\",\"1、聚集索引（clustered index）\",\"2、非聚集索引（non-clustered index）\",\"从逻辑角度\",\"普通索引：仅加速查询\",\"唯一索引：加速查询 + 列值唯一（可以有null）\",\"主键索引：加速查询 + 列值唯一（不可以有null）+ 表中只有一个\",\"组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并\",\"全文索引：对文本的内容进行分词，进行搜索\"]},\"102\":{\"h\":\"17）Hash索引和B+树索引的底层实现原理\",\"t\":[\"hash索引底层就是hash表，进行查找时，调用一次hash函数就可以获取到相应的键值，之后进行回表查询获得实际数据。\",\"B+树底层实现是多路平衡查找树，对于每一次的查询都是从根节点出发，查找到叶子节点方可以获得所查键值，然后根据查询判断是否需要回表查询数据。\",\"那么可以看出他们有以下的不同：\",\"hash索引进行等值查询更快(一般情况下)，但是却无法进行范围查询。\",\"因为在hash索引中经过hash函数建立索引之后,索引的顺序与原顺序无法保持一致，不能支持范围查询。\",\"而B+树的的所有节点皆遵循(左节点小于父节点,右节点大于父节点，多叉树也类似)，天然支持范围。\",\"hash索引不支持使用索引进行排序,原理同上。\",\"hash索引不支持模糊查询以及多列索引的最左前缀匹配.原理也是因为hash函数的不可预测。\",\"AAAA和AAAAB的索引没有相关性。\",\"hash索引任何时候都避免不了回表查询数据,而B+树在符合某些条件(聚簇索引，覆盖索引等)的时候可以只通过索引完成查询。\",\"hash索引虽然在等值查询上较快，但是不稳定.性能不可预测，当某个键值存在大量重复的时候，发生hash碰撞，此时效率可能极差。而B+树的查询效率比较稳定，对于所有的查询都是从根节点到叶子节点，且树的高度较低。\",\"因此，在大多数情况下，直接选择B+树索引可以获得稳定且较好的查询速度。\",\"而不需要使用hash索引\"]},\"103\":{\"h\":\"18）非聚簇索引一定会回表查询吗?\",\"t\":[\"不一定,这涉及到查询语句所要求的字段是否全部命中了索引，如果全部命中了索引,那么就不必再进行回表查询。\",\"举个简单的例子，假设我们在员工表的年龄上建立了索引，那么当进行\",\"select age from employee where age < 20 \",\"的查询时,在索引的叶子节点上，已经包含了age信息，不会再次进行回表查询.\"]},\"104\":{\"h\":\"19）如何避免回表查询？什么是索引覆盖？\",\"t\":[\"MySQL优化：如何避免回表查询？什么是索引覆盖？\",\"create table user ( id int primary key, name varchar(20), sex varchar(5), index(name) )engine=innodb; 1, shenjian, m, A 3, zhangsan, m, A 5, lisi, m, A 9, wangwu, f, B select * from t where name='lisi'; \",\"img\",\"如粉红色路径，需要扫码两遍索引树：\",\"（1）先通过普通索引定位到主键值id=5；\",\"（2）在通过聚集索引定位到行记录；\",\"这就是所谓的回表查询，先定位主键值，再定位行记录，它的性能较扫一遍索引树更低。\",\"都能够命中就是索引覆盖，无需回表。\"]},\"105\":{\"h\":\"20）事务4个特性？\",\"t\":[\"事务是必须满足4个条件（ACID）：\",\"原子性 Atomicity：一个事务中的所有操作，要么全部完成，要么全部不完成，最小的执行单位。\",\"一致性 Consistency：事务执行前后，都处于一致性状态。\",\"隔离性 Isolation：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防\",\"止多个事务并发执行时由于交叉执行而导致数据的不一致。\",\"持久性 Durability：事务执行完成后，对数据的修改就是永久的，即便系统故障也不会丢失。\"]},\"106\":{\"h\":\"21）事务隔离级别分别是？\",\"t\":[\"READ_UNCOMMITTED 这是事务最低的隔离级别，它充许另外一个事务可以看到这个事务未提交的数据。解决第一类丢失更新的问题，但是会出现脏读、不可重复读、第二类丢失更新的问题，幻读 。\",\"READ_COMMITTED 保证一个事务修改的数据提交后才能被另外一个事务读取，即另外一个事务不能读取该事务未提交的数据。解决第一类丢失更新和脏读的问题，但会出现不可重复读、第二类丢失更新的问题，幻读问题\",\"REPEATABLE_READ 保证一个事务相同条件下前后两次获取的数据是一致的 （注意是 一个事务，可以理解为事务间的数据互不影响）解决第一类丢失更新，脏读、不可重复读、第二类丢失更新的问题，但会出幻读。\",\"SERIALIZABLE 事务串行执行，解决了脏读、不可重复读、幻读。但效率很差，所以实际中一般不用。\"]},\"107\":{\"h\":\"22）InnoDB默认事务隔离级别?如何查看当前隔离级别\",\"t\":[\"可重复读（REPEATABLE-READ）\",\"查看：\",\"mysql> select @@global.tx_isolation; +———————————+ | @@global.tx_isolation | +———————————+ | REPEATABLE-READ | +———————————+ 1 row in set, 1 warning (0.01 sec) \"]},\"108\":{\"h\":\"23）如何查看表结构？\",\"t\":[\"mysql> desc zipkin_spans; \"]},\"109\":{\"h\":\"24）Mysql删除表的几种方式？区别？\",\"t\":[\"1.delete : 仅删除表数据，支持条件过滤，支持回滚。记录日志。因此比较慢。\",\"delete from table_name; \",\"2.truncate: 仅删除所有数据，不支持条件过滤，不支持回滚。不记录日志，效率高于delete。\",\"truncate table table_name; \",\"3.drop:删除表数据同时删除表结构。将表所占的空间都释放掉。删除效率最高。\",\"drop table table_name; \"]},\"110\":{\"h\":\"25） 主键和唯一索引区别？\",\"t\":[\"本质区别，主键是一种约束，唯一索引是一种索引。\",\"主键不能有空值（非空+唯一），唯一索引可以为空。\",\"主键可以是其他表的外键，唯一索引不可以。\",\"一个表只能有一个主键，唯一索引 可以多个。\",\"都可以建立联合主键或联合唯一索引。\",\"主键->聚簇索引，唯一索引->非聚簇索引。\",\"主键和唯一索引区别？\",\"本质区别，主键是一种约束，唯一索引是一种索引。\",\"主键不能有空值（非空+唯一），唯一索引可以为空。\",\"主键可以是其他表的外键，唯一索引不可以。\",\"一个表只能有一个主键，唯一索引 可以多个。\",\"都可以建立联合主键或联合唯一索引。\",\"主键-》聚簇索引，唯一索引->非聚簇索引。\"]},\"111\":{\"h\":\"26、查看当前表有哪些索引？\",\"t\":[\"show index from table_name; \"]},\"112\":{\"h\":\"27、索引不生效的情况？\",\"t\":[\"使用不等于查询。\",\"NULL值。\",\"列参与了数学运算或者函数。\",\"在字符串like时左边是通配符.比如 %xxx。\",\"当mysql分析全表扫描比使用索引快的时候不使用索引。\",\"当使用联合索引，前面一个条件为范围查询,后面的即使符合最左前缀原则，也无法使用索引。\"]},\"113\":{\"h\":\"28、explain列有哪些？含义？\",\"t\":[\"image-20220414004507836\",\"1、 id\",\"SQL查询中的序列号。\",\"id列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行。\",\"2、select_type\",\"image-20220414004546438\",\"3、table\",\"显示这一行的数据是关于哪张表的。不一定是实际存在的表名。 可以为如下的值：<unionM,N>: 引用id为M和N UNION后的结果。\",\"引用id为N的结果派生出的表。派生表可以是一个结果集，例如派生自FROM中子查询的结果。\",\"引用id为N的子查询结果物化得到的表。即生成一个临时表保存子查询的结果。\",\"4、type\",\"这是最重要的字段之一，显示查询使用了何种类型。从最好到最差的连接类型依次为：\",\"system，const，eq_ref，ref，fulltext，ref_or_null，index_merge，unique_subquery，\",\"index_subquery，range，index，ALL\",\"explain结果每个字段的含义说明 - 简书 (jianshu.com)\"]},\"114\":{\"h\":\"29、MySql最多创建多少列索引？\",\"t\":[\"16\"]},\"115\":{\"h\":\"30、varchar(10)和int(10)代表什么含义\",\"t\":[\"varchar的10代表了申请的空间长度,也是可以存储的数据的最大长度,而int的10只是代表了展示的长度,\",\"不足10位以0填充.也就是说,int(1)和int(10)所能存储的数字大小以及占用的空间都是相同的,只是在展示\",\"时按照长度展示。\"]},\"116\":{\"h\":\"31、count(*)在不同引擎的实现方式?\",\"t\":[\"MyISAM :把一个表的总行数存在了磁盘上，执行 count(*) 的时候会直接返回这个数，效率很高。\",\"InnoDB : 比较麻烦，它执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计\",\"数\"]},\"117\":{\"h\":\"三、数据结构\",\"t\":[\"需要了解mysql的数据结构才能更加清楚上述效率的问题，请看数据结构篇~~\"]},\"118\":{\"h\":\"Redis数据结构与对象（二）-链表\",\"t\":[\"链表提供了高效的节点重排能力，以及顺序性的节点访问方式，并且可以通过增删节点来灵活地调整链表的长度。\",\"作为一种常用数据结构，链表内置在很多高级的编程语言里面，因为 Redis 使用的 C 语言并没有内置这种数据结构，所以 Redis 构建了自己的链表实现。\",\"链表在 Redis 中的应用非常广泛，比如列表键的底层实现之一就是链表：当一个列表键包含了数量比较多的元素，又或者列表中包含的元素都是比较长的字符串时，Redis 就会使用链表作为列表键的底层实现。\",\"举个例子，以下展示的 integers 列表键包含了从 1 到 1024 共一千零二十四个整数：\",\"redis> LLEN integers (integer) 1024 redis> LRANGE integers 0 10 1) \\\"1\\\" 2) \\\"2\\\" 3) \\\"3\\\" 4) \\\"4\\\" 5) \\\"5\\\" 6) \\\"6\\\" 7) \\\"7\\\" 8) \\\"8\\\" 9) \\\"9\\\" 10) \\\"10\\\" 11) \\\"11\\\" \",\"integers 列表键的底层实现就是一个链表，链表中的每个节点都保存了一个整数值。\",\"除了链表键之外，发布与订阅、慢查询、监视器等功能也用到了链表，Redis 服务器本身还使用链表来保存多个客户端的状态信息，以及使用链表来构建客户端输出缓冲区（output buffer），本书后续的章节将陆续对这些链表应用进行介绍。\",\"本文接下来的内容将对 Redis 的链表实现进行介绍，并列出相应的链表和链表节点 API 。\"]},\"119\":{\"h\":\"链表和链表节点的实现\",\"t\":[\"每个链表节点使用一个 adlist.h/listNode 结构来表示：\",\"typedef struct listNode { // 前置节点 struct listNode *prev; // 后置节点 struct listNode *next; // 节点的值 void *value; } listNode; \",\"多个 listNode 可以通过 prev 和 next 指针组成双端链表，如图 3-1 所示。\",\"img\",\"虽然仅仅使用多个 listNode 结构就可以组成链表，但使用 adlist.h/list 来持有链表的话，操作起来会更方便：\",\"typedef struct list { // 表头节点 listNode *head; // 表尾节点 listNode *tail; // 链表所包含的节点数量 unsigned long len; // 节点值复制函数 void *(*dup)(void *ptr); // 节点值释放函数 void (*free)(void *ptr); // 节点值对比函数 int (*match)(void *ptr, void *key); } list; \",\"list 结构为链表提供了表头指针 head 、表尾指针 tail ，以及链表长度计数器 len ，而 dup 、 free 和 match 成员则是用于实现多态链表所需的类型特定函数：\",\"dup 函数用于复制链表节点所保存的值；\",\"free 函数用于释放链表节点所保存的值；\",\"match 函数则用于对比链表节点所保存的值和另一个输入值是否相等。\",\"图 3-2 是由一个 list 结构和三个 listNode 结构组成的链表：\",\"img\",\"Redis 的链表实现的特性可以总结如下：\",\"双端：链表节点带有 prev 和 next 指针，获取某个节点的前置节点和后置节点的复杂度都是 O(1) 。\",\"无环：表头节点的 prev 指针和表尾节点的 next 指针都指向 NULL ，对链表的访问以 NULL 为终点。\",\"带表头指针和表尾指针：通过 list 结构的 head 指针和 tail 指针，程序获取链表的表头节点和表尾节点的复杂度为 O(1) 。\",\"带链表长度计数器：程序使用 list 结构的 len 属性来对 list 持有的链表节点进行计数，程序获取链表中节点数量的复杂度为 O(1) 。\",\"多态：链表节点使用 void* 指针来保存节点值，并且可以通过 list 结构的 dup 、 free 、 match 三个属性为节点值设置类型特定函数，所以链表可以用于保存各种不同类型的值。\"]},\"120\":{\"h\":\"链表和链表节点的 API\",\"t\":[\"表 3-1 列出了所有用于操作链表和链表节点的 API 。\",\"表 3-1 链表和链表节点 API\",\"image-20220123235957505\"]},\"121\":{\"h\":\"回顾\",\"t\":[\"链表被广泛用于实现 Redis 的各种功能，比如列表键，发布与订阅，慢查询，监视器，等等。\",\"每个链表节点由一个 listNode 结构来表示，每个节点都有一个指向前置节点和后置节点的指针，所以 Redis 的链表实现是双端链表。\",\"每个链表使用一个 list 结构来表示，这个结构带有表头节点指针、表尾节点指针、以及链表长度等信息。\",\"因为链表表头节点的前置节点和表尾节点的后置节点都指向 NULL ，所以 Redis 的链表实现是无环链表。\",\"通过为链表设置不同的类型特定函数，Redis 的链表可以用于保存各种不同类型的值。\"]},\"122\":{\"h\":\"Redis数据结构与对象（三）-字典\"},\"123\":{\"h\":\"字典的实现\",\"t\":[\"Redis 的字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。\",\"接下来的三个小节将分别介绍 Redis 的哈希表、哈希表节点、以及字典的实现。\"]},\"124\":{\"h\":\"哈希表\",\"t\":[\"Redis 字典所使用的哈希表由 dict.h/dictht 结构定义：\",\"typedef struct dictht { // 哈希表数组 dictEntry **table; // 哈希表大小 unsigned long size; // 哈希表大小掩码，用于计算索引值 // 总是等于 size - 1 unsigned long sizemask; // 该哈希表已有节点的数量 unsigned long used; } dictht; \",\"table 属性是一个数组，数组中的每个元素都是一个指向 dict.h/dictEntry 结构的指针，每个 dictEntry 结构保存着一个键值对。\",\"size 属性记录了哈希表的大小，也即是 table 数组的大小，而 used 属性则记录了哈希表目前已有节点（键值对）的数量。\",\"sizemask 属性的值总是等于 size - 1 ，这个属性和哈希值一起决定一个键应该被放到 table 数组的哪个索引上面。\",\"图 4-1 展示了一个大小为 4 的空哈希表（没有包含任何键值对）。\",\"字典的实现 - 图1\"]},\"125\":{\"h\":\"哈希表节点\",\"t\":[\"哈希表节点使用 dictEntry 结构表示，每个 dictEntry 结构都保存着一个键值对：\",\"typedef struct dictEntry { // 键 void *key; // 值 union { void *val; uint64_t u64; int64_t s64; } v; // 指向下个哈希表节点，形成链表 struct dictEntry *next; } dictEntry; \",\"key 属性保存着键值对中的键，而 v 属性则保存着键值对中的值，其中键值对的值可以是一个指针，或者是一个 uint64_t 整数，又或者是一个 int64_t 整数。\",\"next 属性是指向另一个哈希表节点的指针，这个指针可以将多个哈希值相同的键值对连接在一次，以此来解决键冲突（collision）的问题。\",\"举个例子，图 4-2 就展示了如何通过 next 指针，将两个索引值相同的键 k1 和 k0 连接在一起。\",\"字典的实现 - 图2\"]},\"126\":{\"h\":\"字典\",\"t\":[\"Redis 中的字典由 dict.h/dict 结构表示：\",\"typedef struct dict { // 类型特定函数 dictType *type; // 私有数据 void *privdata; // 哈希表 dictht ht[2]; // rehash 索引 // 当 rehash 不在进行时，值为 -1 int rehashidx; /* rehashing not in progress if rehashidx == -1 */ } dict; \",\"type 属性和 privdata 属性是针对不同类型的键值对，为创建多态字典而设置的：\",\"type 属性是一个指向 dictType 结构的指针，每个 dictType 结构保存了一簇用于操作特定类型键值对的函数，Redis 会为用途不同的字典设置不同的类型特定函数。\",\"而 privdata 属性则保存了需要传给那些类型特定函数的可选参数。\",\"typedef struct dictType { // 计算哈希值的函数 unsigned int (*hashFunction)(const void *key); // 复制键的函数 void *(*keyDup)(void *privdata, const void *key); // 复制值的函数 void *(*valDup)(void *privdata, const void *obj); // 对比键的函数 int (*keyCompare)(void *privdata, const void *key1, const void *key2); // 销毁键的函数 void (*keyDestructor)(void *privdata, void *key); // 销毁值的函数 void (*valDestructor)(void *privdata, void *obj); } dictType; \",\"ht 属性是一个包含两个项的数组，数组中的每个项都是一个 dictht 哈希表，一般情况下，字典只使用 ht[0] 哈希表，ht[1] 哈希表只会在对 ht[0] 哈希表进行 rehash 时使用。\",\"除了 ht[1] 之外，另一个和 rehash 有关的属性就是 rehashidx ：它记录了 rehash 目前的进度，如果目前没有在进行 rehash ，那么它的值为 -1 。\",\"图 4-3 展示了一个普通状态下（没有进行 rehash）的字典：\",\"字典的实现 - 图3\"]},\"127\":{\"h\":\"哈希算法\",\"t\":[\"当要将一个新的键值对添加到字典里面时，程序需要先根据键值对的键计算出哈希值和索引值，然后再根据索引值，将包含新键值对的哈希表节点放到哈希表数组的指定索引上面。\",\"Redis 计算哈希值和索引值的方法如下：\",\"# 使用字典设置的哈希函数，计算键 key 的哈希值 hash = dict->type->hashFunction(key); # 使用哈希表的 sizemask 属性和哈希值，计算出索引值 # 根据情况不同， ht[x] 可以是 ht[0] 或者 ht[1] index = hash & dict->ht[x].sizemask; \",\"哈希算法 - 图1\",\"举个例子，对于图 4-4 所示的字典来说，如果我们要将一个键值对 k0 和 v0 添加到字典里面，那么程序会先使用语句：\",\"hash = dict->type->hashFunction(k0); \",\"计算键 k0 的哈希值。\",\"假设计算得出的哈希值为 8 ，那么程序会继续使用语句：\",\"index = hash & dict->ht[0].sizemask = 8 & 3 = 0; \",\"计算出键 k0 的索引值 0 ，这表示包含键值对 k0 和 v0 的节点应该被放置到哈希表数组的索引 0 位置上，如图 4-5 所示。\",\"哈希算法 - 图2\",\"当字典被用作数据库的底层实现，或者哈希键的底层实现时，Redis 使用 MurmurHash2 算法来计算键的哈希值。\",\"MurmurHash 算法最初由 Austin Appleby 于 2008 年发明，这种算法的优点在于，即使输入的键是有规律的，算法仍能给出一个很好的随机分布性，并且算法的计算速度也非常快。\",\"MurmurHash 算法目前的最新版本为 MurmurHash3 ，而 Redis 使用的是 MurmurHash2 ，关于 MurmurHash 算法的更多信息可以参考该算法的主页：http://code.google.com/p/smhasher/ 。\"]},\"128\":{\"h\":\"分库分表概念篇\",\"t\":[\"当硬件达到瓶颈无法提升，通过把数据分散到不同的数据库中，使得单一数据库的数据量变小来缓解单一数据库的性能问题，从而达到提升数据库性能的目的。 比如：将电商数据库拆分为若干独立的数据库，并且对于大表来说也拆分为若干小表，通过这种数据库拆分的方法来解决数据库的性能问题。 分库分表的目的就是为了解决由于数据量过而导致数据库性能降低的问题，将原来独立的数据库拆分为若干数据库组成，将数据大表拆分成若干数据表，使得单一数据库、单一数据表的数据量变小，从而达到提升数据库性能的目的。\",\"分库分表的方式在生产中通常包括：垂直分库、垂直分表、水平分库和水平分表四种。\"]},\"129\":{\"h\":\"（1）垂直分表\",\"t\":[\"用户在浏览商品列表时，只有对商品感兴趣时才会点进去查看商品的详细描述信息。并且商品详细描述信息数据存储占用空间较大。 因此可以将商品列表数据与商品详情数据拆分成两个表，将访问频率低的商品描述信息单独存放在一张表中，将访问频率高的商品基本信息单独放在另一张表中。\",\"img\",\"以上这种优化操作，就叫垂直分表。其定义：将一个表按字段分成多表，每个表存储其中一部分字段。 带来的提升是： 为了避免IO争抢并减少锁表的几率，查看详情的用户与商品信息浏览互不影响。 充分发挥热门数据的操作效率，商品信息的操作的高效率不会被商品描述的低效率拖累。\",\"为什么大字段IO效率低： 由于数据量本身大，需要更长的读取时间； 跨页，页是数据存储单位，很多查找及定位操作都是以页为单位，单页内的数据行越来越多数据库整体性能越好，而大字段占用空间大，单页内存储行数少，因此IO效率低。 数据库以行为单位将数据加载到内存中，这样表中字段长度较短且访问频率较高，内存能加载更多的数据，命中率高，减少了磁盘IO，从而提升了数据库性能。 一般来说，某业务实体中的各个数据项的访问频率是不一样的，部分数据项可能是占用存储空间比较大的。例如商品描述。所以，当表数据量大时，可以将表按字段切开，将热门字段、冷门字段分别放一个表。\"]},\"130\":{\"h\":\"（2）垂直分库\",\"t\":[\"通过垂直分表性能得到了一定程度的提升，但是还没有达到要求，并且磁盘空间也快不够了，因为数据还是始终限制在一台服务器，库内垂直分表直接就了单一表数据量过大的问题，但没有将表分布到不同的服务器上，因此每个表还是竞争同一个物理机的CPU、内存、网络IO和磁盘。 比如：原有的卖家表，分为了商品库和店铺库，并把这两个库分散到不同的服务器。 由于商品信息与商品描述业务耦合度较高，因此一起被存放在商品库；而店铺信息相对独立，因此单独被放到店铺库。 以上这种优化就叫：垂直分库。 垂直分库是指按照业务将表进行分类，分布到不同的数据库上面，每个库可以放在不同的服务器上，它的核心理念是专库专用。\",\"它的提升是： 解决业务层面的耦合，业务清晰 能对不同业务的数据进行分级管理、维护、监控和扩展等 高并发场景下，垂直分库一定程度上提升IO、数据库连接和降低单机硬件资源的瓶颈 最后，垂直分库通过将表按业务分类，然后分布不同的数据库，并且可以将这些数据库部署在不同的服务器上，从而达到多个服务器共同分摊压力的效果，但是依然没有解决单表数据量过大的问题。\"]},\"131\":{\"h\":\"（3）水平分库\",\"t\":[\"随着业务的增长，商品库单库存储数据已经超出预估。粗略估计，目前有8w个店铺，每个店铺平均150个不同规格的商品，再算上增长，商品数量得往1500w+上预估，并且商品库属于访问频率非常高的资源，单台服务器已经无法支撑。 尝试水平分库，将店铺ID为单数的和店铺ID为偶数的商品信息分布存在两个表中。 以上的优化就叫：水平分库。 水平分库就是把同一个表的数据按一定规则拆到不同的数据库中，每个库可以放在不同的服务器上。 对比：垂直分库是不同表拆到不同数据库中，它是对数据行的拆分，不影响表结构。\",\"水平分库的优势是： 解决了单库大数据，高并发的性能瓶颈。 提高了系统的稳定性和可用性。 当一个应用难以再细粒度的垂直拆分，或切分后数据量行数巨大，存在单库读写、存储性能瓶颈，这时就需要进行水平分库了，经过水平切分的优化，往往能解决单库存储量及性能的瓶颈。但是由于同一个表被分配在不同的数据库，需要额外进行数据操作的路由工作，因此大大提示了系统的复杂度。\"]},\"132\":{\"h\":\"（4）水平分表\",\"t\":[\"按照水平分库的思路对商品库内的表也进行水平拆分，其目的是为了解决单表数据量大的问题，如下图所示： 以上操作进行的优化就叫水平分表。 水平分表就是在同一个数据库内，把同一个表的数据按一定规则拆到多个表中（对数据的拆分，不影响表结构）。\",\"它带来的提升是： 优化单一表数据量过大而产生的性能问题 避免IO争抢并减少锁表的几率 库内的水平分表，解决了单一表数据量过大的问题；分出来的小表中只包含一部分数据，从而使得单个表的数据量变小，提高检索性能。\",\"1、利用mycat等中间件 2、自定义sql语句等 介绍详细见下节\",\"参考：https://zhuanlan.zhihu.com/p/375951738http://www.cppcns.com/shujuku/mysql/480787.htmlhttps://zhuanlan.zhihu.com/p/393848605https://blog.csdn.net/Winmusic/article/details/101645621https://blog.csdn.net/K_520_W/article/details/123702217\"]},\"133\":{\"h\":\"初识redis（1）-数据结构\",\"t\":[\"（1）STRING\",\"​ value：可以是字符串、整数或者浮点数\",\"​ operate：对整个字符串或者字符串的其中一部分执行操作；对整数和浮点数执行自增（increment）或者自减(decrement)操作\",\"（2）LIST\",\"​ value：一个链表，链表上的每个节点都包含了—个字符串\",\"​ operate：从链表的两端推入或者弹出元素;根据偏移量对链表进行修剪(trim)；读取单个或者多个元素;根据值查找或者移除元素\",\"（3）SET\",\"​ value：包含字符串的无序收集器( unordered collection)，并且被包含的每个字符串都是独一无二、各不相同的\",\"​ operate：添加、获取、移除单个元素；检查一个元素是否存在于集合中;计算交集、并集、差集；从集合里面随机获取元素\",\"（4）HASH\",\"​ value：包含键值对的无序散列表\",\"​ operate：添加、获取、移除单个键值对;获取所有键值对\",\"（5）ZSET（有序集合)\",\"​ value：字符串成员( member)与浮点数分值( score）之间的有序映射，元素的排列顺序由分值的大小决定\",\"​ operate：添加、获取、删除单个元素；根据分值范围（range)或者成员来获取元素\"]},\"134\":{\"h\":\"（1）STRING字符串命令\",\"t\":[\"SET key-name value 设置值\",\"GET key-name 获得值\",\"DEL key-name 删除值\",\"例子：\",\"127.0.0.1:6379> set hello world OK 127.0.0.1:6379> get hello \\\"world\\\" 127.0.0.1:6379> del hello (integer) 1 127.0.0.1:6379> get hello (nil) \",\"INCR key-name 将键存储的值加上1\",\"DECR key-name 将键存储的值减去1\",\"INCRBY key-name amount 将键存储的值加上整数amount\",\"DECRBY key-name amount 将键存储的值减去整数amount\",\"INCRBYFLOAT key-name amount 将键存储的值加上浮点数 amount，这个命令在Redis 2.6或以上的版本可用\",\"例子：\",\"127.0.0.1:6379> set name 1 OK 127.0.0.1:6379> incr name (integer) 2 127.0.0.1:6379> get name \\\"2\\\" 127.0.0.1:6379> decr name (integer) 1 127.0.0.1:6379> get name \\\"1\\\" 127.0.0.1:6379> incrby name 2 (integer) 3 127.0.0.1:6379> get name \\\"3\\\" \"]},\"135\":{\"h\":\"（2）LIST列表命令\",\"t\":[\"RPUSH key-name value [value ...] 将一个或多个值推入列表的右端\",\"LPUSH key-name value [value ...] 将一个或多个值推入列表的左端\",\"RPOP key-name 移除并返回列表最右端的元素\",\"LPOP key-name 移除并返回列表最左端的元素\",\"LINDEX key-name offset 返回列表中偏移量为offset的元素\",\"LRANGE key-name start end 返回列表从start偏移量到end偏移量范围内的所有元素,其中偏移量为start和偏移量为end 的元素也会包含在被返回的元素之内\",\"LTRIM key-name start end 对列表进行修剪，只保留从start偏移量到end偏移量范围内的元素，其中偏移量为start和偏移量为end的元素也会被保留\",\"例子：\",\"127.0.0.1:6379> rpush myList 1 2 3 4 (integer) 4 127.0.0.1:6379> lrange myList 0 4 1) \\\"1\\\" 2) \\\"2\\\" 3) \\\"3\\\" 4) \\\"4\\\" 127.0.0.1:6379> lrange myList 0 -1 1) \\\"1\\\" 2) \\\"2\\\" 3) \\\"3\\\" 4) \\\"4\\\" 127.0.0.1:6379> lpush myList -1 0 (integer) 6 127.0.0.1:6379> lrange myList 0 -1 1) \\\"0\\\" 2) \\\"-1\\\" 3) \\\"1\\\" 4) \\\"2\\\" 5) \\\"3\\\" 6) \\\"4\\\" \",\"BLPOP key-name [ key-name ...] timeout 从第一个非空列表中弹出位于最左端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现\",\"BRPOP key-name [key-name ...] timeout 从第一个非空列表中弹出位于最右端的元素，或者在timeout秒之内阻塞并等待可弹出的元素出现\",\"RPOPLPUSH source-key dest-key 从source-key列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，并向用户返回这个元素\",\"BRPOPLPUSH source-key dest-key timeout 从source-key列表中弹出位于最右端的元素，然后将这个元素推入dest-key列表的最左端，并向用户返回这个元素；如果source-key为空，那么在timeout秒之内阻塞并等待可弹出的元素出现\",\"127.0.0.1:6379> blpop myList 2 1) \\\"myList\\\" 2) \\\"0\\\" 127.0.0.1:6379> blpop myList 2000 1) \\\"myList\\\" 2) \\\"-1\\\" 127.0.0.1:6379> blpop myList 6000 1) \\\"myList\\\" 2) \\\"1\\\" 127.0.0.1:6379> brpop myList 2 1) \\\"myList\\\" 2) \\\"4\\\" \",\"SADD key-name item [item ...] 将一个或多个元素添加到集合里面，并返回被添加元素当中原本并不存在于集合里面的元素数量\",\"SREM key-name item [item ...] 从集合里面移除一个或多个元素，并返回被移除元素的数量\",\"SISMEMBER key-name item 检查元素item是否存在于集合key-name 里\",\"SCARD key-name 返回集合包含的元素的数量\",\"SMEMBERS key-name 返回集合包含的所有元素\",\"SRANDMEMBER key-name [count] 从集合里面随机地返回一个或多个元素。当count为正数时，命令返回的随机元素不会重复:当count为负数时，命令返回的随机元素可能会出现重复\",\"SPOP key-name 随机地移除集合中的一个元素，并返回被移除的元素\",\"SMOVE source-key dest-key item 如果集合source-key包含元素item，那么从集合source-key里面移除元素item，并将元素item添加到集合dest-key中;如果item被成功移除,那么命令返回1，否则返回0\"]},\"136\":{\"h\":\"用于组合和处理多个集合的Redis命令\",\"t\":[\"SDIFF key-name [key-name ...] 返回那些存在于第一个集合、但不存在于其他集合中的元素（数学上的差集运算)\",\"SDIFFSTORE dest-key key-name [key-name ...] 将那些存在于第一个集合但并不存在于其他集合中的元素（数学上的差集运算）存储到dest-key键里面\",\"SINTER key-name [key-name ...] 返回那些同时存在于所有集合中的元素（数学上的交集运算)\",\"SINTERSTORE dest-key key-name [key-name ...] 将那些同时存在于所有集合的元素（数学上的交集运算)存储到dest-key键里面\",\"SUNION key-name [key-name ...] 返回那些至少存在于一个集合中的元素（数学上的并集计算)\",\"SUNIONSTORE dest-key key-name [key-name ...] 将那些至少存在于一个集合中的元素（数学上的并集计算)存储到dest-key键里面\",\"HMGET key-name key [key ...] 从散列里面获取一个或多个键的值\",\"HMSET key-name key value [key value ...] 为散列里面的一个或多个键设置值\",\"HDEL key-name key [key ...] 删除散列里面的一个或多个键值对，返回成功找到并删除的键值对数量\",\"HLEN key-name 返回散列包含的键值对数量\"]},\"137\":{\"h\":\"散列的更高级特性\",\"t\":[\"HEXISTS key-name key 检查给定键是否存在于散列中HKEYS key-name———获取散列包含的所有键\",\"HKEYS key-name 获取散列包含的所有键\",\"HVALS key-name 获取散列包含的所有值\",\"HGETALL key-name 获取散列包含的所有键值对\",\"HINCRBY key-name key increment 将键key存储的值加上整数increment\",\"HINCRBYFLOAT key-name key increment 将键key存储的值加上浮点数increment\",\"ZADD key-name score member [score member ...] 将带有给定分值的成员添加到有序集合里面\",\"ZREM key-name member [member ...] 从有序集合里面移除给定的成员，并返回被移除成员的数量\",\"ZCARD key-name 返回有序集合包含的成员数量\",\"ZINCRBY key-name increment member 将member成员的分值加上increment\",\"ZCOUNT key-name min max——返回分值介于min和max之间的成员数量\",\"ZRANK key-name member 返回成员member在有序集合中的排名\",\"ZSCORE key-name member 返回成员member的分值\",\"ZRANGE key-name start stop [WITHSCORES] 返回有序集合中排名介于start和 stop之间的成员，如果给定了可选的WITHSCORES选项，那么命令会将成员的分值也一并返回\"]},\"138\":{\"h\":\"有序集合的范围型数据获取命令和范围型数据删除命令，以及并集命令和交集命令\",\"t\":[\"ZREVRANK key-name member 返回有序集合里成员member的排名，成员按照分值从大到小排列\",\"ZREVRANGE key-name start stop [WITHSCORES] 返回有序集合给定排名范围内的成员，成员按照分值从大到小排列\",\"ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] 返回有序集合中，分值介于min和max之间的所有成员\",\"ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count] 获取有序集合中分值介于min和max之间的所有成员，并按照分值从大到小的顺序来返回它们\",\"ZREMRANGEBYRANK key-name start stop 移除有序集合中排名介于start和stop之间的所有成员\",\"ZREMRANGEBYSCORE key-name min max 移除有序集合中分值介于min和 max之间的所有成员\",\"ZINTERSTORE dest-key key-count key [key ...] [WEIGHTS weight[ weight ...]] [AGGREGATE SUM|MIN|MAX] 对给定的有序集合执行类似于集合的交集运算\",\"ZUNIONSTORE dest-key key-count key [key ...] [WEIGHTS weight[ weight ...]] [AGGREGATE SUM|MIN|MAX]\\t\\t对给定的有序集合执行类似于集合的并集运算\"]},\"139\":{\"h\":\"初识redis（2）-基本特性\",\"t\":[\"​ Redis 的排序操作和其他编程语言的排序操作一样，都可以根据某种比较规则对一系列元素进行有序的排列。负责执行排序操作的SORT命令可以根据字符串、列表、集合、有序集合、散列这5种键里面存储着的数据，对列表、集合以及有序集合进行排序。如果读者之前曾经使用过关系数据库的话，那么可以将SORT命令看作是SQL语言里的order by子句。\",\"SORT source-key [BY pattern] [LIMIT offset count] [GET pattern [GETpattern ...] ] [ASC|DESC] [ALPHA] [STORE dest-key] 根据给定的选项，对输入列表、集合或者有序集合进行排序，然后返回或者存储排序的结果\",\"127.0.0.1:6379> lrange myList 0 -1 1) \\\"10\\\" 2) \\\"-1\\\" 3) \\\"2\\\" 4) \\\"3\\\" 127.0.0.1:6379> sort myList asc 1) \\\"-1\\\" 2) \\\"2\\\" 3) \\\"3\\\" 4) \\\"10\\\" \",\"​ 有时候为了同时处理多个结构，我们需要向Redis 发送多个命令。尽管Redis有几个可以在两个键之间复制或者移动元素的命令，但却没有那种可以在两个不同类型之间移动元素的命令(虽然可以使用ZUNIONSTORE命令将元素从一个集合复制到一个有序集合)。为了对相同或者不同类型的多个键执行操作，Redis有5个命令可以让用户在不被打断(interruption )的情况下对多个键执行操作，它们分别是WATCH、MULTI、EXEC、UNWATCH和 DISCARD。\",\"​ Redis的基本事务( basic transaction)需要用到MULTI命令和EXEC命令，这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令。和关系数据库那种可以在执行的过程中进行回滚( rollback)的事务不同，在Redis里面，被MULTI命令和EXEC命令包围的所有命令会一个接-一个地执行， 直到所有命令都执行完毕为止。当一个事务执行完毕之后，Redis 才会处理其他客户端的命令。\",\"​ 在使用Redis存储数据的时候，有些数据可能在某个时间点之后就不再有用了，用户可以使用DEL命令显式地删除这些无用数据,也可以通过Redis的过期时间(expiration)特性来让一个键在给定的时限(timeout)之后自动被删除。当我们说一个键“带有生存时间(time to live)”或者一个键“会在特定时间之后过期(expire)”时，我们指的是Redis会在这个键的过期时间到达时自动删除该键。\",\"PERSIST key-name 移除键的过期时间\",\"TTL key-name 查看给定键距离过期还有多少秒\",\"EXPIRE key-name seconds 让给定键在指定的秒数之后过期\",\"EXPIREAT key-name timestamp 将给定键的过期时间设置为给定的UNIX时间戳\",\"PTTL key-name 查看给定键距离过期时间还有多少毫秒，这个命令在Redis 2.6或以上版本可用\",\"PEXPIRE key-name milliseconds 让给定键在指定的毫秒数之后过期，这个命令在Redis 2.6或以上版本可用\",\"PEXPIREAT key-name timestamp-milliseconds\\t\\t将一个毫秒级精度的UNIX时间戳设置为给定键的过期时间，这个命令在 Redis 2.6或以上版本可用\"]},\"140\":{\"h\":\"初识redis（3）-持久化\",\"t\":[\"Redis 的数据持久化，即：将内存中的数据存储到硬盘（本文中亦称之为 “落地”）。Redis 提供了 RDB 和 AOF 两种持久化的方法： • RDB：基于特定的时间间隔将数据 “全量快照”，生成 RDB 文件并落地 • AOF (Append Only File)：将 Redis 接收到命令以 “增量追加” 的方式，写入 AOF 文件 Redis 允许使用任意一种持久化方法，亦允许同时使用或同时不使用。以下将阐述两者涉及的配置选项、命令以及优缺点。\",\"RDB • 非常适合于备份以及灾难恢复的场景 • 能够最大化 Redis 性能 • 相对于 AOF，RDB 文件在 Redis 启动时能够更快加载 • 若期望将数据丢失的可能性最小化，RDB 并不适用 AOF • 基于 “追加” 和 “文件同步” 的特性，AOF 具有更佳的 “持久化” 表现 • 对于相同的数据，AOF 文件大小通常将超过 RDB 综合而言，如果能够承担一定程度的数据丢失风险，仅启用 RDB 持久化即可。但并不建议只启用 AOF 持久化，毕竟 RDB 文件更适合于数据备份。 若 RDB 持久化和 AOF 持久化同时启用，Redis 启动时，将加载 AOF 文件，毕竟 AOF 具有更佳的 “持久化” 表现。\"]},\"141\":{\"h\":\"配置选项\",\"t\":[\"save 900 1 # RDB 落地选项，900 秒内有 1 次写入，即落地新的 RDB 文件。 # 允许多个 save 配置，满足任意配置即开始新的 RDB 文件落地；若无 save 配置，即表示关闭 RDB 数据持久化 # stop-writes-on-bgsave-error yes # RDB 文件写入失败时，Redis 是否停止接收写命令，默认 yes，即停止 rdbcompression yes # 是否压缩 RDB 文件，默认 yes，即压缩 rdbchecksum yes # 是否启用 RDB 文件校验，默认 yes，即生成 CRC64，写入 RDB 文件结尾 dbfilename dump.rdb # RDB 文件名称 dir ./ # RDB 文件路径（说明：配置与 AOF 共享） \",\"RDB 相关的配置，应当结合业务的实际，例如： • 当 RDB 文件写入失败时，若能够通过其他的运维手段进行及时处理，则无需开启 stop-writes-on-bgsave-error，以避免线上服务的中断 • 若开启 rdbcompression 与 rdbchecksum 选项，RDB 文件的落地、Redis 启动时的 RDB 文件加载，将产生额外的性能损耗\"]},\"142\":{\"h\":\"RDB 相关\"},\"143\":{\"h\":\"• SAVE\",\"t\":[\"“同步” 创建 RDB 文件，SAVE 将阻塞 Redis，Redis 将不能响应其他任何命令，直到 RDB 文件完成创建与落地。\"]},\"144\":{\"h\":\"• BGSAVE\",\"t\":[\"“异步” 创建 RDB 文件，Redis 创建子进程：父进程继续提供服务，由子进程生成并落地 RDB 文件。 当配置选项中任意的 save 配置条件满足时，Redis 将自动地 “触发” BGSAVE 命令。\"]},\"145\":{\"h\":\"• LASTSAVE\",\"t\":[\"获取最后一次成功落地 RDB 文件的 Unix 时间。\"]},\"146\":{\"h\":\"配置选项\",\"t\":[\"appendonly no # 是否启用 AOF 数据持久化，默认 no，即关闭 appendfilename \\\"appendonly.aof\\\" # AOF 文件名称 # AOF 文件同步选项 appendfsync everysec no-appendfsync-on-rewrite no # AOF 文件 rewrite 选项 auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb aof-load-truncated yes # 若 AOF 文件的结尾处损坏（由操作系统故障引起），Redis 启动时加载 AOF 文件，根据 aof-load-truncated 配置： # 默认 yes：忽略 AOF 文件结尾处的损坏 # no：Redis 进程退出 # dir ./ # AOF 文件路径（说明：配置与 RDB 共享） \"]},\"147\":{\"h\":\"AOF 相关\",\"t\":[\"AOF 文件同步，即通过系统调用 fsync()将 AOF 文件位于操作系统缓冲区的部分（取决于 write()的工作机制）写入硬盘。 特别说明：fsync()并不确保缓冲区的内容一定能够写入硬盘，其工作机制取决于操作系统。\"]},\"148\":{\"h\":\"appendfsync 配置选项：\",\"t\":[\"• always：每次写入 AOF 文件，都进行一次 fsync() 系统调用 • everysec：默认，每秒进行一次 fsync() 系统调用 • no：不进行 fsync() 系统调用，完全由操作系统控制\"]},\"149\":{\"h\":\"no-appendfsync-on-rewrite 配置选项：\",\"t\":[\"• yes：即 Redis 进行 AOF 文件 rewrite 时（或落地 RDB 文件时），fsync() 系统调用暂停，以避免可能产生的阻塞 • no：默认，即 Redis 进行 AOF 文件 rewrite 时，继续进行 fsync() 系统调用\"]},\"150\":{\"h\":\"AOF 文件 rewrite\",\"t\":[\"作为 Redis 命令的 “log”，AOF 文件的大小必须持续增长。Redis 提供 AOF 文件 rewrite 特性，能够移除 AOF 文件的冗余命令以减少 AOF 文件大小。 例如：Redis 针对一个 key 执行了 100 次的 SET，AOF 文件仅保留最后一次 SET 命令即可。\"]},\"151\":{\"h\":\"BGREWRITEAOF 命令：\",\"t\":[\"“异步” 进行 Redis AOF 文件 rewrite • 若 Redis 正在进行创建 RDB 文件，AOF 文件 rewrite 将等待 RDB 文件创建完成后开始 • 若 AOF 文件 rewrite 正在进行 ，BGREWRITEAOF 命令将不会开始新的 AOF 文件 rewrite\"]},\"152\":{\"h\":\"auto-aof-rewrite-percentage & auto-aof-rewrite-min-size 配置选项：\",\"t\":[\"AOF 文件自动 rewrite 机制，当 AOF 文件大小达到以下阈值，Redis 即自动开始 AOF 文件 rewrite：\\n•\\t增长百分比超过 auto-aof-rewrite-percentage（相对于上一次 rewrite 完成时的 AOF 文件）\\n•\\t超过 auto-aof-rewrite-min-size\\n通过设置 auto-aof-rewrite-percentage 为 0，即关闭 AOF 文件的自动 rewrite。\"]},\"153\":{\"h\":\"初识redis（4）-主从架构\",\"t\":[\"Redis 提供 “主 - 从” 的数据复制：“从” Redis 即作为 “主” Redis 的数据副本。“从” Redis，既能够用于读性能的扩展，亦能够作为数据备份的一种手段。\",\"同时，Redis 支持 Redis Sentinel，实现 “主 - 从” 监控、故障迁移，限于篇幅，本文不予以展开。\"]},\"154\":{\"h\":\"“主 - 从” 数据复制的基本工作机制\",\"t\":[\"已建立的 “主” - “从” 连接，“主” Redis 不断地将命令发送到 “从” Redis\",\"若连接中断（例如：网络问题），“从” Redis 将尝试重新建立连接，并尝试 “半 - 重新同步”\",\"若无法进行 “半 - 重新同步”，“从” Redis 将尝试进行 “重新同步”（“主 - 从” 连接首次建立，亦执行 “重新同步”）\"]},\"155\":{\"h\":\"关于 “半 - 重新同步” & “重新同步”\",\"t\":[\"“半 - 重新同步”：“从” Redis 将尝试获取连接中断期间于 “主” Redis 执行的命令（存储于 backlog）\",\"“重新同步” \",\"“主” Redis 创建数据快照（RDB 文件）、同步到 “从” Redis，开始将 “主” Redis 执行的命令发送到 “从” Redis\",\"“从” Redis 丢弃当前数据，加载 “主” Redis 的 RDB 文件，开始执行 “主” Redis 发送的命令\",\"“数据复制” 对于 “主” Redis 全部是异步的；对于 “从” Redis，大部分是异步的，但 “重新同步” 涉及 “丢弃当前数据，加载 RDB 文件”，将引起 “短暂中断”。\",\"slaveof master_ip master_port # “从” Redis 配置：“主” Redis - IP & port masterauth master_password # “从” Redis 配置：“主” Redis - 密码 slave-serve-stale-data yes # “从” Redis 配置：当 “主 - 从” 连接中断或 “从” Redis 正在进行初始化同步，“从” Redis 是否提供服务： # yes: 默认，以 “从” Redis 当前数据提供服务 # no: 对于接收到的命令，“从” Redis 返回 “SYNC in progress”（INFO、SLAVEOF 命令除外） # slave-read-only yes # “从” Redis 配置：是否 “只读”，默认 yes “主” Redis 配置：根据已连接的 “从” Redis 情况，“主” Redis 是否接收 “写命令” min-slaves-to-write 3 min-slaves-max-lag 10 表示：最少有 3 个已连接的 “从” Redis，且延迟小于等于 10 秒 min-slaves-to-write 3 # 默认 0，即无论 “从” Redis 的连接情况，始终接收 “写命令” min-slaves-max-lag 10 \",\"以上的代码，仅列出了部分关键的配置。其他类似于：diskless 复制、backlog 配置，限于篇幅，未能列出，详情内容请参考 redis.conf for Redis 2.8。\",\"SLAVEOF host port 将 Redis 配置作为 “从” Redis，其 “主” Redis 位置即为 host:port。\",\"SLAVEOF NO ONE 终止 “从” Redis 自 “主” Redis 的数据同步。 特别说明：SLAVEOF NO ONE 包含了 Redis 设计之初，关于 “自由” 的思想：“If slavery is not wrong, nothing is wrong. -- Abraham Lincoln”。\",\"“从” Redis 能够作为其他 Redis 的 “主” Redis，由此构建级联结构的 “主 - 从” 链。并且，“主” Redis 能够与多个 “从” Redis 建立连接，建立 “树状” 结构。\",\"image-20210802000052243\"]},\"156\":{\"h\":\"初识redis（5）-内存调优\",\"t\":[\"合理的 Redis 实例，内存的占有量不应当超过 60%，当内存使用率过高时，应该予以清理及优化。\"]},\"157\":{\"h\":\"ziplist 优化机制\",\"t\":[\"ziplist 实现了 “紧凑” 的数据结构，通过尽可能减少非数据节点的占用，以提供内存密度。\",\"image-20210802000308665\",\"图中所示，ziplist 整体结构： • zl-bytes：整个 ziplist 占用内存的字节数 • zl-tail：ziplist 尾节点距离起始地址的字节数 • zl-len：ziplist 包含的节点数量 • entry：节点 • zl-end：ziplist 末端标记，固定 0xFF ziplist 节点结构： • previous-entry-length：前一个节点占用内存的字节数 • encoding：节点编码，明确节点存储内容属于 “字节数组” 或整数，并明确长度（即占用的字节数） • content：节点存储内容 “散列表”、“链表”、“有序集合”，使用 ziplist，受益于其 “紧凑” 的数据结构，相较于 hashtable、linkedlist、skiplist，能够有效减少内存占用。 然而，受限于 “紧凑” 的数据结构，随着节点数量增长和节点大小膨胀，基于 ziplist 实现的 “散列表”、“链表”、“有序集合”，性能将显著下降。\"]},\"158\":{\"h\":\"intset 优化机制\",\"t\":[\"intset 使用整型数组作为存储的数据结构。通常，hashtable 实现的 Redis 集合，其成员以 “字符串” 结构进行存储，intset 由此能够显著降低内存使用。\",\"类似于 ziplist，同样受限于其整型数组，“集合” 成员数量的增长将引起 “集合” 性能的下降。\",\" “散列表” 使用 ziplist 的限制条件： - 成员数量不超过 hash-max-ziplist-entries - 最大内存占用的成员，内存占用不超过 hash-max-ziplist-value (字节) 两者必须同时具备，任意条件不满足，即无法使用 ziplist hash-max-ziplist-entries 512 hash-max-ziplist-value 64 “链表” 使用 ziplist 的限制条件 list-max-ziplist-entries 512 list-max-ziplist-value 64 “有序集合” 使用 ziplist 的限制条件 zset-max-ziplist-entries 128 zset-max-ziplist-value 64 “集合” 使用 intset 的限制条件: - 成员全部为 64 位有符号整数 - 成员数量不超过 set-max-intset-entries set-max-intset-entries 512 \",\"附加说明：ziplist & intset 的限制条件，是基于内存占用和性能的综合考虑。\",\"Redis 作为任何单实例的数据服务，最终会遇到容量和性能瓶颈。前文阐述的 Redis “主 - 从”，即为常见且有效的扩展 Redis 读性能的方案。 “数据分片” 构建 Redis 集群。常用的方案包括：Redis Cluster、twemproxy、Codis。\"]},\"159\":{\"h\":\"分布式 “数据分片”\",\"t\":[\"分布式 “数据分片”：选取合适的方式将 Redis 数据分布于不同的实例，由此降低单实例的内存使用，实现优化。\"]},\"160\":{\"h\":\"单实例 “数据分片”\",\"t\":[\"通常而言，单实例 “数据分片”，并不能直接降低 Redis 内存使用，需要结合 ziplist 等内存优化方式，以 “散列表” 为例： • 以散列表的键作为 “数据分片” 的 “路由”，将单个内存占用量大的 “散列表” 分片到多个内存占有量小的 “散列表” • 内存占有量小的 “散列表”（例如：“散列表” 成员数量少） 能够以 ziplist 方式减少内存占用 由此，有效地实现内存使用的优化。\"]},\"161\":{\"h\":\"基于业务进行优化\",\"t\":[\"基于业务，通常能够取得良好的 Redis 内存优化效果，例如： • 尽可能短的 Redis 键，例如：以 “u_178” 替代 “user_id_178” • 选择合适的 Redis 数据结构，例如：合理地选择 “散列表” 替代 “字符串”，若 “字符串” 数量较少，使用一个 “散列表” 替代，通常能够减少内存使用 • 减少存储于 Redis 的业务数据量\",\"“数据分片” - 使用 Codis\",\"选择 Codis 的原因 Codis 来自于 “豌豆荚”，相对于 twemproxy，选择 Codis 的原因： • twemproxy 无法实现动态水平扩展 • Codis 运行于多核机器能够获得更好的应用 相对于 Redis Cluster，选择 Codis 的原因： • Redis Cluster 必须使用 Redis 3.0 以上版本的客户端 • Redis Cluster 无法支持 pipeline\",\"Codis 架构\",\"image-20210802000916321\",\"图中所示，Codis 架构中引入了 codis-proxy，由 codis-proxy 基于 Redis key 计算分片，将命令转发到 codis-group，因此：对于绝大多数的命令，客户端对于 Codis 的接入是透明的。\",\"Codis 针对 Redis key 计算 CRC32，默认分为 1024 个 Slot，进而路由到特定的 codis-group，实现分片。\\n除了 “数据分片”，Codis 的特性还包括：\\n•\\t提供了 codis-fe & codis-dashborad 作为集群管理工具\\n•\\t允许多个 codis-proxy，实现 proxy 层的高可用\\n•\\tcodis-group 支持 “主 - 从”，引入 redis-sentinel 实现 “主 - 从” 故障迁移\\n必须说明的是：“数据分片” 扩展容量和性能的同时，亦限制了 Redis 若干方便的能力，例如：Codis 不支持事务、部分命令不支持。\"]},\"162\":{\"h\":\"再担保\",\"t\":[\"内容：\",\"所谓再担保，是指为担保人设立的担保。当担保人不能独立承担担保责任时，再担保人将按再担保合同约定比例向担保人提供比例再担保，双方按约承担相应责任，享有相应权利。\",\"我国在法律层面上并未对再担保有一个明确的界定，当前我国主流的再担保模式是分险类型的比例再担保模式， 在这种模式下再担保机构与担保机构签署再担保合同以确定合作条件，原保机构向债权人代偿后， 再担保公司按合同约定向原保机构提供一定比例的代偿补偿，进而有效分散担保机构业务风险。\",\"再担保机构是以经营再担保业务为主业，为担保机构提供增信和分担风险的担保机构。\",\"我国的再担保一般有两种形式，即增信型再担保、分险型再担保。\"]},\"163\":{\"h\":\"增信型再担保\",\"t\":[\"主要是为担保人提供连带责任保证或一般保证，以增强担保人信用；增信型再担保是指再担保机构为担保机构的担保项目提供一般再担保，当债务人及担保机构均无力偿付,且法院已出具《强制执行终结裁定书》。 经人民法院裁定终结担保机构破产程序且担保机构完成注销登记,由再担保机构按照合同约定代担保机构直接向债权人代偿。\"]},\"164\":{\"h\":\"分险型再担保\",\"t\":[\"主要是为担保人提供风险分担。\",\"比例再担保是依据与合作担保机构签署的《再担保合同》约定，向符合条件的担保机构担保项目提供一定比例的风险分担。 担保机构向债权人全额代偿后，再担保机构按合同约定为其提供一定比例的代偿补偿。 在担保机构获得追偿回款时，可扣除追偿费用启按约定的责任比例向再担保机构进行返还。 再担保业务设置若干个专项产品，再担保责任比例原则上不超过原保项目担保责任的50%\"]},\"165\":{\"h\":\"具体业务模式\",\"t\":[\"合作担保机构符合再担保要求的担保项目提供一定责任比例风险分担。 在担保机构原保项目发生代偿时，担保机构全部履行完毕对债权人代偿责任后，再担保公司按照《再担保函》确认的再担保责任比例， 向担保机构提供代偿补偿，并在项目有追偿回款后按补偿比例收回补偿款项。\",\"国家融资担保基金和省级担保、再担保基金（机构）要积极为符合条件的融资担保业务提供再担保，向符合条件的担保、再担保机构注资，充分发挥增信分险作用。\\n不得为防止资金闲置而降低合作条件标准，不得为追求稳定回报而偏离主业。\"]},\"166\":{\"h\":\"再担保机构的作用和价值\",\"t\":[\"内容： 在金融领域，尤其是融资担保行业，“增信、分险、规范、引领”这四个词经常被用来描述再担保公司的核心功能。下面是对这些概念的解释：\",\"增信指的是通过某种方式提高债务人（如企业或个人）的信用等级或信用形象，使其在金融市场上的信用评价得到提升。 这通常通过引入第三方担保机构或采用其他信用增强措施来实现，比如使用再担保服务。 增信可以帮助债务人更容易地获取贷款或债券发行，同时可能获得更低的融资成本。\",\"分险意味着分散或分担风险，尤其是在融资担保和再担保业务中。 再担保公司通过与原始担保机构合作，共同承担部分潜在的信贷风险，这样可以减轻单个担保机构的风险负担。 分险机制有助于稳定金融系统，确保即使有借款人违约，担保机构也不至于遭受过大的财务打击。\",\"规范指的是建立和维护一套标准和规则，以指导和约束融资担保行业的行为。 这包括确保所有参与者遵守相同的准则，提高行业透明度，以及防止欺诈和不当操作。 规范化有助于创造一个公平竞争的环境，保护投资者和借款人的利益。\",\"引领指的是再担保公司在推动行业发展和创新方面的作用。\\n这可能包括推广新的业务模式、技术应用（如金融科技），以及支持政策制定。\\n引领还体现在通过示范项目或最佳实践，鼓励整个行业朝着更高效、更负责任的方向发展。\\n综合起来，增信、分险、规范、引领构成了再担保公司为支持中小微企业融资、促进地方经济发展和维护金融稳定所扮演的关键角色。\"]},\"167\":{\"h\":\"国家融资担保基金\",\"t\":[\"国家融资担保基金（National Financing Guarantee Fund，简称NFGF）与担保公司之间的关系主要体现在再担保服务上。 国家融资担保基金作为一个国家级的融资担保机构，它的设立旨在支持小微企业、农业、农村、农民（简称“三农”）以及创业创新企业，缓解这些领域的融资难、融资贵问题。 具体而言，它通过以下几种方式与担保公司建立联系：\",\"国家融资担保基金提供再担保服务，即为担保公司提供额外的信用保障。这意味着当担保公司已经为某笔贷款提供了担保，国家融资担保基金将进一步为其提供担保，从而分散风险。 这种双重担保机制增强了担保公司的信用能力，使它们能够承担更大的担保额度，进而帮助更多小微企业获得融资。\",\"通过再担保，国家融资担保基金与担保公司共同承担因贷款违约带来的损失。这降低了担保公司的单一风险敞口，提高了其财务稳定性。 风险分担的比例可能根据具体协议而定，国家融资担保基金可能会承担一定比例的损失，具体比例会根据政策和市场情况调整。\",\"国家融资担保基金与担保公司建立业务合作关系，促进双方的信息交流、资源共享和业务协同。 这种合作有助于优化担保流程，提高服务效率，同时也可能涉及培训、技术支持和风险管理等方面的协作。\",\"国家融资担保基金的设立和运作体现了政府对小微企业和“三农”融资的政策支持，它在一定程度上起到了引导作用，鼓励担保公司更加积极地服务于这些领域。\\n基金的存在也可能吸引更多的社会资本参与到担保行业中，形成多层次的融资担保服务体系。\\n总之，国家融资担保基金与担保公司之间的关系是一种互补和协同的伙伴关系，通过提供再担保服务和风险分担机制，共同促进小微企业和“三农”领域的金融支持，加强了整个融资担保行业的稳定性和可持续性。\"]},\"168\":{\"h\":\"融资担保和非融资担保\",\"t\":[\"内容：\",\"担保，从广义上来说，是一种经济和金融活动中的风险管理手段。当债权人担心债务人可能无法按时履行其还款义务时，担保便起到了一个保障作用。 这种保障不仅仅是为了确保债务得到清偿，更是为了降低资金损失的风险。 在这种情境下，债务人或第三方会提供某种形式的担保，无论是财产、权益还是信用，以此来保证他们会按照约定履行还款义务。 如果债务人违约，担保人或担保机构将承担相应的经济责任，确保债权人的权益不受损害。\"]},\"169\":{\"h\":\"融资类担保产品\",\"t\":[\"融资担保是担保业务中最主要的业务产品。 产品品种主要有： 间接融资担保的银行贷款担保、贸易融资（票据和信用证）担保，直接融资担保的债券担保、中期票据担保、信托计划担保等。\"]},\"170\":{\"h\":\"间接融资担保的银行贷款担保\"},\"171\":{\"h\":\"什么是间接融资？\",\"t\":[\"间接融资是指资金盈余单位与资金短缺单位之间不发生直接关系，而是分别与金融机构发生一笔独立的交易，即资金盈余单位通过存款，或者购买银行、信托、保险等金融机构发行的有价证券，将其暂时闲置的资金先行提供给这些金融中介机构， 然后再由这些金融机构以贷款、贴现等形式，或通过购买需要资金的单位发行的有价证券，把资金提供给这些单位使用，从而实现资金融通的过程。\"]},\"172\":{\"h\":\"间接融资的优点\",\"t\":[\"1、银行等金融机构网点多，吸收存款的起点低，能够广泛筹集社会各方面闲散资金，积少成多，形成巨额资金。\",\"2、在直接融资中，融资的风险由债权人独自承担。而在间接融资中，由于金融机构的资产、负债是多样化的，融资风险便可由多样化的资产和负债结构分散承担，从而安全性较高。\",\"3、降低融资成本。因为金融机构的出现是专业化分工协作的结果，它具有了解和掌握借款者有关信息的专长，而不需要每个资金盈余者自己去搜集资金赤字者的有关信息，因而降低了整个社会的融资成本。\",\"4、有助于解决由于信息不对称所引起的逆向选择和道德风险问题。\"]},\"173\":{\"h\":\"贸易融资（票据和信用证）担保\"},\"174\":{\"h\":\"票据分类\",\"t\":[\"image-wechat\"]},\"175\":{\"h\":\"票据\",\"t\":[\"（1）汇票：出票人签发的，委托付款人在见票时或者在指定的日期无条件支付确定的金额给收款人或者持票人的票据。 ①汇票按付款人的不同：银行汇票、商业汇票。 银行汇票是签发人为银行，付款人为其他银行的汇票； 商业汇票是签发人为商号或者个人，付款人为其它商号、个人或银行的汇票。 ②商业汇票一般按承兑人的不同：商业承兑汇票、银行承兑汇票。 银行承兑票据指由在承兑银行开立存款账户的存款人签发，向开户银行申请并经银行审查同意承兑的，保证在指定日期无条件支付确定的金额给收款人或持票人的票据。 商业承兑票据是指收款人开出，经付款人承兑或由付款人开出并承兑的汇票。 （2）本票：出票人签发的，承诺自己在见票时无条件支付确定的金额给收款人或者持票人的票据。 （3）支票：出票人签发的，委托办理支票存款业务的银行或者其他金融机构在见票时无条件支付确定的金额给收款人或者持票人的票据。\"]},\"176\":{\"h\":\"信用证\",\"t\":[\"信用证，是指银行根据进口人（买方）的请求，开给出口人（卖方）的一种保证承担支付货款责任的书面凭证。 在信用证内，银行授权出口人在符合信用证所规定的条件下，以该行或其指定的银行为付款人，开具不得超过规定金额的汇票，并按规定随附装运单据，按期在指定地点收取货款。 信用证支付的一般程序是：\",\"（1）进出口双方当事人应在买卖合同中，明确规定采用信用证方式付款。\",\"（2）进口人向其所在地银行提出开证申请，填具开证申请书，并交纳一定的开证押金或提供其它保证，请银行（开证银行）向出口人开出信用证。\",\"（3）开证银行按申请书的内容开立以出口人为受益人的信用证，并通过其在出口人所在地的代理行或往来行（统称通知行）把信用证通知出口人。\",\"（4）出口人在发运货物，取得信用证所要求的装运单据后，按信用证规定向其所在地行（可以是通知行、也可以是其它银行）议付货款。\",\"（5）议付行议付货款后即在信用证背面注明议付金额。 来自：百度百科\"]},\"177\":{\"h\":\"直接融资担保的债券\",\"t\":[\"担保债券是由另一实体担保债务责任的债券。担保债券的安全性取决于担保者履行担保条款的财务能力，以及发行人的财务能力。 担保条款可能要求担保者保证利息的支付或本金的支付。 如果发生发行人没有足够的现金流支付其债务的情况，即使是优先的法律地位也不能保证债券持有者避免财务损失。\"]},\"178\":{\"h\":\"中期票据\",\"t\":[\"中期票据是一种具有独特性质的公司债务工具。通过发行者的代理向投资者连续发行。 投资者可以从若干个到期期限中选择：9个月一1年、1年一18个月、18个月一2年，依此类推直到10年。美国的中期票据根据415规则在证券交易委员会注册，该规则给连续发行证券的公司提供了最大的便利，也更能切合公司的融资需求。 中期票据对银行中期贷款具有明显的替代效应，一旦高信用品质的客户转移运用中期票据融资，商业银行就面临传统资产业务利润受到侵蚀的威胁，从而迫使商业银行进行深刻转型，主动调整客户结构和业务结构，提高风险定价能力，寻求风险和收益匹配的新型客户和新型业务，适应直接融资占比上升而贷款相对规模萎缩的形势。\"]},\"179\":{\"h\":\"信托计划\",\"t\":[\"信托计划，是指由信托公司担任受托人，按照委托人意愿，为受益人的利益，将两个以上(含两个)委托人交付的资金进行集中管理、运用或处分的资金信托业务活动。 信托是指委托人基于对受托人的信任，将其财产权委托给受托人，由受托人按委托人的意愿以自己的名义，为受益人的利益或者特定目的，进行管理或者处分的行为。\"]},\"180\":{\"h\":\"非融资类担保产品。\",\"t\":[\"非融资担保，是指担保机构与非融资交易主合同债权人约定，当被担保人不履行对债权人负有的合同义务时，由担保机构依法承担合同约定的担保责任的行为。 担保品种主要有：建设工程担保的履约保函、预付款保函、投标保函、支付保函、农民工工资支付保函等， 其他非融资担保还有财产保全担保、商业票据担保、融资租赁担保、政府采购担保、电费担保、关税担保等。（引自：张德本《担保规律探索》）\"]},\"181\":{\"h\":\"履约保函\",\"t\":[\"履约保函是指由保证人为被保证人（多为承包商）向业主提供的，保证被保证人履行工程建设合同约定义务的保证。\"]},\"182\":{\"h\":\"预付款保函\",\"t\":[\"预付款保函是指由保证人为被保证人向业主提供的，保证人对承包商履行扣还预付款义务的保证，以防止承包商在收到业主的预付款后将款项挪作他用或宣布破产等。\"]},\"183\":{\"h\":\"投标保函\",\"t\":[\"投标保函是指由保证人为投标人向招标人提供的，保证投标人按照招标文件的规定参加招标活动的担保。\"]},\"184\":{\"h\":\"农民工工资\",\"t\":[\"农民工工资保函是指由银行或其他金融机构为农民工出具的一种书面文件，承诺在一定期限内支付农民工的工资。 这种保函通常在工程建设领域得到广泛应用，以确保农民工能够按时足额地领取到自己的工资。\"]},\"185\":{\"h\":\"财产保全\",\"t\":[\"财产保全担保就是申请人在申请财产保全时向人民法院提供的担保，如果因保全错误为被申请人或案外人造成损失，申请人或担保人应予赔偿的制度。 在司法实践中，相应的把财产保全担保分为诉前保全担保和诉讼保全担保。\"]},\"186\":{\"h\":\"商业票据\",\"t\":[\"商业票据，是指由金融公司或某些信用较高的企业开出的无担保短期票据。商业票据的可靠程度依赖于发行企业的信用程度，可以背书转让，可以贴现。 商业票据的期限在一年以下，利率高于同期银行存款利率，商业票据可以由企业直接发售，也可以由经销商代为发售。但对出票企业信誉审查十分严格。 如由经销商发售，则它实际在幕后担保了售给投资者的商业票据，商业票据有时也以折扣的方式发售。英文Commercial Paper的缩写。 商业票据是一种无担保的短期期票（promissory note），有确定的金额及到期日。商业票据是一种可转让的金融工具，通常是不记名的。 与存款单（CD）一样，商业票据是筹措流动资金的工具。 从融资成本看，发行商业票据与存款单应没有什么区别，因为两者的收益率是相当的，但商业票据的期限通常在30天以内，以避免与存款单市场竞争。\"]},\"187\":{\"h\":\"融资租赁担保\",\"t\":[\"向承租人转移了与资产所有权有关的全部风险和报酬的租赁形式 融资租赁指向承租人转移了与资产所有权有关的全部风险和报酬的租赁形式。 在实际操作中，出租人根据承租人的请求，向承租人指定的出卖人，按承租人同意的条件，购买承租人指定的租赁物，并以承租人支付租金为条件，将该租赁物的占有、使用和收益权转让给承租人。 租赁期满，承租人支付事先约定的名义货价，租赁物转让给承租人。\"]},\"188\":{\"h\":\"政府采购担保\",\"t\":[\"政府采购担保作为一种政策工具被引入政府采购领域，专业担保机构向采购商、代理机构和金融机构提供供应商担保，主要包括投标担保、履约担保和融资担保。\\n政府采购信用担保作为分散风险和增强信用的市场运行的有效手段，有利于降低中小企业参与政府采购的成本，增加参与政府采购的机会，拓宽中小企业融资渠道，优化发展环境。\\n《财政部、工业和信息化部关于印发<政府采购促进中小企业发展暂行办法>的通知》第十条\\n采购人应当严格按照本办法规定和主管预算单位制定的预留采购份额具体方案开展采购活动。\\n预留份额的采购项目或者采购包，通过发布公告方式邀请供应商后，符合资格条件的中小企业数量不足3家的，应当中止采购活动，视同未预留份额的采购项目或者采购包，按照本办法第九条有关规定重新组织采购活动。\\n第十五条\\n鼓励各地区、各部门在采购活动中允许中小企业引入信用担保手段，为中小企业在投标（响应）保证、履约保证等方面提供专业化服务。\\n鼓励中小企业依法合规通过政府采购合同融资。\"]},\"189\":{\"h\":\"银担“总对总”批量担保业务\",\"t\":[\"内容：\",\"（一）优势互补、批量担保。“总对总”批量担保业务合作，依托银行服务网络、风险控制和技术能力，由银行按照规定的业务条件对担保贷款项目进行风险识别、评估和审批；政府性融资担保机构（以下简称承办担保机构）对担保贷款项目进行合规性审核确认，不再做重复性尽职调查。 （二）风险共担共管。银担双方按比例分担合作业务风险责任并事先锁定合作业务总体担保代偿率上限，进行担保风险总量控制。 （三）保障及时代偿。国家融资担保基金、省级融资担保再担保机构（以下简称省级再担保机构）、承办担保机构根据合作业务规模，分期预拨担保代偿补偿备付资金，存入省级再担保机构在银行分支机构设立的备付金账户，保障及时提供担保代偿。 （四）资产处置权益共享。银担双方共同负责对担保代偿项目进行债权追索，追索获得的资金，在扣除追偿费用后按业务风险分担比例进行分配。\",\"（一）担保贷款对象。小微企业、“三农”、创业创新市场主体、战略性新兴产业企业等符合《国务院办公厅关于有效发挥政府性融资担保基金作用 切实支持小微企业和“三农”发展的指导意见》（国办发〔2019〕6号）规定的担保支持对象。 （二）担保贷款额度。单户或单笔贷款金额不超过人民币1000万元。 （三）担保贷款条件。贷款项目应符合国家信贷政策和监管要求，不得为地方政府（及地方融资平台）提供贷款担保，禁止将存量担保费率低于1%/年的担保贷款业务纳入合作范围。 （四）支小支农业务占比。支小支农担保贷款金额占全部担保贷款金额的比例不得低于80%，且单户或单笔500万元及以下担保贷款金额占比不得低于50%，以合作银行省级分行（以下简称银行分行）为单位计算。 （五）降低担保贷款门槛。对担保贷款不得设置资产抵（质）押担保和反担保措施。\",\"（一）银担分险比例。银行和政府性融资担保体系分别承担担保贷款本息20%、80%的风险责任。 （二）政府性融资担保体系内部风险分担比例。国家融资担保基金与地方融资担保再担保机构分别按担保贷款本息30%、50%分担风险责任。其中省级再担保机构分担风险比例不低于贷款本息20%，鼓励有条件的省级再担保机构进一步提高分担风险责任比例。 （三）担保、再担保收费。承办融资担保机构按照贷款金额的1%/年向企业收取担保费；国家融资担保基金按照贷款金额的0.1%/年向省级再担保机构收取再担保费，省级再担保机构再担保费率不得高于国家融资担保基金。担保费、再担保费为一次性收取，若因企业提前还贷或其他情形，提前解除担保责任或银行免除担保代偿责任，不退担保费、再担保费。 （四）担保代偿率上限。担保代偿率上限为3%，以承办担保机构为单位核算，计算公式为：合作期担保代偿率=累计担保代偿金额（包含本金、正常利息）/（累计年化担保贷款本金×80%）。 （五）设立担保代偿补偿备付金账户。省级再担保机构在各合作银行分行设立担保代偿补偿备付金账户，并委托银行分行管理。国家融资担保基金、省级再担保机构、承办担保机构根据每月新增业务规模和担保代偿率上限，计算应存备付金并足额存入备付金账户。 （六）担保代偿项目债权追索处置。对担保代偿项目，银担双方可分别对客户进行债权追索或由一方委托对方负责对客户进行债权追索，任何一方追索获得的资金，应当在扣除追偿费用后按风险分担比例进行分配。\",\"（一）银行受理、审批项目。直接办理担保贷款的银行机构（以下简称承办银行）受理企业提出的担保贷款申请，对符合条件的担保贷款项目，按照银行贷款评审要求和程序完成贷款审批。 （二）各方签订合同。承办银行与企业、承办担保机构签订贷款合同、保证合同或担保函，并受承办担保机构委托指导企业签订委托担保合同等法律文件。 （三）担保收费、放款。承办银行指导企业将担保费汇入承办担保机构在银行设立的账户，并在确认完成担保收费后放款。承办担保机构完成担保收费后向企业开具发票。 （四）担保贷款项目登记备案。承办银行每月前5个工作日内将上月担保贷款业务清单、业务汇总表向承办担保机构备案，并报送银行分行；银行分行每月前8个工作日内将备案担保贷款业务清单、业务汇总表报汇总后报送总行和省级再担保机构；省级再担保机构、银行总行每月前15个工作日内分别将备案担保贷款业务清单、业务汇总表报送国家融资担保基金。承办担保机构按月向省级再担保机构缴纳再担保费，省级再担保机构按月向国家融资担保基金缴纳再担保费。 （五）存入担保代偿补偿备付金。国家融资担保基金、省级再担保机构、承办担保机构根据当月登记备案业务规模，按月将担保代偿补偿备付金足额存入省级再担保机构在银行分行设立的备付金账户。备付金账户资金及产生的利息收益归出资方所有。 （六）业务合规性审核。承办担保机构每月收到备案业务清单后，开展合规性审核，月底前将审核结果报送省级再担保机构；省级再担保机构收到承办担保机构报送的审核结果后，在10个工作日内完成复核确认工作，同时将确认结果反馈给承办担保机构和银行分行，报送国家融资担保基金。银行分行将业务合规性审核结果反馈给承办银行并报送总行。对经合规性审核认定为不合规的担保项目，由承办银行免除担保代偿责任，相关各方做好登记，并及时对相关业务数据进行调整。 （七）业务风险缓释。承办银行对需要进行展期、无还本续贷的担保贷款项目，可以参照上述业务操作流程办理，由承办担保机构继续提供担保，省级再担保机构和国家融资担保基金为有关担保项目继续提供再担保。 （八）担保代偿补偿责任履行。担保贷款项目发生风险，需要进行担保代偿，由承办银行在合作业务规模担保代偿限额内向银行分行提出代偿申请。银行分行审核通过后，按照委托管理协议直接支付代偿资金。 承办银行每月前5个工作日内将上月已担保代偿项目汇总提交承办担保机构；承办担保机构每月前10个工作日内完成对上月代偿项目审核，并与承办银行核对后将审核结果报送省级再担保机构；省级再担保机构每月前15个工作日内完成复核确认，并将结果报送国家融资担保基金，同时反馈给银行分行和承办担保机构；银行分行将审核结果反馈给承办银行，同时报送银行总行。 若承办银行对承办担保机构的审核结果有异议，由省级再担保机构会同银行分行审核确认。对经审核认定为不符合代偿条件的项目，银行免除担保代偿责任，将已支付的担保代偿补偿备付金退回。 （九）担保代偿补偿备付金账户管理。银行分行每月与省级再担保机构就担保代偿补偿备付金使用、账户变动等情况进行对账；省级再担保机构每月向承办担保机构反馈担保代偿补偿备付金使用情况，向国家融资担保基金报送担保代偿补偿备付金使用情况以及担保代偿补偿项目明细及业务汇总表等。 （十）担保代偿项目抽查。国家融资担保基金可组织对上一年代偿项目进行抽查，发现有不合规的项目，银行免除担保代偿责任，返还担保代偿资金，并按照规定和程序追究相关人员责任。 上述业务操作流程，具体以各方签订的合作协议内容为准。\",\"国家融资担保基金根据上一年各银行批量担保业务开展情况，对合作银行进行考核评价，对支小支农业务占比合格、业务规模增长快、合作业务开展较好的银行进行政策倾斜。对不合规业务多、问题特别严重的银行机构，国家融资担保基金可暂停或终止与其合作，并及时向金融监管部门和财政部报告。各省级再担保机构、承办担保机构负责对银行分行、承办银行进行业务合作考核评价，落实国家融资担保基金对合作银行考评要求。\",\"（一）确定合作银行、担保机构。国家融资担保基金发文，向已合作的银行、省级再担保机构发出开展银担“总对总”批量担保业务合作意向函。银行、省级再担保机构分别向国家融资担保基金报送业务合作申请。国家融资担保基金综合评估后，确定首批合作银行、省级再担保机构。 （二）确定合作业务规模。合作银行分行与所在区域省级再担保机构组织做好业务沟通，确定意向合作业务规模，并共同向总行和国家融资担保基金申报。国家融资担保基金统筹确定与各合作银行的合作业务规模。 （三）签订合作协议。 1.国家融资担保基金与银行总行签订《银担“总对总”批量担保业务合同》，对各方权利义务进行明确规定；联合发文推出银担“总对总”批量担保产品。 2.国家融资担保基金与省级再担保机构签订《银担“总对总”批量再担保合同》，对各方权利义务进行明确规定。 3.省级再担保机构根据上述两项合同、有关文件，与当地承办担保机构、银行分行签订业务合同，对各方权利义务进行明确规定。对没有市县承办担保机构开展业务的市县，由省级再担保机构直接或委托其他承办担保机构开展业务。\",\"来源：https://www.gjrdjj.com/content/details_18_422.htmlhttps://www.gjrdjj.com/content/details_22_435.htmlhttps://www.gjrdjj.com/upload/file/20200527/20200527185020_18938.pdf\"]},\"190\":{\"h\":\"分布式CAP概念\",\"t\":[\"​ 2000年7月，加州大学伯克利分校的Eric Brewer教授ACM PODC会议上提出CAP猜想。两年后，麻省理工学院的seth Gilbert和Nancy Lynch从理论上证明了CAP。之后，CAP理论正式成为分布式计算领域的公认理论。(理论是有时间期限的，没有绝对意义上的公理，是相对于目前计算机科学水平)；\"]},\"191\":{\"h\":\"CAP原理概述\",\"t\":[\"​ 一个分布式系统最多只能同时满足一致性(consistency)、可用性(Availability)、分区容错性(Partition tolerance)的两个\",\"image-20201214134902337\"]},\"192\":{\"h\":\"Consistency 一致性\",\"t\":[\"​ 一致性指“all nodes see the same data at the same time”，即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致，所以，一致性，说的就是数据一致性。分布式的一致性。 ​ 对于一致性，可以分为从客户端和服务端两个不同的视角。从客户端来看，一致性主要指的是多并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。 ​ 一致性是因为有并发读写才有的问题，因此在理解一致性的问题时，一定要注意结合考虑并发读写的场景。从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了不同的一致性。\"]},\"193\":{\"h\":\"三种一致性策略\",\"t\":[\"​ 对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一致性。 ​ 如果能容忍后续的部分或者全部访问不到，则是弱一致性。 ​ 如果经过一段时间后要求能访问到更新后的数据，则是最终一致性。 ​ CAP中说，不可能同时满足的这个一致性指的是强一致性。\"]},\"194\":{\"h\":\"Availability 可用性\",\"t\":[\"​ 可用性指“Reads and writes always succeed”，即服务一直可用，而且是正常响应时间。 ​ 对于一个可用性的分布式系统，每一个非故障的节点必须对每一个请求作出响应。所以，在衡量一个系统的可用性的时候，都是通过停机时间来计算的，借鉴淘宝的标准如下：\",\"image-20201214135053884\",\"​ 通常我们描述一个系统的可用性时，我们说淘宝的系统可用性可以达到5个9，意思就是说他的可用水平是99.999%，即全年停机时间不超过 (1-0.99999)36524*60 = 5.256 min，这是一个极高的要求。\",\"​ 好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。一个分布式系统，上下游设计很多系统如负载均衡、WEB服务器、应用代码、数据库服务器等，任何一个节点的不稳定都可以影响可用性。\"]},\"195\":{\"h\":\"Partition Tolerance分区容错性\",\"t\":[\"​ 分区容错性指“the system continues to operate despite arbitrary message loss or failure of part of the system”，即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。 ​ 分区容错性和扩展性紧密相关。在分布式应用中，可能因为一些分布式的原因导致系统无法正常运转。好的分区容错性要求能够使应用虽然是一个分布式系统，而看上去却好像是在一个可以运转正常的整体。比如现在的分布式系统中有某一个或者几个机器宕掉了，其他剩下的机器还能够正常运转满足系统需求，或者是机器之间有网络异常，将分布式系统分隔未独立的几个部分，各个部分还能维持分布式系统的运作，这样就具有好的分区容错性。 ​ 简单点说，就是在网络中断，消息丢失的情况下，系统如果还能正常工作，就是有比较好的分区容错性。\"]},\"196\":{\"h\":\"CA without P\",\"t\":[\"​ 这种情况在分布式系统中几乎是不存在的。首先在分布式环境下，网络分区是一个自然的事实。因为分区是必然的，所以如果舍弃P，意味着要舍弃分布式系统。那也就没有必要再讨论CAP理论了。这也是为什么在前面的CAP证明中，我们以系统满足P为前提论述了无法同时满足C和A。 比如我们熟知的关系型数据库，如My Sql和Oracle就是保证了可用性和数据一致性，但是他并不是个分布式系统。一旦关系型数据库要考虑主备同步、集群部署等就必须要把P也考虑进来。 ​ 其实，在CAP理论中。C，A，P三者并不是平等的，CAP之父在《Spanner，真时，CAP理论》一文中写到： 如果说Spanner真有什么特别之处，那就是谷歌的广域网。Google通过建立私有网络以及强大的网络工程能力来保证P，在多年运营改进的基础上，在生产环境中可以最大程度的减少分区发生，从而实现高可用性。 ​ 从Google的经验中可以得到的结论是，无法通过降低CA来提升P。要想提升系统的分区容错性，需要通过提升基础设施的稳定性来保障。 ​ 所以，对于一个分布式系统来说。P是一个基本要求，CAP三者中，只能在CA两者之间做权衡，并且要想尽办法提升P。\"]},\"197\":{\"h\":\"CP without A\",\"t\":[\"​ 如果一个分布式系统不要求强的可用性，即容许系统停机或者长时间无响应的话，就可以在CAP三者中保障CP而舍弃A。一个保证了CP而一个舍弃了A的分布式系统，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。 ​ 设计成CP的系统其实也不少，其中最典型的就是很多分布式数据库，他们都是设计成CP的。在发生极端情况时，优先保证数据的强一致性，代价就是舍弃系统的可用性。如Redis、HBase等，还有分布式系统中常用的Zookeeper也是在CAP三者之中选择优先保证CP的。 ​ 无论是像Redis、HBase这种分布式存储系统，还是像Zookeeper这种分布式协调组件。数据的一致性是他们最最基本的要求。一个连数据一致性都保证不了的分布式存储要他有何用？\"]},\"198\":{\"h\":\"CPwithoutA示例说明\",\"t\":[\"ZooKeeper是个CP（一致性+分区容错性） 即任何时刻对ZooKeeper的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性。但是它不能保证每次服务请求的可用性，也就是在极端环境下(出现网络分区的情况下，需要重新选主节点，这个时候zookeeper是不能立即响应请求的)，ZooKeeper可能会丢弃一些请求，消费者程序需要重新请求才能获得结果。ZooKeeper是分布式协调服务，它的职责是保证数据在其管辖下的所有服务之间保持同步、一致。所以就不难理解为什么ZooKeeper被设计成CP而不是AP特性的了。\"]},\"199\":{\"h\":\"HBase是强一致性系统\",\"t\":[\"Hbase具有以下特点 • 每个值只出现在一个REGION • 同一时间一个Region只分配给一个Region服务器 • 行内的mutation操作都是原子的(原子性操作是指：如果把一个事务可看作是一个程序,它要么完整的被执行,要么完全不执行)。 • put操作要么成功，要么完全失败。\",\"​ 联系上文提到的一致性特点，可以得出HBase是强一致性系统的结论。\",\"​ 当某台region server fail的时候，它管理的region failover到其他region server时，需要根据WAL log（Write-Ahead Logging）来redo(redolog，有一种日志文件叫做重做日志文件)，这时候进行redo的region应该是unavailable的，所以hbase降低了可用性，提高了一致性。设想一下，如果redo的region能够响应请求，那么可用性提高了，则必然返回不一致的数据(因为redo可能还没完成)，那么hbase就降低一致性来提高可用性了。\"]},\"200\":{\"h\":\"CPwithoutA示例说明\"},\"201\":{\"h\":\"AP wihtout C\",\"t\":[\"​ 要高可用并允许分区，则需放弃一致性。一旦网络问题发生，节点之间可能会失去联系。为了保证高可用，需要在用户访问时可以马上得到返回，则每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。 ​ 这种舍弃强一致性而保证系统的分区容错性和可用性的场景和案例非常多。前面我们介绍可用性的时候说到过，很多系统在可用性方面会做很多事情来保证系统的全年可用性可以达到N个9，所以，对于很多业务系统来说，比如淘宝的购物，12306的买票。都是在可用性和一致性之间舍弃了一致性而选择可用性。\"]},\"202\":{\"h\":\"APwithoutC示例说明\",\"t\":[\"​ 你在xx电商双十一购物的时候，同时下单的并发很高，如果先检查库存，再减库存，确定下单的话，效率会很低，减库存+下单的原子操作成为系统瓶颈，效应时间过长，用户体验就非常差了，为了提高用户体验，不用每一次下单都减库存，而是隔一段时间检查库存，这样会导致商家超卖，用户下单体验好了，超卖的那部分用户的收货时候就会出现库存不足，收货延迟的现象。 你在12306买票的时候肯定遇到过这种场景，当你购买的时候提示你是有票的（但是可能实际已经没票了），你也正常的去输入验证码，下单了。但是过了一会系统提示你下单失败，余票不足。这其实就是先在可用性方面保证系统可以正常的服务，然后在数据的一致性方面做了些牺牲，会影响一些用户体验，但是也不至于造成用户流程的严重阻塞。 ​ 我们说很多网站牺牲了一致性，选择了可用性，这其实也不准确的。就比如上面的买票的例子，其实舍弃的只是强一致性。退而求其次保证了最终一致性。也就是说，虽然下单的瞬间，关于车票的库存可能存在数据不一致的情况，但是过了一段时间，还是要保证最终一致性的。 对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所以节点故障、网络故障是常态，而且要保证服务可用性达到N个9，即保证P和A，舍弃C（退而求其次保证最终一致性）。虽然某些地方会影响客户体验，但没达到造成用户流程的严重程度。\"]},\"203\":{\"h\":\"APwithoutC示例说明\",\"t\":[\"​\\t\\t上面介绍了如何CAP中权衡及取舍以及典型的案例。孰优孰略，没有定论，只能根据场景定夺，适合的才是最好的。\\n​\\t\\t对于涉及到钱财这样不能有一丝让步的场景，C必须保证。网络发生故障宁可停止服务，这是保证CA，舍弃P。比如前几年支付宝光缆被挖断的事件，在网络出现故障的时候，支付宝就在可用性和数据一致性之间选择了数据一致性，用户感受到的是支付宝系统长时间宕机，但是其实背后是无数的工程师在恢复数据，保证数数据的一致性。\\n​\\t\\t对于其他场景，比较普遍的做法是选择可用性和分区容错性，舍弃强一致性，退而求其次使用最终一致性来保证数据的安全。这其实是分布式领域的另外一个理论——BASE理论(CAP的C变成最终一致性)。\"]},\"204\":{\"h\":\"分布式全局唯一ID生成策略\",\"t\":[\"在复杂分布式系统中，往往需要对大量的数据和消息进行唯一标识。\",\"当需要将节点之间在不同时间的交互做唯一标识，数据日渐增长，\",\"对数据库的分库分表后需要有一个唯一ID来标识一条数据或消息，数据库的自增ID显然不能满足需求。\",\"此时一个能够生成全局唯一ID的系统是非常必要的。\",\"1、全局唯一性：不能出现重复的ID（最基本的要求）\",\"2、高性能，低延迟。（不要太繁杂的算法）\",\"3、易于存储，（占用较低的空间）\"]},\"205\":{\"h\":\"1、雪花算法 snowflake\",\"t\":[\"1570599617667\",\"1位标识：由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0\",\"41位时间戳：41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截 )得到的值，这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的。可以使用69年，年T = (1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69\",\"10位机器标识码：可以部署在1024个节点（2^10=1024），如果机器分机房（IDC）部署，这10位可以由 5位机房ID + 5位机器ID 组成。（但是这个也是会重复的网上说法木有参考性，可以改为TPM安全芯片、网卡等的唯一标识码，原则上他们是全球唯一的）\",\"12位序列：毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号\"]},\"206\":{\"h\":\"（1）优点：\",\"t\":[\"时间戳在高位，自增序列在低位，整个ID是趋势递增的，按照时间有序递增。（排序方便，会有很多好处）\",\"灵活度高，可以根据业务需求，调整bit位的划分\",\"不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的（多一个依赖的组件，多一个风险，并增加了系统的复杂性）\"]},\"207\":{\"h\":\"（2）缺点：\",\"t\":[\"依赖机器的时钟，如果服务器时钟回拨，会导致重复ID生成。（网上有优化时钟回拨问题利用记录最后一次成ID的时间，也可利用zookeeper、redis中间件）\",\"在分布式环境上，每个服务器的时钟不可能完全同步，有时会出现不是全局递增的情况。\",\"应用举例：\",\"Mongdb objectID\",\"可以算作是和snowflake类似方法，通过“时间+机器码+pid+inc”共12个字节，通过4+3+2+3的方式最终标识成一个24长度的十六进制字符。\"]},\"208\":{\"h\":\"2、UUID\",\"t\":[\"UUID是Universally Unique Identifier的缩写，它是在一定的范围内（从特定的名字空间到全球）唯一的机器生成的标识符。（微软叫GUID：Globally Unique Identifier）\",\"为了保证UUID的唯一性，规范定义了包括网卡MAC地址、时间戳、名字空间（Namespace）、随机或伪随机数、时序等元素，以及从这些元素生成UUID的算法。UUID的复杂特性在保证了其唯一性的同时，意味着只能由计算机生成。\",\"（1）基于时间的UUID\",\"基于时间的UUID通过计算当前时间戳、随机数和机器MAC地址得到。由于在算法中使用了MAC地址，这个版本的UUID可以保证在全球范围的唯一性。但与此同时，使用MAC地址会带来安全性问题（曾被用于寻找梅丽莎病毒的制作者位置）。如果应用只是在局域网中使用，也可以使用退化的算法，以IP地址来代替MAC地址－－Java的UUID往往是这样实现的（当然也考虑了获取MAC的难度）。\",\"（2）DCE安全的UUID\",\"DCE（Distributed Computing Environment）安全的UUID和基于时间的UUID算法相同，但会把时间戳的前4位置换为POSIX的UID或GID。这个版本的UUID在实际中较少用到。\",\"（3）基于名字的UUID（MD5）\",\"基于名字的UUID通过计算名字和名字空间的MD5散列值得到。这个版本的UUID保证了：相同名字空间中不同名字生成的UUID的唯一性；不同名字空间中的UUID的唯一性；相同名字空间中相同名字的UUID重复生成是相同的。\",\"（4) 随机UUID\",\"根据随机数，或者伪随机数生成UUID。这种UUID产生重复的概率是可以计算出来的，但随机的东西就像是买彩票：你指望它发财是不可能的，但狗屎运通常会在不经意中到来。\",\"(5) 基于名字的UUID（SHA1）\",\"和版本3的UUID算法类似，只是散列值计算使用SHA1（Secure Hash Algorithm 1）算法。\"]},\"209\":{\"h\":\"(1) 优点：\",\"t\":[\"性能非常高：本地生成，没有网络消耗。\"]},\"210\":{\"h\":\"(2) 缺点：\",\"t\":[\"不易于存储：UUID太长，16字节128位，通常以36长度的字符串表示，很多场景不适用\",\"信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露\",\"ID作为主键时在特定的环境会存在一些问题，比如做DB主键的场景下，UUID就非常不适用（mysql主键索引是B+树，推荐使用自增存储效率高）\"]},\"211\":{\"h\":\"3、利用数据库\",\"t\":[\"步长需设置为N，每台的初始值依次为0,1,2…N-1那么整个架构就变成了如下图所示：\",\"1570600564344\",\"美团Leaf-segment方案直接取一批号段，用完再取一批号段，避免每次都去请求数据库导致连接数和线程数过大。\",\"Mongdb objectID: https://docs.mongodb.com/manual/reference/method/ObjectId/#description\\nLeaf——美团点评分布式ID生成系统: https://tech.meituan.com/2017/04/21/mt-leaf.html\\n分布式ID生成 - 雪花算法: https://blog.csdn.net/u012488504/article/details/82194495\\n梅丽莎病毒: https://baike.baidu.com/item/梅丽莎病毒/9739231\\nmysql中InnoDB表为什么要建议用自增列做主键: https://www.cnblogs.com/moyand/p/9013663.html\"]},\"212\":{\"h\":\"分布式锁\",\"t\":[\"​ 当多个进程在同一个系统中，用分布式锁控制多个进程对资源的访问。传统的单体应用单机部署情况下，可以使用java并发处理相关的API进行互斥控制。分布式系统后由于多线程，多进程分布在不同机器上，使单机部署情况下的并发控制锁策略失效，为了解决跨JVM互斥机制来控制共享资源的访问，这就是分布式锁的来源；分布式锁应用场景大都是高并发、大流量场景。\"]},\"213\":{\"h\":\"（1）、redis分布式锁的实现\",\"t\":[\"加锁机制：根据hash节点选择一个客户端执行lua脚本\",\"锁互斥机制：再来一个客户端执行同样的lua脚本会提示已经存在锁，然后进入循环一直尝试加锁\",\"可重入机制\",\"watch dog自动延期机制\",\"释放锁机制\",\"1\",\"测试用例 单机\",\"private RedissonClient getClient(){ Config config = new Config(); config.useSingleServer().setAddress(\\\"redis://127.0.0.1:6379\\\");//.setPassword(\\\"\\\");//.setConnectionMinimumIdleSize(10).setConnectionPoolSize(10);//.setConnectionPoolSize();//172.16.10.164 RedissonClient redissonClient = Redisson.create(config); return redissonClient; } private ExecutorService executorService = Executors.newCachedThreadPool(); @Test public void test() throws Exception { int[] count = {0}; for (int i = 0; i < 10; i++) { RedissonClient client = getClient(); final RedisLock redisLock = new RedisLock(client,\\\"lock_key\\\"); executorService.submit(() -> { try { redisLock.lock(); count[0]++; } catch (Exception e) { e.printStackTrace(); } finally { try { redisLock.unlock(); } catch (Exception e) { e.printStackTrace(); } } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.HOURS); System.out.println(count[0]); } \",\"RedLock\",\"public static RLock create (String url, String key){ Config config = new Config(); config.useSingleServer().setAddress(url); RedissonClient redissonClient = Redisson.create(config); return redissonClient.getLock(key); } RedissonRedLock redissonRedLock = new RedissonRedLock( create(\\\"redis://redis://127.0.0.1:6379\\\",\\\"lock_key1\\\"), create(\\\"redis://redis://127.0.0.1:6380\\\",\\\"lock_key2\\\"), create(\\\"redis://redis://127.0.0.1:6381\\\",\\\"lock_key3\\\")); RedisRedLock redLock = new RedisRedLock(redissonRedLock); private ExecutorService executorService = Executors.newCachedThreadPool(); @Test public void test() throws Exception { int[] count = {0}; for (int i = 0; i < 2; i++) { executorService.submit(() -> { try { redLock.lock(); count[0]++; } catch (Exception e) { e.printStackTrace(); } finally { try { redLock.unlock(); } catch (Exception e) { e.printStackTrace(); } } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.HOURS); System.out.println(count[0]); } \",\"利用StringRedisTemplate，分布式锁工具类\",\"import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.StringRedisTemplate; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; import java.util.concurrent.TimeUnit; @Component public class RedisLock { private static final Logger logger = LoggerFactory.getLogger(RedisLock.class); @Autowired private StringRedisTemplate stringRedisTemplate; /** * 加锁 * * @param key - 唯一标志 * @param value 跟唯一标志对应的随机值 * @return */ public boolean lock(String key, String value) { //设置30秒的锁 return stringRedisTemplate.opsForValue().setIfAbsent(key, value, 30, TimeUnit.SECONDS);//对应setnx命令 } /** * 解锁 * * @param key * @param value */ public void unlock(String key, String value) { try { String currentValue = stringRedisTemplate.opsForValue().get(key); if (!StringUtils.isEmpty(currentValue) && currentValue.equals(value)) { stringRedisTemplate.opsForValue().getOperations().delete(key);//删除key } } catch (Exception e) { logger.error(\\\"[Redis分布式锁] 解锁出现异常\\\", e); } } } \",\"String uuid = UUID.randomUUID().toString(); boolean lock = redisLock.lock(\\\"lock_\\\" + id, uuid); if (lock) { // xxxxxx } redisLock.unlock(\\\"lock_\\\" + id, uuid); \"]},\"214\":{\"h\":\"（2）、基于ETCD实现分布式锁分析\",\"t\":[\"ETCD分布式锁的实现\",\"Lease机制：租约机制（TTL，Time To Live），Etcd 可以为存储的 key-value 对设置租约，当租约到期，key-value 将失效删除；同时也支持续约，通过客户端可以在租约到期之前续约，以避免 key-value 对过期失效。Lease 机制可以保证分布式锁的安全性，为锁对应的 key 配置租约，即使锁的持有者因故障而不能主动释放锁，锁也会因租约到期而自动释放。\",\"Revision机制：每个 key 带有一个 Revision 号，每进行一次事务加一，它是全局唯一的，通过 Revision 的大小就可以知道进行写操作的顺序。在实现分布式锁时，多个客户端同时抢锁，根据 Revision 号大小依次获得锁，可以避免 “羊群效应” ，实现公平锁。\",\"Prefix机制：即前缀机制。例如，一个名为 /etcdlock 的锁，两个争抢它的客户端进行写操作，实际写入的 key 分别为：key1=\\\"/etcdlock/UUID1\\\"，key2=\\\"/etcdlock/UUID2\\\"，其中，UUID 表示全局唯一的 ID，确保两个 key 的唯一性。写操作都会成功，但返回的 Revision 不一样，那么，如何判断谁获得了锁呢？通过前缀 /etcdlock 查询，返回包含两个 key-value 对的的 KeyValue 列表，同时也包含它们的 Revision，通过 Revision 大小，客户端可以判断自己是否获得锁。\",\"Watch机制：即监听机制，Watch 机制支持 Watch 某个固定的 key，也支持 Watch 一个范围（前缀机制），当被 Watch 的 key 或范围发生变化，客户端将收到通知；在实现分布式锁时，如果抢锁失败，可通过 Prefix 机制返回的 KeyValue 列表获得 Revision 比自己小且相差最小的 key（称为 pre-key），对 pre-key 进行监听，因为只有它释放锁，自己才能获得锁，如果 Watch 到 pre-key 的 DELETE 事件则说明 pre-key 已经释放，自己已经持有锁。\",\"基于ETCD实现分布式锁分析\",\"基于ETCD分布式锁\",\"**步骤1：**建立连接\",\"客户端连接 Etcd，以 /etcd/lock 为前缀创建全局唯一的 key，假设第一个客户端对应的 key=\\\"/etcd/lock/UUID1\\\"，第二个为 key=\\\"/etcd/lock/UUID2\\\"；客户端分别为自己的 key 创建租约 - Lease，租约的长度根据业务耗时确定；\",\"**步骤2：**创建定时任务作为租约的“心跳”\",\"当一个客户端持有锁期间，其它客户端只能等待，为了避免等待期间租约失效，客户端需创建一个定时任务作为“心跳”进行续约。此外，如果持有锁期间客户端崩溃，心跳停止，key 将因租约到期而被删除，从而锁释放，避免死锁。\",\"**步骤3：**客户端将自己全局唯一的 key 写入 Etcd\",\"执行 put 操作，将步骤 1 中创建的 key 绑定租约写入 Etcd，根据 Etcd 的 Revision 机制，假设两个客户端 put 操作返回的 Revision 分别为 1、2，客户端需记录 Revision 用以接下来判断自己是否获得锁\",\"**步骤 4：**客户端判断是否获得锁\",\"客户端以前缀 /etcd/lock/ 读取 keyValue 列表，判断自己 key 的 Revision 是否为当前列表中最小的，如果是则认为获得锁；否则监听列表中前一个 Revision 比自己小的 key 的删除事件，一旦监听到删除事件或者因租约失效而删除的事件，则自己获得锁。\",\"**步骤 5：**执行业务\",\"获得锁后，操作共享资源，执行业务代码\",\"**步骤 6：**释放锁\",\"完成业务流程后，删除对应的key释放锁\",\"例子：\",\"public class EtcdDistributeLock extends AbstractLock{ private Client client; private Lock lockClient; private Lease leaseClient; private String lockKey; private String lockPath; /** 锁的次数 */ private AtomicInteger lockCount; /** 租约有效期,防止客户端崩溃，可在租约到期后自动释放锁；另一方面，正常执行过程中，会自动进行续租,单位 ns */ private Long leaseTTL; /** 续约锁租期的定时任务，初次启动延迟，单位默认为 s,默认为1s，可根据业务定制设置*/ private Long initialDelay = 0L; /** 定时任务线程池类 */ ScheduledExecutorService service = null; /** 保存线程与锁对象的映射，锁对象包含重入次数，重入次数的最大限制为Int的最大值 */ private final ConcurrentMap<Thread, LockData> threadData = Maps.newConcurrentMap(); public EtcdDistributeLock(){} public EtcdDistributeLock(Client client, String lockKey, long leaseTTL,TimeUnit unit){ this.client = client; lockClient = client.getLockClient(); leaseClient = client.getLeaseClient(); this.lockKey = lockKey; // 转纳秒 this.leaseTTL = unit.toNanos(leaseTTL); service = Executors.newSingleThreadScheduledExecutor(); } @Override public void lock() { // 检查重入性 Thread currentThread = Thread.currentThread(); LockData oldLockData = threadData.get(currentThread); if (oldLockData != null && oldLockData.isLockSuccess()) { // re-entering int lockCount = oldLockData.lockCount.incrementAndGet(); if(lockCount < 0 ){ throw new Error(\\\"超出可重入次数限制\\\"); } return; } // 记录租约 ID Long leaseId = 0L; try{ leaseId = leaseClient.grant(TimeUnit.NANOSECONDS.toSeconds(leaseTTL)).get().getID(); // 续租心跳周期 long period = leaseTTL - leaseTTL / 5; // 启动定时任务续约 service.scheduleAtFixedRate(new EtcdDistributeLock.KeepAliveRunnable(leaseClient, leaseId), initialDelay,period,TimeUnit.NANOSECONDS); LockResponse lockResponse = lockClient.lock(ByteSequence.from(lockKey.getBytes()), leaseId).get(); if(lockResponse != null){ lockPath = lockResponse.getKey().toString(Charset.forName(\\\"utf-8\\\")); log.info(\\\"获取锁成功,锁路径:{},线程:{}\\\",lockPath,currentThread.getName()); } }catch (InterruptedException | ExecutionException e){ log.error(\\\"获取锁失败\\\",e); return; } // 获取锁成功，锁对象设置 LockData newLockData = new LockData(currentThread, lockKey); newLockData.setLeaseId(leaseId); newLockData.setService(service); threadData.put(currentThread, newLockData); newLockData.setLockSuccess(true); } @Override public void lockInterruptibly() throws InterruptedException { super.lockInterruptibly(); } @Override public boolean tryLock() { return super.tryLock(); } @Override public boolean tryLock(long time, TimeUnit unit) throws InterruptedException { return super.tryLock(time,unit); } @Override public void unlock() { Thread currentThread = Thread.currentThread(); LockData lockData = threadData.get(currentThread); if (lockData == null){ throw new IllegalMonitorStateException(\\\"You do not own the lock: \\\" + lockKey); } int newLockCount = lockData.lockCount.decrementAndGet(); if ( newLockCount > 0 ) { return; } if ( newLockCount < 0 ) { throw new IllegalMonitorStateException(\\\"Lock count has gone negative for lock: \\\" + lockKey); } try { // 释放锁 if(lockPath != null){ lockClient.unlock(ByteSequence.from(lockPath.getBytes())).get(); } if(lockData != null){ // 关闭定时任务 lockData.getService().shutdown(); // 删除租约 if (lockData.getLeaseId() != 0L) { leaseClient.revoke(lockData.getLeaseId()); } } } catch (InterruptedException | ExecutionException e) { log.error(\\\"解锁失败\\\",e); }finally { // 移除当前线程资源 threadData.remove(currentThread); } } @Override public Condition newCondition() { return super.newCondition(); } /** * 心跳续约线程类 */ public static class KeepAliveRunnable implements Runnable { private Lease leaseClient; private long leaseId; public KeepAliveRunnable(Lease leaseClient, long leaseId) { this.leaseClient = leaseClient; this.leaseId = leaseId; } @Override public void run() { // 对该leaseid进行一次续约 leaseClient.keepAliveOnce(leaseId); } } \",\"public class EtcdLockTest { private Client client; private String key = \\\"/etcd/lock\\\"; private static final String server = \\\"http://xxxx:xxxx\\\"; private ExecutorService executorService = Executors.newFixedThreadPool(10000); @Before public void before() throws Exception { initEtcdClient(); } private void initEtcdClient(){ client = Client.builder().endpoints(server).build(); } @Test public void testEtcdDistributeLock() throws InterruptedException { int[] count = {0}; for (int i = 0; i < 100; i++) { executorService.submit(() -> { final EtcdDistributeLock lock = new EtcdDistributeLock(client, key,20,TimeUnit.SECONDS); try { lock.lock(); count[0]++; } catch (Exception e) { e.printStackTrace(); } finally { try { lock.unlock(); } catch (Exception e) { e.printStackTrace(); } } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.HOURS); System.err.println(\\\"执行结果: \\\" + count[0]); } } \",\"（3）、基于Zookeeper分布式锁\",\"实现原理\",\"启动客户端，确认链接到了服务器\",\"多个客户端并发的在特定路径下创建临时性顺序节点\",\"客户端判断自己的创建的顺序节点是否是最小的，如果是最小的，则获取锁成功\",\"第三步若判定失败，则采用zk的watch机制监听自己的前一个顺序节点，等待前一个节点的删除（放锁）事件，再开始第三步判定\",\"基于Zookeeper分布式锁\",\"zookeeper作为高性能分布式协调框架，可以把其看做一个文件系统，其中有节点的概念，并且分为4种：1.持久性节点2.持久性顺序节点3.临时性节点4.临时性顺序节点。\",\"分布式锁的实现主要思路就是：监控其他客户端的状态，来判断自己是否可以获得锁。\",\"采用临时性顺序节点的原因：\",\"zk服务器维护了客户端的会话有效性，当会话失效的时候，其会话所创建的临时性节点都会被删除，通过这一特点，可以通过watch临时节点来监控其他客户端的情况，方便自己做出相应动作。\",\"因为zk对写操作是顺序性的，所以并发创建的顺序节点会有一个唯一确定的序号，当前锁是公平锁的一种实现，所以依靠这种顺序性可以很好的解释—节点序列小的获取到锁并且可以采用watch自己的前一个节点来避免惊群现象（这样watch事件的传播是线性的）。\",\"例子：\",\"public class ZKLock extends AbstractLock { /** * 1.Connect to zk */ private CuratorFramework client; private InterProcessLock lock ; public ZKLock(String zkAddress,String lockPath) { // 1.Connect to zk client = CuratorFrameworkFactory.newClient( zkAddress, new RetryNTimes(5, 5000) ); client.start(); if(client.getState() == CuratorFrameworkState.STARTED){ log.info(\\\"zk client start successfully!\\\"); log.info(\\\"zkAddress:{},lockPath:{}\\\",zkAddress,lockPath); }else{ throw new RuntimeException(\\\"客户端启动失败。。。\\\"); } this.lock = defaultLock(lockPath); } private InterProcessLock defaultLock(String lockPath ){ return new InterProcessMutex(client, lockPath); } @Override public void lock() { try { this.lock.acquire(); } catch (Exception e) { throw new RuntimeException(e); } } @Override public boolean tryLock() { boolean flag ; try { flag=this.lock.acquire(0,TimeUnit.SECONDS); } catch (Exception e) { throw new RuntimeException(e); } return flag; } @Override public boolean tryLock(long time, TimeUnit unit) throws InterruptedException { boolean flag ; try { flag=this.lock.acquire(time,unit); } catch (Exception e) { throw new RuntimeException(e); } return flag; } @Override public void unlock() { try { this.lock.release(); } catch (Exception e) { throw new RuntimeException(e); } } } \",\" private ExecutorService executorService = Executors.newCachedThreadPool(); @Test public void testLock() throws Exception{ ZKLock zkLock = new ZKLock(\\\"xxxx:xxxx\\\",\\\"/lockPath\\\"); int[] num = {0}; long start = System.currentTimeMillis(); for(int i=0;i<200;i++){ executorService.submit(()->{ try { zkLock.lock(); num[0]++; } catch (Exception e){ throw new RuntimeException(e); } finally { zkLock.unlock(); } }); } executorService.shutdown(); executorService.awaitTermination(1, TimeUnit.HOURS); log.info(\\\"耗时:{}\\\",System.currentTimeMillis()-start); System.out.println(num[0]); } \",\"redis的分布式锁中redisson一般为单实例，当单实例不可用时，会阻塞业务流程。主从方式、主从数据异步，会存在锁失效的问题。RedLock一般要求至少3台以上的redis主从实例，维护成本相对来说比较高。\",\"ZK锁具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。但是因为需要频繁的创建和删除节点，性能上不如Redis方式。\",\"ETCD分布式锁的实现原理与zk锁类似，但是ETCD分布式锁更加可靠强大。其Lease功能保证分布式锁的安全性；watch功能支持监听某个固定的key，也支持watch一个范围的key（前缀机制）；revision功能可通过 Revision 的大小就可以知道进行写操作的顺序。可以避免 “羊群效应” （也称 “惊群效应”），实现公平锁。前缀机制与watch功能配合使用解决了死锁问题。总之ETCD的灵感来源于Zookeeper,但实现的时候做了很多的改进，如：高负载下的稳定读写、数据模型的多版本并发控制、稳定的watch功能，通知订阅者监听值得变化、可以容忍脑裂现场的发生、客户端的协议使用gRPC协议,支持go、c++、java等。\"]},\"215\":{\"h\":\"1）公共方法的提取\",\"t\":[\"我们这里先定义一个 RedisLock 接口，代码如下所示：\",\"public interface RedisLock { /** * 尝试加锁 */ boolean tryLock(String key, long timeout, TimeUnit unit); /** * 解锁操作 */ void releaseLock(String key); } \"]},\"216\":{\"h\":\"2）实现\",\"t\":[\"接下来，我们基于上面已经实现的分布式锁的思路，来实现这个接口，代码如果所示：\",\"public class RedisLockImpl implements RedisLock { @Autowired private StringRedisTemplate stringRedisTemplate; @Override public boolean tryLock(String key, long timeout, TimeUnit unit) { return stringRedisTemplate.opsForValue().setIfAbsent(key, \\\"lock-test\\\", timeout, unit); } @Override public void releaseLock(String key) { stringRedisTemplate.delete(key); } } \"]},\"217\":{\"h\":\"3）加锁&解锁的归一化\",\"t\":[\"我们先来继续分析上面代码。从开发的角度来说，当一个线程从上到下执行一个需要加分布式锁的业务时，它首先需要进行加锁操作，当业务执行完毕后，再进行释放锁的操作。也就是先调用 tryLock() 函数再调用 releaseLock() 函数。\",\"锁的可能误删操作会使得程序存在很严重的问题，所以需要实现加锁&解锁的归一化。\",\"首先我们解释一下什么叫做加锁和解锁的归一化，简单来说，就是一个线程执行了加锁操作后，后续的解锁操作只能由该线程来执行，即加锁操作和解锁只能由同一线程来进行。\",\"使用 ThreadLocal 和 UUID 来实现，代码如下：\",\"public class RedisLockImpl implements RedisLock { @Autowired private StringRedisTemplate stringRedisTemplate; private ThreadLocal<string> threadlocal = new ThreadLocal<>(); @Override public boolean tryLock(String key, long timeout, TimeUnit unit) { String uuid = UUID.randomUUID().toString(); threadlocal.set(uuid); return stringRedisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, unit); } @Override public void releaseLock(String key) { if (threadLocal.get().equals(stringRedisTemplate.opsForValue().get(key))) { stringRedisTemplate.delete(key); } } } \",\"原理：ThreadLocal的get和set源码如下：\",\" /** * Returns the value in the current thread's copy of this * thread-local variable. If the variable has no value for the * current thread, it is first initialized to the value returned * by an invocation of the {@link #initialValue} method. * * @return the current thread's value of this thread-local */ public T get() { Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) { ThreadLocalMap.Entry e = map.getEntry(this); if (e != null) { @SuppressWarnings(\\\"unchecked\\\") T result = (T)e.value; return result; } } return setInitialValue(); } /** * Sets the current thread's copy of this thread-local variable * to the specified value. Most subclasses will have no need to * override this method, relying solely on the {@link #initialValue} * method to set the values of thread-locals. * * @param value the value to be stored in the current thread's copy of * this thread-local. */ public void set(T value) { Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) map.set(this, value); else createMap(t, value); } /** * Get the map associated with a ThreadLocal. Overridden in * InheritableThreadLocal. * * @param t the current thread * @return the map */ ThreadLocalMap getMap(Thread t) { // 该值为Thread类中的成员变量，初始值为null：ThreadLocal.ThreadLocalMap threadLocals = null; return t.threadLocals; } \"]},\"218\":{\"h\":\"4）可重入发布式锁实现\",\"t\":[\"上面的代码实现，可以保证当一个线程成功在 Redis 中设置了锁标志位后，其他线程再设置锁标志位时，返回 false。但是在一些场景下我们需要实现线程的重入，即相同的线程能够多次获取同一把锁，不需要等待锁释放后再去加锁。所以我们需要利用一些方式来实现分布式锁的可重入型，在 JDK 1.6 之后提供的内存级锁很多都支持可重入型，比如 synchronized 和 J.U.C 下的 Lock，其本质都是一样的，比对已经获得锁的线程是否与当前线程相同，是则重入，当释放锁时则需要根据重入的次数，来判断此时锁是否真正释放掉了。那么我们就按照这个思路来实现一个可重入的分布式锁：\",\"import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.StringRedisTemplate; import org.springframework.stereotype.Service; import java.util.UUID; import java.util.concurrent.TimeUnit; @Service public class RedisLockImpl implements RedisLock { @Autowired private StringRedisTemplate stringRedisTemplate; private static ThreadLocal<String> localString = new ThreadLocal<>(); private static ThreadLocal<Integer> localInteger = new ThreadLocal<>(); private static final Logger logger = LoggerFactory.getLogger(RedisLockImpl.class); private static final long REENTRY_SPIN_SLEEP = 1000; @Override public boolean tryLock(String key, long timeout, TimeUnit unit) { boolean isLock = false; // if (localString.get() == null) { String uuid = UUID.randomUUID().toString(); localString.set(uuid); while (true) { isLock = Boolean.TRUE.equals(stringRedisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, unit)); if (isLock) { break; } try { Thread.sleep(REENTRY_SPIN_SLEEP); } catch (InterruptedException e) { logger.error(\\\"线程中断异常\\\"); throw new Exception(\\\"线程中断异常\\\"); } } localInteger.set(0); } if(isLock) { localInteger.set(localInteger.get() + 1); } return true; } @Override public void releaseLock(String key) { if (localString.get() != null && localString.get().equalsIgnoreCase(stringRedisTemplate.opsForValue().get(key))) { if (localInteger.get() != null && localInteger.get() > 0) { localInteger.set(localInteger.get() - 1); } } else { stringRedisTemplate.delete(key); localString.remove(); localInteger.remove(); } } } \"]},\"219\":{\"h\":\"5）分布式自旋锁实现\",\"t\":[\"上面代码实现中，加入我们不能一次性获取到锁，那么就会直接返回失败，这对业务来说是十分不友好的，假设用户此时下单，刚好有另外一个用户也在下单，而且获取到了锁资源，那么该用户尝试获取锁之后失败，就只能直接返回“下单失败”的提示信息的。所以我们需要实现以自旋的形式来获取到锁，即不停的重试，基于这个想法，实现代码如下：\",\"public class RedisLockImpl implements RedisLock { @Autowired private StringRedisTemplate stringRedisTemplate; private ThreadLocal<String> threadLocal = new ThreadLocal<>(); private ThreadLocal<Integer> threadLocalInteger = new ThreadLocal<>(); @Override public boolean tryLock(String key, long timeout, TimeUnit unit) { Boolean isLocked = false; if (threadLocal.get() == null) { String uuid = UUID.randomUUID().toString(); threadLocal.set(uuid); isLocked = stringRedisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, unit); // 尝试获取锁失败，则自旋获取锁直至成功 if (!isLocked) { for (;;) { isLocked = stringRedisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, unit); if (isLocked) { break; } } } } else { isLocked = true; } // 重入次数加1 if (isLocked) { Integer count = threadLocalInteger.get() == null ? 0 : threadLocalInteger.get(); threadLocalInteger.set(count++); } return isLocked; } @Override public void releaseLock(String key) { // 判断当前线程所对应的uuid是否与Redis对应的uuid相同，再执行删除锁操作 if (threadLocal.get().equals(stringRedisTemplate.opsForValue().get(key))) { Integer count = threadLocalInteger.get(); // 计数器减为0时才能释放锁 if (count == null || --count <= 0) { stringRedisTemplate.delete(key); } } } } \"]},\"220\":{\"h\":\"6）超时问题\",\"t\":[\"在高并发场景下，一把锁可能会被 N 多的进程竞争，获取锁后的业务代码也可能十分复杂，其运行时间可能偶尔会超过我们设置的过期时间，那么这个时候锁就会自动释放，而其他的进程就有可能来争抢这把锁，而此时原来获得锁的进程也在同时运行，这就有可能导致超卖现象或者其他并发安全问题。\",\"那么如何解决这个问题呢？思路很简单，就是每隔一段时间去检查当前线程是否还在运行，如果还在运行，那么就继续更新锁的占有时长，而在释放锁的时候。具体的实现稍微复杂些，这里给出简易的代码实现： 类来执行更新锁超时的时间。\",\"上述解决分布式锁失效的方案在分布式锁领域有一个专业的术语叫做 “异步续命” 。需要注意的是：当业务代码执行完毕后，我们需要停止更新锁超时时间的线程。\"]},\"221\":{\"h\":\"7）高并发\",\"t\":[\"如果我们系统中利用 Redis 来实现分布式锁，而 Redis 的读写并发量约合 5 万左右。假设现在一个秒杀业务需要支持的并发量超过百万级别，那么如果这 100万的并发全部打入 Redis 中去请求锁资源，Redis 将会直接挂掉。所以我们现在应该来考虑如何解决这个问题，即如何在高并发的环境下保证 Redis 实现的分布式锁的可用性，接下来我们就来考虑一下这个问题。\",\"在高并发的商城系统中，如果采用 Redis 缓存数据，则 Redis 缓存的并发能力是关键，因为很多的前缀操作都需要访问 Redis。而异步削峰只是基本操作，关键还是要保证 Redis 的并发处理能力。\",\"解决这个问题的关键思想就是：分而治之，将商品库存分开放。\",\"我们在 Redis 中存储商品的库存数量时，可以将商品的库存进行“分割”存储来提升 Redis 的读写并发量。\",\"例如，原来的商品的 id 为 10001，库存为1000件，在Redis中的存储为(10001, 1000)，我们将原有的库存分割为5份，则每份的库存为200件，此时，我们在Redis 中存储的信息为(10001_0, 200)，(10001_1, 200)，(10001_2, 200)，(10001_3, 200)，(10001_4, 200)。\",\"此时，我们将库存进行分割后，每个分割的库存使用商品 id 加上一个数字标识来存储，这样，在对存储商品库存的每个 key 进行 Hash 运算时，得出的 Hash 结果是不同的，这就说明，存储商品库存的 Key 有很大概率不在 Redis 的同一个槽位中，这就能够提升 Redis 处理请求的性能和并发量。\",\"分割库存后，我们还需要在 Redis 中存储一份商品 ID 和 分割库存后的 Key 的映射关系，此时映射关系的 Key 为商品的 ID，也就是 10001，Value 为分割库存后存储库信息的 Key，也就是 10001_0，10001_1，10001_2，10001_3，10001_4。在 Redis 中我们可以使用 List 来存储这些值。\",\"在真正处理库存信息时，我们可以先从 Redis 中查询出商品对应的分割库存后的所有 Key，同时使用 AtomicLong 来记录当前的请求数量，使用请求数量对从Redis 中查询出的商品对应的分割库存后的所有Key的长度进行求模运算，得出的结果为0，1，2，3，4。再在前面拼接上商品id就可以得出真正的库存缓存的Key。此时，就可以根据这个Key直接到Redis中获取相应的库存信息。\",\"同时，我们可以将分隔的不同的库存数据分别存储到不同的 Redis 服务器中，进一步提升 Redis 的并发量。\",\"参考【Redis】利用 Redis 实现分布式锁 - 周二鸭 - 博客园 (cnblogs.com)\"]},\"222\":{\"h\":\"DNS\",\"t\":[\"​ 在互联网中是用IP来标识一台服务器的。IP地址虽然能够代表一台设备，但是由于记忆起来比较困难，所以将其替换成一个能够理解和识别的名字，这个名字我们称作为域名。\",\"​ 在域名后面会定义一个IP地址用来指向网站服务器。DNS负责域名到IP地址的对应。\",\"​ DNS 是域名系统(Domain Name System，缩写：DNS)是互联网的一项服务。它将域名和IP地址相互映射的一个分布式数据库，在数据库中保存域名与IP的对照关系，从而使人更方便地访问互联网。\",\"​ DNS解析是分布式存储的，从结构上来说最顶层是，根域名服务器(ROOT DNS Server)，存储260个顶级域名服务器的IP地址。对于Ipv4来说全球有13个根域名服务器，它储存了每个域(如.com .net .cn)的解析和域名服务器的地址信息。简单的说，根域名服务器就是存放顶级域名服务器地址的。\",\"​ 在根域名服务器下一级就是，顶级域名服务器。例如.com的域名服务器，存储的是一些一级域名的权威DNS服务器地址(如toutiao.com的DNS)。\",\"​ 顶级域名又称一级域名，顶级域名可以分为三类，即gTLD、ccTLD和New gTLD：\",\"​ gTLD：国际顶级域名(generic top-level domains，gTLD)，例如：.com/.net/.org等都属于gTLD;\",\"​ ccTLD：国家和地区顶级域名(country code top-level domains，简称ccTLD)，例如：中国是.cn域名，日本是.jp域名;\",\"​ New gTLD：新顶级域名(New gTLD)，例如：.xyz/.top/.red/.help等新顶级域名。\",\"image-20200721195559652\",\"image-20200721195702373\",\"通过9步来诠释DNS解析过程：\",\"（1）用户请求通过浏览器输入要访问网站的地址，例如：www.toutiao.com。浏览器会在自己的缓存中查找URL对应IP地址。如果之前访问过，保存了这个URL对应IP地址的缓存，那么就直接访问IP地址。如果没有缓存，进入到第2步。\",\"（2）通过计算机本地的Host文件配置，可以设置URL和IP地址的映射关系。比如windows下是通过C:\\\\windwos\\\\system32\\\\driver\\\\etc\\\\hosts文件来设置的，linux中则是/etc/named.confg文件。这里查找本地的Host文件，看是有IP地址的缓存。如果在文件中依旧没有找到映射关系，进入第3步\",\"（3）请求Local DNS Server，通过本地运营商获取URL和IP的映射关系。如果在校园网，DNS服务器就在学校，如果是小区网络，DNS服务器是运营商提供的。总之这个服务器在物理位置上离发起请求的计算机比较近。Local DNS Server缓存了大量的DNS解析结果。由于它的性能较好，物理上的距离又比较近，它通常会在很短的时间内返回指定域名的解析结果。80%的DNS解析需求在这一步就满足了。如果在这一步还是没有完成DNS解析，进入第4步\",\"（4）通过Root DNS Server进行解析，ROOT DNS Server会根据请求的URL 返回给Local DNS Server顶级域名服务器的地址。例如：查询的是”.com”的域名，就查询 gTL对应的域名服务器的地址\",\"（5）返回顶级域名服务器的地址以后，访问对应的顶级域名服务器(gTLD、ccTLD、New gTLD)，并且返回Name Server服务器地址。这个Name Server就是网站注册的域名服务器，上面包含了网站URL和IP的对应信息。例如你在某个域名服务提供商申请的域名，这个域名就由他们的服务器来解析。这个Name Server是由域名提供商维护的\",\"（6）Name Server会把指定域名的A记录或者CNAME返回给Local DNS Server，并且设置一个TTL\",\"A (Address) 记录是用来指定主机名(或域名)对应的IP地址记录。用户可以将该域名下的网站服务器指向到自己的web server上。同时也可以设置您域名的二级域名。\",\"CNAME：别名记录。这种记录允许您将多个名字映射到另外一个域名。通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“host.mydomain.com”(A记录)。它同时提供WWW和MAIL服务，为了便于用户访问服务。服务商从方便维护的角度，一般也建议用户使用CNAME记录绑定域名的。如果主机使用了双线IP，显然使用CNAME也要方便一些。\",\"TTL(Time To Live)：也就是设置这个DNS解析在Local DNS Server上面的过期时间。超过了这个过期时间，URL和IP的映射就会被删除，需要获取还要请求Name Server\",\"（7）如果此时获取的是A记录，那么就可以直接访问网站的IP了。但是通常来说大型的网站都会返回CNAME，然后将其传给GTM Server\",\"​ GTM(Global Traffic Manager的简写)即全局流量管理，基于网宿智能DNS、分布式监控体系，实现实时故障切换及全球负载均衡，保障应用服务的持续高可用性。传给GTM的目的就是希望通过GTM的负载均衡机制，帮助用户找到最适合自己的服务器IP。\",\"​ 也就是离自己最近，性能最好，服务器状态最健康的。而且大多数的网站会做CDN缓存，此时就更需要使用GTM帮你找到网络节点中适合你的CDN缓存服务器。\",\"（8）找到CDN缓存服务器以后，可以直接从服务器上面获取一些静态资源，例如：HTML、CSS、JS和图片。但是一些动态资源，例如商品信息，订单信息，需要通过第9步\",\"（9）对于没有缓存的动态资源需要从应用服务器获取，在应用服务器与互联网之间通常有一层负载均衡器负责反向代理。有它路由到应用服务器上\",\"借鉴于：https://network.51cto.com/art/202003/613009.htm\",\"作者：崔皓来源：51CTO技术栈|2020-03-23 15:08\"]},\"223\":{\"h\":\"docker本机打镜像\"},\"224\":{\"h\":\"（1）安装Gcc\",\"t\":[\"yum -y install gcc yum -y install gcc-c++ \"]},\"225\":{\"h\":\"（2）卸载旧版本\",\"t\":[\"yum -y remove docker docker-common docker-selinux docker-engine yum remove docker \\\\ docker-client \\\\ docker-client-latest \\\\ docker-common \\\\ docker-latest \\\\ docker-latest-logrotate \\\\ docker-logrotate \\\\ docker-engine \"]},\"226\":{\"h\":\"（3）设置stable镜像仓库\",\"t\":[\"yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo \"]},\"227\":{\"h\":\"（4）更新yum软件包索引\",\"t\":[\"yum makecache (centos 8) yum makecache fast(centos 7) \"]},\"228\":{\"h\":\"（5）安装Docker CE\",\"t\":[\"yum -y install docker-ce docker-ce-cli containerd.io \"]},\"229\":{\"h\":\"（6）启动docker\",\"t\":[\"启动： systemctl start docker 设置开机自启动： systemctl start docker systemctl enable docker \",\"测试： docker version docker run hello-world docker images \",\"[root@localhost ~]# docker version Client: Docker Engine - Community Version: 20.10.7 API version: 1.41 Go version: go1.13.15 Git commit: f0df350 Built: Wed Jun 2 11:56:24 2021 OS/Arch: linux/amd64 Context: default Experimental: true Server: Docker Engine - Community Engine: Version: 20.10.7 API version: 1.41 (minimum version 1.12) Go version: go1.13.15 Git commit: b0f5bc3 Built: Wed Jun 2 11:54:48 2021 OS/Arch: linux/amd64 Experimental: false containerd: Version: 1.4.6 GitCommit: d71fcd7d8303cbf684402823e425e9dd2e99285d runc: Version: 1.0.0-rc95 GitCommit: b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7 docker-init: Version: 0.19.0 GitCommit: de40ad0 \"]},\"230\":{\"h\":\"2、开启2375端口，提供外部访问docker\",\"t\":[\"在docker配置文件\",\"ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock \",\"之后加上\",\"-H tcp://0.0.0.0:2375 \",\"具体操作为\",\"vim /usr/lib/systemd/system/docker.service ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock -H tcp://0.0.0.0:2375 \",\"systemctl restart docker \",\"然后linux防火墙开启2375端口\",\"idea安装docker服务\",\"idea -----> setting -----> Plugins -----> Marketplace -----> docker install\",\"image-20210718193618402\",\"idea -----> setting -----> Build, Execution, Deployment - Docker -----> TCP socket -----> Engine API URL 键入 tcp://192.168.2.195:2375\",\"image-20210718193314796\",\"pom和Dockerfile在同一目录下：\",\"pom中添加：\",\"<!--docke maven编译插件--> <plugin> <groupId>com.spotify</groupId> <artifactId>dockerfile-maven-plugin</artifactId> <version>1.4.9</version> <configuration> <repository>${docker.image.prefix}/${project.artifactId}</repository> <buildArgs> <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE> </buildArgs> </configuration> </plugin> \",\"Dockerfile：\",\"# docker中的镜像 FROM openjdk:8-jdk-alpine MAINTAINER zhengtianqi <270490096@qq.com> VOLUME /tmp ADD target/springcloud-ztq.jar app.jar EXPOSE 8080 ENTRYPOINT [\\\"java\\\",\\\"-jar\\\",\\\"app.jar\\\"] \",\"执行的命令：\",\"windows进行打包并上传镜像： DOCKER_HOST=tcp://92.168.2.195:2375 mvn clean package dockerfile:build linux查看镜像并运行： [root@localhost ~]# docker images REPOSITORY TAG IMAGE ID CREATED SIZE springboot-ztq/springboot-ztq latest 825d7f3967cf 3 hours ago 221MB openjdk 8-jdk-alpine a3562aa0b991 2 years ago 105MB [root@localhost ~]# docker run -d -p 8080:8080 -i 825d7f3967cf \"]},\"231\":{\"h\":\"Docker入门\"},\"232\":{\"h\":\"docker概念\",\"t\":[\"​ docker和虚拟机VM结构非常相似，但是docker并非虚拟机技术，容器除了运行其中的应用之外，基本不消耗额外的系统资源，虚拟机需要单独分配 独占内存、磁盘等资源； ​ docker最初的设计优势，正是它比虚拟机更节省内存，启动更快。Docker不停地给大家宣传，”虚拟机需要数分钟启动，而Docker容器只需要50毫秒”。\",\"image-20201214131527522\"]},\"233\":{\"h\":\"docker架构\",\"t\":[\"image-20201214131543066\"]},\"234\":{\"h\":\"docker的组成元素\",\"t\":[\"• Docker Client : Docker提供给用户的客户端。Docker Client提供给用户一个终端，用户输入Docker提供的命令来管理本地或者远程的服务器。 • Docker Daemon : Docker服务的守护进程。每台服务器（物理机或虚机）上只要安装了Docker的环境，基本上就跑了一个后台程序Docker Daemon，Docker Daemon会接收Docker Client发过来的指令,并对服务器的进行具体操作。 • Docker Images : 俗称Docker的镜像，这个可难懂了。你暂时可以认为这个就像我们要给电脑装系统用的系统CD盘，里面有操作系统的程序，并且还有一些CD盘在系统的基础上安装了必要的软件，做成的一张 “只读” 的CD。 • Docker Registry : 这个可认为是Docker Images的仓库，就像git的仓库一样，用来管理Docker镜像的，提供了Docker镜像的上传、下载和浏览等功能，并且提供安全的账号管理可以管理只有自己可见的私人image。就像git的仓库一样，docker也提供了官方的Registry，叫做Dock Hub(http://hub.Docker.com) • Docker Container : 俗称Docker的容器，这个是最关键的东西了。Docker Container是真正跑项目程序、消耗机器资源、提供服务的地方，Docker Container通过Docker Images启动，在Docker Images的基础上运行你需要的代码。你可以认为Docker Container提供了系统硬件环境，然后使用了Docker Images这些制作好的系统盘，再加上你的项目代码，跑起来就可以提供服务了。 听到这里，可能你会觉得是不是有点像一个VM利用保存的备份或者快照跑起来环境一样，其实是挺像的，但是实际上是有本质的区别，后面我会细说。\",\"​ (C/S) 架构模式， 使用远程API来管理和创建 Docker容器。Docker容器通过镜像来创建，容器与镜像的关系类 似于面向对象编程中的对象与类；\"]},\"235\":{\"h\":\"docker安装\",\"t\":[\"安装 参考docker官网\",\"查看安装版本\",\"docker version \",\"image-20201214131734289\"]},\"236\":{\"h\":\"测试镜像库\",\"t\":[\"为docker 添加国内镜像\",\"/etc/docker/daemon.json将:\",\"{ \\\"registry-mirrors\\\": [\\\" https://obou6wyb.mirror.aliyuncs.com\\\"]}\",\"替换为 { \\\"dns\\\" : [ \\\"192.168.101.2\\\" , \\\"8.8.8.8\\\" ], \\\"registry-mirrors\\\" : [ \\\"https://docker.mirrors.ustc.edu.cn\\\" ] }\"]},\"237\":{\"h\":\"重启docker\",\"t\":[\"systemctl start docker \"]},\"238\":{\"h\":\"查看资源库有tomcat镜像\",\"t\":[\"docker search tomcat \",\"image-20201214131814678\"]},\"239\":{\"h\":\"从国内docker镜像库下载tomcat、centos\",\"t\":[\"docker pull tomcat/centos/nginx \"]},\"240\":{\"h\":\"查看有哪些镜像\",\"t\":[\"docker images \",\"image-20201214131847691\"]},\"241\":{\"h\":\"启动基于tomcat,centos镜像启动容器\",\"t\":[\" docker run -p 8081:8080 tomcat \",\"​ 若端口被占用，可以指定容器和主机的映射端口 前者是外围访问端口：后者是容器内部端口\",\"docker run -dit -p 4000:4000 centos -d 以守护态运行 -p 宿主机端口映射容器端口 -i 允许容器内标准输入 -t 新容器内指定一个伪终端 \",\"浏览器查看访问容器tomcat实例http://192.168.6.71:8081/\",\"image-20201214131948506\",\"第一个容器服务部署成功了！\"]},\"242\":{\"h\":\"进去伪终端查看\",\"t\":[\"docker登录容器\",\"docker exec -it hardcore_edison \\\"/bin/bash\\\" \",\"image-20201214132014480\"]},\"243\":{\"h\":\"本地文件复制容器中\",\"t\":[\"docker cp localFile containerID:targetAddress \",\"命令：\",\"docker cp gag-material.war [b5e1e6975083:/usr/local/tomcat/webapps](http://b5e1e6975083/usr/local/tomcat/webapps) \",\"将本地应用war包上传到tomcat容器的webapps下面，加载应用成功，浏览器显示：\",\"image-20201214132059091\",\"以上就是docker的简单入门操作；\",\"构建一个docker镜像需要写一个叫做Dockerfile的文件 先查看下本地镜像有哪些？\",\"image-20201214132127621\",\"在某一个目录下面创建一个专门存放此demo的目录，也就是Dockerfile所在的context：\",\"mkdir dockerDemo && cd dockerDemo && touch Dockerfile \",\"接下来就开始编写Dockerfile文件了（注意Dockerfile的D需要大写）\",\" vim Dockerfile \",\"############################################################# #base image FROM centos #MAINTAINER MAINTAINER [test@qq.com](mailto:test@qq.com) #put nginx into /usr/local/src and unpack nginx ADD nginx-1.12.2.tar.gz /usr/local/src #running required command RUN yum install -y gcc gcc-c++ glibc make autoconf openssl openssl-devel RUN yum install -y libxslt-devel -y gd gd-devel GeoIP GeoIP-devel pcre pcre-devel RUN useradd -M -s /sbin/nologin nginx #change dir to /usr/local/src/nginx-1.12.2 WORKDIR /usr/local/src/nginx-1.12.2 # execute command to compile nginx RUN ./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-file-aio --with-http_ssl_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module --with-http_image_filter_module --with-http_geoip_module --with-http_sub_module --with-http_dav_module --with- http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_stub_status_module && make && make install #对外暴露端口 EXPOSE 80 ############################################################# \",\"这里以编译nginx提供web服务来构建新的镜像\",\"下载nginx源码包到docker_demo这个目录下\",\"wget -c https://nginx.org/download/nginx-1.12.2.tar.gz\",\"image-20201214132215125\"]},\"244\":{\"h\":\"构建nginx:v1版本镜像\",\"t\":[\"docker build -t centos_nginx:v1 . \"]},\"245\":{\"h\":\"观察日志\",\"t\":[\"每一个步骤都成功\",\"image-20201214132254636\"]},\"246\":{\"h\":\"构建步骤\",\"t\":[\"成功构建centos_nginx:v1\",\"image-20201214132309723\",\"docker images \",\"image-20201214132326043\"]},\"247\":{\"h\":\"启动容器\",\"t\":[\"docker run -d -p80:80 centos_nginx:v1 /usr/local/nginx/sbin/nginx -g \\\"daemon off;\\\" \",\"image-20201214132343909\"]},\"248\":{\"h\":\"查看镜像对外暴露端口号\",\"t\":[\"docker port containerID \",\"image-20201214132401207\"]},\"249\":{\"h\":\"浏览器查看nginx启动状态\",\"t\":[\"image-20201214132416329\",\"已经完成第一个nginx的镜像构建以及容器启动；\"]},\"250\":{\"h\":\"Docker网络模型\",\"t\":[\"Docker虚拟化技术底层是基于LXC+Cgroups+AUFS（Overlay）技术实现，而我们有熟知Cgroups是Linux内核提供的一种可以限制、记录、隔离进程组（Process Groups）所使用的物理资源的机制。 Docker虚拟化的产物是Docker容器，基于Docker Engine启动容器时，默认会给容器指定和分配各种子系统：CPU子系统、Memory子系统、IO子系统、NET子系统等。 启动一个容器，会分配Network Namespace（子系统）提供了一份独立的网络环境，包括网卡、路由、Iptables规则等，容器跟其他容器的Network Namespace是相互隔离的。 通过Docker run创建Docker容器时，可以使用–net选项指定Docker容器的网络模式，Docker默认有四种网络模式：\",\"桥接模式（bridge) Docker容器的Bridge模式也是Docker默认的网络模式，该模式会为每个容器分配Network Namespace子系统，会自动给每个容器虚拟出自己的网卡、IP、网关、路由等信息，无需手工添加。默认创建的Docker容器会统一通过一对veth虚拟网卡，连接到一个虚拟网桥交换机Docker0上，所有的容器的网络加入到一个二层交换机网络里面，即同一宿主机的所有容器之间都是可以相互联通和访问的。\",\"主机模式（host） 新创建的Docker容器不会创建自己的网卡，不会再虚拟出自己的网卡、IP、网关、路由等信息，而是和宿主机共享IP和端口等信息，其他的软件、目录还是相互独立的。两个容器除了网络方面相同之外，其他的如文件系统、进程列表等还是相互隔离的。相信安装过虚拟机的同学一定很眼熟，主机模式也可以叫宿主机模式，顾名思义，Docker容器和宿主机共享一个网络环境。\",\"容器模式（container） 新创建的Docker容器不会创建自己的网卡，不会再虚拟出自己的网卡、IP、网关、路由等信息，而是和指定的Docker容器共享IP和端口等信息，其他的软件、目录还是相互独立的。两个容器除了网络方面相同之外，其他的如文件系统、进程列表等还是相互隔离的。如果依附的Docker容器关闭，新的Docker容器网络也会丢失。容器模式里，启动的每个容器网络互通，共享一个网络环境，也就是每个容器通过ifconfig查询到的ip地址是一样的。\",\"无网络模式（none） 无网络模式（none）与其他的模式都不同，如果Docker容器使用None模式，Docker容器会拥有自己的Network Namespace子系统，但是Docker引擎并不会为新启动的Docker容器配置任何的网络信息。即新创建的Docker容器不会虚拟出自己的网卡、IP、网关、路由等信息，而是需要手工为Docker容器添加网卡、配置IP、路由等信息，在企业实战环境中，通常会使用Pipework工具为Docker容器指定IP等信息。\"]},\"251\":{\"h\":\"桥接模式（bridge)\",\"t\":[\"首先我们使用Docker默认创建的网桥（bridge），可以通过命令--net=bridge 指定为网桥模式，该参数为默认参数，所以无需指定，通过指定 -p 或 -P 参数可以让外部可以访问容器内部的网络程序，下面将详细说明。 -P（大P）：当使用该选项时，Docker会随机创建一个端口映射到内部容器开放的端口，也就是expose命令暴露的端口（expose命令将在下一篇Dockerfile构建中说明），启动一个nginx容器并指定-P参数,具体命令如下：\",\"docker run -it -d —name=nginx_P -P nginx:web bash \",\"-p（小p）：使用该参数可以指定要映射的IP和端口，但是在一个指定端口上只可以绑定一个容器。如下：\"]},\"252\":{\"h\":\"（1）hostPort:containerPort（映射所有接口地址）\",\"t\":[\"# 将宿主机的 80端口映射到容器的 80端口。 docker run -it -d --name=nginx_p -p 80:80 nginx:web bash \"]},\"253\":{\"h\":\"（2）ip:hostPort:containerPort\",\"t\":[\"# 指定宿主机的IP地址和端口映射到容器的端口（映射指定地址的指定端口）。 docker run -it -d --name=nginx_p -p 127.0.0.1:80:80 nginx:web bash \"]},\"254\":{\"h\":\"（3）ip::containerPort（映射指定地址的任意端口）\",\"t\":[\"# 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口。 docker run -it -d —name=nginx_p -p 127.0.0.1::80 nginx:web bash # 指定宿主机的IP地址和随机端口映射到容器的端口。 # Tips： 还可以使用 udp 参数来指定 udp 端口，默认使用的协议为TCP，指定宿主机的IP地址和端口映射到容器的端口，并指定为udp模式。 docker run -it -d --name=nginx_p -p 127.0.0.1:80:80/udp nginx:web bash \"]},\"255\":{\"h\":\"主机模式（host）\",\"t\":[\"该网络模式中，主机和Docker容器将共享一个网络环境，主机和容器各自拥有主机的回环网卡L0，该模式将禁用Docker容器的网络隔离，实际上继承了宿主机的IP地址。该模式比bridge模式更快（因为没有路由开销），但是它将容器直接暴露在公共网络，有一定得安全隐患。，接下来，我们创建启动一个容器，并指定网络类型为host模式。\",\"# 启动虚拟机并指定网络模式为host; docker run -d —net=host —name=centos_host -it centos:6.10 #使用如下命令进入容器（注意，使用attach会有同步阻塞的问题，多个窗口使用该命令进入，会同步显示，若某一个窗口发生阻塞，将会阻塞所有窗口） docker exec -it [centos_host|container_id]/bin/bash \",\"通过查询宿主机和容器的ip地址，我们发现，容器和宿主机ip地址一模一样，也就是，Docker和宿主机共享了一个网络空间eth0网络空间。\"]},\"256\":{\"h\":\"容器模式（container）\",\"t\":[\"# 先以普通网络模式(net) 启动一个容器，接下来使用container模式，再次启动一个同样的容器，指定不同的名称 docker run -it -d --name=centos_net_1 centos:6.10 bash docker run -it -d --net=container:centos_net_1 --name=centos_net_2 centos:6.10 bash \",\"这时，我们使用exec命令分别登入两个容器，执行ifconfig命令，两个容器使用的是同一个ip地址，说明两个容器共享了一个网络空间。\"]},\"257\":{\"h\":\"无网络模式（none）\",\"t\":[\"# 该模式表示没有配置网络模式，将不会分配网络环境，若宿主机或其它容器需要和其通信，需要配置网卡，IP地址，路由信息。 docker run -it -d —name=centos_none —net=none centos:6.10 bash \"]},\"258\":{\"h\":\"查看网络模式\",\"t\":[\"docker network ls docker network inspect host netstat -tunlp \"]},\"259\":{\"h\":\"查看容器信息(包含配置、环境、网关、挂载、cmd等等信息）\",\"t\":[\"docker inspect 容器ID \"]},\"260\":{\"h\":\"暴露端口\",\"t\":[\"-p 自定义端口 ( 宿主机端口:容器内端口 )\"]},\"261\":{\"h\":\"创建网络\",\"t\":[\"docker network create -d bridge my-net \",\"-d 参数指定 Docker 网络类型，有 bridge/overlay 。其中 overlay 网络 类型用于 Docker Swarm mode，该模式可以实现多宿主机的容器互联。\"]},\"262\":{\"h\":\"容器绑定网络\",\"t\":[\"docker run -it -d --name web01 --network my-net nginx:web sh \",\"启动一个名为web01的容器，并指定网络为刚才我们创建的 虚拟网络，以同样的方式启动web02,web03，三个容器启动完成之后，我们可以使用ping命令来检测是否已完成互联，接下来，我们登入web01 容器，并执行命令 ping web02 或 ping web03：\",\"$ # ping web02; PING web02(172.19.0.2): 52 data bytes 52 bytes from 172.19.0.2: seq=0 ttl=64 time=0.052 ms 52 bytes from 172.19.0.2: seq=1 ttl=64 time=0.018 ms \",\"管理 Docker 容器中数据主要有两种方式：数据卷（Data Volumes）和数据卷容器（Data Volumes Containers）。数据卷是一个供容器使用的特殊目录，位于容器中。可将宿主机的目录挂载到数据卷上，对数据卷的修改操作立刻可见，并且更新数据不会影响镜像，从而实现数据在宿主机与容器之间的迁移。数据卷的使用类似于 Linux 下对目录进行的 mount 操作。如果需要在容器之间共享一些数据，最简单的方法就是使用数据卷容器。数据卷容器是一个普通的容器，专门提供数据卷给其他容器挂载使用。\"]},\"263\":{\"h\":\"docker镜像部署到k8s集群\",\"t\":[\"本文使用阿里云私有仓库（个人免费版），阿里云--->容器镜像服务\",\"image-20220411212506831\",\"1、程序目录\",\"ll -rw-r--r-- 1 root root 872 4月 11 22:03 dockerfile -rw-r--r-- 1 root root 8678 4月 11 21:53 jdk-8u251-linux-x64.tar.gz -rw-r--r-- 1 root root 75306958 4月 11 21:47 ruoyi.jar \",\"image-20220411220547876\",\"2、编写dockerfile并打包\",\"FROM uquote/jdk8-tomee1.7.3-plume ## 编写人 MAINTAINER zhengtianqi # 在docker容器构建时拷贝程序 ADD ruoyi.jar ruoyi.jar # 容器暴露的端口号，需要与jar包在容器中运行使用端口号一致 EXPOSE 80 # 容器启动之后执行的命令， java -jar ROOT.jar ENTRYPOINT [\\\"java\\\",\\\"-jar\\\",\\\"ruoyi.jar\\\"] \",\"# 打包 docker build -t test:latest . # 查看 docker images \",\"3、登录阿里云镜像仓库\",\"docker login --username=z130****66717 registry.cn-beijing.aliyuncs.com \",\"4、将镜像推送到阿里云镜像仓库Registry\",\"docker tag [ImageId] registry.cn-beijing.aliyuncs.com/zhengtianqi/demo:[镜像版本号] docker push registry.cn-beijing.aliyuncs.com/zhengtianqi/demo:[镜像版本号] \",\"5、查看阿里云镜像仓库Registry中的镜像\",\"image-20220411221525635\",\"6、拉取镜像\",\"docker pull registry.cn-beijing.aliyuncs.com/zhengtianqi/demo:latest \",\"1、创建yaml文件\",\"kubectl create deployment [pod名称] --image=[docker私有仓库地址/镜像:版本号] -o yaml --dry-run=client > [yaml文件名称].yaml 示例： kubectl create deployment demo --port=80 --replicas=3 --image=registry.cn-beijing.aliyuncs.com/zhengtianqi/demo:latest -o yaml --dry-run=client > demo.yaml \",\"2、查看yaml文件\",\"apiVersion: apps/v1 kind: Deployment metadata: creationTimestamp: null labels: app: demo name: demo spec: replicas: 3 ports: - port: 80 targetPort: 80 selector: matchLabels: app: demo strategy: {} template: metadata: creationTimestamp: null labels: app: demo spec: containers: - image: registry.cn-beijing.aliyuncs.com/zhengtianqi/demo:latest name: demo resources: {} status: {} \",\"3、通过yaml创建服务\",\"kubectl create -f demo.yaml \",\"image-20220411222247494\",\"4、查看创建状态\",\"kubectl get pod \",\"5、创建日志查看\",\"kubectl describe pod \",\"6、杀死当前pod\",\"kubectl delete deployment <deployment名> -n <namespace> \",\"7、pod升级\",\"Kubernetes--k8s---滚动更新--零停机不停服发布服务\",\"Kubernetes滚动更新（无中断平滑发布） (idcsec.com)\",\"# yaml格式的pod定义文件完整内容： apiVersion: v1 #必选，版本号，例如v1 kind: Pod #必选，Pod metadata: #必选，元数据 name: string #必选，Pod名称 namespace: string #必选，Pod所属的命名空间 labels: #自定义标签 - name: string #自定义标签名字 annotations: #自定义注释列表 - name: string spec: #必选，Pod中容器的详细定义 containers: #必选，Pod中容器列表 - name: string #必选，容器名称 image: string #必选，容器的镜像名称 imagePullPolicy: [Always | Never | IfNotPresent] #获取镜像的策略 Alawys表示下载镜像 IfnotPresent表示优先使用本地镜像，否则下载镜像，Nerver表示仅使用本地镜像 command: [string] #容器的启动命令列表，如不指定，使用打包时使用的启动命令 args: [string] #容器的启动命令参数列表 workingDir: string #容器的工作目录 volumeMounts: #挂载到容器内部的存储卷配置 - name: string #引用pod定义的共享存储卷的名称，需用volumes[]部分定义的的卷名 mountPath: string #存储卷在容器内mount的绝对路径，应少于512字符 readOnly: boolean #是否为只读模式 ports: #需要暴露的端口库号列表 - name: string #端口号名称 containerPort: int #容器需要监听的端口号 hostPort: int #容器所在主机需要监听的端口号，默认与Container相同 protocol: string #端口协议，支持TCP和UDP，默认TCP env: #容器运行前需设置的环境变量列表 - name: string #环境变量名称 value: string #环境变量的值 resources: #资源限制和请求的设置 limits: #资源限制的设置 cpu: string #Cpu的限制，单位为core数，将用于docker run --cpu-shares参数 memory: string #内存限制，单位可以为Mib/Gib，将用于docker run --memory参数 requests: #资源请求的设置 cpu: string #Cpu请求，容器启动的初始可用数量 memory: string #内存请求，容器启动的初始可用数量 livenessProbe: #对Pod内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有exec、httpGet和tcpSocket，对一个容器只需设置其中一种方法即可 exec: #对Pod容器内检查方式设置为exec方式 command: [string] #exec方式需要制定的命令或脚本 httpGet: #对Pod内个容器健康检查方法设置为HttpGet，需要制定Path、port path: string port: number host: string scheme: string HttpHeaders: - name: string value: string tcpSocket: #对Pod内个容器健康检查方式设置为tcpSocket方式 port: number initialDelaySeconds: 0 #容器启动完成后首次探测的时间，单位为秒 timeoutSeconds: 0 #对容器健康检查探测等待响应的超时时间，单位秒，默认1秒 periodSeconds: 0 #对容器监控检查的定期探测时间设置，单位秒，默认10秒一次 successThreshold: 0 failureThreshold: 0 securityContext: privileged:false restartPolicy: [Always | Never | OnFailure]#Pod的重启策略，Always表示一旦不管以何种方式终止运行，kubelet都将重启，OnFailure表示只有Pod以非0退出码退出才重启，Nerver表示不再重启该Pod nodeSelector: obeject #设置NodeSelector表示将该Pod调度到包含这个label的node上，以key：value的格式指定 imagePullSecrets: #Pull镜像时使用的secret名称，以key：secretkey格式指定 - name: string hostNetwork:false #是否使用主机网络模式，默认为false，如果设置为true，表示使用宿主机网络 volumes: #在该pod上定义共享存储卷列表 - name: string #共享存储卷名称 （volumes类型有很多种） emptyDir: {} #类型为emtyDir的存储卷，与Pod同生命周期的一个临时目录。为空值 hostPath: string #类型为hostPath的存储卷，表示挂载Pod所在宿主机的目录 path: string #Pod所在宿主机的目录，将被用于同期中mount的目录 secret: #类型为secret的存储卷，挂载集群与定义的secre对象到容器内部 scretname: string items: - key: string path: string configMap: #类型为configMap的存储卷，挂载预定义的configMap对象到容器内部 name: string items: - key: string path: string \"]},\"264\":{\"h\":\"k8s构建ELK日志平台\"},\"265\":{\"h\":\"Pod中附加专用日志收集的容器\",\"t\":[\"目前主流日志收集系统为：Filebeat + ELK，本文尝试使用该系统对k8s里部署的Pod进行日志收集并加以图形可视化展示；\",\"日志收集方案设计图\",\"img\",\"每个预应用程序的Pod中增加一个日志收集容器，使用emptyDir共享日志目录，让日志收集程序能够读取到。\",\"img\",\"优点：低耦合。\",\"缺点：每个Pod启动一个日志收集代理，增加资源消耗，并增加运维维护成本。\",\"ELK官网：\",\"https://www.elastic.co/cn/\",\"配置yum源参考：\",\"https://www.elastic.co/guide/en/logstash/current/installing-logstash.html\"]},\"266\":{\"h\":\"3.1 安装JDK\",\"t\":[\"$ yum install -y java-1.8.0-openjdk \"]},\"267\":{\"h\":\"3.2 配置yum源\",\"t\":[\"[zhengtianqi@root ~]# vim /etc/yum.repos.d/elk.repo [logstash-7.x] name=Elastic repository for 7.x packages baseurl=https://artifacts.elastic.co/packages/7.x/yum gpgcheck=1 gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch enabled=1 autorefresh=1 type=rpm-md \"]},\"268\":{\"h\":\"3.3 安装ELK\",\"t\":[\"[root@qixiao1v zhengtianqi]# sudo su root [root@qixiao1v zhengtianqi]# yum install -y logstash elasticsearch kibana \"]},\"269\":{\"h\":\"3.4 ELK相关配置\",\"t\":[\"这里主要对ES和kibana的主配置文件进行配置，指定相关IP和端口等。\"]},\"270\":{\"h\":\"配置ES：\",\"t\":[\"[root@qixiao1v zhengtianqi]# grep -Ev '^#|^$' /etc/elasticsearch/elasticsearch.yml path.data: /var/lib/elasticsearch path.logs: /var/log/elasticsearch bootstrap.memory_lock: false network.host: 0.0.0.0 http.port: 9200 discovery.type: single-node # 如果启动单节点，则需要添加此参数 \",\"注意，ES需要优化一些内核参数：\",\"[root@qixiao1v zhengtianqi]# vim /etc/security/limits.conf # End of file * soft nofile 60000 * hard nofile 65535 * soft nproc 65535 * hard nproc 65535 [root@qixiao1v zhengtianqi]# vim /etc/security/limits.d/20-nproc.conf * soft nproc 65535 root soft nproc 65535 \"]},\"271\":{\"h\":\"运行：\",\"t\":[\" [root@qixiao1v zhengtianqi]# sysctl –p \",\"生效配置。\"]},\"272\":{\"h\":\"配置kibana：\",\"t\":[\"[root@qixiao1v zhengtianqi]# grep -Ev '^#|^$' /etc/kibana/kibana.yml server.port: 5601 server.host: \\\"10.16.13.52\\\" server.name: \\\"kibana\\\" elasticsearch.hosts: [\\\"http://10.16.13.52:9200\\\"] kibana.index: \\\".kibana\\\" i18n.locale: \\\"zh-CN\\\" \"]},\"273\":{\"h\":\"3.5 启动ES和Kibana\",\"t\":[\"[root@qixiao1v zhengtianqi]# systemctl start elasticsearch [root@qixiao1v zhengtianqi]# systemctl enable elasticsearch [root@qixiao1v zhengtianqi]# systemctl start kibana [root@qixiao1v zhengtianqi]# systemctl enable kibana [root@qixiao1v zhengtianqi]# netstat -lntup|grep java tcp 0 0 0.0.0.0:9200 0.0.0.0:* LISTEN 31645/java tcp 0 0 0.0.0.0:9300 0.0.0.0:* LISTEN 31645/java \",\"访问kibana：http://10.16.13.52:5601\",\"采集日志客户端采用Filebeat来进行采集日志，使用ConfigMap的形式来存储Filebeat的配置，采用ConfigMap形式部署Filebeat，然后将配置文件和日志挂载到Filebeat的Pod中，利用Filebeat采集k8s的集群日志。\"]},\"274\":{\"h\":\"4.1 部署Filebeat日志收集客户端\"},\"275\":{\"h\":\"4.1.1 编写Filebeat配置文件\",\"t\":[\"采用ConfigMap来保存Filebeat的配置文件，然后启动Pod时挂载到Pod里的容器里。\",\"[root@k8s-master-128 elk]# cat k8s-logs.yaml apiVersion: v1 kind: ConfigMap # 保存Filebeat的配置信息 metadata: name: k8s-logs-filebeat-config namespace: kube-system data: filebeat.yml: |- filebeat.prospectors: - type: log paths: - /opt/kubernetes/logs/* # 指定k8s集群的采集日志目录，星号匹配所有该目录下的文件 fields: app: k8s type: module fields_under_root: true output.logstash: hosts: ['172.16.194.128:5044'] # 这里写logstash启动的监听地址和端口 --- apiVersion: apps/v1 kind: DaemonSet # 使用DaemonSet方式将Filebeat部署到集群每个节点上 metadata: name: k8s-logs # Pod名称 namespace: kube-system # 指定运行命名空间 spec: selector: matchLabels: project: k8s app: filebeat template: metadata: labels: project: k8s app: filebeat spec: containers: - name: filebeat image: docker.elastic.co/beats/filebeat:6.4.2 args: [ \\\"-c\\\", \\\"/etc/filebeat.yml\\\", \\\"-e\\\", ] resources: requests: cpu: 100m memory: 100Mi limits: cpu: 500m memory: 500Mi securityContext: runAsUser: 0 volumeMounts: - name: filebeat-config mountPath: /etc/filebeat.yml subPath: filebeat.yml - name: k8s-logs mountPath: /opt/kubernetes/logs volumes: - name: k8s-logs hostPath: path: /opt/kubernetes/logs # 将主机上的目录挂载到Pod容器里 - name: filebeat-config configMap: name: k8s-logs-filebeat-config # 指定configmap挂载到Pod容器里 \"]},\"276\":{\"h\":\"4.1.2 上传Filebeat配置文件\",\"t\":[\"[root@k8s-master-128 elk]# kubectl create -f k8s-logs.yaml configmap/k8s-logs-filebeat-config created daemonset.apps/k8s-logs created [root@k8s-master-128 elk]# kubectl get -f k8s-logs.yaml NAME DATA AGE configmap/k8s-logs-filebeat-config 1 6s NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE daemonset.apps/k8s-logs 2 2 0 2 0 <none> 5s [root@k8s-master-128 elk]# kubectl get pod -A|grep k8s-log kube-system k8s-logs-7wwlx 1/1 Running 0 5m kube-system k8s-logs-pd8m2 1/1 Running 0 5m \"]},\"277\":{\"h\":\"4.1.3 上传Filebeat配置文件是否成功\",\"t\":[\"检测配置的日志目录是否有挂载到Pod中：\",\"[root@k8s-master-128 elk]# kubectl exec -it -n kube-system k8s-logs-7wwlx bash [root@k8s-logs-7wwlx filebeat]# ls -lh /opt/kubernetes/logs/ -d drwxr-xr-x 2 root root 8.0K Jun 3 06:44 /opt/kubernetes/logs/ [root@k8s-logs-7wwlx filebeat]# cat /etc/filebeat.yml filebeat.prospectors: - type: log paths: - /opt/kubernetes/logs/* # 指定k8s集群的采集日志目录，星号匹配所有该目录下的文件 fields: app: k8s type: module fields_under_root: true output.logstash: hosts: ['172.16.194.128:5044'] # 这里写logstash启动的监听地址和端口 \",\"4.1.3过程也可以进入k8s管理页面 -> 命名空间选择 -> 配置与存储修改配置文件\"]},\"278\":{\"h\":\"4.1.4 创建/修改pod，更新项目配置文件\",\"t\":[\"[root@]# kubectl get pod,deploy -n root NAME READY STATUS RESTARTS AGE pod/qixiao-569bf65846-bdrd4 3/3 Running 0 3d22h pod/qixiao-569bf65846-swwlj 3/3 Running 0 3d22h pod/qixiao-569bf65846-xr9v7 3/3 Running 0 3d22h pod/qixiao-socket-7d7dfcff76-6kqwt 1/1 Running 0 25d NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE deployment.extensions/root 3 3 3 3 592d [root@]# kubectl edit deployment.extensions/root -n root \",\"4.1.4过程也可以进入k8s管理页面：命名空间选择qixiao -> 工作负载 -> 部署 -> qixiao –> 右侧三个点 –> 查看 /编辑YAML -> 复制出来修改 -> 修改完点击更新\"]},\"279\":{\"h\":\"4.2 配置Logstash接收日志\"},\"280\":{\"h\":\"4.2.1 配置logstash配置文件\",\"t\":[\"[root@k8s-master-128 elk]# cat filebeat-to-logstash.conf input { beats { port => 5044 } } filter { } output { if [type] == \\\"module\\\" { elasticsearch { hosts => [\\\"http://127.0.0.1:9200\\\"] index => \\\"k8s-log-%{+YYYY.MM.dd}\\\" } } stdout { codec=> rubydebug } } \",\"上述配置文件中的[type] == \\\"pipeline\\\"为filebeat-configmap.yaml中的fields:\",\"type:\"]},\"281\":{\"h\":\"4.2.2 启动/重启logstash\",\"t\":[\"[root@]# systemctl start logstash \",\"注意：每次修改需要重启logstash\",\"[root@]# systemctl restart logstash \"]},\"282\":{\"h\":\"4.2.3 logstash部署是否成功\",\"t\":[\"# 调试启动 [root@k8s-master-128 elk]# /usr/share/logstash/bin/logstash -f filebeat-to-logstash.conf # 守护程序启动：需要编辑配置文件，去掉stdout配置 [root@k8s-master-128 elk]# cp filebeat-to-logstash.conf /etc/logstash/conf.d/logstash.conf [root@k8s-master-128 elk]# systemctl start logstash [root@k8s-master-128 ~]# netstat -lntup|grep java tcp6 0 0 :::9200 :::* LISTEN 119229/java tcp6 0 0 :::5044 :::* LISTEN 710/java tcp6 0 0 :::9300 :::* LISTEN 119229/java tcp6 0 0 127.0.0.1:9600 :::* LISTEN 710/java \"]},\"283\":{\"h\":\"5.1 配置Kibana展示日志\",\"t\":[\"左侧导航栏 -> 点击Management –> 点击Stack Management –> Kibana 索引模式 -> 创建索引模式 ）-> 时间字段@timestamp -> 创建成功\",\"img\"]},\"284\":{\"h\":\"5.2 查看kibana日志\",\"t\":[\"左侧导航栏 -> Kibana -> Discover\",\"img\",\"img\"]},\"285\":{\"h\":\"5.3 绘制kibana图表\",\"t\":[\"左侧导航栏 -> Kibana -> dashboards –> 创建 仪表板 -> 新建\",\"以TSVB为例：\",\"面板选择 -> 索引模式-> 时间字段@timestamp\",\"img\",\"img\",\"img\",\"img\",\"参考文档：https://nicksors.cc/2019/07/11/kubernetes系列之《k8s构建ELK日志平台》.html\"]},\"286\":{\"h\":\"k8s集群搭建\"},\"287\":{\"h\":\"1. 安装要求\",\"t\":[\"在开始之前，部署Kubernetes集群机器需要满足以下几个条件：\",\"一台或多台机器，操作系统 CentOS7.x-86_x64\",\"硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多\",\"可以访问外网，需要拉取镜像，如果服务器不能上网，需要提前下载镜像并导入节点\",\"禁止swap分区\",\"docker和k8s保持官网一致的版本，否则有报错\"]},\"288\":{\"h\":\"2. 准备环境\",\"t\":[\"角色\",\"IP\",\"master\",\"192.168.2.145\",\"node1\",\"192.168.2.146\",\"node2\",\"192.168.2.147\",\"# 关闭防火墙 systemctl stop firewalld # 临时 systemctl disable firewalld # 永久 # 关闭selinux setenforce 0 # 临时 sed -i 's/enforcing/disabled/' /etc/selinux/config # 永久 # 关闭swap swapoff -a # 临时 sed -ri 's/.*swap.*/#&/' /etc/fstab # 永久 # 根据规划设置主机名 hostnamectl set-hostname <hostname> # 在master添加hosts cat >> /etc/hosts << EOF 192.168.2.145 k8smaster 192.168.2.146 k8snode1 192.168.2.147 k8snode2 EOF # 将桥接的IPv4流量传递到iptables的链 cat > /etc/sysctl.d/k8s.conf << EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system # 生效 # 时间同步 yum install ntpdate -y ntpdate time.windows.com \"]},\"289\":{\"h\":\"3. 所有节点安装Docker/kubeadm/kubelet\",\"t\":[\"Kubernetes默认CRI（容器运行时）为Docker，因此先安装Docker。\"]},\"290\":{\"h\":\"3.1 安装Docker\",\"t\":[\"$ wget https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repo $ yum -y install docker-ce-18.06.1.ce-3.el7 $ systemctl enable docker && systemctl start docker $ docker --version Docker version 18.06.1-ce, build e68fc7a \",\"$ cat > /etc/docker/daemon.json << EOF { \\\"registry-mirrors\\\": [\\\"https://b9pmyelo.mirror.aliyuncs.com\\\"] } EOF \"]},\"291\":{\"h\":\"3.2 添加阿里云YUM软件源\",\"t\":[\"$ cat > /etc/yum.repos.d/kubernetes.repo << EOF [kubernetes] name=Kubernetes baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF \"]},\"292\":{\"h\":\"3.3 安装kubeadm，kubelet和kubectl\",\"t\":[\"由于版本更新频繁，这里指定版本号部署：\",\"$ yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0 $ systemctl enable kubelet \"]},\"293\":{\"h\":\"4. 部署Kubernetes Master\",\"t\":[\"在192.168.2.145（Master）执行。\",\"$ kubeadm init \\\\ --apiserver-advertise-address=192.168.2.145 \\\\ --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \\\\ --kubernetes-version v1.23.5 \\\\ --service-cidr=10.96.0.0/12 \\\\ --pod-network-cidr=10.244.0.0/16 \",\"由于默认拉取镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像仓库地址。\",\"使用kubectl工具：\",\"从节点没有，从主节点拷过去\",\"The connection to the server localhost:8080 was refused - did you specify the right host or port?）\",\"mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config $ kubectl get nodes \",\"image-20220404214709099\"]},\"294\":{\"h\":\"5. 加入Kubernetes Node\",\"t\":[\"在192.168.2.146/13（Node）执行。\",\"向集群添加新节点，执行在kubeadm init输出的kubeadm join命令：（这条命令是Master执行init时生成的）\",\"image-20220404214514222\",\"$ kubeadm join 192.168.2.145:6443 --token tps61f.37r065fhvmvgmxk6 \\\\ --discovery-token-ca-cert-hash sha256:ccff7f62596ebe95207ec22d3d32fa9183a0200d7cfc50b6a10cfa1626593a2e \",\"默认token有效期为24小时，当过期之后，该token就不可用了。这时就需要重新创建token，操作如下：\",\"kubeadm token create --print-join-command \"]},\"295\":{\"h\":\"6. 部署CNI网络插件\",\"t\":[\"wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml \",\"默认镜像地址无法访问，sed命令修改为docker hub镜像仓库。\",\"可以参考kube-flannel.yml(已修改镜像下载数据源)\",\"kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml kubectl get pods -n kube-system NAME READY STATUS RESTARTS AGE kube-flannel-ds-amd64-2pc95 1/1 Running 0 72s \"]},\"296\":{\"h\":\"7. 测试kubernetes集群\",\"t\":[\"在Kubernetes集群中创建一个pod，验证是否正常运行：\",\"$ kubectl create deployment nginx --image=nginx $ kubectl expose deployment nginx --port=80 --type=NodePort $ kubectl get pod,svc \",\"访问地址：http://NodeIP:Port\"]},\"297\":{\"h\":\"Nacos配置中心使用\",\"t\":[\"1、启动方式可见 Nacos 官网\",\"2、在配置列表里配置自己的配置，按照规范填写各项。\",\"user.name=zhengtianqi user.password=123456 \",\"配置后的图：\",\"image-20191125164448760\",\"1）常量类\",\"public class Constants { /** * 配置中心url */ public static final String URL_NACOS = \\\"127.0.0.1\\\"; public static final String NACOS_DATAID = \\\"test-nacos-config.yml\\\"; public static final String NACOS_Group = \\\"DEFAULT_GROUP\\\"; } \",\"2）客户端工具\",\"import com.alibaba.nacos.api.NacosFactory; import com.alibaba.nacos.api.PropertyKeyConst; import com.alibaba.nacos.api.config.ConfigService; import com.alibaba.nacos.api.config.listener.Listener; import com.alibaba.nacos.api.exception.NacosException; import com.sy.log.LocalLog; import com.sy.sa.nacos.common.constant.Constants; import java.io.ByteArrayInputStream; import java.io.IOException; import java.nio.charset.StandardCharsets; import java.util.Properties; import java.util.concurrent.Executor; public class NacosUtils { private static ConfigService configService; /** * 读取配置超时时间，单位 ms */ private static final int TIMEOUT = 1000 * 3; /** * 获取配置文件内容 */ private static String content = \\\"\\\"; static { try { Properties properties = new Properties(); properties.put(PropertyKeyConst.SERVER_ADDR, Constants.URL_NACOS); configService = NacosFactory.createConfigService(properties); } catch (NacosException e) { LocalLog.error(\\\"连接配置中心失败!\\\", e); System.exit(1); } } /** * 获取配置中心配置内容 * * @param group 命名空间 * @param dataId 数据库 * @return Properties */ public static Properties getConfig(String group, String dataId) { Properties properties = null; try { String config = configService.getConfig(dataId, group, 3000); ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(config.getBytes(StandardCharsets.UTF_8)); properties = new Properties(); properties.load(byteArrayInputStream); } catch (Exception e) { LocalLog.error(\\\"\\\", \\\"从配置中心获取配置失败，group={},dataId={}\\\", group, dataId, e); } if (null == properties) { LocalLog.info(\\\"\\\", \\\"从配置中心获取配置失败，group={},dataId={}\\\", group, dataId); } return properties; } /** * 动态读取nocas配置内容 * * @param dataId 配置ID * @param group 分组 * @return */ public static Properties getConfigProperties(String dataId, String group) { Properties properties = null; try { content = configService.getConfig(dataId, group, TIMEOUT); configService.addListener(dataId, group, new Listener() { @Override public void receiveConfigInfo(String configInfo) { content = configInfo; LocalLog.info(\\\"修改后的配置ID是：[\\\" + dataId + \\\"]，配置分组是：[\\\" + group + \\\"]获取的配置信息是\\\" + content); } @Override public Executor getExecutor() { return null; } }); ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8)); properties = new Properties(); properties.load(byteArrayInputStream); } catch (NacosException e) { LocalLog.error(\\\"Nacos读取配置超时或网络异常\\\", e); } catch (IOException e) { LocalLog.error(\\\"加载到properties对象出现IO异常\\\", e); } return properties; } } \",\"3）配置文件\",\"spring: application: name: nacos-config-example group: sa developer: zhengtianqi<郑天祺> cloud: nacos: config: server-addr: http://localhost:8848 server: port: 8080 \",\"4）启动类\",\"import com.sy.log.LocalLog; import com.sy.sa.nacos.common.constant.Constants; import com.sy.sa.nacos.common.utils.NacosUtils; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.client.discovery.EnableDiscoveryClient; import java.util.Properties; import java.util.concurrent.TimeUnit; @SpringBootApplication public class NacosConfigExampleApplication { public static void main(String[] args) { SpringApplication.run(NacosConfigExampleApplication.class, args); // 测试动态加载配置 Properties properties = NacosUtils.getConfigProperties(Constants.NACOS_DATAID, Constants.NACOS_Group); System.out.println(properties.getProperty(\\\"user.name\\\") + \\\":\\\" + properties.getProperty(\\\"user.password\\\")); } } \",\" <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <java.version>1.8</java.version> <spring-cloud-alibaba.version>2.1.1.RELEASE</spring-cloud-alibaba.version> <spring-cloud-greenwich.version>0.9.0.RELEASE</spring-cloud-greenwich.version> </properties> <dependencies> <!--nacos--> <dependency> <groupId>com.alibaba.nacos</groupId> <artifactId>nacos-client</artifactId> <version>1.1.0</version> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> </dependencies> <dependencyManagement> <dependencies> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>${spring-cloud-greenwich.version}</version> <type>pom</type> <scope>import</scope> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>${spring-cloud-alibaba.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> \",\"2019-11-25 16:48:12.276 INFO 444 --- [-127.0.0.1_8848] locallog : [../utils/NacosUtils$1.receiveConfigInfo:81][192.168.116.1][] - 修改后的配置ID是：[test-nacos-config.yml]，配置分组是：[DEFAULT_GROUP]获取的配置信息是user.name=zhengtianqi user.password=12345678 \",\"解释：\",\"上述代码中没有用到SpringCloud，只用到了nacos的客户端。因为 如果使用SpringCloud读取多个配置文件（a.properties, b.properties），a中是user.name=123，b中是user.name=1234； 会有覆盖的情况\",\" ConfigurableApplicationContext applicationContext = SpringApplication.run(ConfigApplication.class, args); String userName = applicationContext.getEnvironment().getProperty(\\\"user.name\\\"); String userPassword = applicationContext.getEnvironment().getProperty(\\\"user.password\\\"); \",\"如果多人开发没有注意到这种情况，会引起配置文件的key冲突导致出现问题\"]},\"298\":{\"h\":\"nginx配置\",\"t\":[\"负载均衡用于从“upstream”模块定义的后端服务器列表中选取一台服务器接受用户的请求。一个最基本的upstream模块是这样的，模块内的server是服务器列表：\",\"#动态服务器组 upstream dynamic_zuoyu { server localhost:8080; #tomcat1 server localhost:8081; #tomcat2 server localhost:8082; #tomcat3 server localhost:8083; #tomcat4 } \",\"在upstream模块配置完成后，要让指定的访问反向代理到服务器列表：\",\"#其他页面反向代理到tomcat容器 location ~ .*$ { index index.jsp index.html; proxy_pass http://dynamic_zuoyu; } \",\"这就是最基本的负载均衡实例，但这不足以满足实际需求；目前Nginx服务器的upstream模块支持6种方式的分配： 负载均衡策略 在这里，只详细说明Nginx自带的负载均衡策略，第三方不多描述。\"]},\"299\":{\"h\":\"1、轮询\",\"t\":[\"最基本的配置方法，上面的例子就是轮询的方式，它是upstream模块默认的负载均衡默认策略。每个请求会按时间顺序逐一分配到不同的后端服务器。 有如下参数： 注意：\",\"在轮询中，如果服务器down掉了，会自动剔除该服务器。\",\"缺省配置就是轮询策略。\",\"此策略适合服务器配置相当，无状态且短平快的服务使用。\"]},\"300\":{\"h\":\"2、weight\",\"t\":[\"权重方式，在轮询策略的基础上指定轮询的几率。例子如下：\",\" upstream dynamic_zuoyu { server localhost:8080 weight=2; #tomcat 1 server localhost:8081; #tomcat 2 server localhost:8082 backup; #tomcat 3 server localhost:8083 max_fails=3 fail_timeout=20s; #tomcat 4 } \",\"在该例子中，weight参数用于指定轮询几率，weight的默认值为1,；weight的数值与访问比率成正比，比如Tomcat 7.0被访问的几率为其他服务器的两倍。 注意：\",\"权重越高分配到需要处理的请求越多。\",\"此策略可以与least_conn和ip_hash结合使用。\",\"此策略比较适合服务器的硬件配置差别比较大的情况。\"]},\"301\":{\"h\":\"3、ip_hash\",\"t\":[\"指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题。\",\"#动态服务器组 upstream dynamic_zuoyu { ip_hash; #保证每个访客固定访问一个后端服务器 server localhost:8080 weight=2; #tomcat 1 server localhost:8081; #tomcat 2 server localhost:8082; #tomcat 3 server localhost:8083 max_fails=3 fail_timeout=20s; #tomcat 4 } \",\"注意：\",\"在nginx版本1.3.1之前，不能在ip_hash中使用权重（weight）。\",\"ip_hash不能与backup同时使用。\",\"此策略适合有状态服务，比如session。\",\"当有服务器需要剔除，必须手动down掉。\"]},\"302\":{\"h\":\"4、least_conn\",\"t\":[\"把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。\",\"#动态服务器组 upstream dynamic_zuoyu { least_conn; #把请求转发给连接数较少的后端服务器 server localhost:8080 weight=2; #tomcat 1 server localhost:8081; #tomcat 2 server localhost:8082 backup; #tomcat 3 server localhost:8083 max_fails=3 fail_timeout=20s; #tomcat 4 } \"]},\"303\":{\"h\":\"5、第三方策略\"},\"304\":{\"h\":\"（1）fair\",\"t\":[\"按照服务器端的响应时间来分配请求，响应时间短的优先分配。\",\"# 动态服务器组 upstream dynamic_zuoyu { server localhost:8080; #tomcat 1 server localhost:8081; #tomcat 2 server localhost:8082; #tomcat 3 server localhost:8083; #tomcat 4 fair; #实现响应时间短的优先分配 } \"]},\"305\":{\"h\":\"（2）url_hash\",\"t\":[\"按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。 同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。 而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。\",\"#动态服务器组 upstream dynamic_zuoyu { hash $request_uri; #实现每个url定向到同一个后端服务器 server localhost:8080; #tomcat 1 server localhost:8081; #tomcat 2 server localhost:8082; #tomcat 3 server localhost:8083; #tomcat 4 } \",\"nginx.conf主要由三部分组成：全局块， events块， http块，详细如下：\",\"1、全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。\",\"2、events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。\",\"3、http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。\",\"4、server块：配置虚拟主机的相关参数，一个http中可以有多个server。\",\"5、location块：配置请求的路由，以及各种页面的处理情况。\"]},\"306\":{\"h\":\"（1）语法\",\"t\":[\"location [=|~|~*|^~] /uri/ { … } location = /uri = 表示精确匹配，只有完全匹配上才能生效 location ^~ /uri ^~ 开头对URL路径进行前缀匹配，并且在正则之前。 location ~ pattern 开头表示区分大小写的正则匹配 location ~* pattern 开头表示不区分大小写的正则匹配 location /uri 不带任何修饰符，也表示前缀匹配，但是在正则匹配之后 location / 通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default \",\"优先级：(location =) > (location 完整路径) > (location ^~ 路径) > (location ,* 正则顺序) > (location 部分起始路径) > (/) 前缀匹配时，Nginx 不对 url 做编码，因此请求为 /static/20%/aa，可以被规则 ^~ /static/ /aa 匹配到（注意是空格）\"]},\"307\":{\"h\":\"（2）规则\",\"t\":[\"一个请求过来后，Nginx匹配这个请求的流程如下：\",\"1> 先查找是否有=开头的精确匹配，\",\"如：location = /test/abc/user.do { … } \",\"2> 再查找普通匹配，以 最大前缀 为原则，如有以下两个location，则会匹配后一项\",\" location /test/ { … } location /test/abc { … } \",\"3> 匹配到一个普通格式后，搜索并未结束，而是暂存当前匹配的结果，并继续搜索正则匹配模式\",\"4> 所有正则匹配模式location中找到第一个匹配项后，就以此项为最终匹配结果 所以正则匹配项匹配规则，受定义的前后顺序影响，但普通匹配模式不会\",\"5> 如果未找到正则匹配项，则以3中缓存的结果为最终匹配结果\",\"6> 如果一个匹配都没搜索到，则返回404 注：精确匹配与模糊匹配差别：\",\" location =/ { … } 与 location / { … } 的差别： \",\"前一个是精确匹配，只响应/请求，所有/xxx或/xxx/xxxx类的请求都不会以前缀的形式匹配到它\",\"后一个是只要以 / 为前缀的请求都会被匹配到。如：/abc ， /test/abc， /test/abc/aaaa 示例1\",\"server { listen 80; server_name x.x.x.x; ...... location /subdir { proxy_pass http://y.y.y.y; ###注意这里没有以/结尾 } } # 那么用户请求http://x.x.x.x/subdir/other时，匹配到该区块，nginx反代会保留虚拟路径 # nginx实际转发后端的请求URL为http://http://y.y.y.y/subdir/other \",\"示例2\",\"server { listen 80; server_name x.x.x.x; ...... location /subdir { proxy_pass http://y.y.y.y/; ##注意这里以/结尾 } } # 那么用户请求http://x.x.x.x/subdir/other时，匹配到该区块，nginx反代不会保留虚拟路径， # nginx实际转发后端的请求URL为http://http://y.y.y.y//other \"]},\"308\":{\"h\":\"rewrite使用场景：\",\"t\":[\"地址跳转，用户访问www.nginx01.com这个URL时，将其定向至一个新的域名www.nginx02.com\",\"协议跳转，将用户通过http的请求协议重新跳转至https协议(实现https主要手段)。\",\"URL静态化，将动态URL地址显示为静态URL的一种技术，能提高搜索引擎抓取 并且能减少动态URL对外暴露过多的参数。PS:Rewrite会轻微增加服务器负担。\"]},\"309\":{\"h\":\"四种方案\",\"t\":[\"last 停止处理后续rewrite指令集，跳出location作用域，并开始搜索与更改后的URI相匹配的location，URL地址不变\",\"break 停止处理后续rewrite指令集，不会跳出location作用域，不再进行重新查找，终止匹配，URL地址不变\",\"redirect 返回302临时重定向，浏览器地址栏会显示跳转后的URL地址，爬虫不会更新自己的URL数据库\",\"permanent 返回301永久重定向，浏览器地址栏会显示跳转后的URL地址，爬虫会更新自己的URL数据库 注：使用last和break时浏览器中的地址不会改变，使用redirect和permanent则会改变\"]},\"310\":{\"h\":\"返回状态码\",\"t\":[\"location /test { set $name 'user123'; return 404 $name; } \"]},\"311\":{\"h\":\"返回字符串\",\"t\":[\"location /test { return 200 'hello'; } \"]},\"312\":{\"h\":\"地址跳转\",\"t\":[\"location /test { return http://www.baidu.com; } \"]},\"313\":{\"h\":\"返回自定义变量\",\"t\":[\"set $name 'user123'; return 200 $name; \"]},\"314\":{\"h\":\"返回内置变量\",\"t\":[\"return $uri; \"]},\"315\":{\"h\":\"返回日志信息实例\",\"t\":[\"return 200 '$remote_addr - $remote_user [$time_local] \\\"$request\\\" $status $body_bytes_sent \\\"$http_referer\\\" \\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; \",\"例：http://www.abc.com:99/aa/bb/test.jsp $host www.abc.com $server_port 8080 $request_uri /aa/bb/test.jsp $document_root /pm_code $request_filename /pm_code/aa/bb/test.jsp \"]},\"316\":{\"h\":\"root\",\"t\":[\"location /i/ { root /data/w3; } # 请求 http://test.net/i/picture.jpg 这个地址时，那么在服务器里面对应的真正的资源 # 注意：真实的路径是root指定的值加上location指定的值 。 \"]},\"317\":{\"h\":\"alias\",\"t\":[\"location /i/ { alias /data/w3/; } # 同样请求 http://test.net/i/picture.jpg 时，在服务器查找的资源路径是： /data/w3/picture.jpg \",\"区别：\",\"alias 只能作用在location中，而root可以存在server、http和location中。\",\"alias 后面必须要用 “/” 结束，否则会找不到文件，而 root 则对 ”/” 可有可无。\",\"将响应报⽂发送⾄客户端之前可以启⽤压缩功能，这能够有效地节约带宽，并提⾼响应⾄客户端的速度。Gzip压缩可以配置http,server和location模块下。 配置如下：\",\"gzip on; #决定是否开启gzip模块，on表示开启，off表示关闭； gzip_min_length 1k; #设置允许压缩的页面最小字节(从header头的Content-Length中获取) ，当返回内容大于此值时才会使用gzip进行压缩,以K为单位,当值为0时，所有页面都进行压缩。建议大于1k gzip_buffers 4 16k; #设置gzip申请内存的大小,其作用是按块大小的倍数申请内存空间,param2:int(k) 后面单位是k。这里设置以16k为单位,按照原始数据大小以16k为单位的4倍申请内存 gzip_http_version 1.1; #识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码 gzip_comp_level 2; #设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大；等级1-9，最小的压缩最快 但是消耗cpu gzip_types text/plain application/x-javascript text/css application/xml; #设置需要压缩的MIME类型,非设置值不进行压缩，即匹配压缩类型 gzip_vary on; #启用应答头\\\"Vary: Accept-Encoding\\\" gzip_proxied off; nginx做为反向代理时启用,off(关闭所有代理结果的数据的压缩),expired(启用压缩,如果header头中包括\\\"Expires\\\"头信息),no-cache(启用压缩,header头中包含\\\"Cache-Control:no-cache\\\"), no-store(启用压缩,header头中包含\\\"Cache-Control:no-store\\\"),private(启用压缩,header头中包含\\\"Cache-Control:private\\\"),no_last_modefied(启用压缩,header头中不包含 \\\"Last-Modified\\\"),no_etag(启用压缩,如果header头中不包含\\\"Etag\\\"头信息),auth(启用压缩,如果header头中包含\\\"Authorization\\\"头信息) gzip_disable msie6; (IE5.5和IE6 SP1使用msie6参数来禁止gzip压缩 )指定哪些不需要gzip压缩的浏览器(将和User-Agents进行匹配),依赖于PCRE库 \",\"推荐配置如下：\",\"gzip on; #开启gzip压缩功能 gzip_min_length 10k; #设置允许压缩的页面最小字节数; 这里表示如果文件小于10个字节，就不用压缩，因为没有意义，本来就很小. gzip_buffers 4 16k; #设置压缩缓冲区大小，此处设置为4个16K内存作为压缩结果流缓存 gzip_http_version 1.1; #压缩版本 gzip_comp_level 6; #设置压缩比率，最小为1，处理速度快，传输速度慢；9为最大压缩比，处理速度慢，传输速度快; 这里表示压缩级别，可以是0到9中的任一个，级别越高，压缩就越小，节省了带宽资源，但同时也消耗CPU资源，所以一般折中为6 gzip types text/css text/xml application/javascript; #制定压缩的类型,线上配置时尽可能配置多的压缩类型! gzip_disable \\\"MSIE [1-6]\\\\.\\\"; #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持） gzip vary on; #选择支持vary header；改选项可以让前端的缓存服务器缓存经过gzip压缩的页面; 这个可以不写，表示在传送数据时，给客户端说明我使用了gzip压缩 \",\"http { include mime.types; #include luawaf.conf; #include proxy.conf; default_type application/octet-stream; server_names_hash_bucket_size 512; client_header_buffer_size 32k; large_client_header_buffers 4 32k; client_max_body_size 50m; sendfile on; tcp_nopush on; keepalive_timeout 60; tcp_nodelay on; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 256k; fastcgi_intercept_errors on; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/javascript application/x-javascript text/javascript text/css application/xml; gzip_vary on; gzip_proxied expired no-cache no-store private auth; gzip_disable \\\"MSIE [1-6]\\\\.\\\"; limit_conn_zone $binary_remote_addr zone=perip:10m; limit_conn_zone $server_name zone=perserver:10m; server_tokens off; access_log off; upstream webservers{ server 127.0.0.1:8082; } server { #SSL 默认访问端口号为 443 listen 443 ssl; #请填写绑定证书的域名 server_name www.tianqi.icu; #请填写证书文件的相对路径或绝对路径 ssl_certificate /etc/nginx/tianqi.icu_bundle.crt; #请填写私钥文件的相对路径或绝对路径 ssl_certificate_key /etc/nginx/tianqi.icu.key; ssl_session_timeout 5m; #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #请按照以下协议配置 ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; location / { #if ( $host = '152.136.121.33' ) { # return 301 https://zhengtianqi.asia$request_uri; #} proxy_pass http://webservers; proxy_next_upstream http_500 http_504 http_502 error timeout invalid_header; # 启用keep alive proxy_http_version 1.1; proxy_set_header Connection \\\"\\\"; # 获取 xforward和真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; } } server { listen 80; server_name www.tianqi.icu; proxy_next_upstream http_500 http_504 http_502 error timeout invalid_header; # 启用keep alive proxy_http_version 1.1; proxy_set_header Connection \\\"\\\"; # 获取 xforward和真实IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; #把http的域名请求转成https #return 301 https://zhengtianqi.asia$request_uri; return 301 https://www.tianqi.icu$request_uri; } #include /www/server/panel/vhost/nginx/*.conf; } \"]},\"318\":{\"h\":\"软件安装及高可用部署(三)\",\"t\":[\"本文介绍了MYSQL安装\",\"# 查看 mariadb 的安装包 rpm -qa | grep mariadb # 卸载 mariadb 的安装包 rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps # 再次查看 rpm -qa | grep mariadb \",\"groupadd mysql useradd -r -g mysql mysql \"]},\"319\":{\"h\":\"安装源\",\"t\":[\"更新yum yum update –y 安装wget工具 创建安装目录 mkdir -p /usr/local/mysql 然后进入安装目录 cd /usr/local/mysql 再执行 sudo yum install -y wget 使用wget下载mysql yum源 wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm 添加 mysql yum 源 sudo yum localinstall mysql80-community-release-el7-3.noarch.rpm –y 安装 yum 工具 yum-utils sudo yum install -y yum-utils \"]},\"320\":{\"h\":\"MySQL安装版本选择\",\"t\":[\"查看可用的 mysql yum repolist enabled | grep \\\"mysql.*-community.*\\\" 查看所有的 mysql 版本 yum repolist all | grep mysql 使用执行版本的mysql 目前是8.0的版本，假如系统要使用MySQL5.7，那么需要先关闭MySQL8.0 关闭MySQL8.0 sudo yum-config-manager --disable mysql80-community 开启MySQL5.7 sudo yum-config-manager --enable mysql57-community 查看当前启用的MySQL版本 yum repolist enabled | grep mysql \"]},\"321\":{\"h\":\"MySQL安装\",\"t\":[\"安装MySQL sudo yum install -y mysql-community-server \",\"img\",\"如果上面语句执行出现上图所示报错，就执行 yum install mysql-community-server --nogpgcheck \",\"vim /etc/my.cnf # 将原配置文件内容清空，添加以下配置内容↓： [client] port=3306 socket=/mysql/run/mysql/mysql.sock default-character-set=utf8mb4 [mysqld] user=mysql # 注意! 如果是mysql-backup服务器，需要将server-id的值修改为2 server-id=1 port=3306 mysqlx_port=33060 mysqlx_socket=/mysql/run/mysql/mysqlx.sock basedir=/mysql datadir=/mysql/data 配置系统服务 socket=/mysql/run/mysql/mysql.sock pid-file=/mysql/run/mysql/mysqld.pid log-error=/mysql/logs/error.log log-bin=/mysql/logs/bin.log relay-log=/mysql/logs/relay.log binlog_format=ROW relay_log_recovery=1 character-set-client-handshake=FALSE character-set-server=utf8mb4 collation-server=utf8mb4_unicode_ci init_connect ='SET NAMES utf8mb4' innodb_buffer_pool_size=1G join_buffer_size=128M sort_buffer_size=2M read_rnd_buffer_size=2M log_timestamps = SYSTEM lower_case_table_names = 1 default-authentication-plugin=mysql_native_password #skip-grant-tables \",\"cd /mysql/ # 创建data和logs目录 mkdir data mkdir logs # 创建mysql运行目录 mkdir -p /mysql/run/mysql/ # 修改文件夹用户归属 chown -R mysql:mysql /mysql/run/mysql/ chown -R mysql:mysql /mysql chmod 777 /mysql/run/mysql chmod 775 /mysql -R # link ln -s /mysql/bin/mysql /usr/local/bin ln -s /mysql/bin/mysqld /usr/local/bin # 初始化 mysqld --initialize --console # 获取密码 cat logs/error.log |grep password # 添加mysql到服务中 cp support-files/mysql.server /etc/init.d/mysql # 设置安装目录和data目录 vim /etc/init.d/mysql # 修改如下内容，大概在46行左右位置 basedir=/mysql datadir=/mysql/data MySQL配置 在mysql-backup服务器上重复以上步骤，安装MySQL。 # 目录赋权 chmod -R 777 /mysql/run/mysql chown -R mysql:mysql /mysql/run/mysql/ # 加载 systemctl daemon-reload # 启动 systemctl start mysql # 查看运行状态 systemctl status mysql # 开机启动 systemctl enable mysql \"]},\"322\":{\"h\":\"默认路径的密码（未修改配置文件）\",\"t\":[\"查看初始化密码： sudo grep 'temporary password' /var/log/mysqld.log \",\"# 登录mysql mysql -p -S /mysql/run/mysql/mysql.sock # 修改root账户密码 ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '******'; # 退出使用新密码登录 exit; # 重新登录 mysql -u root -p # 创建远程操作账户，进行远程访问的授权 create user 'root'@'%' identified with mysql_native_password by '******'; grant all privileges on *.* to 'root'@'%' with grant option; flush privileges; # 退出登录 exit; \",\"在mysql-backup服务器上重复以上步骤，安装MySQL。\"]},\"323\":{\"h\":\"登录mysql-master服务器，主库修改配置文件 vim /etc/my.cnf 。\",\"t\":[\"vim /etc/my.cnf # 在[mysqld]下面修改或增加配置： server-id=1 log-bin=master-bin log-bin-index=master-bin.index # 保存配置后，重启主库mysql服务 systemctl restart mysql \"]},\"324\":{\"h\":\"登录mysql-master服务器，先进入主库，进行锁表，防止数据写入。\",\"t\":[\"mysql -uroot -p mysql> flush tables with read lock; mysql> exit; \"]},\"325\":{\"h\":\"登录mysql-backup服务器，修改从库数据库配置文件。\",\"t\":[\"vim /etc/my.cnf # 在[mysqld]下面修改或增加配置： server-id=2 # 保存配置后，重启从库mysql服务 systemctl restart mysql \"]},\"326\":{\"h\":\"登录mysql-master服务器，导出数据。\",\"t\":[\"# 导出数据库 cd /tmp /mysql/bin/mysqldump -uroot -p --master-data=1 --single-transaction --routines --triggers --events --all-databases > all.sql \"]},\"327\":{\"h\":\"登录mysql-backup服务器，导入数据。\",\"t\":[\"# 将导出的数据all.sql，上传到从库服务器 cd /tmp # 在文件上传的位置，登录数据库进行数据导入 mysql -uroot -p mysql> source all.sql; \"]},\"328\":{\"h\":\"登录mysql-master服务器，登录数据库查看主库同步信息。\",\"t\":[\"mysql> SHOW MASTER STATUS; +-------------------+----------+--------------+------------------+-------------- -----+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +-------------------+----------+--------------+------------------+-------------- -----+ | master-bin.000005 | 155 | | | | +-------------------+----------+--------------+------------------+-------------- -----+ 1 row in set (0.00 sec) \"]},\"329\":{\"h\":\"登录mysql-backup服务器，登录数据库配置同步信息。\",\"t\":[\"stop slave; change master to master_auto_position=0; # 将MASTER_HOST、MASTER_LOG_FILE和MASTER_LOG_POS参数替换为实际的配置 CHANGE MASTER TO MASTER_HOST='主库IP地 址',MASTER_USER='root',MASTER_PASSWORD='******',MASTER_LOG_FILE='master-bin.000005',MASTER_LOG_POS=155; start slave; show slave status \\\\G; \"]},\"330\":{\"h\":\"登录mysql-master服务器，解除锁表。\",\"t\":[\"unlock tables; \"]},\"331\":{\"h\":\"在mysql-master服务器上修改keepalived配置文件。\",\"t\":[\"注意配置中interface(指定网卡)、virtual_ipaddress(虚拟IP)、unicast_src_ip(本机IP)和unicast_peer(其它服务器IP)参数可根据实际环境进行配置。\",\"vim /etc/keepalived/keepalived.conf # 将原配置文件内容清空，添加以下配置内容↓： ! Configuration File for keepalived vrrp_script check_mysql { script \\\"/usr/local/keepalived/sbin/check_mysql.sh\\\" interval 3 weight 2 } vrrp_instance mysql { state BACKUP nopreempt interface ens33 virtual_router_id 88 priority 100 advert_int 1 authentication { auth_type PASS auth_pass 123456 } track_script { check_mysql } virtual_ipaddress { 192.168.8.95 } unicast_src_ip 192.168.8.187 unicast_peer { 192.168.8.188 } } \"]},\"332\":{\"h\":\"在mysql-master服务器上创建检测脚本。\",\"t\":[\"vim /usr/local/keepalived/sbin/check_mysql.sh # 添加以下配置内容(注意下面替换为实际IP)↓： #!/bin/bash if [ \\\"$(ps -ef | grep \\\"mysql.sock\\\"| grep -v grep )\\\" == \\\"\\\" ];then #echo 1 /bin/systemctl restart mysql sleep 5 if [ \\\"$(ps -ef | grep \\\"mysql.sock\\\"| grep -v grep )\\\" == \\\"\\\" ];then /etc/init.d/keepalived stop #echo 2 fi fi if [ \\\"$(ip a|grep \\\"192.168.8.187\\\")\\\" == \\\"\\\" ];then #ifconfig ens33 up sleep 5 if [ \\\"$(ip a|grep \\\"192.168.8.187\\\")\\\" == \\\"\\\" ];then /etc/init.d/keepalived stop fi fi \"]},\"333\":{\"h\":\"为检测脚本添加可执行权限。\",\"t\":[\"chmod +x /usr/local/keepalived/sbin/check_mysql.sh \"]},\"334\":{\"h\":\"在mysql-master服务器上验证虚拟IP是否绑定。\",\"t\":[\"chmod -R 777 /etc/keepalived/keepalived.conf service keepalived stop service keepalived start # 查看虚拟IP是否出现在了网卡上 ip a \"]},\"335\":{\"h\":\"MySQL从库配置\"},\"336\":{\"h\":\"在mysql-backup服务器上修改keepalived配置文件。\",\"t\":[\"注意配置中interface(指定网卡)、virtual_ipaddress(虚拟IP)、unicast_src_ip(本机IP)和unicast_peer(其它服务器IP)参数可根据实际环境进行配置。\",\"vim /etc/keepalived/keepalived.conf # 将原配置文件内容清空，添加以下配置内容↓： ! Configuration File for keepalived vrrp_script check_mysql { script \\\"/usr/local/keepalived/sbin/check_mysql.sh\\\" interval 3 weight 2 } vrrp_instance mysql { state BACKUP nopreempt interface ens33 virtual_router_id 88 priority 99 advert_int 1 authentication { auth_type PASS auth_pass ****** } track_script { check_mysql } virtual_ipaddress { 192.168.8.95 } unicast_src_ip 192.168.8.188 unicast_peer { 192.168.8.187 } notify_master \\\"/usr/local/keepalived/sbin/become_master.sh\\\" } \"]},\"337\":{\"h\":\"在mysql-backup服务器上创建检测脚本。\",\"t\":[\"vim /usr/local/keepalived/sbin/check_mysql.sh # 添加以下配置内容↓： #!/bin/bash if [ \\\"$(ps -ef | grep \\\"mysql.sock\\\"| grep -v grep )\\\" == \\\"\\\" ];then #echo 1 /bin/systemctl restart mysql sleep 5 if [ \\\"$(ps -ef | grep \\\"mysql.sock\\\"| grep -v grep )\\\" == \\\"\\\" ];then /etc/init.d/keepalived stop #echo 2 fi fi \"]},\"338\":{\"h\":\"为检测脚本添加可执行权限。\",\"t\":[\"chmod +x /usr/local/keepalived/sbin/check_mysql.sh \"]},\"339\":{\"h\":\"在mysql-backup服务器上创建处理脚本。\",\"t\":[\"vim /usr/local/keepalived/sbin/become_master.sh # 添加以下配置内容↓： #!/bin/bash /mysql/bin/mysql -uroot -****** -e 'stop slave;' /mysql/bin/mysql -uroot -****** -e 'SET GLOBAL read_only=0;' /mysql/bin/mysql -uroot -****** -e 'reset slave all;' \"]},\"340\":{\"h\":\"为处理脚本添加可执行权限。\",\"t\":[\"chmod +x /usr/local/keepalived/sbin/become_master.sh \"]},\"341\":{\"h\":\"在mysql-backup服务器上验证虚拟IP是否绑定，从库是否升级为主库。\",\"t\":[\"chmod -R 777 /etc/keepalived/keepalived.conf service keepalived stop service keepalived start # 登录mysql-master服务器，停止keepalived服务，查看虚拟IP是否漂移到从库服务器上 service keepalived stop # 登录mysql-backup服务器，等待几秒，查看虚拟IP是否出现在网卡上 ip a # 登录mysql-backup服务器，登录数据库，查看从库是否升级为主库 mysql> show slave status \\\\G; Empty set (0.00 sec) ERROR: No query specified \"]},\"342\":{\"h\":\"恢复从库数据到主库\",\"t\":[\"当从库升级为主库时，此时业务数据都会存储到从库，为了重新启用主库，并保证主从数据一致，此时需将从库数据同步到主库。 在mysql-backup服务器上，登录数据库进行锁表，防止数据写入。\",\"mysql> flush tables with read lock; \",\"在mysql-master服务器上，停止Keepalived服务和MySQL服务。\",\"systemctl stop keepalived systemctl stop mysql \",\"在mysql-backup服务器上，导出数据。\",\"cd /tmp /mysql/bin/mysqldump -uroot -p --master-data=1 --single-transaction --routines --triggers --events --all-databases > allbackup.sql \",\"在mysql-backup服务器上，停止Keepalived服务和MySQL服务。\",\"systemctl stop keepalived systemctl stop mysql \",\"在mysql-master服务器上，启动数据库，上传从库导出的sql文件到tmp目录，导入从库数据。\",\"systemctl start mysql cd /tmp # 在文件上传的位置，进行数据导入 mysql -uroot -p mysql> source allbackup.sql; mysql> exit; \",\"在mysql-master服务器上，启动Keepalived服务，查看虚拟IP是否绑定。\",\"systemctl start keepalived # 查看虚拟IP是否重新绑定，需要等待几秒才会出现 ip a \",\"重新设置数据同步。\",\"# 登录主库MySQL,查看master的binlog的文件名和binlog偏移量 mysql -uroot -p mysql> show master status; +-------------------+----------+--------------+------------------+-------------- -----+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +-------------------+----------+--------------+------------------+-------------- -----+ | master-bin.000040 | 1604195 | | | | +-------------------+----------+--------------+------------------+-------------- -----+ 1 row in set (0.02 sec) \",\"在mysql-backup服务器上，启动Keepalived服务。\",\"systemctl start keepalived # 查看keepalived和mysql是否启动 systemctl status keepalived; systemctl status mysql; # 登录从库数据库，设置同步信息 mysql -uroot -p unlock tables; stop slave; change master to master_auto_position=0; # 将MASTER_HOST、MASTER_LOG_FILE和MASTER_LOG_POS参数替换为实际的配置 CHANGE MASTER TO MASTER_HOST='主库IP地 址',MASTER_USER='root',MASTER_PASSWORD='2wsx@WSX',MASTER_LOG_FILE='master-bin.000005',MASTER_LOG_POS=155; start slave; show slave status \\\\G; \"]},\"343\":{\"h\":\"软件安装及高可用部署(二)\",\"t\":[\"本文介绍了Nginx安装\",\"以 nginx-master 为例，修改所有服务器的对应的主机名。\",\"vim /etc/hostname # 删除所有的内容，修改为要修改的主机名 nginx01 vim /etc/hosts #在第一行最后追加主机名，有127.0.0.1内容的这行 127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4 nginx01 # 重启服务器 reboot \",\"tar -zxvf nginx-1.19.10.tar.gz # 在软件包源码目录 cd /software/nginx/nginx-1.19.10 ./configure --prefix=/nginx --with-http_gunzip_module --with-http_ssl_module # 执行编译 make && make install # 指定配置文件启动 /nginx/sbin/nginx -c /nginx/conf/nginx.conf # 查看进程是否启动 ps -ef | grep nginx \",\"vim /root/.bash_profile # 找到 PATH=$PATH:$HOME/bin # 后面添加括号中的内容(:/nginx/sbin) # 刷新环境变量 source /root/.bash_profile # -------------------------------------------- vim /root/.bashrc # 在最后加入 PATH=$PATH:$HOME/bin:/nginx/sbin export PATH # 刷新环境变量 source /root/.bashrc \",\"# 在任意位置输入，先停止Nginx nginx -s stop # 启动nginx nginx # 浏览器访问服务器外网IP地址，查看Nginx欢迎页 http://外网IP地址 \"]},\"344\":{\"h\":\"nginx-master配置\",\"t\":[\"在nginx-master服务器上修改keepalived配置文件。注意配置中interface(指定网卡)、virtual_ipaddress(虚拟IP)、unicast_src_ip(本机IP)和unicast_peer(其它服务器IP)参数可根据实际环境进行配置。\",\"vim /etc/keepalived/keepalived.conf # 将原配置文件内容清空，添加以下配置内容↓： ! Configuration File for keepalived vrrp_script check_nginx { script \\\"/usr/local/keepalived/sbin/check_nginx.sh\\\" interval 3 weight 2 } vrrp_instance nginx { state MASTER interface ens33 virtual_router_id 11 priority 100 advert_int 1 authentication { auth_type PASS auth_pass 123456 } track_script { check_nginx } virtual_ipaddress { 192.168.8.93 } unicast_src_ip 192.168.8.183 unicast_peer { 192.168.8.184 } } \"]},\"345\":{\"h\":\"在nginx-master服务器上创建检测脚本。\",\"t\":[\"vim /usr/local/keepalived/sbin/check_nginx.sh # 添加以下配置内容↓： #!/bin/bash if [ \\\"$(ps -ef | grep \\\"nginx: master process\\\"| grep -v grep )\\\" == \\\"\\\" ];then #echo 1 /nginx/sbin/nginx -s reload /nginx/sbin/nginx -c /nginx/conf/nginx.conf sleep 5 if [ \\\"$(ps -ef | grep \\\"nginx: master process\\\"| grep -v grep )\\\" == \\\"\\\" ];then /etc/init.d/keepalived stop #echo 2 fi fi \"]},\"346\":{\"h\":\"为检测脚本添加可执行权限。\",\"t\":[\"chmod +x /usr/local/keepalived/sbin/check_nginx.sh \"]},\"347\":{\"h\":\"在nginx-master服务器上验证虚拟IP是否绑定。\",\"t\":[\"chmod -R 777 /etc/keepalived/keepalived.conf service keepalived stop service keepalived start # 查看虚拟IP是否出现在了网卡上 ip a \"]},\"348\":{\"h\":\"nginx-backup配置\",\"t\":[\"在nginx-backup服务器上修改keepalived配置文件。注意配置中interface(指定网卡)、virtual_ipaddress(虚拟IP)、unicast_src_ip(本机IP)和unicast_peer(其它服务器IP)参数可根据实际环境进行配置。\",\"vim /etc/keepalived/keepalived.conf # 将原配置文件内容清空，添加以下配置内容↓： ! Configuration File for keepalived vrrp_script check_nginx { script \\\"/usr/local/keepalived/sbin/check_nginx.sh\\\" interval 3 weight 2 } vrrp_instance nginx { state BACKUP nopreempt interface ens33 virtual_router_id 11 priority 50 advert_int 1 authentication { auth_type PASS auth_pass 123456 } track_script { check_nginx } virtual_ipaddress { 192.168.8.93 } unicast_src_ip 192.168.8.184 unicast_peer { 192.168.8.183 } } \"]},\"349\":{\"h\":\"在nginx-backup服务器上创建检测脚本。\",\"t\":[\"vim /usr/local/keepalived/sbin/check_nginx.sh # 添加以下配置内容↓： #!/bin/bash if [ \\\"$(ps -ef | grep \\\"nginx: master process\\\"| grep -v grep )\\\" == \\\"\\\" ];then #echo 1 /nginx/sbin/nginx -s reload /nginx/sbin/nginx -c /nginx/conf/nginx.conf sleep 5 if [ \\\"$(ps -ef | grep \\\"nginx: master process\\\"| grep -v grep )\\\" == \\\"\\\" ];then /etc/init.d/keepalived stop #echo 2 fi fi \"]},\"350\":{\"h\":\"为检测脚本添加可执行权限。\",\"t\":[\"chmod +x /usr/local/keepalived/sbin/check_nginx.sh \"]},\"351\":{\"h\":\"在nginx-backup服务器上验证虚拟IP是否绑定。\",\"t\":[\"chmod -R 777 /etc/keepalived/keepalived.conf service keepalived stop service keepalived start # 登录nginx-master服务器 service keepalived stop # 登录nginx-backup服务器，查看虚拟IP是否出现在了网卡上 ip a # 登录nginx-master服务器 service keepalived start # 登录nginx-master服务器，查看虚拟IP是否出现在了网卡上 ip a \"]},\"352\":{\"h\":\"软件安装及高可用部署(四)\",\"t\":[\"本文介绍了redis安装\",\"官网下载需要安装版本redis，下载地址https://redis.io/downloadhttp://download.redis.io/releases/ (所有版本)\",\"解压 tar -zxvf redis-7.0.5.tar.gz cd redis-7.0.5/ \",\"make make PREFIX=/redis install \",\"cp /usr/local/redis/redis-7.0.5/redis.conf /redis/ \",\"mkdir /redis/logs touch /redis/logs/redis.log chmod 666 /redis/logs/redis.log mkdir /redis/aof/ chmod 777 /redis/aof/ \",\"vim /redis/redis.conf # 找到bind配置，添加注释（69行） #bind 127.0.0.1 # 找到daemonize，将配置修改为yes（136行） daemonize yes # 取消保护模式（88行） protected-mode no # 增加密码 requirepass ****** # 配置文件路径（171行） logfile \\\"/redis/logs/redis.log\\\" # 配置文件路径（263行） dir /redis/aof/ 注册系统服务 重载系统服务 添加自启 防火墙配置 将防火墙服务停止并禁止开机自启。 在redis-backup服务器上重复以上步骤，安装Redis。 # 配置文件路径（699行） appendonly no # 配置文件路径，取消注释（216行） save \\\"\\\" # 配置文件路径，添加注释（218-220行） # save 900 1 # save 300 10 # save 60 10000 # 配置文件路径（806行） aof-use-rdb-preamble no \"]},\"353\":{\"h\":\"修改启动文件\",\"t\":[\"vim /usr/lib/systemd/system/redis.service # 添加以下内容，保存退出 [Unit] Description=Redis After=syslog.target network.target remote-fs.target nss-lookup.target [Service] Type=forking PIDFile=/var/run/redis_6379.pid ExecStart=/redis/bin/redis-server /redis/redis.conf ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target \"]},\"354\":{\"h\":\"重载系统服务\",\"t\":[\"systemctl daemon-reload \"]},\"355\":{\"h\":\"添加自启\",\"t\":[\"systemctl start redis systemctl status redis systemctl enable redis \",\"在redis-backup服务器上重复以上步骤，安装Redis。\",\"编辑redis-backup服务器上redis配置文件。\",\"vim /redis/redis.conf # 编辑从库的redis.conf配置文件，搜索replicaof（286行），去掉注释，修改为： replicaof 主库IP 6379 # 从库重启redis systemctl restart redis # 主库使用客户端：redis-cli，添加键值 cd /redis/bin/ ./redis-cli 127.0.0.1:6379> SET runoobkey redis # 从库使用客户端：redis-cli，查看是否同步了主库的数据 cd /redis/bin/ ./redis-cli 127.0.0.1:6379> keys * 1) \\\"runoobkey\\\" \"]},\"356\":{\"h\":\"在redis-master服务器上修改keepalived配置文件。\",\"t\":[\"注意配置中interface(指定网卡)、virtual_ipaddress(虚拟IP)、unicast_src_ip(本机IP)和unicast_peer(其它服务器IP)参数可根据实际环境进行配置。\",\"vim /etc/keepalived/keepalived.conf 在redis-master服务器上创建检测脚本。 # 将原配置文件内容清空，添加以下配置内容↓： ! Configuration File for keepalived vrrp_script chk_redis { script \\\"/etc/keepalived/script/chk_redis.sh\\\" interval 3 } vrrp_instance redis { state BACKUP nopreempt interface ens33 virtual_router_id 66 priority 100 advert_int 1 authentication { auth_type PASS auth_pass redis } track_script { chk_redis } virtual_ipaddress { 192.168.8.96 } unicast_src_ip 192.168.8.189 unicast_peer { 192.168.8.190 } } \"]},\"357\":{\"h\":\"在redis-master服务器上创建检测脚本。\",\"t\":[\"mkdir -p /etc/keepalived/script vim /etc/keepalived/script/chk_redis.sh # 添加以下内容↓： #!/bin/bash A=`/redis/bin/redis-cli -h 127.0.0.1 -p 6379 PING` if [ \\\"$A\\\"x != \\\"PONG\\\"x ] then /bin/systemctl restart redis sleep 2 if [ \\\"`/redis/bin/redis-cli -h 127.0.0.1 -p 6379 PING`\\\"x != \\\"PONG\\\"x ] then /etc/init.d/keepalived stop fi fi port=`netstat -anp|grep 2049` if [ \\\"$port\\\" == \\\"\\\" ];then #echo 1 /bin/systemctl start nfs sleep 5 port=`netstat -anp|grep 2049` if [ \\\"$port\\\" == \\\"\\\" ];then /etc/init.d/keepalived stop #echo 2 fi fi \"]},\"358\":{\"h\":\"为检测脚本添加可执行权限。\",\"t\":[\"chmod +x /etc/keepalived/script/chk_redis.sh \"]},\"359\":{\"h\":\"在redis-master服务器上验证虚拟IP是否绑定。\",\"t\":[\"chmod -R 777 /etc/keepalived/keepalived.conf service keepalived stop service keepalived start # 查看虚拟IP是否出现在了网卡上 ip a \"]},\"360\":{\"h\":\"验证keepalived服务是否可用。\",\"t\":[\"# 停止redis服务，查看keepalived是否会自动拉起服务 systemctl stop redis systemctl status redis \"]},\"361\":{\"h\":\"在redis-backup服务器上修改keepalived配置文件。\",\"t\":[\"注意配置中interface(指定网卡)、virtual_ipaddress(虚拟IP)、unicast_src_ip(本机IP)和unicast_peer(其它服务器IP)参数可根据实际环境进行配置。\",\"vim /etc/keepalived/keepalived.conf # 将原配置文件内容清空，添加以下配置内容↓： ! Configuration File for keepalived vrrp_script chk_redis { script \\\"/etc/keepalived/script/chk_redis.sh\\\" interval 3 } vrrp_instance redis { state BACKUP nopreempt interface ens33 virtual_router_id 66 priority 100 advert_int 1 authentication { auth_type PASS auth_pass redis } track_script { chk_redis } virtual_ipaddress { 192.168.8.96 } unicast_src_ip 192.168.8.190 unicast_peer { 192.168.8.189 } notify_master \\\"/etc/keepalived/script/become_master.sh\\\" } \"]},\"362\":{\"h\":\"在redis-backup服务器上创建检测脚本。\",\"t\":[\"mkdir -p /etc/keepalived/script vim /etc/keepalived/script/chk_redis.sh # 添加以下内容↓： #!/bin/bash A=`/redis/bin/redis-cli -h 127.0.0.1 -p 6379 PING` if [ \\\"$A\\\"x != \\\"PONG\\\"x ] then /bin/systemctl restart redis sleep 2 if [ \\\"`/redis/bin/redis-cli -h 127.0.0.1 -p 6379 PING`\\\"x != \\\"PONG\\\"x ] then /etc/init.d/keepalived stop fi fi \"]},\"363\":{\"h\":\"为检测脚本添加可执行权限。\",\"t\":[\"chmod +x /etc/keepalived/script/chk_redis.sh \"]},\"364\":{\"h\":\"在redis-backup服务器上创建处理脚本。\",\"t\":[\"vim /etc/keepalived/script/become_master.sh # 添加以下配置内容↓： #!/bin/bash /redis/bin/redis-cli -h 127.0.0.1 -p 6379 slaveof no one \"]},\"365\":{\"h\":\"为处理脚本添加可执行权限。\",\"t\":[\"chmod +x /etc/keepalived/script/become_master.sh \"]},\"366\":{\"h\":\"在redis-backup服务器上，验证redis从库是否可以升级为主库。\",\"t\":[\"chmod -R 777 /etc/keepalived/keepalived.conf service keepalived stop service keepalived start # 在redis-master服务器上，停止keepalived服务，查看虚拟IP是否漂移，redis从库是否升级为主库 systemctl stop keepalived # 在redis-backup服务器上，查看虚拟IP是否出现在了网卡上 ip a # 在redis-backup服务器上，验证redis从库是否升级为主库 cd /redis/bin ./redis-cli 127.0.0.1:6379> set cfit test OK \"]},\"367\":{\"h\":\"恢复使用主库Redis\",\"t\":[\"当redis-master服务器出现故障，虚拟IP自动漂移到redis-backup服务器上时，此时禅道相关的session 信息会存储到redis-backup服务器上的redis中，上传的非结构数据也会存储到redis-backup服务器上 的nfs共享目录中。 因为上述步骤测试redis-backup服务器上的redis是否会升级为主库，虚拟IP已转移，所以此步骤可恢复 虚拟IP绑定在redis-master服务器上。\",\"# 在redis-backup服务器上，停止运行keepalived和redis服务 systemctl stop keepalived systemctl stop redis # 在redis-master服务器上，挂载从库nfs共享目录，复制所有文件到redis-master服务器的共享目录 中 mkdir /cfit_pms_data_tmp mount -t nfs 192.168.8.190:/redis/cfit_pms_data /cfit_pms_data_tmp sudo cp -rf /cfit_pms_data_tmp/* /redis/cfit_pms_data/ # 在redis-master服务器上，卸载挂载目录 umount /cfit_pms_data_tmp # 在redis-master服务器上，启动keepalived服务 systemctl start keepalived # 在redis-master服务器上，查看虚拟IP是否已绑定 ip a # 在redis-backup服务器上，启动keepalived服务 systemctl start keepalived \"]},\"368\":{\"h\":\"软件安装及高可用部署(一)\",\"t\":[\"本文介绍了磁盘挂载、JDK安装、Keepalived安装\"]},\"369\":{\"h\":\"（1）查看设备的挂载情况\",\"t\":[\"lsblk或lsblk –f或者fdisk -l\"]},\"370\":{\"h\":\"（2）分区\",\"t\":[\"fdisk /dev/vdb 其中/dev/vdb表示上图未挂载的硬盘 分区步骤如下图，下图以/dev/sdb为例\"]},\"371\":{\"h\":\"（3）格式化\",\"t\":[\"mkfs -t ext4 /dev/vdb1 其中/dev/vdb1是要格式化的分区名，下图以/dev/sdb1为例 \",\"img\"]},\"372\":{\"h\":\"（4）挂载\",\"t\":[\"挂载到/mnt目录下，具体操作步骤如下： 进入 mmt目录 cd /mmt/ 挂载到 /mnt mount /dev/vdb1 /mnt 其中/dev/vdb1是要挂载的分区名 \"]},\"373\":{\"h\":\"（5）设置可以自动挂载（永久挂载，当你重启 Linux 之后，仍然可以挂载）\",\"t\":[\"永久挂载：通过修改 /etc/fstab 实现挂载 vim /etc/fstab打开/etc/fstab文件，如下图所示，添加下一行内容，其中，/dev/vdb1 /mnt是要挂载内容。 \",\"img\"]},\"374\":{\"h\":\"（6）查看\",\"t\":[\"df –h \",\"img\"]},\"375\":{\"h\":\"（1）官网下载需要安装版本jdk，下载地址\",\"t\":[\"https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\"]},\"376\":{\"h\":\"（2）拷贝至linux安装目录\",\"t\":[\"将下载好的jdk包拷贝至/usr/local/java 目录下 进入目录： cd /usr/local/java 解压： tar zxvf jdk-8u351-linux-x64.tar.gz \"]},\"377\":{\"h\":\"（3）配置环境变量\",\"t\":[\"编辑/etc/profile文件 vim /etc/profile 编辑模式在文档中增加如下行： export JAVA_HOME=/usr/local/java/jdk1.8.0_351 export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$PATH:$JAVA_HOME/bin 生效环境变量 source /etc/profile \"]},\"378\":{\"h\":\"（4）验证是否安装成功\",\"t\":[\"java -version \",\"img\"]},\"379\":{\"h\":\"(1)安装\",\"t\":[\"tar xzf keepalived-1.2.22.tar.gz cd keepalived-1.2.22 ./configure --prefix=/usr/local/keepalived make && make install \"]},\"380\":{\"h\":\"(2)配置\",\"t\":[\"在所有服务器上配置keepalived软件。\",\"ln -s /usr/local/keepalived/etc/keepalived /etc/keepalived ln -s /usr/local/keepalived/etc/rc.d/init.d/keepalived /etc/rc.d/init.d/keepalived ln -s /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived ln -s /usr/local/keepalived/sbin/keepalived /usr/bin/keepalived # 配置自启 chkconfig --add keepalived chkconfig keepalived on # 重启查看 reboot systemctl status keepalived \"]},\"381\":{\"h\":\"Spring Bean作用域与生命周期\",\"t\":[\"img\",\"解释：\",\"Spring 通过我们的配置，如 @ComponentScan 定义的扫描路径去找到带有 @Component 的类，这个过程就是一个资源定位的过程。\",\"一旦找到了资源，那么它就开始解析，并且将定义的信息保存起来。注意，此时还没有初始化 Bean ，也就没有 Bean 实例，它有的仅仅是 Bean 的定义。\",\"然后就会把 Bean 定义发布到 Spring IoC 容器中，此时，IoC容器也只有 Bean 的定义，还是没有 Bean 的实例生成。\",\"在默认的情况下，Spring会继续去完成Bean的实例化和依赖注入， 这样从IoC容器中就可以得到一个依赖注入完成的Bean。但是，有些Bean会在取的时候才初始化和依赖注入。如下图：\",\"img\",\"解释：\",\"其中流程节点针对于单个Bean，BeanPostProcessor是针对所有Bean而言。\",\"即使你定义了ApplicationContextAware接口，但是有时候并不会调用，这要根据你的IoC容器来决定。\",\"Spring IoC 容器的最低要求是实现 BeanFactory 接口，而不是实现 ApplicationContext 接口。对于那些没有实现 ApplicationContext 接口的容器，对生命周期对应的 ApplicationContextAware 定义的方法也是不会被调用的，只有实现了 ApplicationContext 接口的容器，才会在生命周期调用 ApplicationContextAware 所定义的 setApplicationContext 方法。\"]},\"382\":{\"h\":\"1、使用@Profile\"},\"383\":{\"h\":\"1）假设存在dev_spring_boot 和 test_spring_boot两个数据库，使用注解@Profile定义两个Bean\",\"t\":[\"​ \"]},\"384\":{\"h\":\"2）在 Java 启动项目中，我们只需要如下配置就能启动Profile机制：\",\"t\":[\"​ -Dspring.profiles.active=dev\",\"​ 注：Spring 会先判定是否存在 spring.profiles.active 配置后，再去查找 spring.profiles.default 配置的，所以 spring.profiles.active 的优先级要大于 spring.profiles.default\"]},\"385\":{\"h\":\"3）按照 springboot 的规则\",\"t\":[\"​ -Dspring.profiles.active 配置的值记为 {profile} ，则它会用 application-{profiles}.properties 文件去代替原来默认的 application.properties文件\"]},\"386\":{\"h\":\"2、使用 Spring EL\"},\"387\":{\"h\":\"1）读取属性文件的值，如：\",\"t\":[\"// ${......} 代表占位符 @Value(\\\"${database.driverName}\\\") String driver \"]},\"388\":{\"h\":\"2）记录一个Bean初始化事件，如：\",\"t\":[\"// #{......} 代表启用 Spring表达式，它将具有运算功能；T(......)代表的是引入类 @Value(\\\"#{T(System).currentTimeMillis()}\\\") private Long initTime = null; //直接赋值： 赋值字符串 @Value(\\\"#{‘使用 Spring EL 赋值字符串’}\\\") private String str = null; // 科学计数法赋值 @Value(\\\"#{9.3E3}\\\") private double d; // 其他Spring Bean属性赋值当前的Bean @Value(\\\"#{beanName.str}\\\") private String otherBeanProp = null; \",\"还可以进行计算、三元运算、比较等。\"]},\"389\":{\"h\":\"springboot打jar包分离资源文件\",\"t\":[\" <build> <!-- jar包名 --> <finalName>${project.artifactId}</finalName> <plugins> <!-- 分离lib --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-dependency-plugin</artifactId> <version>2.8</version> <executions> <execution> <id>copy-dependencies</id> <phase>package</phase> <goals> <goal>copy-dependencies</goal> </goals> <configuration> <!-- 依赖包输出目录，将来不打进jar包里 --> <outputDirectory>${project.build.directory}/lib</outputDirectory> <excludeTransitive>false</excludeTransitive> <stripVersion>false</stripVersion> <includeScope>runtime</includeScope> </configuration> </execution> </executions> </plugin> <!-- copy资源文件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-resources-plugin</artifactId> <version>3.3.0</version> <executions> <execution> <id>copy-resources</id> <phase>package</phase> <goals> <goal>copy-resources</goal> </goals> <configuration> <resources> <resource> <directory>src/main/resources</directory> </resource> </resources> <outputDirectory>${project.build.directory}/resources</outputDirectory> </configuration> </execution> </executions> </plugin> <!-- 打jar包时忽略配置文件 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-jar-plugin</artifactId> <version>2.4</version> <configuration> <excludes> <exclude>**/*.yml</exclude> <exclude>**/*.xml</exclude> </excludes> </configuration> </plugin> <!-- spring boot repackage --> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> <version>2.6.0</version> <configuration> <layout>ZIP</layout> <includes> <include> <groupId>non-exists</groupId> <artifactId>non-exists</artifactId> </include> </includes> </configuration> <executions> <execution> <goals> <goal>repackage</goal> </goals> </execution> </executions> </plugin> <!-- maven 打包时跳过测试 --> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-surefire-plugin</artifactId> <version>2.12.4</version> <configuration> <skip>true</skip> </configuration> </plugin> </plugins> </build> \",\"jar包、resource文件夹、lib文件夹放在同一目录下\",\"#!/bin/sh # ./app.sh start 启动 stop 停止 restart 重启 status 状态 AppName=app.jar # JVM参数 JVM_OPTS=\\\"-Dname=$AppName -Dspring.profiles.active=prod -Dloader.path=resources,lib -Duser.timezone=Asia/Shanghai -Xms512m -Xmx1024m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:NewRatio=1 -XX:SurvivorRatio=30 -XX:+UseParallelGC -XX:+UseParallelOldGC\\\" APP_HOME=`pwd` LOG_PATH=$APP_HOME/logs/$AppName.log if [ \\\"$1\\\" = \\\"\\\" ]; then echo -e \\\"\\\\033[0;31m 未输入操作名 \\\\033[0m \\\\033[0;34m {start|stop|restart|status} \\\\033[0m\\\" exit 1 fi if [ \\\"$AppName\\\" = \\\"\\\" ]; then echo -e \\\"\\\\033[0;31m 未输入应用名 \\\\033[0m\\\" exit 1 fi function start() { PID=`ps -ef |grep java|grep $AppName|grep -v grep|awk '{print $2}'` if [ x\\\"$PID\\\" != x\\\"\\\" ]; then echo \\\"$AppName is running...\\\" else nohup java $JVM_OPTS -jar $AppName > /dev/null 2>&1 & echo \\\"Start $AppName success...\\\" fi } function stop() { echo \\\"Stop $AppName\\\" PID=\\\"\\\" query(){ PID=`ps -ef |grep java|grep $AppName|grep -v grep|awk '{print $2}'` } query if [ x\\\"$PID\\\" != x\\\"\\\" ]; then kill -TERM $PID echo \\\"$AppName (pid:$PID) exiting...\\\" while [ x\\\"$PID\\\" != x\\\"\\\" ] do sleep 1 query done echo \\\"$AppName exited.\\\" else echo \\\"$AppName already stopped.\\\" fi } function restart() { stop sleep 2 start } function status() { PID=`ps -ef |grep java|grep $AppName|grep -v grep|wc -l` if [ $PID != 0 ];then echo \\\"$AppName is running...\\\" else echo \\\"$AppName is not running...\\\" fi } case $1 in start) start;; stop) stop;; restart) restart;; status) status;; *) esac \"]},\"390\":{\"h\":\"SpringCloud-Alibaba整合Nacos服务注册发现\"},\"391\":{\"h\":\"1、引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \"]},\"392\":{\"h\":\"2、配置application.yml\",\"t\":[\"在application.yaml配置文件内添加Nacos Server的地址：\",\"server: port: 8081 spring: application: name: nacos-producer # 注册到nacos的服务名称 cloud: nacos: discovery: server-addr: 127.0.0.1:8848 \"]},\"393\":{\"h\":\"3、springboot启动类\",\"t\":[\"在启动类添加 Spring Cloud 原生注解 @EnableDiscoveryClient ，开启服务注册发现功能\",\"@SpringBootApplication @EnableDiscoveryClient public class NacosProviderDemoApplication { public static void main(String[] args) { SpringApplication.run(NacosProviderDemoApplication.class, args); } } \"]},\"394\":{\"h\":\"4、确认注册成功\",\"t\":[\"运行程序，打开Nacos管理服务，可以看到nacos-producer已经成功注册。\",\"image-20191203152720691\",\"基于Alibaba Nacos Spring Cloud（服务发现）、Spring Cloud OpenFeign（声明式调用，同时整合了熔断器、负载均衡），推荐使用此方法。\"]},\"395\":{\"h\":\"1、引入依赖\",\"t\":[\"<!-- Nacos服务发现 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <!-- 声明式调用 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <!-- 负载均衡 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-ribbon</artifactId> </dependency> <!-- 熔断器 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix</artifactId> </dependency> \"]},\"396\":{\"h\":\"2、配置文件配置\",\"t\":[\"在application.yaml配置文件内添加Nacos Server的地址，并开启feign的熔断器功能：\",\"server: port: 8081 spring: application: name: nacos-producer cloud: nacos: discovery: server-addr: 127.0.0.1:8848 #允许feign开启熔断器，默认未开启 feign: hystrix: enabled: true hystrix: command: default: execution: timeout: enabled: true isolation: thread: #目前有两个容器实例，单个请求超时5s,+重试>10s，超15s则熔断 timeoutInMilliseconds: 15000 ribbon: #ribbon请求连接的超时时间- 限制3秒内必须请求到服务，并不限制服务处理的返回时间 connectTimeout: 3000 #请求处理的超时时间 下级服务响应最大时间,超出时间消费方（路由也是消费方）返回timeout,超时时间不可大于断路器的超时时间 readTimeout: 5000 \"]},\"397\":{\"h\":\"3、开启服务发现、负载均衡、熔断器功能\",\"t\":[\"在启动类添加 Spring Cloud 原生注解 @EnableDiscoveryClient ，开启服务注册发现功能，添加 @EnableCircuitBreaker 开始熔断器功能：\",\"@SpringBootApplication @EnableDiscoveryClient //开启服务发现 @EnableCircuitBreaker //开始熔断功能 @EnableFeignClients(basePackages = {\\\"com.sy\\\"}) //开启Feign客户端，并指定扫描范围 @ComponentScan(basePackages = {\\\"com.sy\\\"}) public class NacosDiscoveryExampleApplication { public static void main(String[] args) { SpringApplication.run(NacosDiscoveryExampleApplication.class, args); } } \"]},\"398\":{\"h\":\"4、创建服务代理类\",\"t\":[\"使用@FeignClient注解声明服务调用的代理类，其中参数含义为：1.name：服务提供者注册在服务注册中心的名称； 2.fallback：使用者提供的断路器实现，必须是当前代理类的实现类； 3.fallbackFactory：使用者提供的Hystrix的断路器工厂类实现。\",\"注：fallback 与 fallbackFactory 只需要配置一个，建议使用fallbackFactory。 示例如下：\",\"@Component @FeignClient(name = \\\"nacos-producer\\\", fallbackFactory = HystrixClientFallbackFactory.class) public interface ConsumerService { @LoadBalanced @GetMapping(value = \\\"/hello\\\") String hello(); @LoadBalanced @GetMapping(value = \\\"/hello/{string}\\\") String hello(@PathVariable(\\\"string\\\") String string); } \"]},\"399\":{\"h\":\"5、创建Hystrix的断路器工厂类\",\"t\":[\"@Component public class HystrixClientFallbackFactory implements FallbackFactory<ConsumerService> { @Override public ConsumerService create(Throwable cause) { // 打印日志 LocalLog.info(\\\"fallback; reason was: \\\" + cause.getMessage()); return new ConsumerService() { @Override public String hello() { return \\\"请求失败\\\"; } @Override public String hello(String string) { return \\\"请求失败. string=\\\" + string; } }; } } \"]},\"400\":{\"h\":\"6、通用代理类的实例进行服务调用，与本地调用无异。如下：\",\"t\":[\"@RestController public class ConsumerController { @Autowired private ConsumerService consumerService; @RequestMapping(value = \\\"/feign/{string}\\\", method = RequestMethod.GET) public String echo(@PathVariable String string) { return consumerService.hello(string); } } \"]},\"401\":{\"h\":\"SpringCloud client配置\",\"t\":[\"<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-alibaba-nacos-config --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> \",\"创建配置文件 bootstrap.properties ，并添加基础配置信息：\",\"bootstrap.properties #配置中心地址 spring.cloud.nacos.config.server-addr=nacos.xt.com #配置项 dataId 前缀 spring.cloud.nacos.config.prefix=supervision.web-platform.kafka.consumer #配置格式，建议使用properties或yaml，同时为dataId的后缀 spring.cloud.nacos.config.file-extension=properties #配置组id spring.cloud.nacos.config.group=supervision:web-platform \",\"使用 Spring 的注解 @Value 设置属性值，使用 Spring Cloud 原生注解 @RefreshScope 实现配置自动更新。\",\"示例代码\",\"@RestController @RefreshScope public class HelloController { @Value(\\\"${user.code:默认值}\\\") private String userCode; @RequestMapping(\\\"/hello\\\") public String hello() { return \\\"Hello, this is a nacos-config-demo. userCode=\\\" + userCode; } } \"]},\"402\":{\"h\":\"SpringCloud Hystrix参数配置\",\"t\":[\"Hystrix修改默认配置有两种方式，注解参数注入，和application.yml配置文件配置。\",\" @RequestMapping(value = \\\"/helloHystrixA/{string}\\\", method = RequestMethod.GET) @HystrixCommand(fallbackMethod = \\\"testFallback\\\", // 请求失败降级回调方法，值为方法名，不需要括号 commandProperties = {// 针对单个方法的配置 @HystrixProperty(name = \\\"circuitBreaker.enabled\\\", value = \\\"true\\\"), // 开启熔断器，可不加默认为true @HystrixProperty(name = \\\"circuitBreaker.errorThresholdPercentage\\\", value = \\\"50\\\"), // 请求错误超过50%，开启熔断器 @HystrixProperty(name = \\\"circuitBreaker.requestVolumeThreshold\\\", value = \\\"10\\\"), // 一个周期(十秒)内超过10个请求才进行进行容错率判断 @HystrixProperty(name = \\\"circuitBreaker.sleepWindowInMilliseconds\\\", value = \\\"10000\\\"),// 开启熔断器后过10秒再尝试访问 }) public String helloHystirxA(@PathVariable String string) { return \\\"Nacos服务发现：远端调用成功！ result=\\\" + restTemplate.getForObject(\\\"http://nacos.provider.demo/hello/\\\" + string, String.class); \",\"分两步，首先在代码里配置commandKey：\",\"@RequestMapping(value = \\\"/helloHystrixB/{string}\\\", method = RequestMethod.GET) @HystrixCommand(commandKey = \\\"testCommand\\\", // 为修饰的方法定义一个 commandKey，不设置默认取方法名为commandKey fallbackMethod = \\\"testFallback\\\"// 请求失败降级回调方法，值为方法名，不需要括号 ) public String helloHystirxB(@PathVariable String string) { return \\\"Nacos服务发现：远端调用成功！ result=\\\" + restTemplate.getForObject(\\\"http://nacos.provider.demo/hello/\\\" + string, String.class); } \",\"然后在application.yml里配置 commandKey = \\\"testCommand\\\" 对应的配置项：\",\"hystrix: command: testCommand: #commandKey，配置作用于指定的commandKey # ============ 常用的熔断器配置 ============= circuitBreaker: enabled: true #默认为true，可不用配置 errorThresholdPercentage: 50 #一个监测周期（默认10s），请求失败率超过50%开启熔断器 requestVolumeThreshold: 10 #一个监测周期内，超过10个请求才进行进行容错率判断 sleepWindowInMilliseconds: 10000 #开启熔断器后过10s再尝试访问，默认5s metrics: rollingStats: timeInMilliseconds: 10000 #监测周期时长（单位 ms）,默认10000，即10秒 numBuckets: 10 #监测周期切分为10个buckets #结合上面的参数就是10秒监测周期 分为10个buckets，每个buckets 1秒；每1秒进行1次监测计算 #注意 timeInMilliseconds % numBuckets 必须为0 否则会触发异常 #============ 常用的资源隔离配置 ============ execution: isolation: strategy: THREAD # THREAD：线程隔离， SEMAPHORE：信号量隔离；默认线程隔离 thread: timeoutInMilliseconds: 400 #占用线程调用接口的超时时间 interruptOnTimeout: true #占用线程超时 是否中断线程的执行 timeout: enabled: true #开启超时限制 semaphore: maxConcurrentRequests: 20 #信号量隔离下才有效，最大的信号量值，可以理解为 最大支持的并发数 fallback: isolation: semaphore: maxConcurrentRequests: 20 #降级回调方法允许的最大调用 \",\"注：如果将application.yml中的commandKey设置为default，则会作为全局默认配置，覆盖Hystrix自身的默认配置。\"]},\"403\":{\"h\":\"SpringCloud Ribbon参数配置\",\"t\":[\"image-20201214123508379\",\"Ribbon负载均衡策略为轮询，如果要修改默认策略 ，有两种方法，分别是创建配置类，和配置application.yml。\",\" @Configuration public class MyRibbonConfig { @Bean public IRule ribbonRule() { //随机策略 return new RandomRule(); } } 然后在启动类上加注解： @RibbonClient(name = \\\"nacos.provider.demo\\\", configuration = MyRibbonConfig.class) //name为服务提供者名称 \",\"无须任何配置类和代码，只需要在在application.yml中添加配置：\",\"#针对单个服务配置路由规则，注意 配置的值 需要类全名（包名+类名）； nacos.config.demo: #目标服务提供名称 ribbon: ConnectionTimeout: 400 #链接超时 ReadTimeout: 400 #读取超时 MaxAutoRetries: 1 #重试当前实例的次数 MaxAutoRetriesNextServer: 1 #服务实例切换重试次数 ServerListRefreshInterval: 30000 #刷新所服务列表间隔时间 NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #配置对应的规则，其他ribbon自带的规则 可查看IRule接口的实现类 \"]},\"404\":{\"h\":\"SpringCloud使用Feign+Ribbon+Hystrix\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix</artifactId> </dependency> \",\"spring: application: name: server-consumer-feign-hystrix #修改此处为您的应用程序名称 group: test #部门 developer: developer #<负责人姓名> cloud: nacos: discovery: server-addr: nacos.com #Nacos服务地址 main: allow-bean-definition-overriding: true #允许feign开启熔断器，默认未开启 feign: hystrix: enabled: true management: endpoints: web: exposure: include: \\\"*\\\" #打开所有端点，默认是info,health endpoint: health: show-details: always #显示health的明细内容，默认是never server: port: 8086 \",\"@FeignClient(name = \\\"discovery-provider\\\", fallbackFactory = HystrixClientFallbackFactory.class) public interface RemoteClient { @LoadBalanced @GetMapping(value = \\\"/echo/{name}\\\") String hello(@PathVariable(\\\"name\\\") String name); } \",\"@Configuration public class AppointRibbonMetric { @Bean public IRule ribbonRule(){ //此处的RoundRobinRule()为轮询方式的负载均衡 return new RoundRobinRule(); } } \",\"@Component public class HystrixClientFallbackFactory implements FallbackFactory<RemoteClient> { @Override public RemoteClient create(Throwable throwable) { return (name)-> \\\"请求失败. name=\\\" + name; } } \"]},\"405\":{\"h\":\"1）.启动两个服务端，端口分别为8080，8090\",\"t\":[\"image-20201214125402694\"]},\"406\":{\"h\":\"2）.启动服务消费端，多次调用对应的服务\",\"t\":[\"image-20201214125453643\",\"image-20201214125504552\",\"由上方两张图可见，在每次调用时，均会路由到不同端口的实例上。\"]},\"407\":{\"h\":\"3）. 关掉两个服务端实例\",\"t\":[\"image-20201214125529023\",\"再次访问时返回了对应fallback中的返回值。\"]},\"408\":{\"h\":\"SpringCloud使用Feign+Ribbon\",\"t\":[\"<dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-ribbon</artifactId> </dependency> \",\"spring: application: name: discovery-consumer-feign-ribbon #修改此处为您的应用程序名称 group: test #部门 developer: developer #<负责人姓名> cloud: nacos: discovery: server-addr: nacos.com #Nacos服务地址 management: endpoints: web: exposure: include: \\\"*\\\" #打开所有端点，默认是info,health endpoint: health: show-details: always #显示health的明细内容，默认是never server: port: 8086 \",\"基础使用方式为给RestTemplate增加@LoadBlanced注解实现负载均衡\",\"/** * 最简单的ribbon负载均衡实现，定义一个RestTemplate的Bean， * 添加@LoadBalanced注解，在调用时注入该Bean即可实现客户端负载均衡 * */ @Bean @LoadBalanced public RestTemplate restTemplate(){ return new RestTemplate(); } \",\"//定义接口，增加FeignClient注解，在注解中使用name属性指定调用的具体服务名 @FeignClient(name = \\\"discovery-provider\\\") public interface RemoteClient { @GetMapping(value = \\\"/echo/{name}\\\") String hello(@PathVariable(\\\"name\\\") String name); } \",\"//创建一个配置类 //自定义了一个标记注解，@AvoidScan避免该配置类成为全局的负载均衡策略。 @Configuration @AvoidScan public class AppointRibbonMetric { @Bean public IRule ribbonRule(){ return new BestAvailableRule(); } } \",\"/** * 使用@RibbonClient可以对具体的服务调用指定特定的负载均衡策略。 * 此处@ComponentScan中的属性配置用于在spring进行扫描时，不将@AvoidScan注解修饰的策略设为全局默认策略 * 可以在@RibbonClients配置多个@RibbonClient */ @SpringBootApplication @EnableDiscoveryClient @EnableFeignClients @RibbonClients(value = {@RibbonClient(name = \\\"discovery-provider\\\",configuration = AppointRibbonMetric.class)}) @ComponentScan(excludeFilters = {@ComponentScan.Filter(type = FilterType.ANNOTATION ,value = {AvoidScan.class})}) public class ConsumerRibbonApplication { public static void main(String[] args) { ConfigurableApplicationContext context = SpringApplication.run(ConsumerRibbonApplication.class, args); System.out.println(context.getEnvironment().getProperty(\\\"spring.application.name\\\")); } } \",\"多次点击调用成功，并路由到不同端口的实例上。\",\"image-20201214125020584\",\"image-20201214125032862\"]},\"409\":{\"h\":\"SpringCloud使用Feign\",\"t\":[\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"此处主要为nacos服务端地址配置\",\"spring: application: name: discovery-consumer-feign #修改此处为您的应用程序名称 group: test #部门 developer: developer #<负责人姓名> cloud: nacos: discovery: server-addr: nacos.goo.com #Nacos服务地址 management: endpoints: web: exposure: include: \\\"*\\\" #打开所有端点，默认是info,health endpoint: health: show-details: always #显示health的明细内容，默认是never server: port: 8081 \",\"@SpringBootApplication @EnableDiscoveryClient @EnableFeignClients //启用feign调用，该注解会扫描@FeignClient注解 public class ConsumerFeignApplication { public static void main(String[] args) { ConfigurableApplicationContext context = SpringApplication.run(ConsumerFeignApplication.class, args); System.out.println(context.getEnvironment().getProperty(\\\"spring.application.name\\\")); } } \",\"//定义接口，增加FeignClient注解，在注解中使用name属性指定调用的具体服务名 @FeignClient(name = \\\"discovery-provider\\\") public interface RemoteClient { //此处的请求方式同服务端提供的访问方式相同 @GetMapping(value = \\\"/echo/{name}\\\") String hello(@PathVariable(\\\"name\\\") String name); } \",\"调用其hello方法 即可调用远程服务。\",\"image-20201214124603810\"]},\"410\":{\"h\":\"SpringCloud使用nacos多人开发负载调用问题实践\",\"t\":[\"当我们使用springcloud+nacos架构时,由于使用nacos进行负载的原因,组内小伙伴经常调用到其他人的电脑。\",\"针对此问题我们可以采用的方案：\",\"（方案1）利用nacos的特性,进行区分namespace或者group,每个人用不同的namespace或者group。该方式需要每个开发人员改yml文件且不能提交,比较麻烦。\",\"（方案2）不使用openfeign不使用gateway,使用restTemplate,调用前进行判断是否为开发环境,开发环境使用localhost。\",\"（方案3）该方案我目前采用的,无需每个人进行特别的配置。首先我们使用openfeign且使用gateway；其中nacos的namespace区分dev、test、hotfix、prod；group大家都是用的默认的DEFAULT_GROUP。需要修改的是gateway配置和增加openfeign参数 若有更好的方法,也请分享我,万分感谢~ 下面详细介绍方案2和方案3：\",\"使用RestTemplate进行服务调用\",\"// nacos 服务注册与发现 @Autowired private NamingService namingService; @Autowired private RestTemplate restTemplate; // 当前环境 @Value(\\\"${spring.profiles.active:#{prod}}\\\") private String env; /** * 在不使用feign组件时,使用nacos的NamingService配合RestTemplate的实现服务的发现及调用 */ @RequestMapping(value = \\\"/hello/{name}\\\", method = RequestMethod.GET) public String echo(@PathVariable String name) { try { // 获取服务实例列表 参数分别为实例名、是否为健康实例 String sendUrl = \\\"\\\"; Instance instance = namingService.selectOneHealthyInstance(\\\"server-provider\\\", true); // 如果是dev环境则调用localhost if (\\\"dev\\\".equals(env)) { sendUrl = \\\"http://localhost:\\\" + instance.getPort() + \\\"/echo/\\\" + name; } else { sendUrl = \\\"http://\\\" + instance.getIp() + \\\":\\\" + instance.getPort() + \\\"/echo/\\\" + name; } String result = restTemplate.getForObject(sendUrl, String.class); //打印log return result; } catch (NacosException e) { e.printStackTrace(); } return null; } \",\"step1：配置dev的gateway,将动态获得服务地址改为固定的地址,配置如下\",\"spring: cloud: gateway: discovery: locator: lowerCaseServiceId: true enabled: true routes: # 认证中心 - id: auth # 该处写死,则只调用本地的程序 # uri: lb://auth uri: http://localhost:9200 predicates: - Path=/auth/** filters: # 验证码处理 - CacheRequestFilter - ValidateCodeFilter - StripPrefix=1 # 文件服务 - id: file # 该处写死,则只调用本地的程序 # uri: lb://file uri: http://localhost:9300 predicates: - Path=/file/** filters: - StripPrefix=1 \",\"step2：配置openfeign接口,增加url参数\",\"@FeignClient(contextId = \\\"remoteFileService\\\", value = ServiceNameConstants.FILE_SERVICE, fallbackFactory = RemoteFileFallbackFactory.class, url = \\\"${servicename.file}\\\") public interface RemoteFileService { @PostMapping(value = \\\"/inner/file/upload\\\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE) public R<SysFile> upload(@RequestBody LoginUser loginUser, @RequestPart(value = \\\"file\\\") MultipartFile file, @RequestParam(value = \\\"filePath\\\") String filePath); } \",\"上述一般@FeignClient中参数的url若不指定,则会根据value去找nacos中对应的ip和端口。 所以我们需要配置url为servicename.file,{servicename.file}会读取yaml文件中的配置,而我们只需要增加namespace为dev的yaml文件,如下：\",\"servicename: file: http://localhost:9300 \",\"发布到其他环境的yaml则需要配置为\",\"servicename: file: '' \",\"经过上述配置,我们可以保证进入gateway的请求,只会代理到localhost。使用openfeign的请求,则会调用配置好的url。生产环境则会因为url为空,会去根据value进行负载\"]},\"411\":{\"h\":\"SpringCloud使用RestTemplate\",\"t\":[\"<dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"spring: application: name: server-discovery-consumer #修改此处为您的应用程序名称 group: test #部门 developer: developer#<负责人姓名> cloud: nacos: discovery: server-addr: nacos.com #Nacos服务地址 server: port: 8081 \",\"3、使用RestTemplate进行服务调用\",\"@Autowired private NamingService namingService; @Autowired private RestTemplate restTemplate; /** * 在不使用feign组件时，使用nacos的NamingService配合RestTemplate的实现服务的发现及调用 */ @RequestMapping(value = \\\"/hello/{name}\\\", method = RequestMethod.GET) public String echo(@PathVariable String name) { try { //获取服务实例列表 参数分别为实例名、是否为健康实例 Instance instance = namingService.selectOneHealthyInstance(\\\"server-provider\\\", true); String sendUrl = \\\"http://\\\" + instance.getIp() + \\\":\\\" + instance.getPort() + \\\"/echo/\\\" + name; String result = restTemplate.getForObject(sendUrl, String.class); //打印log return result; } catch (NacosException e) { e.printStackTrace(); } return null; } \",\"调用3中的echo方法即可远程调用 discovery-provider 服务的echo方法\",\"image-20201214124300675\"]},\"412\":{\"h\":\"SpringCloud健康检查\",\"t\":[\"基于Spring Cloud体系，可以使用spring cloud actuator组件\",\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> \",\"management: port: 8080 #actuator端口，保持与tomcat端口一致 endpoints: web: exposure: include: \\\"*\\\" #打开所有端点，默认是never endpoint: health: show-details: always #显示health的明细内容，默认是never \",\"http://服务地址/actuator/health\",\"{ \\\"status\\\": \\\"UP\\\", \\\"details\\\": { \\\"diskSpace\\\": { \\\"status\\\": \\\"UP\\\", \\\"details\\\": { \\\"total\\\": 499963174912, \\\"free\\\": 200715714560, \\\"threshold\\\": 10485760 } } } } \",\"其中status状态含义如下\",\"image-20201214114013294\",\"{ \\\"status\\\": \\\"当前状态（以整数形式字符串表示）\\\"， \\\"msg\\\": \\\"说明信息\\\"， } \",\"status状态值描述：\",\"0：服务正常\",\"1：处理能力紧张，需要扩容\",\"2：服务内部错误 ，需要重启或版本回滚\",\"3：服务获取依赖资源失败，需要人工干预\"]},\"413\":{\"h\":\"SpringCloud异常配置\",\"t\":[\"1.【强制】Java 类库中定义的可以通过预检查方式规避的 RuntimeException 异常不应该通过catch 的方式来处理，比如:NullPointerException，IndexOutOfBoundsException 等等。 说明:无法通过预检查的异常除外，比如，在解析字符串形式的数字时，不得不通过 catch NumberFormatException 来实现。 正例:if (obj != null) {...} 反例:try { obj.method(); } catch (NullPointerException e)\",\"2.【强制】异常不要用来做流程控制，条件控制。 说明:异常设计的初衷是解决程序运行中的各种意外情况，且异常的处理效率比条件判断方式要低很多。\",\"3.【强制】catch 时请分清稳定代码和非稳定代码，稳定代码指的是无论如何不会出错的代码。 对于非稳定代码的 catch 尽可能进行区分异常类型，再做对应的异常处理。\",\"说明:对大段代码进行 try-catch，使程序无法根据不同的异常做出正确的应激反应，也不利 于定位问题，这是一种不负责任的表现。正例:用户注册的场景中，如果用户输入非法字符，或用户名称已存在，或用户输入密码过于 简单，在程序上作出分门别类的判断，并提示给用户。\",\"4.【强制】捕获异常是为了处理它，不要捕获了却什么都不处理而抛弃之，如果不想处理它，请 将该异常抛给它的调用者。最外层的业务使用者，必须处理异常，将其转化为用户可以理解的内容。\",\"5.【强制】有 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，一定要注意手动回 滚事务。\",\"6.【强制】finally 块必须对资源对象、流对象进行关闭，有异常也要做 try-catch。说明:如果 JDK7 及以上，可以使用 try-with-resources 方式。\",\"7.【强制】不要在 finally 块中使用 return。 说明:finally 块中的 return 返回后方法结束执行，不会再执行 try 块中的 return 语句。\",\"8.【强制】捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。说明:如果预期对方抛的是绣球，实际接到的是铅球，就会产生意外情况。\",\"9.【推荐】方法的返回值可以为 null，不强制返回空集合，或者空对象等，必须添加注释充分 说明什么情况下会返回 null 值。 说明:本手册明确防止 NPE 是调用者的责任。即使被调用方法返回空集合或者空对象，对调用者来说，也并非高枕无忧，必须考虑到远程调用失败、序列化失败、运行时异常等场景返回 null 的情况。\",\"【推荐】防止 NPE，是程序员的基本修养，注意 NPE 产生的场景: 1)返回类型为基本数据类型，return 包装数据类型的对象时，自动拆箱有可能产生 NPE。 反例:public int f() { return Integer 对象}， 如果为 null，自动解箱抛 NPE。\",\"数据库的查询结果可能为null。\",\"集合里的元素即使isNotEmpty，取出的数据元素也可能为null。\",\"远程调用返回对象时，一律要求进行空指针判断，防止NPE。\",\"对于Session中获取的数据，建议NPE检查，避免空指针。\",\"级联调用obj.getA().getB().getC();一连串调用，易产生NPE。 正例:使用 JDK8 的 Optional 类来防止 NPE 问题。\",\"11.【推荐】定义时区分unchecked/checked 异常，避免直接抛出newRuntimeException()， 更不允许抛出 Exception 或者 Throwable，应使用有业务含义的自定义异常。推荐业界已定义 过的自定义异常，如:DAOException / ServiceException等。\",\"【参考】对于公司外的 http/api 开放接口必须使用“错误码”;而应用内部推荐异常抛出;跨应用间 RPC 调用优先考虑使用 Result 方式，封装 isSuccess()方法、“错误码”、“错误简 短信息”。 说明:关于 RPC 方法返回方式使用 Result 方式的理由: 1)使用抛异常返回方式，调用方如果没有捕获到就会产生运行时错误。 2)如果不加栈信息，只是new自定义异常，加入自己的理解的error message，对于调用 端解决问题的帮助不会太多。如果加了栈信息，在频繁调用出错的情况下，数据序列化和传输 的性能损耗也是问题。\",\"13.【参考】避免出现重复的代码(Don’t Repeat Yourself)，即DRY原则。\\n说明:随意复制和粘贴代码，必然会导致代码的重复，在以后需要修改时，需要修改所有的副 本，容易遗漏。必要时抽取共性方法，或者抽象公共类，甚至是组件化。\\n正例:一个类中有多个 public 方法，都需要进行数行相同的参数校验操作，这个时候请抽取:private boolean checkParam(DTO dto)\"]},\"414\":{\"h\":\"SpringCloud服务构建\",\"t\":[\"建议使用官方提供的在线地址进行工程的初始化创建：https://start.spring.io\",\"添加Spring Cloud和Spring Cloud Alibaba依赖管理：\",\"<properties> <java.version>1.8</java.version> <spring-cloud.version>Greenwich.SR3</spring-cloud.version> <spring-cloud-alibaba.version>0.9.0.RELEASE</spring-cloud-alibaba.version> </properties> <dependencyManagement> <dependencies> <!--Spring Cloud --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-dependencies</artifactId> <version>${spring-cloud.version}</version> <type>pom</type> <scope>import</scope> </dependency> <!--Spring Cloud Alibaba --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-alibaba-dependencies</artifactId> <version>${spring-cloud-alibaba.version}</version> <type>pom</type> <scope>import</scope> </dependency> </dependencies> </dependencyManagement> \",\"注意：spring-cloud-alibaba的0.2.x.RELEASE及0.9.0.RELEASE对应于Spring Boot 2.x版本，不能使用0.1.x.RELEASE版本。\",\"注意：每一级退格必须为两个或四个空格，同一级节点需要左对齐，且不能使用制表符TAB。\",\"# 服务端口配置（必填） server: port: 8080 # 应用基本信息配置（必填） spring: application: name: app #修改此处为您的应用程序名称 group: base #部门 developer: developer #<负责人姓名> # 健康检查通用配置（必填） management: port: 8080 #actuator端口，保持与tomcat端口一致 endpoints: web: exposure: include: \\\"*\\\" #打开所有端点，默认是never endpoint: health: show-details: always #显示health的明细内容，默认是never # 应用定制信息（选填），以info起始，后面的路径和内容能开发人员完全自定义，该信息可由actuator/info请求获取 info: interface: list: - hello - actuator/health - actuator/info app: desc: 这是一条描述信息 \"]},\"415\":{\"h\":\"SpringCloud服务注册\",\"t\":[\"<!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-alibaba-nacos-discovery --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> \",\"在application.yaml配置文件内添加Nacos Server的地址：\",\"#应用基本信息配置 spring: application: name: nacos-provider-demo #修改此处为您的应用程序名称 group: test #部门 developer: developer #<负责人姓名> cloud: nacos: discovery: server-addr: nacos.xt.com #Nacos服务地址 \",\"在启动类添加 Spring Cloud 原生注解 @EnableDiscoveryClient ，开启服务注册发现功能：\",\"@SpringBootApplication @EnableDiscoveryClient public class NacosProviderDemoApplication { public static void main(String[] args) { SpringApplication.run(NacosProviderDemoApplication.class, args); } } \",\"@RestController public class EchoController { @RequestMapping(value = \\\"/echo/{string}\\\", method = RequestMethod.GET) public String echo(@PathVariable String string) { return \\\"Hello Nacos Discovery \\\" + string; } } \",\"运行Nacos-provider-demo，打开Nacos管理服务，可以看到nacos-prodiver-demo已经成功注册。\",\"image-20201214122255720\"]},\"416\":{\"h\":\"SpringCloud服务消费\",\"t\":[\"基于Alibaba Nacos Spring Cloud（服务发现）、Spring Cloud OpenFeign（声明式调用，同时整合了熔断器、负载均衡）\",\" <!-- Nacos服务发现 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <!-- 声明式调用 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-openfeign</artifactId> </dependency> <!-- 负载均衡 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-ribbon</artifactId> </dependency> <!-- 熔断器 --> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-netflix-hystrix</artifactId> </dependency> \",\"在application.yaml配置文件内添加Nacos Server的地址，并开启feign的熔断器功能：\",\"#应用基本信息配置 spring: application: name: nacos-consumer-demo #修改此处为您的应用程序名称 group: test #部门 developer: developer #<负责人姓名> cloud: nacos: discovery: server-addr: nacos.com #Nacos服务地址 #允许feign开启熔断器，默认未开启 feign: hystrix: enabled: true \",\"在启动类添加 Spring Cloud 原生注解 @EnableDiscoveryClient ，开启服务注册发现功能，添加 @EnableCircuitBreaker 开始熔断器功能：\",\"@SpringBootApplication @EnableDiscoveryClient //开启服务发现 @EnableCircuitBreaker //开始熔断功能 @EnableFeignClients(basePackages = {\\\"com.example\\\"}) //开启Feign客户端，并指定扫描范围 @ComponentScan(basePackages = {\\\"com.example\\\"}) public class NacosFeignDemoApplication { public static void main(String[] args) { ConfigurableApplicationContext context = SpringApplication.run(NacosFeignDemoApplication.class, args); System.out.println(context.getEnvironment().getProperty(\\\"spring.application.name\\\")); } } \",\"使用@FeignClient注解声明服务调用的代理类，其中参数含义为：\",\"name：服务提供者注册在服务注册中心的名称；\",\"fallback：使用者提供的断路器实现，必须是当前代理类的实现类；\",\"fallbackFactory：使用者提供的Hystrix的断路器工厂类实现。 注：fallback 与 fallbackFactory 只需要配置一个，建议使用fallbackFactory。 示例如下：\",\"@FeignClient(name = \\\"nacos-provider-demo\\\", fallbackFactory = HystrixClientFallbackFactory.class) public interface RemoteClient { @LoadBalanced @GetMapping(value = \\\"/hello\\\") String hello(); @LoadBalanced @GetMapping(value = \\\"/hello/{string}\\\") String hello(@PathVariable(\\\"string\\\") String string); \"]},\"417\":{\"h\":\"SpringCloud管理配置页面\",\"t\":[\"1、配置 ID：Data ID\",\"image-20201214121332594\",\"在 Nacos Spring Cloud 中，dataId 的完整格式如下：${prefix}-${spring.profile.active}.${file-extension} \",\"${prefix} 为dataId的前缀，对应于Client端配置 spring.cloud.nacos.config.prefix 的值，如未配置，则默认对应Client端 spring.application.name 配置项的值。 ${file-extension} 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。 ${spring.profile.active} 为为当前环境对应的 profile，如为空，则变为${prefix}-${spring.profile.active}.${file-extension}形式。 \",\"建议${prefix}采用类似 package.class的命名规则保证全局唯一性，class 部分建议是配置的业务含义。 全部字符小写。只允许英文字符和 4 种特殊字符（\\\".\\\"、\\\":\\\"、\\\"-\\\"、\\\"_\\\"），不超过 256 字节。\",\"2、配置分组：group\",\"一组相关配置的集合，建议以产品分组，ID建议填写产品名:项目/模块名（如：supervision:web-platform）保证唯一性，只允许英文字符和4种特殊字符（\\\".\\\"、\\\":\\\"、\\\"-\\\"、\\\"_\\\"），不超过128字节。\",\"image-20201214121613146\",\"3、配置格式\",\"可选配置格式，Nacos 会帮助您做格式校验。建议使用properties和yaml。\",\"image-20201214121645728\",\"4、配置内容\",\"配置的内容，建议不超过 10 KB，最大不超过 100 KB。内容格式应当与【配置格式】的设置一致。\",\"image-20201214121721100\"]},\"418\":{\"h\":\"SpringCloud运维接口\",\"t\":[\"注意：默认端点 path 前面有一级 /actuator ，例如：http://服务地址/actuator/info\",\"Endpoint ID Description auditevents 显示应用暴露的审计事件 (比如认证进入、订单失败) info 显示应用的基本信息 health 显示应用的健康状态 metrics 显示应用的度量信息 metrics/{name} 显示应用指定名称的度量信息，例如：http://localhost:8080/actuator/metrics/system.cpu.count loggers 显示和修改配置的loggers logfile 返回log file中的内容(如果logging.file或者logging.path被设置) httptrace 显示HTTP足迹，最近100个HTTP request/repsponse env 显示当前的环境特性 env/{name} 显示指定名称的环境信息，例如：http://localhost:8080/actuator/spring.application.name flyway 显示数据库迁移路径的详细信息 liquidbase 显示Liquibase 数据库迁移的纤细信息 shutdown 让你逐步关闭应用 mappings 显示所有的@RequestMapping路径 scheduledtasks 显示应用中的调度任务 threaddump 执行一个线程dump heapdump 返回一个GZip压缩的JVM堆dump \"]},\"419\":{\"h\":\"SpringMVC全局异常处理器\",\"t\":[\"SpringBoot工程中对Controller配置全局异常处理。有些接口在发生异常时，如何对不同类型的接口使用不同的全局异常进行处理呢？ Spring提供了对@ControllerAdvice注解的配置，我们可以通过配置@ControllerAdvice对指定的Exception拦截。\",\"// 第一种 @RestControllerAdvice public class GlobalExceptionHandler {} // 第二种 // basePackages 指定一个或多个包，这些包及其子包下的所有 Controller 都被该 @ControllerAdvice 管理。其中上面两种等价于 basePackages。 // basePackages // @ControllerAdvice(\\\"cn.demo.controller\\\") // @ControllerAdvice(value = \\\"cn.demo.controller\\\") @ControllerAdvice(basePackages = {\\\"cn.demo.controller\\\"}) public class GlobalExceptionHandler {} // 第三种 // basePackageClasses 指定一个或多个 Controller 类，这些类所属的包及其子包下的所有 Controller 都被该 @ControllerAdvice 管理。 @ControllerAdvice(basePackageClasses = {MyController.class}) public class GlobalExceptionHandler {} // 第四种 // assignableTypes：指定一个或多个 Controller 类，这些类被该 @ControllerAdvice 管理。 @ControllerAdvice(assignableTypes = {MyController.class}) public class GlobalExceptionHandler {} // 第五种 // annotations：指定一个或多个注解，被这些注解所标记的 Controller 会被该 @ControllerAdvice 管理。 @ControllerAdvice(annotations = {RestController.class}) public class GlobalExceptionHandler {} \",\"@RestControllerAdvice public class GlobalExceptionHandler { private static final Logger log = LoggerFactory.getLogger(GlobalExceptionHandler.class); /** * 权限校验异常 */ @ExceptionHandler(AccessDeniedException.class) public AjaxResult handleAccessDeniedException(AccessDeniedException e, HttpServletRequest request) { String requestURI = request.getRequestURI(); log.error(\\\"请求地址'{}',权限校验失败'{}'\\\", requestURI, e.getMessage()); return AjaxResult.error(HttpStatus.FORBIDDEN, \\\"没有权限，请联系管理员授权\\\"); } /** * 请求方式不支持 */ @ExceptionHandler(HttpRequestMethodNotSupportedException.class) public AjaxResult handleHttpRequestMethodNotSupported(HttpRequestMethodNotSupportedException e, HttpServletRequest request) { String requestURI = request.getRequestURI(); log.error(\\\"请求地址'{}',不支持'{}'请求\\\", requestURI, e.getMethod()); return AjaxResult.error(e.getMessage()); } /** * 业务异常 */ @ExceptionHandler(ServiceException.class) public AjaxResult handleServiceException(ServiceException e, HttpServletRequest request) { log.error(e.getMessage(), e); Integer code = e.getCode(); return StringUtils.isNotNull(code) ? AjaxResult.error(code, e.getMessage()) : AjaxResult.error(e.getMessage()); } /** * 拦截未知的运行时异常 */ @ExceptionHandler(RuntimeException.class) public AjaxResult handleRuntimeException(RuntimeException e, HttpServletRequest request) { String requestURI = request.getRequestURI(); log.error(\\\"请求地址'{}',发生未知异常.\\\", requestURI, e); return AjaxResult.error(e.getMessage()); } /** * 系统异常 */ @ExceptionHandler(Exception.class) public AjaxResult handleException(Exception e, HttpServletRequest request) { String requestURI = request.getRequestURI(); log.error(\\\"请求地址'{}',发生系统异常.\\\", requestURI, e); return AjaxResult.error(e.getMessage()); } /** * 自定义验证异常 */ @ExceptionHandler(BindException.class) public AjaxResult handleBindException(BindException e) { log.error(e.getMessage(), e); String message = e.getAllErrors().get(0).getDefaultMessage(); return AjaxResult.error(message); } /** * 自定义验证异常 */ @ExceptionHandler(MethodArgumentNotValidException.class) public Object handleMethodArgumentNotValidException(MethodArgumentNotValidException e) { log.error(e.getMessage(), e); String message = e.getBindingResult().getFieldError().getDefaultMessage(); return AjaxResult.error(message); } } \"]},\"420\":{\"h\":\"分布式事务-springcloud-nacos-seata\",\"t\":[\"Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。https://seata.io/zh-cn/docs/overview/what-is-seata.html\"]},\"421\":{\"h\":\"AT 模式\",\"t\":[\"基于 支持本地 ACID 事务 的 关系型数据库： 一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。 二阶段 commit 行为：马上成功结束，自动 异步批量清理回滚日志。 二阶段 rollback 行为：通过回滚日志，自动 生成补偿操作，完成数据回滚。\"]},\"422\":{\"h\":\"TCC 模式\",\"t\":[\"不依赖于底层数据资源的事务支持： 一阶段 prepare 行为：调用 自定义 的 prepare 逻辑。 二阶段 commit 行为：调用 自定义 的 commit 逻辑。 二阶段 rollback 行为：调用 自定义 的 rollback 逻辑。 所谓 TCC 模式，是指支持把 自定义 的分支事务纳入到全局事务的管理中。\"]},\"423\":{\"h\":\"Saga 模式\",\"t\":[\"Saga模式是SEATA提供的长事务解决方案，在Saga模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务都由业务开发实现。\",\"springcloud-nacos-seata\"]},\"424\":{\"h\":\"step1、registry.conf\",\"t\":[\"每个应用的resource里需要配置一个registry.conf,与seata-server里的配置类似\"]},\"425\":{\"h\":\"step2、pom.xml\",\"t\":[\" <!-- Seata --> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-seata</artifactId> <version>${spring-cloud-alibaba.version}</version> </dependency> \"]},\"426\":{\"h\":\"step3 application.property\",\"t\":[\"其中：seata.tx-service-group=服务组名称，与nacos-config.txt配置的service.vgroup_mapping.${your-service-gruop}具有对应关系\"]},\"427\":{\"h\":\"step4 code\",\"t\":[\"import io.seata.spring.annotation.GlobalTransactional; @Resource private StockFeignClient stockFeignClient; @Resource private OrderDAO orderDAO; @GlobalTransactional @Transactional(rollbackFor = Exception.class) public void placeOrder(String userId, String commodityCode, Integer count) { BigDecimal orderMoney = new BigDecimal(count).multiply(new BigDecimal(5)); Order order = new Order().setUserId(userId).setCommodityCode(commodityCode).setCount(count).setMoney( orderMoney); // 订单表插入一个订单（当前服务，当前数据源，该方法相当于tx1） orderDAO.insert(order); // 进行减库存操作（利用feign调用其他服务，其他数据源，该方法相当于tx2） stockFeignClient.deduct(commodityCode, count); } \",\"1、全局锁使用数据库表实现，lock_table。\",\"2、全局锁用于读写隔离，如果有多个分布式事务同时操作同一行数据库记录，那么可以保证数据的正确性\",\"3、注册分支事务的时候会插入lock_table记录(正常情况)，全局事务提交的时候会删除lock_table。\",\"4、写隔离，如果要用分布式事务，那么对于同一张表更新时建议全使用@GlobalTransaction. 读隔离，使用@GlobalTransactional+select for update 或者 @GlobalLock+@Transactional+select for update\",\"github：https://github.com/seata/seata-samples/tree/master/springcloud-nacos-seata\",\"nacos：https://nacos.io/zh-cn/docs/quick-start.html\",\"seata：https://seata.io/\",\"源码分析：\",\"https://blog.csdn.net/qq_43437874/article/details/123131592\",\"https://blog.51cto.com/u_12856278/3631071\"]},\"428\":{\"h\":\"kafka架构设计\",\"t\":[\"同时为发布和订阅提供高吞吐量、消息持久化、分布式功能、支持数据并行加载到Hadoop中\",\"实际： 1、发布系统通知：如评论、点赞、关注这些事件发生后，可以把这些操作放入到kafka消息队列中，如果用户量一大直接操作数据库，服务器压力顶不住。所以把这些通知先存入kafka中，然后一个个消费掉。 2、一些项目数据同步问题也可以用到。 3、监测数据：分布式应用程序生成的统计数据集中聚合。 4、分布式：假设有系统B、C、D都需要系统A的数据 5、事件采集：其中状态的变化根据时间的顺序记录下来，kafka支持这种非常大的存储日志数据的场景。 如：日志收集、消息系统、活动追踪、运营指标、流式处理、热点点赞、评论、关注、发短信。\",\"kafka流程及概念：\"]},\"429\":{\"h\":\"（1）kafka中的主题(Topic)\",\"t\":[\"当大家听到京广高速的时候，知道这是一条从北京到广州的高速路，这个是逻辑上的叫法，可以理解成kafka种的Topic。\"]},\"430\":{\"h\":\"（2）kafka中的分区(Partition)\",\"t\":[\"一条高速路通常会有对各车道进行分流，每个车道上的车都是通往一个目的地的（属于同一个Topic），这里所说的车道便是Partition。 如下图：其中分区路由可以简单理解成一个Hash函数，生产者在发送消息时，完全可以自定义这个函数来决定分区规则。如果分区规则设定合理，所有消息将均匀地分配到不同的分区中。\",\"通过Topic逻辑分类与Partition物理分片，最终多个Partition均匀地分布在集群中的每台机器上，从而很好地解决了存储的扩展性问题。\"]},\"431\":{\"h\":\"（3）kafka中的消费组\",\"t\":[\"诉求: 1、消费端需要与partition结合并进行并行处理。 2、广播消费能力: 同一个Topic可以被多个消费者订阅，一条消息能够被消费多次。 3、集群消费能力: 当消费者本身也是集群时，每一条消息只能分发给集群中的一个消费者进行处理。\",\"为了满足以上诉求。Kafka引出消费组的概念，每个消费者都有一个对应的消费组，组间进行广播消费，组内进行集群消费。此外，kafka还限定了: 每个partition只能由消费组中的一个消费者进行消费。\",\"如下图: 假设主题A共有4个分区，消费组2只有两个消费者，最终这两个消费组将平分整个负载，各自消费两个分区的消息。\",\"img\",\"若要加快消息处理速度，向消费组2中增加新的消费者即可，kafka将以Partition为单位重新做负载均衡。当增加到4个消费者时，每个消费者仅需处理1个partition，处理速度将提升两倍。\"]},\"432\":{\"h\":\"（4）kafka怎么保证高可用\",\"t\":[\"1、消息持久化存储，机器重启后历史数据不被丢失 2、多副本冗余机制，在kafka集群中，每个partition都有多个副本，同一分区的不同副本中保存的是相同的消息。 3、一主多从，其中leader副本负责读写请求。follower副本只负责和leader副本同步消息，当leader副本发生故障时，他才有机会被选举成新的leader副本并对外提供服务，否则一直是待命状态。\",\"现在，假设kafka集群中有4台服务器，主题A和主题B都有两个Partition，且每个Partition各有两个副本，那最终的多副本架构将如下图所示： 很显然，这个集群中任何一台机器宕机，都不会影响kafka的可用性，数据仍然是完整的。\"]},\"433\":{\"h\":\"（5）kafka整体架构\",\"t\":[\"如图：\",\"1、producer：生产者，负责创建消息，然后投递到kafka集群中，投递时需要指定消息所属的topic，同时确定好发往哪个partition。 2、consumer：消费者，会根据它所订阅的topic以及所属的消费组，决定从哪些partition中拉去消息。 3、broker：消费服务器，可水平拓展，负责分区管理、消息持久化、故障自动转移等。 4、zookeeper：负责集群的元数据管理的功能，如果集群中有哪些broker节点以及topic，每个topic又有哪些partition等。 5、很显然，在kafka整体架构中，partition是发送消息、存储消息、消费消息的纽带。\",\"1、顺序写 Kafka 用的是顺序写，追加数据是追加到末尾，磁盘顺序写的性能极高，在磁盘个数一定，转数达到一定的情况下，基本和内存速度一致。随机写的话是在文件的某个位置修改数据，性能会较低。\",\"2、零拷贝 可以看到数据的拷贝从内存拷贝到 Kafka 服务进程那块，又拷贝到 Socket 缓存那块，整个过程耗费的时间比较高。Kafka 利用了 Linux 的 sendFile 技术（NIO），省去了进程切换和一次数据拷贝，让性能变得更好。\",\"3、日志分段存储 Kafka 规定了一个分区内的 .log 文件最大为 1G，做这个限制目的是为了方便把 .log 加载到内存去操作：\",\"00000000000000000000.index 00000000000000000000.log 00000000000000000000.timeindex 00000000000005367851.index 00000000000005367851.log 00000000000005367851.timeindex 00000000000009936472.index 00000000000009936472.log 00000000000009936472.timeindex \",\"这个 9936472 之类的数字，就是代表了这个日志段文件里包含的起始 Offset，也就说明这个分区里至少都写入了接近 1000 万条数据了。\",\"Kafka Broker 有一个参数，log.segment.bytes，限定了每个日志段文件的大小，最大就是 1GB。\",\"一个日志段文件满了，就自动开一个新的日志段文件来写入，避免单个文件过大，影响文件的读写性能，这个过程叫做 log rolling，正在被写入的那个日志段文件，叫做 active log segment。 如果大家有了解 HDFS 就会发现 NameNode 的 edits log 也会做出限制，所以这些框架都是会考虑到这些问题。\",\"1、Acceptor接收客户端发来的请求 2、轮询分发给Processor线程处理 3、Processor将请求封装成Request对象，放到RequestQueue队列 4、KafkaRequestHandlerPool分配工作线程，处理RequestQueue中的请求 5、KafkaRequestHandler线程处理完请求后，将响应Response返回给Processor线程 6、Processor线程将响应返回给客户端 从图中可以看出，SocketServer和KafkaRequestHandlerPool是其中最重要的两个组件： 1、SocketServer：实现Reactor模式，用于处理多个Client（包括客户端和其他broker节点）的并发请求，并将处理结果返给Client 2、KafkaRequestHandlerPool：Reactor模式中的Worker线程池，里面定义了多个工作线程，用于处理实际的I/O请求逻辑。 参照：https://www.modb.pro/db/131830\"]},\"434\":{\"h\":\"（1）引入依赖\",\"t\":[\" <dependency> <groupId>org.springframework.kafka</groupId> <artifactId>spring-kafka</artifactId> </dependency> <dependency> <groupId>org.springframework.kafka</groupId> <artifactId>spring-kafka-test</artifactId> <scope>test</scope> </dependency> \"]},\"435\":{\"h\":\"(2)修改application.yml\",\"t\":[\"spring: application: name: springboot-kafka kafka: bootstrap-servers: 10.5.13.230:9092 # 指定kafka server的地址，集群配多个，中间，逗号隔开 producer: # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失 retries: 0 # 每次批量发送消息的数量，produce积累到一定数据，一次发送 batch-size: 16384 # 设置生产者内存缓冲区的大小。 buffer-memory: 33554432 # 键的序列化方式 key-serializer: org.apache.kafka.common.serialization.StringSerializer # 值的序列化方式 value-serializer: org.apache.kafka.common.serialization.StringSerializer acks: all # 可以设置的值为：all， -1， 0， 1 consumer: # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S，1M，2H，5D auto-commit-interval: 1s group-id: order # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理： # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录） # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录 auto-offset-reset: earliest # 是否自动提交偏移量，默认值是true，为了避免出现重复数据和数据丢失，可以把它设置为false，然后手动提交偏移量 enable-auto-commit: false # 键的反序列化方式 key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 值的反序列化方式 value-deserializer: org.apache.kafka.common.serialization.StringDeserializer listener: # 设置并发数 concurrency: 3 #listner负责ack，每调用一次，就立即commit ack-mode: manual_immediate missing-topics-fatal: false \"]},\"436\":{\"h\":\"（3）增加Constant.java\",\"t\":[\"package com.example.constant; public class Constant { /** * topic */ public static final String TOPIC_TEST1 = \\\"topic_test1\\\"; /** * group */ public static final String TOPIC_GROUP1 = \\\"topic_group1\\\"; } \"]},\"437\":{\"h\":\"(4)增加生产者MessageServiceKafkaImpl.java和MessageService.java\",\"t\":[\" package com.example.service; public interface MessageService { void sendMessage(String id); } package com.example.service.impl; import com.example.constant.Constant; import com.example.service.MessageService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.kafka.core.KafkaTemplate; import org.springframework.kafka.support.SendResult; import org.springframework.stereotype.Service; import org.springframework.util.concurrent.ListenableFuture; import org.springframework.util.concurrent.ListenableFutureCallback; @Service public class MessageServiceKafkaImpl implements MessageService { @Autowired private KafkaTemplate<String， Object> kafkaTemplate; @Override public void sendMessage(String id) { System.out.println(\\\"待发送短信的订单已纳入处理队列（kafka），id：\\\" + id); // 发送消息 ListenableFuture<SendResult<String， Object>> future = kafkaTemplate.send(Constant.TOPIC_TEST1， id); // 监听消息加入队列结果返回 future.addCallback(new ListenableFutureCallback<SendResult<String， Object>>() { @Override public void onSuccess(SendResult<String， Object> stringObjectSendResult) { System.out.println(\\\"生产者发送成功（kafka），id：\\\" + id); } @Override public void onFailure(Throwable throwable) { System.out.println(\\\"生产者发送失败（kafka），id：\\\" + id); } }); // kafkaTemplate.send(\\\"ztq\\\"， id); } } \"]},\"438\":{\"h\":\"(5)增加消费者MessageListener.java\",\"t\":[\"package com.example.consumer; import com.example.constant.Constant; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.kafka.support.Acknowledgment; import org.springframework.kafka.support.KafkaHeaders; import org.springframework.messaging.handler.annotation.Header; import org.springframework.stereotype.Component; import java.util.Optional; @Component public class MessageListener { @KafkaListener(topics = {Constant.TOPIC_TEST1}， groupId = Constant.TOPIC_GROUP1) public void onMessage(ConsumerRecord<?， ?> record， Acknowledgment ack， @Header(KafkaHeaders.RECEIVED_TOPIC) String topic) { Optional message = Optional.ofNullable(record.value()); if (message.isPresent()) { Object msg = message.get(); System.out.println(\\\"已完成短信发送业务(kafka)，id：\\\" + msg); ack.acknowledge(); } } } \"]},\"439\":{\"h\":\"(6)增加测试类SendMessageTest.java\",\"t\":[\"package com.example.init; import com.example.service.MessageService; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import javax.annotation.PostConstruct; import java.util.UUID; @Service public class SendMessageTest { @Autowired private MessageService messageService; @PostConstruct public void send() { for (int i = 0; i < 100; i++) { messageService.sendMessage(UUID.randomUUID().toString()); } } } \"]},\"440\":{\"h\":\"AtomicInteger\",\"t\":[\"AtomicInteger属于JUC并发包下的原子类，继承关系如下：\",\"public class AtomicInteger extends Number implements java.io.Serializable \",\"java 的并发机制中有三个特性：原子性、可见性和有序性。\",\"synchronized可以保证可见性、有序性，无法保证原子性，AtomicInteger作用是保证原子性。\",\"package cn.edu.bjut; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.*; public class Main { private static volatile int a = 1; public static void main(String[] args) { // 创建线程工厂实例 ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"demo-pool-%d\\\").build(); // 创建线程池，核心线程数、最大线程数、空闲保持时间、队列长度、拒绝策略可自行定义 ExecutorService pool = new ThreadPoolExecutor(5, 50, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy()); // for (int i = 0; i < 5; i++) { pool.submit(() -> { try { System.out.println(a++); Thread.sleep(500); } catch (InterruptedException e) { e.printStackTrace(); } }); } System.out.println(a); } } \",\"结果：\",\"1 4 4 3 5 2 \",\"定义变量a，保证a的可见性。用5个线程分别a++，但是结果不是5，每次都有不同的结果，且最后结果不是5，因为：\",\"（1）每个线程从内存中读取a的值\",\"（2）对a进行+1操作\",\"（3）把a重新刷新回内存\",\"当CPU切换分片 或者 第三步（3）线程未刷新回内存，此时我们线程就读相当于脏数据。\",\"package cn.edu.bjut; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.*; import java.util.concurrent.atomic.AtomicInteger; public class Main { private static AtomicInteger a = new AtomicInteger(); public static void main(String[] args) { // 创建线程工厂实例 ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"demo-pool-%d\\\").build(); // 创建线程池，核心线程数、最大线程数、空闲保持时间、队列长度、拒绝策略可自行定义 ExecutorService pool = new ThreadPoolExecutor(5, 50, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy()); // for (int i = 0; i < 5; i++) { pool.submit(() -> { try { System.out.println(a.incrementAndGet()); Thread.sleep(500); } catch (InterruptedException e) { e.printStackTrace(); } }); } System.out.println(a); } } \",\"结果：\",\"2 4 1 3 5 5 \",\"利用AtomicInteger定义变量a，保证a的原子性。用5个线程分别a++，但是结果不是5，每次都有不同的结果，但是最后结果是5，因为：\"]},\"441\":{\"h\":\"（1）、源码分析\",\"t\":[\"AtomicInteger使用了incrementAndGet函数（类中还有很多个API都是利用相同的方式保证原子性）\",\" private static final Unsafe U = Unsafe.getUnsafe(); private static final long VALUE = U.objectFieldOffset(AtomicInteger.class, \\\"value\\\"); private volatile int value; /** * 以原子方式递增当前值, * * 相当于addAndGet(1) * * @return 更新的值 */ public final int incrementAndGet() { return U.getAndAddInt(this, VALUE, 1) + 1; } \",\"底层使用的是unsafe的getAndAddInt方法，对象 U 和 参数 VALUE\"]},\"442\":{\"h\":\"（1）U\",\"t\":[\"private static final Unsafe U = Unsafe.getUnsafe(); \",\"利用的是compareAndSwapInt，又称CAS，即比较并替换，实现并发算法时常用到的一种技术。\",\"CAS操作包含三个操作数：内存位置、预期原值及新值。\",\"执行CAS操作的时候，将内存位置的值与预期原值比较，如果相匹配，那么处理器会自动将该位置值更新为新值，否则，处理器不做任何操作。\",\"Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。在jdk1.9中，对Usafe进行了删除。\"]},\"443\":{\"h\":\"（2）VALUE\",\"t\":[\" private static final long VALUE = U.objectFieldOffset(AtomicInteger.class, \\\"value\\\"); \",\"VALUE是 long 类型的，代表的含义就是对象的地址的偏移量。\",\"U.getAndAddInt(this, VALUE, 1) + 1; \",\"U 通过 getAndAddInt() 方法，对原先对象的地址进行了加 1 操作，得到一个最新的值，然后+1；\",\"那么怎么保证 getAndAddInt() 方法是最新的值呢？\",\"@HotSpotIntrinsicCandidate public final int getAndAddInt(Object o, long offset, int delta) { int v; do { v = getIntVolatile(o, offset); } while (!weakCompareAndSetInt(o, offset, v, v + delta)); return v; } \",\"底层通过 weakCompareAndSetInt 这个CAS机制来完成的增加操作：\",\"param1：o 是当前对象\",\"param2：offset 表示内存地址的偏移量\",\"param3：v + delta 表示要增加的值\",\"AtomicInteger的原理就是这，主要是通过Usafe的方式来完成的。Usafe又是通过CAS机制来实现的。\",\"CAS算法是乐观锁的一种，Java原子类中的递增操作就通过CAS自旋实现的。\"]},\"444\":{\"h\":\"（2）、源码注释\",\"t\":[\"package java.util.concurrent.atomic; import java.lang.invoke.VarHandle; import java.util.function.IntBinaryOperator; import java.util.function.IntUnaryOperator; import jdk.internal.misc.Unsafe; /** * 一个int值，可以进行原子更新 */ public class AtomicInteger extends Number implements java.io.Serializable { private static final long serialVersionUID = 6214790243416807050L; /* * 该类打算使用VarHandles实现，但存在未解析的循环启动依赖项。 */ private static final Unsafe U = Unsafe.getUnsafe(); private static final long VALUE = U.objectFieldOffset(AtomicInteger.class, \\\"value\\\"); private volatile int value; /** * 构造函数，使用给定的初始值创建新的AtomicInteger * * @param initialValue the initial value */ public AtomicInteger(int initialValue) { value = initialValue; } /** * 构造函数，默认的AtomicInteger的value为0 */ public AtomicInteger() { } /** * @return 返回当前值 * */ public final int get() { return value; } /** * 将值设置为newValue * * @param newValue 指定的新值 */ public final void set(int newValue) { value = newValue; } /** * 将值设置为newValue * * @param newValue 指定的新值 * @since 1.6 */ public final void lazySet(int newValue) { U.putIntRelease(this, VALUE, newValue); } /** * *原子性地将值设置为newValue，并返回旧值 * * @param newValue 指定的新值 * @return 返回旧值 */ public final int getAndSet(int newValue) { return U.getAndSetInt(this, VALUE, newValue); } /** * CAS * * 如果当前值等于expectedValue，原子将该值设置为newValue * * @param expectedValue 指定的期望值 * @param newValue 指定的新值 * @return 如果成功返回true，实际值与预期值不相等返回false */ public final boolean compareAndSet(int expectedValue, int newValue) { return U.compareAndSetInt(this, VALUE, expectedValue, newValue); } /** * 如果当前值等于expectedValue，原子将该值设置为newValue} * * @param expectedValue 指定的期望值 * @param newValue 指定的新值 * @return 如果成功返回true * @since 9 */ public final boolean weakCompareAndSetPlain(int expectedValue, int newValue) { return U.weakCompareAndSetIntPlain(this, VALUE, expectedValue, newValue); } /** * 以原子方式递增当前值, * * 相当于getAndAdd(1) * * @return 先前的值 */ public final int getAndIncrement() { return U.getAndAddInt(this, VALUE, 1); } /** * 原子递减当前值, * * 相当于getAndAdd(-1) * * @return 先前的值 */ public final int getAndDecrement() { return U.getAndAddInt(this, VALUE, -1); } /** * 以原子方式将给定值与当前值相加 * * @param delta 要加的值 * @return 先前的值 */ public final int getAndAdd(int delta) { return U.getAndAddInt(this, VALUE, delta); } /** * 以原子方式递增当前值, * * 相当于addAndGet(1) * * @return 更新的值 */ public final int incrementAndGet() { return U.getAndAddInt(this, VALUE, 1) + 1; } /** * 以原子方式递减当前值 * 相当于addAndGet(-1) * * @return 更新的值 */ public final int decrementAndGet() { return U.getAndAddInt(this, VALUE, -1) - 1; } /** * 以原子方式将给定值与当前值相加 * * @param delta 要添加的值 * @return 更新的值 */ public final int addAndGet(int delta) { return U.getAndAddInt(this, VALUE, delta) + delta; } /** * 使用应用给定函数的结果以原子方式更新当前值，返回先前的值 * 该函数应该没有副作用，因为当尝试的更新由于线程之间的争用而失败时，可以重新应用该函数 * * @param updateFunction 无副作用的功能 * @return 先前的值 * @since 1.8 */ public final int getAndUpdate(IntUnaryOperator updateFunction) { int prev = get(), next = 0; for (boolean haveNext = false;;) { if (!haveNext) next = updateFunction.applyAsInt(prev); if (weakCompareAndSetVolatile(prev, next)) return prev; haveNext = (prev == (prev = get())); } } /** * 使用应用给定函数的结果以原子方式更新当前值，返回更新后的值。 * 该函数应该没有副作用，因为当尝试的更新由于线程之间的争用而失败时，可以重新应用该函数 * * @param updateFunction 无副作用的功能 * @return 更新后的值 * @since 1.8 */ public final int updateAndGet(IntUnaryOperator updateFunction) { int prev = get(), next = 0; for (boolean haveNext = false;;) { if (!haveNext) next = updateFunction.applyAsInt(prev); if (weakCompareAndSetVolatile(prev, next)) return next; haveNext = (prev == (prev = get())); } } ................. } \"]},\"445\":{\"h\":\"BigDecimal\",\"t\":[\"Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。 一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是Double.valueOf(String) 和Float.valueOf(String)会丢失精度。所以开发中，如果我们需要精确计算的结果，则必须使用BigDecimal类来操作。 BigDecimal所创建的是对象，故我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。构造器是类的特殊方法，专门用来创建对象，特别是带有参数的对象。\",\"BigDecimal(int) 创建一个具有参数所指定整数值的对象 BigDecimal(double) 创建一个具有参数所指定双精度值的对象 BigDecimal(long) 创建一个具有参数所指定长整数值的对象 BigDecimal(String) 创建一个具有参数所指定以字符串表示的数值的对象 \",\"使用问题分析：\",\"public class Main { public static void main(String[] args) { BigDecimal a =new BigDecimal(0.1); System.out.println(\\\"a values is:\\\"+a); BigDecimal b =new BigDecimal(\\\"0.1\\\"); System.out.println(\\\"b values is:\\\"+b); } } Output: a values is:0.1000000000000000055511151231257827021181583404541015625 b values is:0.1 \",\"原因分析： 1）参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入newBigDecimal(0.1)所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。 2）String 构造方法是完全可预知的：写入 newBigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言， 通常建议优先使用String构造方法。 3）当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法。\",\"常用方法\",\"add(BigDecimal) BigDecimal对象中的值相加，返回BigDecimal对象 subtract(BigDecimal) BigDecimal对象中的值相减，返回BigDecimal对象 multiply(BigDecimal) BigDecimal对象中的值相乘，返回BigDecimal对象 divide(BigDecimal) BigDecimal对象中的值相除，返回BigDecimal对象 toString() 将BigDecimal对象中的值转换成字符串 doubleValue() 将BigDecimal对象中的值转换成双精度数 floatValue() 将BigDecimal对象中的值转换成单精度数 longValue() 将BigDecimal对象中的值转换成长整数 intValue() 将BigDecimal对象中的值转换成整数 compareTo() 比较大小 \",\"java中对BigDecimal比较大小一般用的是bigdemical的compareTo方法 int a = A.compareTo(B); 返回结果分析： a = -1,表示A小于B； a = 0,表示A等于B； a = 1,表示A大于B； \",\"由于NumberFormat类的format()方法可以使用BigDecimal对象作为其参数，可以利用BigDecimal对超出16位有效数字的货币值，百分值，以及一般数值进行格式化控制。 以利用BigDecimal对货币和百分比格式化为例。首先，创建BigDecimal对象，进行BigDecimal的算术运算后，分别建立对货币和百分比格式化的引用，最后利用BigDecimal对象作为format()方法的参数，输出其格式化的货币值和百分比。\",\"public static void main(String[] args) { NumberFormat currency = NumberFormat.getCurrencyInstance(); //建立货币格式化引用 NumberFormat percent = NumberFormat.getPercentInstance(); //建立百分比格式化引用 percent.setMaximumFractionDigits(3); //百分比小数点最多3位 BigDecimal loanAmount = new BigDecimal(\\\"1000.48\\\"); //贷款金额 BigDecimal interestRate = new BigDecimal(\\\"0.008\\\"); //利率 BigDecimal interest = loanAmount.multiply(interestRate); //相乘 System.out.println(\\\"贷款金额:\\\\t\\\" + currency.format(loanAmount)); System.out.println(\\\"利率:\\\\t\\\" + percent.format(interestRate)); System.out.println(\\\"利息:\\\\t\\\" + currency.format(interest)); } Output: 贷款金额: ￥1,000.48 利率: 0.8% 利息: ￥8.00 \",\"BigDecimal格式化保留2为小数，不足则补0：\",\"public class NumberFormat { public static void main(String[] s){ System.out.println(formatToNumber(new BigDecimal(\\\"3.435\\\"))); System.out.println(formatToNumber(new BigDecimal(0))); System.out.println(formatToNumber(new BigDecimal(\\\"0.00\\\"))); System.out.println(formatToNumber(new BigDecimal(\\\"0.001\\\"))); System.out.println(formatToNumber(new BigDecimal(\\\"0.006\\\"))); System.out.println(formatToNumber(new BigDecimal(\\\"0.206\\\"))); } /** * @desc 1.0~1之间的BigDecimal小数，格式化后失去前面的0,则前面直接加上0。 * 2.传入的参数等于0，则直接返回字符串\\\"0.00\\\" * 3.大于1的小数，直接格式化返回字符串 * @param obj传入的小数 * @return */ public static String formatToNumber(BigDecimal obj) { DecimalFormat df = new DecimalFormat(\\\"#.00\\\"); if(obj.compareTo(BigDecimal.ZERO)==0) { return \\\"0.00\\\"; }else if(obj.compareTo(BigDecimal.ZERO)>0&&obj.compareTo(new BigDecimal(1))<0){ return \\\"0\\\"+df.format(obj).toString(); }else { return df.format(obj).toString(); } } } Output: 3.44 0.00 0.00 0.00 0.01 0.21 \",\"除法的时候出现异常\",\"java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result \",\"原因分析: 通过BigDecimal的divide方法进行除法时当不整除，出现无限循环小数时，就会抛异常：java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result. 解决方法： divide方法设置精确的小数点，如：divide(xxxxx,2)\",\"在需要精确的小数计算时再使用BigDecimal，BigDecimal的性能比double和float差，在处理庞大，复杂的运算时尤为明显。故一般精度的计算没必要使用BigDecimal。\\n尽量使用参数类型为String的构造函数。\\nBigDecimal都是不可变的（immutable）的， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。\"]},\"446\":{\"h\":\"CountDownLatch\",\"t\":[\"​ CountDownLatch是一个同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。\",\"​ 类似的任务可以使用线程的 join() 方法实现：在等待时间点调用其他线程的 join() 方法，当前线程就会等待join线程执行完之后才继续执行，但 CountDownLatch 实现更加简单，并且比 join 的功能更多。\",\"CountDownLatch函数列表\",\"CountDownLatch(int count) 构造一个用给定计数初始化的 CountDownLatch。 // 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断。 void await() // 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。 boolean await(long timeout, TimeUnit unit) // 递减锁存器的计数，如果计数到达零，则释放所有等待的线程。 void countDown() // 返回当前计数。 long getCount() // 返回标识此锁存器及其状态的字符串。 String toString() \",\"CountDownLatch和CyclicBarrier的区别：\",\"CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许N个线程相互等待。\",\"CountDownLatch的计数器无法被重置；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier。\",\"package com.ztq.task; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.*; /** * @author zhengtianqi */ public class CountDownLatchTest { public static void main(String[] args) throws Exception { /*创建CountDownLatch实例,计数器的值初始化为3*/ final CountDownLatch downLatch = new CountDownLatch(7); /*创建三个线程,每个线程等待1s,表示执行比较耗时的任务*/ // 创建线程工厂实例 ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"pool-%d\\\").build(); // 创建线程池，核心线程数、最大线程数、空闲保持时间、队列长度、拒绝策略可自行定义 ExecutorService pool = new ThreadPoolExecutor(2, 20, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy()); pool.execute(new MyTask(\\\"选手1到达终点\\\", downLatch)); pool.execute(new MyTask(\\\"选手2到达终点\\\", downLatch)); pool.execute(new MyTask(\\\"选手3到达终点\\\", downLatch)); pool.execute(new MyTask(\\\"选手4到达终点\\\", downLatch)); pool.execute(new MyTask(\\\"选手5到达终点\\\", downLatch)); pool.execute(new MyTask(\\\"选手6到达终点\\\", downLatch)); pool.execute(new MyTask(\\\"选手7到达终点\\\", downLatch)); /*主线程调用await()方法,等到其他三个线程执行完后才继续执行*/ downLatch.await(); System.out.println(\\\"赛跑结束\\\"); pool.shutdown(); } static class MyTask extends Thread { private String name; private CountDownLatch downLatch; public MyTask(String name, CountDownLatch downLatch) { this.name = name; this.downLatch = downLatch; } @Override public void run() { try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(name); /*任务完成后调用CountDownLatch的countDown()方法*/ downLatch.countDown(); } } } \",\"​ 分析CountDownLatch的源码我们可以知道，它是使用了一个内部同步器AQS来实现屏蔽功能的。只有当count的值为零时，同步器的tryAcquireShared的结果为1，其他时候都是-1\",\" private static final class Sync extends AbstractQueuedSynchronizer { private static final long serialVersionUID = 4982264981922014374L; Sync(int count) { setState(count); } int getCount() { return getState(); } protected int tryAcquireShared(int acquires) { return (getState() == 0) ? 1 : -1; } protected boolean tryReleaseShared(int releases) { // Decrement count; signal when transition to zero for (;;) { int c = getState(); if (c == 0) return false; int nextc = c-1; if (compareAndSetState(c, nextc)) return nextc == 0; } } } public CountDownLatch(int count) { if (count < 0) throw new IllegalArgumentException(\\\"count < 0\\\"); this.sync = new Sync(count); } \",\"CountDownLatch是一次性的，不可能重新初始化或者修改其内部计数器的值，当CountDownLatch使用完毕后，它不能再次被使用\",\"countDownLatch： 计数器：计数器只能使用一次。 等待：一个线程或多个等待另外n个线程完成之后才能执行。\",\"CyclicBarrier：\\n计数器：计数器可以重置(通过reset()方法)。\\n等待：n个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。\"]},\"447\":{\"h\":\"Disruptor\",\"t\":[\"------高性能的线程间消息传递框架\"]},\"448\":{\"h\":\"介绍：\",\"t\":[\"Disruptor类似于java的BlockingQueue。与队列一样，Disruptor的目的是在同一进程内的线程之间传递数据。\",\"但是，Disruptor提供了与队列不同的关键功能：\",\"1、同一个“事件”可以有多个消费者，消费者之间既可以并行处理，也可以相互依赖形成处理的先后次序(形成一个依赖图)\",\"2、为事件（events）预先分配内存空间\",\"3、针对极高的性能目标而实现的极度优化和无锁的设计；\",\"​ 应用场景：\"]},\"449\":{\"h\":\"类图：\",\"t\":[\"img\"]},\"450\":{\"h\":\"核心概念：\",\"t\":[\"RingBuffer 从3.0开始，RingBuffer仅负责存储和更新通过Disruptor的数据（事件）。它是Disruptor底层数据结构实现，核心类，是线程间交换数据的中转地。\",\"Sequence 序号，声明一个序号，用于跟踪ringbuffer中任务的变化和消费者的消费情况。\",\"Sequencer Sequencer 是 Disruptor 的真正核心。此接口有两个实现类 SingleProducerSequencer、MultiProducerSequencer ，它们定义在生产者和消费者之间快速、正确地传递数据的并发算法。\",\"SequenceBarrier 序号栅栏，管理和协调生产者的游标序号和各个消费者的序号，确保生产者不会覆盖消费者未来得及处理的消息，确保存在依赖的消费者之间能够按照正确的顺序处理。\",\"WaitStrategy 定义Consumer如何进行等待下一个事件的策略（注：Disruptor 定义了多种不同的策略，针对不同的场景，提供了不一样的性能表现）。\",\"Event 从生产者传递给消费者的数据单位**。**\",\"EventProcessor 事件处理器，监听RingBuffer的事件，并消费可用事件，从RingBuffer读取的事件会交由实际的生产者实现类来消费；它会一直侦听下一个可用的序号，直到该序号对应的事件已经准备好。\",\"EventHandler 业务处理器，是实际消费者的接口，完成具体的业务逻辑实现，用户实现该接口，代表着消费者。\",\"Producer 生产者，用户线程充当该角色，producer向RingBuffer写入事件。\"]},\"451\":{\"h\":\"DSL图：\",\"t\":[\"img\",\"Disruptor——对外暴露的门面类，提供start()，stop()，消费者事件注册，生产者事件发布等api；\",\"RingBuffer——对生产者提供下一序号获取、entry元素获取、entry数据更改等api；\",\"EventHandler——消费者的接口定义，提供onEvent()方法，负责具体业务逻辑实现；\",\"EventHandlerGroup——业务处理器分组，管理多个业务处理器的依赖关系，提供then()、before()、after()等api\"]},\"452\":{\"h\":\"RingBuffer实现：\",\"t\":[\"RingBuffer顾名思义，就是一个内存环，每一次读写操作都循环利用这个内存环，从而避免频繁分配和回收内存，减轻GC压力，同时由于RingBuffer可以实现为无锁的队列，从而整体上大幅提高系统性能。\",\"1.RingBuffer是由一个大数组组成的。（比链表快，对CPU缓存友好）\",\"2.RingBuffer的“指针”（也称为序列或游标）是java long类型的（64位有符号数），指针采用往上计数自增的方式。\",\"3.RingBuffer中的指针进行按RingBuffer的size取模找出数组的下标来定位入口。为了提高性能，通常将RingBuffer的size大小设置成实际使用的2倍。\",\"img\",\"RingBuffer没有尾指针，只维护一个指向下一个可用位置的序号。RingBuffer和常用的队列之间的区别是，不删除buffer中的数据，也就是说这些数据一直存放在buffer中，直到新的数据覆盖他们。\",\"消费者读取数据：\",\"​ \",\"消费者(Consumer)是一个想从RingBuffer里读取数据的线程，它可以访问ConsumerBarrier对象——这个对象由RingBuffer创建并且代表消费者与RingBuffer进行交互。就像RingBuffer显然需要一个序号才能找到下一个可用节点一样，消费者也需要知道它将要处理的序号——每个消费者都需要找到下一个它要访问的序号。在上面的例子中，消费者处理完了RingBuffer里序号8之前（包括8）的所有数据，那么它期待访问的下一个序号是9。\",\"消费者可以调用ConsumerBarrier对象的*waitFor()*方法，传递它所需要的下一个序号.\",\"final long availableSeq = consumerBarrier.waitFor(nextSequence);\",\"ConsumerBarrier返回RingBuffer的最大可访问序号——在上面的例子中是12。\",\"接下来，消费者会一直原地停留，等待更多数据被写入RingBuffer。并且，一旦数据写入后消费者会收到通知——节点9，10，11和12 已写入。现在序号12到了，消费者可以让ConsumerBarrier去拿这些序号节点里的数据了\",\"img\",\"拿到了数据后，消费者(Consumer)会更新自己的标识(cursor)。\"]},\"453\":{\"h\":\"这样做有助于平缓延迟的峰值？\",\"t\":[\"以前需要逐个节点地询问“我可以拿下一个数据吗？现在可以了么？现在呢？”，消费者(Consumer)现在只需要简单的说“当你拿到的数字比我这个要大的时候请告诉我”，函数返回值会告诉它有多少个新的节点可以读取数据了。因为这些新的节点的确已经写入了数据（RingBuffer本身的序号已经更新），而且消费者对这些节点的唯一操作是读而不是写，因此访问不用加锁。这太好了，不仅代码实现起来可以更加安全和简单，而且不用加锁使得速度更快。另一个好处是你可以用多个消费者(Consumer)去读同一个RingBuffer ，不需要加锁，也不需要用另外的队列来协调不同的线程(消费者)。这样你可以在Disruptor的协调下实现真正的并发数据处理。\"]},\"454\":{\"h\":\"生产者写入数据：\",\"t\":[\"写入 RingBuffer 的过程涉及到两阶段提交 (two-phase commit)。首先，你的生产者需要申请 buffer 里的下一个节点。然后，当生产者向节点写完数据，它将会调用 ProducerBarrier 的 commit 方法。\",\"RingBuffer 还是与消费端一样提供了一个 ProducerBarrier 对象，让生产者通过它来写入 RingBuffer。\",\"ProducerBarrier如何防止RingBuffer重叠\",\"img\",\"在这幅图中，我们假设只有一个生产者写入 RingBuffer。\",\"ConsumerTrackingProducerBarrier对象拥有所有正在访问 RingBuffer 的消费者列表。Disruptor 由消费者负责通知它们处理到了哪个序列号，而不是 RingBuffer。所以，如果我们想确定我们没有让 RingBuffer 重叠，需要检查所有的消费者们都读到了哪里。\",\"在上图中，有一个 消费者 顺利的读到了最大序号 12（用红色/粉色高亮）。第二个消费者 有点儿落后——可能它在做 I/O 操作之类的——它停在序号 3。因此消费者 2 在赶上消费者 1 之前要跑完整个RingBuffer一圈的距离。\",\"现在生产者想要写入 RingBuffer 中序号 3 占据的节点，因为它是 RingBuffer 当前游标的下一个节点。但是 ProducerBarrier 明白现在不能写入，因为有一个消费者正在占用它。所以，ProducerBarrier 停下来自旋 (spins)，等待，直到那个消费者离开。\"]},\"455\":{\"h\":\"申请下一个节点：\",\"t\":[\"img\",\"ProducerBarier会看到下一个节点——序号 3 那个已经可以用了。它会抢占这个节点上的 Entry（它是一个放写入到某个序号的 RingBuffer 数据的桶），把下一个序号（13）更新成 Entry 的序号，然后把 Entry 返回给生产者。生产者可以接着往 Entry 里写入数据。\"]},\"456\":{\"h\":\"提交新的数据：\",\"t\":[\"img\",\"当生产者结束向 Entry 写入数据后，它会要求 ProducerBarrier 提交。\",\"ProducerBarrier先等待RingBuffer的游标追上当前的位置（对于单生产者这毫无意义－比如，我们已经知道游标到了 12 ，而且没有其他人正在写入RingBuffer）。然后 ProducerBarrier 更新 RingBuffer 的游标到刚才写入的 Entry 序号－在我们这儿是 13。接下来，ProducerBarrier 会让消费者知道buffer 中有新东西了。它戳一下 ConsumerBarrier 上的 WaitStrategy 对象说－“喂，醒醒！有事情发生了！”（注意－不同的 WaitStrategy 实现以不同的方式来实现提醒，取决于它是否采用阻塞模式）。现在消费者 1 可以读 Entry 13 的数据，消费者 2 可以读 Entry 13 以及前面的所有数据。\"]},\"457\":{\"h\":\"ProducerBarrier上的批处理\",\"t\":[\"Disruptor 可以同时在生产者和消费者两端实现批处理。\",\"img\",\"ProducerBarrier 知道 RingBuffer 的游标指向 12，而最慢的消费者在 9 的位置，它就可以让生产者写入节点 3，4，5，6，7 和 8，中间不需要再次检查消费者的位置。\"]},\"458\":{\"h\":\"多个生产者的场景\",\"t\":[\"img\",\"现在生产者 1 申请提交节点 13 的数据（生产者 1 发出的绿色箭头代表这个请求）。ProducerBarrier 让 ClaimStrategy 先等待 RingBuffer 的游标到达序号 12，当然现在已经到了。因此 RingBuffer 移动游标到 13，让 ProducerBarrier 戳一下 WaitStrategy 告诉所有人都知道 RingBuffer 有更新了。现在 ProducerBarrier 可以完成生产者 2 的请求，让 RingBuffer 移动游标到 14，并且通知所有人都知道。\",\"RingBuffer的内容顺序总是会遵循nextEntry()的初始调用顺序。也就是说，如果一个生产者在写入 RingBuffer 的时候暂停了，只有当它解除暂停后，其他等待中的提交才会立即执行。\",\"资料：\",\"官方https://github.com/LMAX-Exchange/disruptor/wiki/Introduction\",\"官翻https://www.cnblogs.com/daoqidelv/p/6995888.html\",\"博客http://ifeve.com/dissecting-disruptor-whats-so-special/\",\"https://my.oschina.net/u/1765168/blog/1807887\",\"https://www.jianshu.com/p/f6d0d0c2a647\",\"https://www.jianshu.com/p/4a202ef547cc\",\"补充：\",\"流程简图：\",\"img\",\"等待策略\",\"BlockingWaitStrategy默认的等待策略。利用锁和等待机制的WaitStrategyCPU消耗少但是延迟比较高\",\"BusySpinWaitStrategy自旋等待。这种策略会利用CPU资源来避免系统调用带来的延迟抖动当线程可以绑定到指定CPU(核)的时候可以使用这个策略。\",\"LiteBlockingWaitStrategy实现方法也是阻塞等待\",\"SleepingWaitStrategy是另一种较为平衡CPU消耗与延迟的WaitStrategy在不同次数的重试后采用不同的策略选择继续尝试或者让出CPU或者sleep。这种策略延迟不均匀。\",\"TimeoutBlockingWaitStrategy实现方法是阻塞给定的时间超过时间的话会抛出超时异常。\",\"YieldingWaitStrategy实现方法是先自旋(100次)不行再临时让出调度(yield)。和SleepingWaitStrategy一样也是一种高性能与CPU资源之间取舍的折中方案但这个策略不会带来显著的延迟抖动。\",\"PhasedBackoffWaitStrategy实现方法是先自旋(10000次)不行再临时让出调度(yield)不行再使用其他的策略进行等待。可以根据具体场景自行设置自旋时间、yield时间和备用等待策略。\",\"新消费者，怎么获取下标，每个核心类怎么用 实现方式。伪共享\"]},\"459\":{\"h\":\"Disruptor中发布事件相关类\"},\"460\":{\"h\":\"Disruptor中发布事件相关类\"},\"461\":{\"h\":\"RingBuffer、EventFactory\",\"t\":[\"EventFactory：提供给RingBuffer做事件预填充\",\"Event事件：\",\"1、从生产者到消费者过程中所处理的数据单元；\",\"2、在Disruptor框架中没有类表示Event，因为它完全是由用户定义的，在Disruptor框架中是用泛型表示的；\"]},\"462\":{\"h\":\"Disruptor中的等待策略\"},\"463\":{\"h\":\"WaitStrategy\",\"t\":[\"等待策略的接口\"]},\"464\":{\"h\":\"BlockingWaitStrategy\",\"t\":[\"BlockingWaitStrategy的实现方法是阻塞等待。当要求节省CPU资源，而不要求高吞吐量和低延迟的时候使用这个策略\"]},\"465\":{\"h\":\"BusySpinWaitStrategy\",\"t\":[\"BusySpinWaitStrategy的实现方法是自旋等待。这种策略会利用CPU资源来避免系统调用带来的延迟抖动，当线程可以绑定到指定CPU(核)的时候，最好使用这个策略。\"]},\"466\":{\"h\":\"LiteBlockingWaitStrategy\",\"t\":[\"试图消除有条件的唤醒。相比BlockingWaitStrategy，LiteBlockingWaitStrategy的实现方法也是阻塞等待，但它会减少一些不必要的唤醒。\",\"从源码的注释上看，这个策略在基准性能测试上是会表现出一些性能提升。这种等待策略应该被认为是实验性的，因为官方作者还没有完全证明锁定省略代码的正确性。\"]},\"467\":{\"h\":\"LiteTimeoutBlockingWaitStrategy\",\"t\":[\"TimeoutBlockingWaitStrategy的一个变形，当锁无效时，试图无条件唤醒\"]},\"468\":{\"h\":\"PhasedBackoffWaitStrategy\",\"t\":[\"PhasedBackoffWaitStrategy的实现方法是先自旋(10000次)，不行再临时让出调度(yield)，不行再使用其他的策略进行等待。可以根据具体场景自行设置自旋时间、yield时间和备用等待策略。\"]},\"469\":{\"h\":\"SleepingWaitStrategy\",\"t\":[\"SleepingWaitStrategy的实现方法是先自旋，不行再临时让出调度(Thread.yield())，不行再短暂的阻塞等待。 对于既想取得高性能，由不想太浪费CPU资源的场景，这个策略是一种比较好的折中方案。\"]},\"470\":{\"h\":\"TimeoutBlockingWaitStrategy\",\"t\":[\"TimeoutBlockingWaitStrategy的实现方法是阻塞给定的时间，超过时间的话会抛出超时异常。\"]},\"471\":{\"h\":\"YieldingWaitStrategy\",\"t\":[\"Yielding 策略：在自旋100次尝试后，让出cpu资源，等待下次cpu调度后再行尝试。这个策略会100%消耗CPU，如果其他线程需要CPU资源，但是比忙碌旋转策略（busy spin strategy）更容易放弃CPU该策略在高性能与CPU资源之间取舍的折中方案，这个策略不会带来显著的延迟抖动。\"]},\"472\":{\"h\":\"总结\",\"t\":[\"等待策略 所在包com.Imax.disruptor\",\"描述\",\"Class BlockingWaitStrategy\",\"阻塞等待。当要求节省CPU资源，而不要求高吞吐量和低延迟的时候使用这个策略。\",\"Class BusySpinWaitStrategy\",\"自旋等待。这种策略会利用CPU资源来避免系统调用带来的延迟抖动，当线程可以绑定到指定CPU(核)的时候，最好使用这个策略。\",\"Class LiteBlockingWaitStrategy\",\"阻塞等待。相比BlockingWaitStrategy，它会减少一些不必要的唤醒。从而性能好。这种等待策略应该被认为是实验性的，因为官方作者还没有完全证明锁定省略代码的正确性。\",\"Class TimeoutBlockingWaitStrategy\",\"阻塞给定的时间，超过时间的话会抛出超时异常。\",\"Class LiteTimeoutBlockingWaitStrategy\",\"TimeoutBlockingWaitStrategy的一个变形，当锁无效时，试图无条件唤醒。\",\"Class PhasedBackoffWaitStrategy\",\"先自旋(10000次)，不行再临时让出调度(yield)，不行再使用其他的策略进行等待。可以根据具体场景自行设置自旋时间、yield时间和备用等待策略。\",\"Class SleepingWaitStrategy\",\"先自旋，不行再临时让出调度(Thread.yield())，不行再短暂的阻塞等待。对于既想取得高性能，由不想太浪费CPU资源的场景，这个策略是一种比较好的折中方案。\",\"Class YieldingWaitStrategy\",\"在自旋100次尝试后，让出cpu资源这个策略会100%消耗CPU，如果其他线程需要CPU资源，但是比忙碌旋转策略（busy spin strategy）更容易放弃CPU。该策略在高性能与CPU资源之间取舍的折中方案，这个策略不会带来显著的延迟抖动。，等待下次cpu调度后再行尝试。\",\"Interface WaitStrategy\",\"上述等待策略实现接口\",\"工具类 所在包com.imax.disruptor.util\",\"描述\",\"Enum DaemonThreadFactory\",\"访问ThreadFactory实例。 所有线程都是使用setDaemon(true)创建的守护线程\",\"Class ThreadHints\",\"用于运行时提高代码性能的提示，\",\"Class Util\",\"主要用于计算的工具类\",\"Enum BasicExecutor （com.lmax.disruptor.dsl）\",\"只是简单的实现了Executor接口,用于解决没有传递Executor对象的时候使用默认的BasicExecutor即可,可以理解就是默认提供的线程池对象\",\"Class BasicExecutor（com.lmax.disruptor.dsl）\",\"默认提供的线程池对象\",\"序列类 所在包com.imax.disruptor\",\"描述\",\"Class Sequence\",\"环真正的序列。除了缓存行的填充。Sequence类的其他set、get等方法都是通过UNSAFE对象实现对value值的原子操作\",\"Class SequenceGroup\",\"继承Sequence，序列组，是用来对sequences属性进行原子更新的，这个类里的sequences数组可以动态的进行增加、删减。\",\"Class SequenceGroups\",\"用于管理SequenceGroup对象的静态方法\",\"Class FixedSequenceGroup\",\"包含了若干序列的一个包装类，继承了Sequence只重写了get方法、获取内部序列组中最小的序列值，但其他的\\\"写\\\"方法都不支持。\",\"Interface Sequencer\",\"通过Sequencer的大部分功能来使用序列。通过Sequencer可以得到一个SequenceBarrier\",\"Interface SequenceBarrier\",\"消费者主要通过SequenceBarrier来使用序列。读取当前序列值。判断序列是否可用，是否可以消费。对消费者进通知。\",\"Interface ProcessingSequenceBarrier\",\"SequenceBarrier的具体实现\",\"Class AbstractSequencer\",\"AbstractSequencer实现了Sequencer，是SingleProducerSequencer和MultiProducerSequencer的基类，基本上的作用就是管理追踪序列和关联当前序列\",\"Class SingleProducerSequencer\",\"申请序列，发布序列，唤醒消费者\",\"Class MultiProducerSequencer\",\"适用于多线程的消费者，申请序列，发布序列，唤醒消费者\",\"Interface Sequenced\",\"Sequenced接口提供的方法都是用来给生产者使用，用于申请序列，发布序列的\",\"Interface Cursored\",\"Cursored接口只有一个方法，getCursor就是用来获取当前游标的位置，也就是用来获取当前生产者的实时位置。\",\"Interface SequenceReportingEventHandler\",\"在完成消费事件时通知并设置回调\",\"队列类 所在包com.imax.disruptor\",\"Interface EventSequencer\",\"EventSequencer扩展了Sequenced，提供了一些序列功能；同时扩展了DataProvider，提供了按序列值来获取数据的功能。\",\"Interface DataProvider\",\"提供了按序列值来获取数据的功能\",\"Interface EventSink\",\"EventSink主要是提供发布事件(就是往队列上放数据)的功能，接口上定义了以各种姿势发布事件的方法。\",\"Class RingBuffer\",\"数组实现的内部队列。RingBuffer提供了静态工厂方法分别针对单事件发布者和多事件发布者的情况进行RingBuffer实例创建。\",\"Class DataProvider\",\"DataProvider 提供了根据序列获取对应的对象有两个地方调用。第一是这个Event对象需要被生产者获取往里面填充数据。第二个是在消费时，获取这个Event对象用于消费 *\",\"异常处理类 所在包com.imax.disruptor\",\"Interface ExceptionHandler\",\"事件处理周期中未捕获异常的回调处理程序的接口\",\"Class ExceptionHandlerWrapper(com.lmax.disruptor.dsl)\",\"异常处理的包装类\",\"Class IgnoreExceptionHandler\",\"INFO的异常处理程序的便捷实现\",\"Class FatalExceptionHandler\",\"SEVERE(严重)的异常处理程序的便捷实\",\"Class InsufficientCapacityException\",\"如果在没有包装消耗序列的情况下，无法将值插入RingBuffer，则抛出异常\",\"Class ExceptionHandlerSetting（com.lmax.disruptor.dsl）\",\"为特定消费者设置异常处理程序的支持类\",\"事件类 所在包com.imax.disruptor\",\"Inetface EventSink\",\"这个类主要是提供发布事件(就是往队列上放数据)的功能\",\"Interface EventFactory\",\"由RingBuffer调用，以预先调用所有事件以填充RingBuffer\",\"Interface EventHandler\",\"回调接口，用于处理RingBuffer中可用的事件\",\"Class EventPoller\",\"用于Disruptor的基于轮询。 通过给定的数据提生产者控制序列来创建一个EventPoller\",\"Interface EventProcessor\",\"事件处理器会等待RingBuffer中的事件变为可用(可处理)，然后处理可用的事件\",\"Interface EventSequencer\",\"EventSequencer扩展了Sequenced，提供了一些序列功能；同时扩展了DataProvider，提供了按序列值来获取数据的功能。\",\"Interface EventTranslator\",\"在发布事件时需要传一个事件转换的接口，内部用这个接口做一下数据到事件的转换。\",\"时序图\",\"img\",\"类图\",\"1618295759372\",\"参考资料：https://brokendreams.iteye.com/blog/2255720\",\"http://www.ibigdata.io/?p=92\"]},\"473\":{\"h\":\"Future使用\",\"t\":[\"所谓异步调用其实就是实现一个可无需等待被调用函数的返回值而让操作继续运行的方法。 在 Java 语言中，简单的讲就是另启一个线程来完成调用中的部分计算，使调用继续运行或返回，而不需要等待计算结果。但调用者仍需要取线程的计算结果。\"]},\"474\":{\"h\":\"作用\",\"t\":[\"future 可以用于异步获取多线程任务结果 , Callable 用于产生结果，Future 用于获取结果\"]},\"475\":{\"h\":\"流程\",\"t\":[\"当 Future 进行 submit 开始 , 业务处理已经在多线程中开始 , 而 Get 即从多线程中获取数据 当 Get 获取时业务还未处理完 , 当前线程会阻塞 , 直到业务处理完成 . 所以需要注意 future 的任务安排 使用 future 会有以下效果：\",\"1 启动多线程任务\",\"2 处理其他事情\",\"3 收集多线程任务结果\",\"在执行多个任务的时候，使用Java标准库提供的线程池是非常方便的。我们提交的任务只需要实现Runnable接口，就可以让线程池去执行：\",\"class Task implements Runnable { public String result; public void run() { this.result = longTimeCalculation(); } } \",\"Runnable接口有个问题，它的方法没有返回值。如果任务需要一个返回结果，那么只能保存到变量，还要提供额外的方法读取，非常不便。 所以，Java标准库还提供了一个Callable接口，和Runnable接口比，它多了一个返回值：\",\"class Task implements Callable<String> { public String call() throws Exception { return longTimeCalculation(); } } \",\"并且Callable接口是一个泛型接口，可以返回指定类型的结果。\",\"现在的问题是，如何获得异步执行的结果？ 如果仔细看ExecutorService.submit()方法，可以看到，它返回了一个Future类型，一个Future类型的实例代表一个未来能获取结果的对象：\",\"ExecutorService executor = Executors.newFixedThreadPool(4); // 定义任务: Callable<String> task = new Task(); // 提交任务并获得Future: Future<String> future = executor.submit(task); // 从Future获取异步执行返回的结果: String result = future.get(); // 可能阻塞 \",\"当我们提交一个Callable任务后，我们会同时获得一个Future对象，然后，我们在主线程某个时刻调用Future对象的get()方法，就可以获得异步执行的结果。 在调用get()时，如果异步任务已经完成，我们就直接获得结果。如果异步任务还没有完成，那么get()会阻塞，直到任务完成后才返回结果。 一个Future接口表示一个未来可能会返回的结果，它定义的方法有：\",\"get()：获取结果（可能会等待） get(long timeout, TimeUnit unit)：获取结果，但只等待指定的时间； cancel(boolean mayInterruptIfRunning)：取消当前任务； isDone()：判断任务是否已完成。 \",\"阻塞的方式显然和我们的异步编程的初衷相违背，轮询的方式又会耗费无谓的 CPU 资源，而且也不能及时地得到计算结果，为什么不能用观察者设计模式呢？ 即当计算结果完成及时通知监听者。（例如通过回调的方式）所以在JDK8中引入了一个新的类CompletableFuture。 Java 8 中, 新增加了一个包含 50 个方法左右的类 CompletableFuture，它提供了非常强大的 Future 的扩展功能，可以帮助我们简化异步编程的复杂性，并且提供了函数式编程的能力，可以通过回调的方式处理计算结果，也提供了转换和组合 CompletableFuture 的方法。 对于阻塞或者轮询方式，依然可以通过 CompletableFuture 类的 CompletionStage 和 Future 接口方式支持。 Supplier是一个函数接口，其SAM(单一抽象方法)是get()。\",\"它不接收任何参数，返回一个值，并且只抛出非受检的异常：\",\" T get(); \",\"此接口最常见的用例之一是推迟某些代码的执行。 Optional类有一些方法接收Supplier作为参数，例如Optional.or()、Optional.orElseGet()。 因此，Supplier只有在Optional为空的时候才会执行。 我们还可以在异步计算上下文中使用它，特别是在CompletableFuture API中。 某些方法接收Supplier作为参数，例如supplyAsync()方法。 示例1：单个任务,让我们定义一个只执行一个异步任务的方法：\",\"public static void main(String[] args) throws Exception { // 在 Java8 中，推荐使用 Lambda 来替代匿名 Supplier 实现类 CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> { try { Thread.sleep(2000); } catch (Exception e) { } return \\\"I have completed\\\"; }); System.out.println(future.get()); } \",\"在这种情况下，lambda表达式定义了Supplier，但我们也可以定义一个实现类。多亏了CompletableFuture，我们为异步操作定义了一个模板，使其更易于理解和修改。 join()方法提供Supplier的返回值。 示例2：结合两个 CompletableFuture：我们还可以在Supplier接口和CompletableFuture的支持下开发一系列任务：\",\"public static void main(String[] args) throws Exception { CompletableFuture<String> future1 = CompletableFuture.supplyAsync(() -> \\\"Hello\\\"); CompletableFuture<String> future2 = CompletableFuture.supplyAsync(() -> \\\"World\\\"); CompletableFuture<Void> combinedFuture = CompletableFuture.allOf(future1, future2); // 这个方法不会合并结果，可以看到他的返回值是 Void 类型 combinedFuture.get(); // 我们需要手动来处理每一个并行异步任务的结果 String combined = Stream.of(future1, future2) .map(CompletableFuture::join) .collect(Collectors.joining(\\\" \\\")); System.out.println(combined); } \",\"示例3：转换和作用于异步任务的结果 (thenApply) 我们可以叠加功能，把多个 future 组合在一起等该方法的作用是在该计算阶段正常完成后，将该计算阶段的结果作为参数传递给参数 fn 值的函数Function，并会返回一个新的 CompletionStage\",\"public static void main(String[] args) throws Exception { // 在 Java8 中，推荐使用 Lambda 来替代匿名 Supplier 实现类 CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> { try { Thread.sleep(2000); } catch (Exception e) { } return \\\"I have completed\\\"; }); CompletableFuture<String> upperfuture = future.thenApply(String::toUpperCase); System.out.println(upperfuture.get()); } \",\"示例4：运行完成的异步任务的结果 (thenAccept/thenRun) 在 future 的管道里有两种典型的“最终”阶段方法。他们在你使用 future 的值的时候做好准备，当 thenAccept() 提供最终的值时，thenRun 执行 Runnable。 Consumer 接口方法 void accept(T t); 包含一个参数，但是没有返回值\",\"public static void main(String[] args) throws Exception { // 在 Java8 中，推荐使用 Lambda 来替代匿名 Supplier 实现类 CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> { try { Thread.sleep(2000); } catch (Exception e) { } return \\\"I have completed\\\"; }); future.thenAccept(s -> { System.out.println(s); }); // 等待将来完成，然后返回结果。 future.get(); } \",\"示例5：CompletableFuture的runAsync(Runnable, Executor) 使用指定的线程池执行异步代码。此异步方法无法返回值。\",\"public static void main(String[] args) { //当前调用者线程为:main System.out.println(\\\"当前调用者线程为:\\\" + Thread.currentThread().getName()); //todo 根据阿里规约 建议真实开发时使用 ThreadPoolExecutor 定义线程池 ExecutorService threadPool = Executors.newFixedThreadPool(10); CompletableFuture.runAsync(() -> { // 异步方法内当前执行线程为:pool-1-thread-1 System.out.println(\\\"异步方法内当前执行线程为:\\\" + Thread.currentThread().getName()); System.out.println(111); }, threadPool); threadPool.shutdown(); } \",\"示例6：supplyAsync(Supplier , Executor) 使用指定线程池 来执行可获取返回值的异步任务\",\" public static void main(String[] args) { // todo 根据阿里规约 建议真实开发时使用 ThreadPoolExecutor 定义线程池 ExecutorService threadPool = Executors.newFixedThreadPool(10); CompletableFuture<String> supplyAsync = CompletableFuture.supplyAsync(() -> { // 异步方法内当前执行线程为:pool-1-thread-1 System.out.println(\\\"异步方法内当前执行线程为:\\\" + Thread.currentThread().getName()); // 模拟耗时与返回结果 try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); } return \\\"hello,world\\\"; },threadPool); // 获取异步线程执行结果 System.out.println(supplyAsync.join()); threadPool.shutdown(); } \",\"总结：使用CompletableFuture–Supplier方法定义异步任务链可以解决之前使用Future–Callable方法引入的一些问题：\",\"链中的每个任务都是独立的，因此，如果任务执行失败，我们可以通过exceptionally()块来处理它。\",\"join()方法不需要在编译时处理受检的异常。\",\"我们可以设计一个异步任务模板，完善每个任务的状态处理。\",\"参考：\",\"https://juejin.cn/post/6941010435512467493\",\"https://www.jianshu.com/p/73aaec23009d\",\"https://www.liaoxuefeng.com/wiki/1252599548343744/1306581155184674\",\"https://tu-yucheng.github.io/java/2023/07/05/java-callable-vs-supplier.html\"]},\"476\":{\"h\":\"GET与POST区别\",\"t\":[\"​ 最常用的利用GET和POST请求后端数据。GET和POST是HTTP与服务器交互的方式，交互方式还有DELETE、PUT、HEAD、OPTIONS、CONNECT等。\",\"​ 先看看GET和POST的样貌：\"]},\"477\":{\"h\":\"GET请求\",\"t\":[\"GET /empty_project/inde.jsp HTTP/1.1 Host: localhost:8088 Connection: keep-alive Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Accept-Encoding: gzip, deflate, sdch, br Accept-Language: zh-CN,zh;q=0.8 Cookie: pgv_pvi=4403687424 \",\"Accept 浏览器支持的类型 Accept-Language 浏览器支持的语言 Accept-Encoding 浏览器支持的压缩格式 Host 请求的主机 Connection keep-alive 这个是链接一小段时间\"]},\"478\":{\"h\":\"GET响应\",\"t\":[\"HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Set-Cookie: JSESSIONID=F463F5132A34573215C941893534BF26; Path=/empty_project; HttpOnly Content-Type: text/html;charset=utf-8 Content-Length: 196 Date: Mon, 02 Jan 2017 08:52:48 GMT \",\"响应行 (协议/版本 状态码 状态码解析)\",\"响应头 （key/value格式）\",\"空行\",\"响应正文\"]},\"479\":{\"h\":\"POST请求\",\"t\":[\"POST /index.jsp HTTP/1.1 Host: localhost:8088 Connection: keep-alive Content-Length: 35 Cache-Control: max-age=0 Origin: http://localhost:8088 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Referer: http://localhost:8088/login.html Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.8 Cookie: pgv_pvi=4403687424 username=username&password=password \",\"Content-Type 使用application/x-www-form-urlencoded\",\"转化为字节 -- 加上128 -- 转化为16进制 -- 添加%\"]},\"480\":{\"h\":\"POST响应\",\"t\":[\"POST /index.jsp HTTP/1.1 Host: localhost:8088 Connection: keep-alive Content-Length: 252 Cache-Control: max-age=0 Origin: http://localhost:8088 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 Content-Type: multipart/form-data; boundary=----WebKitFormBoundarySN8ehdkx6tF3Ngiq Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Referer: http://localhost:8088/login.html Accept-Encoding: gzip, deflate, br Accept-Language: zh-CN,zh;q=0.8 Cookie: pgv_pvi=4403687424; JSESSIONID=061657A0C03921CB478ACB889502C93A ------WebKitFormBoundarySN8ehdkx6tF3Ngiq Content-Disposition: form-data; name=\\\"username\\\" sdfdsf ------WebKitFormBoundarySN8ehdkx6tF3Ngiq Content-Disposition: form-data; name=\\\"password\\\" sdfdsfsdfdsf ------WebKitFormBoundarySN8ehdkx6tF3Ngiq-- \",\"image-20200721091103941\"]},\"481\":{\"h\":\"（1）表格对比：\",\"t\":[\"​ GET 用于获取信息，是无副作用的，是幂等的，且可缓存 ​ POST 用于修改服务器上的数据，有副作用，非幂等，不可缓存\",\"​ 幂等性：是指无论调用多少次都不会有不同结果的一种特性，一般是指HTTP GET的查询方法。\"]},\"482\":{\"h\":\"（2）交互对比\",\"t\":[\"​ GET产生一个TCP数据包，POST产生两个TCP数据包：\",\"​ 对于GET方式的请求，游览器会把http header和data一并发送出去，服务器响应200（返回数据）\",\"​ 对于POST请求。游览器先发送header，服务器响应100 continue，游览器再发送data，服务器响应200 ok（返回数据）3、\"]},\"483\":{\"h\":\"（1）GET方法的参数写法是固定的吗？\",\"t\":[\"​ 一般约定中我们都是把参数写在?后边，用&分割\",\"​ 但是我们知道，解析报文的过程是通过获取 TCP 数据，用正则等工具从数据中获取 Header 和 Body，从而提取参数。\",\"​ 比如header请求头中添加token，来验证用户是否登录等权限问题。\",\"​ 也就是说，我们可以自己约定参数的写法，只要服务端能够解释出来就行，万变不离其宗。\"]},\"484\":{\"h\":\"（2）GET 方法的长度限制是怎么回事？\",\"t\":[\"​ 网络上都会提到浏览器地址栏输入的参数是有限的。\",\"​ 首先说明一点，HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。\",\"​ 浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。\"]},\"485\":{\"h\":\"（3）POST 方法比 GET 方法安全？\",\"t\":[\"​ 有人说POST 比 GET 安全，因为数据在地址栏上不可见。\",\"​ 然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。（个人发现某60和某讯电脑管家，会将GET和POST请求数据包完整的上传到他们的服务器，解析后你提交的信息就会被破解。类似于中间人攻击也会导致泄露，不安全）\",\"​ 要想安全传输，就只有利用非对称加密，也就是 HTTPS。\",\"参考：http://www.javanx.cn/20190227/get-post/\"]},\"486\":{\"h\":\"（4）POST 方法会产生两个 TCP 数据包？\",\"t\":[\"​ 上述文章中提到，post 会将 header 和 body 分开发送，先发送 header，服务端返回 100 状态码再发送 body。\",\"​ HTTP 协议中没有明确说明 POST 会产生两个 TCP 数据包，而且实际测试(Chrome)发现，header 和 body 不会分开发送。\",\"​\\t\\t所以，header 和 body 分开发送是部分浏览器或框架的请求方法，不属于 post 必然行为。\"]},\"487\":{\"h\":\"Git梳理\"},\"488\":{\"h\":\"1、Git介绍：\",\"t\":[\"Git是目前世界上最先进的分布式版本控制系统。gitlab是公司搭建的代码版本控制平台，使用方法与github类似，项目负责人在gitlab上新建一个项目，并分享URL给开发人员。开发人员在负责人的gitlab项目页面上点 击“fork”按钮，将此项目fork到自己的gitlab上，这相当于是从负责人那拷贝了一份项目副本，无论开发人员如何修改代码都不会影响负责人那master分支上的代码。然后开发人员可以根据自己的项目分工，像对待普通项 目一样做clone、add、commit、push等操作。如果开发人员人为一个小模块做好了，可以点击“pull request”按钮，向负责人发送代码合并请求，要合并的代码文件也会以列表的形式同时发送给负责人，此时负责人会看到 \",\"开发人员的请求，经审核如果代码没问题则会合并模块，并向开发人员发送确认合并的通知。\"]},\"489\":{\"h\":\"2、为什么用GitLab？\",\"t\":[\"清晰的项目管理和责任明确 清晰的看到产品迭代，为产品研发提供参考 能够形成项目管理课程，为我们的后续产品做准备，同时课程设计过程完全公开，降低产品和运营不匹配的问题。 \"]},\"490\":{\"h\":\"3、Git 工作区、暂存区和版本库\",\"t\":[\"工作区：就是你在电脑里能看到的目录。\",\"暂存区：英文叫stage, 或index。一般存放在 \\\".git目录下\\\" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\",\"版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\"]},\"491\":{\"h\":\"4、Git工作流程\"},\"492\":{\"h\":\"1、一个分支\",\"t\":[\"克隆 Git 资源作为工作目录。\",\"在克隆的资源上添加或修改文件。\",\"如果其他人修改了，你可以更新资源。\",\"在提交前查看修改。\",\"提交修改。\"]},\"493\":{\"h\":\"2、多个分支\",\"t\":[\"fork项目，建立自己的分支[name]（直接git网页操作）\",\"将master分支clone 下来（git clone）\",\"修改当前分支为fork 的分支（git checkoout [name]）\",\"代码的修改(commit and push)\",\"如果需要合并到主分支：pull request merge\"]},\"494\":{\"h\":\"5、Git配置及使用：\"},\"495\":{\"h\":\"1）配置用户信息\",\"t\":[\" 配置个人的用户名称和电子邮件地址： 右键打开git bash命令行（如果设置了git的系统环境变量，就可以直接使用cmd命令行进行git操作） a）设置Git端上的用户名和用户邮箱（公司邮箱） \",\"$ git config --global user.name \\\"yourname\\\" $ git config --global user.email \\\"yourname@xxxx.com\\\" \",\" b）生成ssh公钥和私钥 \",\"$ ssh -keygen -t rsa -C \\\"yourname@xxxx.com\\\" 一路回车 C:/Users/admin/.ssh会生成一个id_rsa.pub公钥文件 word打开id_rsa.pub将公钥添加进GitLab -> Profile Settings -> SSH Keys 添加成功钉邮中会收到SSH key was added to your account邮件 \"]},\"496\":{\"h\":\"2）查看配置\",\"t\":[\"$ git config --list \"]},\"497\":{\"h\":\"3）创建仓库\",\"t\":[\" a）$ git clone：这是一种较为简单的初始化方式，当你已经有一个远程的Git版本库，只需要在本地克隆一份。 \",\"例：$ git clone http://zzzzz.git // 'http://zzzzzz.git' 这个URL地址的远程版本库，完全克隆到本地demo目录下\",\"注：git clone 时，可以所用不同的协议，包括 ssh, git, https 等，其中最常用的是 ssh，因为速度较快，还可以配置公钥免输入密码。 b）$ git init 和 $ git remote：这种方式稍微复杂一些，当你本地创建了一个工作目录，你可以进入这个目录，使用'git init'命令进行初始化；Git以后就会对该目录下的文件进行版本控制， 这时候如果你需要将它放到远程服务器上，可以在远程服务器gitlab上创建一个目录，并把可访问的URL记录下来，此时你就可以利用'git remote add'命令来增加一个远程服务器端。 \",\"例： $ git init // 该命令执行完后会在当前目录生成一个 .git 目录。 $ git add . // 是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步 $ touch README.md // 初始化一个README.md文件 $ git commit -m \\\"初始化项目版本\\\" // 提交当前工作空间的修改内容 $ git remote add origin git@git.gag.cn:yourname/demo.git // 关联远程仓库 $ git push -u origin master // 将操作提交到gitlab $ git log // 查看历史日志 \"]},\"498\":{\"h\":\"4）基本操作\"},\"499\":{\"h\":\"a）远程仓库相关命令\",\"t\":[\"检出仓库：\",\"$ git clone http:/zzzzzzzz.git \",\"查看远程仓库：\",\"$ git remote -v \",\"添加远程仓库：\",\"$ git remote add [name] [url] \",\"删除远程仓库：\",\"$ git remote rm [name] \",\"修改远程仓库：\",\"$ git remote set-url --push [name] [newUrl] \",\"拉取远程仓库：\",\"$ git pull [remoteName] [localBranchName] \",\"从其他的版本库（既可以是远程的也可以是本地的）将代码更新到本地，例如：'git pull origin master'就是将origin这个版本库的代码更新到本地的master主枝\",\"推送远程仓库：\",\"$ git push [remoteName] [localBranchName] \",\"将本地commit的代码更新到远程版本库中，例如'git push origin'就会将本地的代码更新到名为orgin的远程版本库中\",\"如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\",\"$git push origin test:master // 提交本地test分支作为远程的master分支 $git push origin test:test // 提交本地test分支作为远程的test分支 \"]},\"500\":{\"h\":\"b）分支(branch)操作相关命令\",\"t\":[\"查看本地分支：\",\"$ git branch \",\"列出本地所有的分支 对分支的增、删、查等操作，例如'git branch new_branch'会从当前的工作版本创建一个叫做new_branch的新分支\",\"$ git branch -D new_branch ----就会强制删除叫做new_branch的分支 \",\"查看远程分支：\",\"$ git branch -r \",\"创建本地分支：\",\"$ git branch [name] ----注意新分支创建后不会自动切换为当前分支 \",\"切换分支：\",\"$ git checkout [name] \",\"Git的checkout有两个作用，其一是在不同的branch之间进行切换，例如'git checkout new_branch'就会切换到new_branch的分支上去；另一个功能是还原代码的作用，例如'git checkout app/model/user.rb'就会将user.rb文件从上一个已提交的版本中更新回来，未提交的内容全部会回滚。\",\"创建新分支并立即切换到新分支：\",\"$ git checkout -b [name] \",\"删除分支：\",\"$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项 \",\"合并分支：\",\"$ git merge [name] ----将名称为[name]的分支与当前分支合并 \",\"创建远程分支(本地分支push到远程)：\",\"$ git push origin [name] \",\"删除远程分支：\",\"$ git push origin :heads/[name] 或 $ gitpush origin :[name] \",\"创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净)\",\"$git symbolic-ref HEAD refs/heads/[name] $rm .git/index $git clean -fdx \"]},\"501\":{\"h\":\"c）版本(tag)操作相关命令\",\"t\":[\"查看版本：\",\"$ git tag \",\"创建版本：\",\"$ git tag [name] \",\"可以将某个具体的版本打上一个标签，这样你就不需要记忆复杂的版本号哈希值了，例如你可以使用'git tag revert_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20'来标记这个被你还原的版本，那么以后你想查看该版本时，就可以使用 revert_version标签名，而不是哈希值了\",\"删除版本：\",\"$ git tag -d [name] \",\"查看远程版本：\",\"$ git tag -r \",\"创建远程版本(本地版本push到远程)：\",\"$ git push origin [name] \",\"删除远程版本：\",\"$ git push origin :refs/tag/[name] \",\"合并远程仓库的tag到本地：\",\"$ git pull origin --tag \",\"上传本地tag到远程仓库：\",\"$ git push origin --tag \",\"创建带注释的tag：\",\"$ git tag -a [name] -m 'yourMessage' \"]},\"502\":{\"h\":\"d）子模块(submodule)相关操作命令\",\"t\":[\"添加子模块：\",\"$ git submodule add [url] [path] 如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs \",\"初始化子模块：\",\"$ git submodule init ----只在首次检出仓库时运行一次就行 \",\"更新子模块：\",\"$ git submodule update ----每次更新或切换分支后都需要运行一下 \",\"删除子模块：（分4步走）\",\"1)$ git rm --cached [path] 2)编辑“.gitmodules”文件，将子模块的相关配置节点删除掉 3)编辑“ .git/config”文件，将子模块的相关配置节点删除掉 4)手动删除子模块残留的目录 \"]},\"503\":{\"h\":\"e）补充\",\"t\":[\"更改或者新增的文件：\",\"$ git add \",\"是将当前更改或者新增的文件加入到Git的索引中，加入到Git的索引中就表示记入了版本历史中，这也是提交之前所需要执行的一步，\",\"例如: git add app/model/user.rb'就会增加app/model/user.rb文件到Git的索引中 \",\"删除文件：\",\"$ git rm \",\"从当前的工作空间中和索引中删除文件，\",\"例如: git rm app/model/user.rb \",\"查看历史日志：\",\"$ git log \",\"还原：\",\"$ git revert \",\"还原一个版本的修改，必须提供一个具体的Git版本号，例如'git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20'，Git的版本号都是生成的一个哈希值\",\"提交：\",\"$ git commit \",\"当前工作空间的修改内容\",\"强制pull\",\"git fetch --all git reset --hard origin/master git pull \",\"强制push\",\"push -u [url] \"]},\"504\":{\"h\":\"f）忽略一些文件、文件夹不提交\",\"t\":[\"在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如\",\"target bin *.db \"]},\"505\":{\"h\":\"5)解决冲突\",\"t\":[\"IDEA -> VCS -> git -> Branches -> 选中需要合并的远程分支 - > Rebase current onto selected \"]},\"506\":{\"h\":\"Hash解决冲突的方法\",\"t\":[\"​ 散列表（hash table，也叫哈希表），是根据关键码值（key value）而直接进行访问的数据结构。\",\"​ 也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫 散列函数，存放记录的数组叫做散列表。\",\"​ 给定表M，存在函数f（key），对于任意给定的关键字值 key，代入函数后若能得到包含改关键字的记录在表中的地址，则称表M为哈希（hash）表，函数 f（key）为哈希（hash）函数。\",\"​ 对应不同的关键字可能获得相同的 hash 地址，即 key1 ≠ key2，但是f（key1） = f（key2）。这种现象就是冲突，而且这种冲突只能尽可能的减少，不能完全避免。\",\"​ 因为哈希函数是从关键字集合和地址集合的映像，通畅关键字集合比较大，而地址集合的元素仅为哈希表中的地址值。\"]},\"507\":{\"h\":\"1、直接定址法\",\"t\":[\"​ 取 key 的线性函数值作为 hash 值，value = a * key + b\"]},\"508\":{\"h\":\"2、除留余数法\",\"t\":[\"​ 假设数组长度为l，value = key % l\",\"​ 这一种散列码实现简单，运用比较多，但是如果输入的元素集合不具有一定的规律，比较容易产生冲突。数组的长度最好是质数，被除数为质数在一定程度上可以缓解数据堆积的问题。\"]},\"509\":{\"h\":\"3、数字分析法\",\"t\":[\"​ 对关键字进行分析，取关键字的若干位进行或者组合进行hash计算\"]},\"510\":{\"h\":\"4、平方区中法\",\"t\":[\"取关键字平方后中间几位作为哈希地址\"]},\"511\":{\"h\":\"1、开放定址法\",\"t\":[\"​ 所谓的开放定址法就是一旦发生了冲突，就去寻找下一个空的散列地址，只要散列表足够大，空的散列地址总能找到，并将记录存入。\",\"​ fi(key) = ( f(key) + di) MOD m (di = 1,2,3,......,m-1)\"]},\"512\":{\"h\":\"2、再哈希法\",\"t\":[\"​ 再哈希法又叫双哈希法，有多个不同的Hash函数，当发生冲突时，使用第二个，第三个，...... ,等哈希函数\",\"​ 计算地址，直到无冲突。\",\"​ （不易发生聚集，但是增加计算时间）\"]},\"513\":{\"h\":\"3、链地址法\",\"t\":[\"​ 每个哈希表节点都有一个next指针，多个哈希表节点可以用next指针构成一个单向链表，被分配到同一个索引上的多个节点可以用 next 指针构成一个单向链表，被分配到同一个索引上的多个节点可以用这个单向链表连接起来。\",\"​ 键值对k2，v2与键值对k1，v1通过计算后的索引值都为2，这时及时产生冲突，但是可以通到next 指将 k2，k1所在的节点连接起来，这样就解决了哈希的冲突问题。\"]},\"514\":{\"h\":\"4、建立公共溢出区\",\"t\":[\"​ 将 哈希表 分为 基本表 和 溢出表两部分\",\"​ 凡是和基本表发生冲突的元素，依赖包填入溢出表。\",\"​\"]},\"515\":{\"h\":\"HttpClient\",\"t\":[\"​ HTTP 协议可能是现在 Internet 上使用得最多、最重要的协议了，越来越多的 Java 应用程序需要直接通过 HTTP 协议来访问网络资源。\",\"​ 虽然在 JDK 的 java net包中已经提供了访问 HTTP 协议的基本功能，但是对于大部分应用程序来说，JDK 库本身提供的功能还不够丰富和灵活。\",\"​ HttpClient 是Apache HttpComponents 下的子项目，用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。HttpClient已经应用在很多的项目中，并支持HTTPS协议。\",\"​ HttpClient 不是浏览器，它是一个客户端 HTTP 协议传输类库。HttpClient 被用来发送和接受 HTTP 消息。HttpClient 不会处理 HTTP 消息的内容，不会进行 javascript 解析，不会关心 content type，如果没有明确设置，HttpClient 也不会对请求进行格式化、重定向 url，或者其他任何和 HTTP 消息传输相关的功能。\"]},\"516\":{\"h\":\"（1）引入依赖\",\"t\":[\" <httpclient.version>4.5.12</httpclient.version> <!-- apache httpclient组件 --> <dependency> <groupId>org.apache.httpcomponents</groupId> <artifactId>httpclient</artifactId> <version>${httpclient.version}</version> </dependency> \"]},\"517\":{\"h\":\"（2）返回实体\",\"t\":[\"package cn.edu.bjut.entity; import java.io.Serializable; /** * @author ztq */ public class HttpClientResult implements Serializable { private static final long serialVersionUID = 1L; /** * 响应状态码 */ private int code; /** * 响应数据 */ private String content; public HttpClientResult(int code, String content) { this.code = code; this.content = content; } public HttpClientResult(int code) { this.code = code; } public int getCode() { return code; } public void setCode(int code) { this.code = code; } public String getContent() { return content; } public void setContent(String content) { this.content = content; } @Override public String toString() { return \\\"HttpClientResult{\\\" + \\\"code=\\\" + code + \\\", content='\\\" + content + '\\\\'' + '}'; } } \"]},\"518\":{\"h\":\"（3）工具类\",\"t\":[\"package cn.edu.bjut.utils; import cn.edu.bjut.entity.HttpClientResult; import org.apache.http.HttpStatus; import org.apache.http.NameValuePair; import org.apache.http.client.config.RequestConfig; import org.apache.http.client.entity.UrlEncodedFormEntity; import org.apache.http.client.methods.*; import org.apache.http.client.utils.URIBuilder; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.apache.http.message.BasicNameValuePair; import org.apache.http.util.EntityUtils; import java.io.IOException; import java.io.UnsupportedEncodingException; import java.util.*; /** * @author ztq */ public class HttpClientUtils { /** * 编码格式。发送编码格式统一用UTF-8 */ private static final String ENCODING = \\\"UTF-8\\\"; /** * 设置连接超时时间，单位毫秒。 */ private static final int CONNECT_TIMEOUT = 6000; /** * 请求获取数据的超时时间(即响应时间)，单位毫秒。 */ private static final int SOCKET_TIMEOUT = 6000; /** * 发送get请求；不带请求头和请求参数 * * @param url 请求地址 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doGet(String url) throws Exception { return doGet(url, null, null); } /** * 发送get请求；带请求参数 * * @param url 请求地址 * @param params 请求参数集合 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doGet(String url, Map<String, String> params) throws Exception { return doGet(url, null, params); } /** * 发送get请求；带请求头和请求参数 * * @param url 请求地址 * @param headers 请求头集合 * @param params 请求参数集合 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doGet(String url, Map<String, String> headers, Map<String, String> params) throws Exception { // 创建httpClient对象 CloseableHttpClient httpClient = HttpClients.createDefault(); // 创建访问的地址 URIBuilder uriBuilder = new URIBuilder(url); if (params != null) { Set<Map.Entry<String, String>> entrySet = params.entrySet(); for (Map.Entry<String, String> entry : entrySet) { uriBuilder.setParameter(entry.getKey(), entry.getValue()); } } // 创建http对象 HttpGet httpGet = new HttpGet(uriBuilder.build()); /** * setConnectTimeout：设置连接超时时间，单位毫秒 * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒 */ RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build(); httpGet.setConfig(requestConfig); // 设置请求头 packageHeader(headers, httpGet); // 创建httpResponse对象 CloseableHttpResponse httpResponse = null; try { // 执行请求并获得响应结果 return getHttpClientResult(httpResponse, httpClient, httpGet); } finally { // 释放资源 release(httpResponse, httpClient); } } /** * 发送post请求；不带请求头和请求参数 * * @param url 请求地址 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doPost(String url) throws Exception { return doPost(url, null, null); } /** * 发送post请求；带请求参数 * * @param url 请求地址 * @param params 参数集合 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doPost(String url, Map<String, String> params) throws Exception { return doPost(url, null, params); } /** * 发送post请求；带请求头和请求参数 * * @param url 请求地址 * @param headers 请求头集合 * @param params 请求参数集合 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doPost(String url, Map<String, String> headers, Map<String, String> params) throws Exception { // 创建httpClient对象 CloseableHttpClient httpClient = HttpClients.createDefault(); // 创建http对象 HttpPost httpPost = new HttpPost(url); /** * setConnectTimeout：设置连接超时时间，单位毫秒 * setConnectionRequestTimeout：设置从connect Manager(连接池)获取Connection * setSocketTimeout：请求获取数据的超时时间(即响应时间)，单位毫秒 */ RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build(); httpPost.setConfig(requestConfig); // 设置请求头 packageHeader(headers, httpPost); // 封装请求参数 packageParam(params, httpPost); // 创建httpResponse对象 CloseableHttpResponse httpResponse = null; try { // 执行请求并获得响应结果 return getHttpClientResult(httpResponse, httpClient, httpPost); } finally { // 释放资源 release(httpResponse, httpClient); } } /** * 发送put请求；不带请求参数 * * @param url 请求地址 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doPut(String url) throws Exception { return doPut(url); } /** * 发送put请求；带请求参数 * * @param url 请求地址 * @param params 参数集合 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doPut(String url, Map<String, String> params) throws Exception { CloseableHttpClient httpClient = HttpClients.createDefault(); HttpPut httpPut = new HttpPut(url); RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build(); httpPut.setConfig(requestConfig); packageParam(params, httpPut); CloseableHttpResponse httpResponse = null; try { return getHttpClientResult(httpResponse, httpClient, httpPut); } finally { release(httpResponse, httpClient); } } /** * 发送delete请求；不带请求参数 * * @param url 请求地址 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doDelete(String url) throws Exception { CloseableHttpClient httpClient = HttpClients.createDefault(); HttpDelete httpDelete = new HttpDelete(url); RequestConfig requestConfig = RequestConfig.custom().setConnectTimeout(CONNECT_TIMEOUT).setSocketTimeout(SOCKET_TIMEOUT).build(); httpDelete.setConfig(requestConfig); CloseableHttpResponse httpResponse = null; try { return getHttpClientResult(httpResponse, httpClient, httpDelete); } finally { release(httpResponse, httpClient); } } /** * 发送delete请求；带请求参数 * * @param url 请求地址 * @param params 参数集合 * @return 返回结果 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult doDelete(String url, Map<String, String> params) throws Exception { if (params == null) { params = new HashMap<String, String>(); } params.put(\\\"_method\\\", \\\"delete\\\"); return doPost(url, params); } /** * 封装请求头 * * @param params 参数 * @param httpMethod 请求方式 */ public static void packageHeader(Map<String, String> params, HttpRequestBase httpMethod) { // 封装请求头 if (params != null) { Set<Map.Entry<String, String>> entrySet = params.entrySet(); for (Map.Entry<String, String> entry : entrySet) { // 设置到请求头到HttpRequestBase对象中 httpMethod.setHeader(entry.getKey(), entry.getValue()); } } } /** * 封装请求参数 * * @param params 返回结果 * @param httpMethod 请求方式 * @throws UnsupportedEncodingException 异常抛出 未处理 */ public static void packageParam(Map<String, String> params, HttpEntityEnclosingRequestBase httpMethod) throws UnsupportedEncodingException { // 封装请求参数 if (params != null) { List<NameValuePair> nvps = new ArrayList<NameValuePair>(); Set<Map.Entry<String, String>> entrySet = params.entrySet(); for (Map.Entry<String, String> entry : entrySet) { nvps.add(new BasicNameValuePair(entry.getKey(), entry.getValue())); } // 设置到请求的http对象中 httpMethod.setEntity(new UrlEncodedFormEntity(nvps, ENCODING)); } } /** * 获得响应结果 * * @param httpResponse 响应 * @param httpClient http客户端 * @param httpMethod 请求方式 * @return 返回结果集 * @throws Exception 异常抛出 未处理 */ public static HttpClientResult getHttpClientResult(CloseableHttpResponse httpResponse, CloseableHttpClient httpClient, HttpRequestBase httpMethod) throws Exception { // 执行请求 httpResponse = httpClient.execute(httpMethod); // 获取返回结果 if (httpResponse != null && httpResponse.getStatusLine() != null) { String content = \\\"\\\"; if (httpResponse.getEntity() != null) { content = EntityUtils.toString(httpResponse.getEntity(), ENCODING); } return new HttpClientResult(httpResponse.getStatusLine().getStatusCode(), content); } return new HttpClientResult(HttpStatus.SC_INTERNAL_SERVER_ERROR); } /** * 释放资源 * * @param httpResponse 响应 * @param httpClient http客户端 * @throws IOException 异常抛出 未处理 */ public static void release(CloseableHttpResponse httpResponse, CloseableHttpClient httpClient) throws IOException { // 释放资源 if (httpResponse != null) { httpResponse.close(); } if (httpClient != null) { httpClient.close(); } } } \"]},\"519\":{\"h\":\"Http和Https的区别\"},\"520\":{\"h\":\"1、HTTP\",\"t\":[\"​ HyperText Transfer Protocol：超文本传输协议，是一种用于分布式、协作式和超媒体信息系统的应用层协议。 简单来说就是一种发布和接收 HTML 页面的方法，被用于在 Web 浏览器和网站服务器之间传递信息。\",\"​ HTTP 默认工作在 TCP 协议 80 端口，用户访问网站 http:// 打头的都是标准 HTTP 服务。\",\"​ HTTP 协议以明文方式发送内容，不提供任何方式的数据加密，如果攻击者截取了Web浏览器和网站服务器之间的传输报文，就可以直接读懂其中的信息，因此，HTTP协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。\"]},\"521\":{\"h\":\"2、HTTPS\",\"t\":[\"​ Hypertext Transfer Protocol Secure：超文本传输安全协议是一种透过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，但利用 SSL/TLS 来加密数据包。HTTPS 开发的主要目的，是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。HTTPS 默认工作在 TCP 协议443端口。\"]},\"522\":{\"h\":\"3、HTTPS和HTTP的区别\",\"t\":[\"（1）安全性\",\"HTTP 明文传输，数据都是未加密的，安全性较差，HTTPS（SSL+HTTP） 数据传输过程是加密的，安全性较好。\",\"（2）费用\",\"使用 HTTPS 协议需要到 CA（Certificate Authority，数字证书认证机构） 申请证书，一般免费证书较少，因而需要一定费用。证书颁发机构如：Symantec、Comodo、GoDaddy 和 GlobalSign 等。\",\"（3）响应速度\",\"HTTP 页面响应速度比 HTTPS 快，主要是因为 HTTP 使用 TCP 三次握手建立连接，客户端和服务器需要交换 3 个包，而 HTTPS除了 TCP 的三个包，还要加上 ssl 握手需要的 9 个包，所以一共是 12 个包。\",\"（4）端口\",\"http 和 https 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。\",\"（5）空间消耗\",\"HTTPS 其实就是建构在 SSL/TLS 之上的 HTTP 协议，所以，要比较 HTTPS 比 HTTP 要更耗费服务器资源。\",\"img\",\"1、客户端发起 HTTPS 请求\",\"这个没什么好说的，就是用户在浏览器里输入一个 https 网址，然后连接到 server 的 443 端口。\",\"2、服务端的配置\",\"采用 HTTPS 协议的服务器必须要有一套数字证书，可以自己制作，也可以向组织申请，区别就是自己颁发的证书需要客户端验证通过，才可以继续访问，而使用受信任的公司申请的证书则不会弹出提示页面(startssl 就是个不错的选择，有 1 年的免费服务)。\",\"这套证书其实就是一对公钥和私钥，如果对公钥和私钥不太理解，可以想象成一把钥匙和一个锁头，只是全世界只有你一个人有这把钥匙，你可以把锁头给别人，别人可以用这个锁把重要的东西锁起来，然后发给你，因为只有你一个人有这把钥匙，所以只有你才能看到被这把锁锁起来的东西。\",\"3、传送证书\",\"这个证书其实就是公钥，只是包含了很多信息，如证书的颁发机构，过期时间等等。\",\"4、客户端解析证书\",\"这部分工作是有客户端的TLS来完成的，首先会验证公钥是否有效，比如颁发机构，过期时间等等，如果发现异常，则会弹出一个警告框，提示证书存在问题。\",\"如果证书没有问题，那么就生成一个随机值，然后用证书对该随机值进行加密，就好像上面说的，把随机值用锁头锁起来，这样除非有钥匙，不然看不到被锁住的内容。\",\"5、传送加密信息\",\"这部分传送的是用证书加密后的随机值，目的就是让服务端得到这个随机值，以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了。\",\"6、服务端解密信息\",\"服务端用私钥解密后，得到了客户端传过来的随机值(私钥)，然后把内容通过该值进行对称加密，所谓对称加密就是，将信息和私钥通过某种算法混合在一起，这样除非知道私钥，不然无法获取内容，而正好客户端和服务端都知道这个私钥，所以只要加密算法够彪悍，私钥够复杂，数据就够安全。\",\"7、传输加密后的信息\",\"这部分信息是服务段用私钥加密后的信息，可以在客户端被还原。\",\"8、客户端解密信息\",\"客户端用之前生成的私钥解密服务段传过来的信息，于是获取了解密后的内容，整个过程第三方即使监听到了数据，也束手无策。\"]},\"523\":{\"h\":\"IOC中的基本反射步骤\",\"t\":[\"package cn.edu.bjut.base.spring.controller; import cn.edu.bjut.base.spring.Autowired; import cn.edu.bjut.base.spring.service.UserService; public class UserController { private UserService userService; public UserService getUserService() { return userService; } public void setUserService(UserService userService) { this.userService = userService; } } \",\"package cn.edu.bjut.base.spring.service; public class UserService { public String findUserById(String id) { return null; } } \",\"package cn.edu.bjut.base.spring; import cn.edu.bjut.base.spring.controller.UserController; import cn.edu.bjut.base.spring.service.UserService; import java.lang.reflect.Field; import java.lang.reflect.Method; public class TestReflect { public static void main(String[] args) throws Exception { UserController userController = new UserController(); Class<? extends UserController> clazz = userController.getClass(); // 创建对象 UserService userService = new UserService(); System.out.println(userService); // 获取所有的属性 Field serviceField = clazz.getDeclaredField(\\\"userService\\\"); serviceField.setAccessible(true); // 只有通过方法才能够设置具体的属性值 String name = serviceField.getName(); // 拼接方法的名称 name = name.substring(0, 1).toUpperCase() + name.substring(1); String setMethodName = \\\"set\\\" + name; // 通过方法注入属性的对象 Method method = clazz.getMethod(setMethodName, UserService.class); // 反射 method.invoke(userController, userService); System.out.println(userController.getUserService()); } } \"]},\"524\":{\"h\":\"ip地址与子网掩码换算公式\",\"t\":[\"​ 熟练的掌握ip地址可以减少项目中出错的概率与提升工作的效率\"]},\"525\":{\"h\":\"类范围\",\"t\":[\"IP地址常采用点分十进制表示方法X.Y.Y.Y，在这里\",\"X=1~126时称为A类地址，\",\"X=128~191时称为B类地址，\",\"X=192~223时称为C类地址。\",\"如10.202.52.130 因为X=10在1~126范围内所以称为A类地址\"]},\"526\":{\"h\":\"类默认子网掩\",\"t\":[\"A类为255.0.0.0\",\"B类为255.255.0.0\",\"C类为255.255.255.0\",\"当我们要划分子网用到子网掩码M时，类子网掩码的格式应为\",\"A类为255.M.0.0\",\"B类为255.255.M.0\",\"C类为255.255.255.M\",\"M是相应的子网掩码如:255.255.255.240\",\"十进制计算基数：256，等一下我们所有的十进制计算都要用256来进行。\",\"Subnet_block：可分配子网块大小，指在某一子网掩码下的子网的块数。\",\"Subnet_num：实际可分配子网数，指可分配子网块中要剔除首、尾两块，这是某一子网掩码下可分配的实际子网数量,它等于Subnet_block-2。\",\"IP_block：每个子网可分配的IP地址块大小。\",\"IP_num：每个子网实际可分配的IP地址数，因为每个子网的首、尾IP地址必须保留(一个为网络地址，一个为广播地址)，所以它等于IP_block-2，IP_num也用于计算主机段\",\"M:子网掩码(net mask)。它们之间的公式如下:M=256-IP_block\",\"IP_block=256/Subnet_block，反之Subnet_block=256/IP_block\",\"IP_num=IP_block-2\",\"Subnet_num=Subnet_block-2\",\"参考于：子网掩码及主机段的十进制算法.doc - 百度文库 (baidu.com)\",\"已知一个ip地址是192.168.1.1，子网掩码是255.255.255.0，那么它的网络地址是多少？\",\"在了解这个问题之前，我们先需要了解下，什么是网络地址？\",\"ip地址是由两部分组成：网络地址+主机地址。\",\"网络地址可以确定ip地址的范围，ip地址其实跟身份证号比较像。\",\"那么如何来算出网络地址呢？\",\"详细计算\",\"将ip地址192.168.1.1转换为二进制 11000000.10101000.00000001.00000001 将子网掩码255.255.255.0转换成二进制 11111111.11111111.11111111.00000000 然后将两者相“与（and）\\\"运算： 11000000.10101000.00000001.00000001 11111111.11111111.11111111.00000000 然后得到： 11000000.10101000.00000001.00000000 转换成网络地址就是：192.168.1.0 \",\"已知某主机的ip地址是192.168.100.200，子网掩码为255.255.255.192，其网络内可用的ip地址个数为多少？\",\"详细计算\",\"将子网掩码255.255.255.192转换为二进制 11111111.11111111.11111111.11000000 子网掩码共有26位，还有6位可用。 即2的6次方减去2，等于62，即有62个ip地址可用。 \",\"上述计算过程-2是除去一个网络地址，一个组播地址\",\"某公司申请到一个C类IP地址，只连接6个子公司，最大的一个子公司有26台计算机，每个子公司都分配在同一个网段，则子网掩码应设为多少合适？\",\"首先一个C类的子网掩码为255.255.255.0，这个是最原始。\",\"但现在我们是有要求：\",\"1、连接6个子网\",\"2、且最大一个子网的ip地址为26个。\",\"如何来设置这个子网掩码呢？\",\"详细计算\",\"网络中的原则是ip地址与子网掩码越越精准，网络越易管理，故障越低。 192.168.1.0是一个C类地址，子网掩码应该为255.255.255.M，而26主机在16(2^4)与32(2^5)之间，故M取后五位为主机段，前三位为子网段,M=11100000=128+64+32=224 我们再来验证下，每个子网的主机数量。 子网掩码255.255.255.224转化为二进制为： 11111111.11111111.11111111.11100000 子网掩码为27位，那么主机位数为5位。 即可容纳的主机数为2的5次方减2，等于30。 完全符合一个子网内容纳26个ip地址。 所以最终的子网掩码为255.255.255.224 即： 子网掩码为:255,255,255,224,掩码长为24+3=27位. 8个子网的主机块地址分别为: 192.168.1.0----------192.168.1.31 192.168.1.32----------192.168.1.63 192.168.1.64----------192.168.1.95 192.168.1.96----------192.168.1.127 192.168.1.128----------192.168.1.159 192.168.1.160----------192.168.1.191 192.168.1.192----------192.168.1.223 192.168.1.224----------192.168.31.255 又因为每个子网块中可分配的主机块又有首|尾两个不能用(一个是子网网络地址,一个是子网广播地址),所以8个子网的主机块地址分别除去首尾两个,可用地址范围是: 192.168.1.1----------192.168.1.30 192.168.1.33----------192.168.1.62 192.168.1.65----------192.168.1.94 192.168.1.97----------192.168.1.126 192.168.1.129----------192.168.1.158 192.168.1.161----------192.168.1.190 192.168.1.193----------192.168.1.222 192.168.1.225----------192.168.31.254 IP地址：192.168.1.0二进制为： 11000000.10101000.00000001.00000000 掩码：255.255.255.224二进制为：11111111.11111111.11111111.11100000 两者相与得网络地址(全1为1); 11000000.10101000.00000001.00000000 网络地址为:192.168.1.0 广播地址为:192.168.1.255 不过8个子网块中首尾两块不能用,如果你是在实际中用的话,总的主机有8*20=160台,160可以分成5*32台,即5个子网,每个子网32台,主机地址可取下面的任意五个: 192.168.1.33----------192.168.1.62 192.168.1.65----------192.168.1.94 192.168.1.97----------192.168.1.126 192.168.1.129----------192.168.1.158 192.168.1.161----------192.168.1.190 192.168.1.193----------192.168.1.222 \",\"如何计算ip地址和子网掩码是否匹配\",\"子网掩码是用来判断任意两台计算机的IP地址是否属于同一子网络的根据。\",\"最为简单的理解就是两台计算机各自的IP地址与子网掩码进行AND运算后，如果得出的结果是相同的，则说明这两台计算机是处于同一个子网络上的，可以进行直接的通讯。就这么简单。\",\"参考于：计算机网络如何计算有效ip地址个数,知道IP和子网掩码,如何计算可用IP数量和可用的IP地址?..._Runhua Zhao的博客-CSDN博客\",\"10.135.255.19/255.255.255.248的广播地址是什么？\",\"计算思路，要得到广播，先得出网络地址，然后把网络地址的主机位全换成1，便就是广播地址。\",\"详细计算\",\"将ip地址10.135.255.19转换为二进制 00001010.10000111.11111111.00010011 将子网掩码255.255.255.248转换成二进制 11111111.11111111.11111111.11111000 然后将两者相“与（and）\\\"运算： 00001010.10000111.11111111.00010011 11111111.11111111.11111111.11111000 然后得到： 00001010.10000111.11111111.00010000 转换成网络地址就是：10.135.255.16 \",\"那么广播地址是多少呢? 从子网掩码可以看出，这个子网掩码是29位。 11111111.11111111.11111111.11111000 也就是主机数还有3位可用。 00001010.10000111.11111111.00010000 把网络地址的后面三个零全换成1。 即可得出广播地址为：10.135.255.23 \",\"大部分的情况下，我们网络中只要不超过254台主机的的话，子网掩码都可以设置成255.255.255.0。那么超过了254台主机的话怎么办呢？\",\"可以划分vlan（VLAN原理详解_弦苦的博客-CSDN博客_vlan），也可以设置成一个大网段。\",\"设置成一个大网段就有一个难点，如何确定这个大网段里面的子网掩码呢？\",\"示例：\",\"假设监控网络中有600个点位，我们现在也不想把它划分vlan（实际项目中大部分是会划分vlan的），假设只想用一个大网段把这600个点位分配ip地址，如何设置ip地址，如何确实子网掩码？ 分析：首先我们知道600个点位，可以使用3个254个ip地址段来分配。 可以使用 ip段一：192.168.0.1——192.168.0.254 ip段二：192.168.1.1——192.168.1.254 ip段三：192.168.2.1——192.168.2.254 每个网段有254个ip地址，完全够600个点位用的。 那么问题来了，如果要使这三个ip段在同一个网段内，那么这个大网段共同的子网掩码是多少呢？ \",\"我们来分析下： 将ip地址192.168.0.1转换为二进制 11000000 10101000 00000000 00000001 将ip地址192.168.1.1转换为二进制 11000000 10101000 00000001 00000001 将ip地址192.168.2.1转换为二进制 11000000 10101000 00000010 00000001 转换成了二进制，可以看得出，三个ip段的二进制前面22位的是不变的，那么可以将他们表示成： ip段一：192.168.0.1/22 ip段二：192.168.1.1/22 ip段三：192.168.2.1/22 这种192.168.2.x/22形式的ip地址相信大家平时都见过，就是已经告诉了子网掩码了。 也就是说他们共同的子网掩码二进制前面22个都是1。 11111111 11111111 11111100 00000000 转换成十进制，那就是255.255.252.0，所以他们共同的子网掩码就是255.255.252.0。 \"]},\"527\":{\"h\":\"java8新特性\",\"t\":[\"​ 都9102年了，JAVA出到了13.0.1。现在预习一下JAVA8新特性应该还来得及；用代码说话：\",\"Stream（流）是一个来自数据源的元素队列并支持聚合操作\",\"数据源是流的来源。 数据源可以是集合，数组，I/O channel等\",\"优点：\",\"内部迭代：通过访问者模式(Visitor)实现\",\"Pipelining：中间操作都会返回流对象本身\",\"聚合操作：类似SQL语句一样的操作， 比如 filter, map, reduce, find, match, sorted 等\",\"package com.bjut.java8test; import org.junit.Test; import java.util.Arrays; import java.util.IntSummaryStatistics; import java.util.List; import java.util.Random; import java.util.stream.Collectors; public class Java8StreamTest { final List<String> strings = Arrays.asList(\\\"abc\\\", \\\"\\\", \\\"bc\\\", \\\"efg\\\", \\\"abcd\\\", \\\"\\\", \\\"jkl\\\"); final List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5); final Random random = new Random(); @Test public void filter() { // filter 方法过滤出空字符串 List<String> filtered = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.toList()); System.out.println(filtered); } @Test public void forEach() { // Stream 提供了新的方法 'forEach' 来迭代流中的每个数据;limit 方法用于获取指定数量的流 random.ints().limit(10).forEach(System.out::println); } @Test public void map() { // map 方法用于映射每个元素到对应的结果 // 获取对应的平方数, distinct为去重 List<Integer> squaresList = numbers.stream().map(i -> i * i).distinct().collect(Collectors.toList()); System.out.println(squaresList); } @Test public void sorted() { // sorted 方法用于对流进行排序 random.ints().limit(10).sorted().forEach(System.out::println); } @Test public void parallel() { // 获取空字符串的数量 long count = strings.parallelStream().filter(string -> string.isEmpty()).count(); System.out.println(count); } @Test public void join() { // 类似于 // jdk：String mergedString = String.join(\\\",\\\", strings); // common.lang3：String mergedString = StringUtils.join(strings); String mergedString = strings.stream().filter(string -> !string.isEmpty()).collect(Collectors.joining(\\\",\\\")); System.out.println(mergedString); } @Test public void statistics(){ // 一些产生统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上 List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5); IntSummaryStatistics stats = numbers.stream().mapToInt((x) -> x).summaryStatistics(); System.out.println(\\\"列表中最大的数 : \\\" + stats.getMax()); System.out.println(\\\"列表中最小的数 : \\\" + stats.getMin()); System.out.println(\\\"所有数之和 : \\\" + stats.getSum()); System.out.println(\\\"平均数 : \\\" + stats.getAverage()); } } \",\"方法引用\",\"方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。\",\"package com.bjut.java8test; @FunctionalInterface public interface Supplier<T>{ T get(); } \",\"package com.bjut.java8test; public class Car { // Supplier是jdk1.8的接口，这里和lamda一起使用了 public static Car create(final Supplier<Car> supplier) { return supplier.get(); } public static void collide(final Car car) { System.out.println(\\\"Colloded\\\" + car.toString()); } public void follow(final Car another) { System.out.println(\\\"Following the\\\" + another.toString()); } public void repair() { System.out.println(\\\"Repaired\\\" + this.toString()); } } \",\"package com.bjut.java8test; import org.junit.Test; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class Java8QuoteTest { final Car car = Car.create(Car::new); final List<Car> cars = Arrays.asList(car); final Car police = Car.create(Car::new); @Test public void quoteType() { // 静态方法引用：它的语法是Class::static_method，实例如下： cars.forEach(Car::collide); // 特定类的任意对象的方法引用：它的语法是Class::method实例如下： cars.forEach(Car::repair); // 特定对象的方法引用：它的语法是instance::method实例如下： cars.forEach(police::follow); } @Test public void quoteExample(){ List<String> names = new ArrayList<>(50); names.add(\\\"hello\\\"); names.add(\\\"world\\\"); names.add(\\\"ni\\\"); names.add(\\\"hao\\\"); names.forEach(System.out::println); } } \",\"默认方法 − 默认方法就是一个在接口里面有了一个实现的方法。\",\"package com.bjut.java8test; public interface Java8DefaultInterface { default void print(){ System.out.println(\\\"默认方法\\\"); } } \",\"package com.bjut.java8test; import org.junit.Test; /** * 测试接口默认方法 */ public class Java8DefaultInterfaceTest implements Java8DefaultInterface{ @Test public void test(){ Java8DefaultInterface defaultInterface = new Java8DefaultInterfaceTest(); defaultInterface.print(); } } \",\"加强对日期与时间的处理。\",\"package com.bjut.java8test; import org.junit.Test; import java.time.*; public class Java8DateTest { LocalDateTime currentTime = LocalDateTime.now(); @Test public void testLocalDateTime() { // 获取服务器当前的日期时间 System.out.println(\\\"时间\\\" + currentTime); // 获取服务器当前日期 LocalDate date1 = currentTime.toLocalDate(); System.out.println(\\\"date1: \\\" + date1); // 获取服务器某月某天 Month month = currentTime.getMonth(); int day = currentTime.getDayOfMonth(); int seconds = currentTime.getSecond(); System.out.println(\\\"月: \\\" + month + \\\", 日: \\\" + day + \\\", 秒: \\\" + seconds); } @Test public void testStructDateTime() { LocalDateTime date2 = currentTime.withDayOfMonth(12).withYear(2012); System.out.println(\\\"date2\\\" + date2); // 23 december 2014 LocalDate date3 = LocalDate.of(2014, Month.DECEMBER, 23); System.out.println(\\\"date3\\\" + date3); // 22 小时 15 分钟 LocalTime date4 = LocalTime.of(22, 15); System.out.println(\\\"date4: \\\" + date4); // 解析字符串 LocalTime date5 = LocalTime.parse(\\\"20:15:30\\\"); System.out.println(\\\"date5: \\\" + date5); } @Test public void testZonedDateTime() { // 获取当前时间日期 ZonedDateTime date1 = ZonedDateTime.parse(\\\"2015-12-03T10:15:30+05:30[Asia/Shanghai]\\\"); System.out.println(\\\"date1: \\\" + date1); ZoneId id = ZoneId.of(\\\"Europe/Paris\\\"); System.out.println(\\\"ZoneId: \\\" + id); ZoneId currentZone = ZoneId.systemDefault(); System.out.println(\\\"当期时区: \\\" + currentZone); } } \",\"Optional 类是一个可以为null的容器对象。优雅的解决null问题：我平时好像都是类似于 StringUtils.isBlank()\",\"JAVA9在它的基础上又增加了3个方法\",\"package com.bjut.java8test; import org.junit.Test; import java.util.Optional; public class java8OptionalTest { @Test public void testOptional() { Integer value1 = null; Integer value2 = new Integer(10); // Optional.ofNullable -允许传递null参数 Optional<Integer> a = Optional.ofNullable(value1); // Optional.of - 如果传递的参数是null ， 抛出异常NullPointerException Optional<Integer> b = Optional.of(value2); System.out.println(sum(a, b)); } private Integer sum(Optional<Integer> a, Optional<Integer> b) { // Optional.isPresent - 判断值是否存在 System.out.println(\\\"第一个参数值存在\\\" + a.isPresent()); System.out.println(\\\"第二个参数值存在\\\" + b.isPresent()); // Option.orElse - 如果值存在，返回它，否则返回默认值 Integer value1 = a.orElse(new Integer(0)); // Optional.get - 获取值，值需要存在 Integer value2 = b.get(); return value1 + value2; } } \",\"参考文献：https://www.runoob.com/java/java8-new-features.html\"]},\"528\":{\"h\":\"java中的Queue队列\",\"t\":[\"​ Queue： 基本上，一个队列就是一个先入先出（FIFO）的数据结构 ​ Queue接口与List、Set同一级别，都是继承了Collection接口。LinkedList实现了Deque接 口。\",\"一个是以ConcurrentLinkedQueue为代表的高性能队列； 一个是以BlockingQueue接口为代表的阻塞队列；\"]},\"529\":{\"h\":\"（1）没有实现的阻塞接口队列\",\"t\":[\"​ 没有实现的阻塞接口的LinkedList： 实现了java.util.Queue接口和java.util.AbstractQueue接口 内置的两个不阻塞队列： PriorityQueue 和 ConcurrentLinkedQueue\",\"PriorityQueue 和 ConcurrentLinkedQueue 类在 Collection Framework 中加入两个具体集合实现。\",\"PriorityQueue 类实质上维护了一个有序列表。加入到 Queue 中的元素根据它们的天然排序（通过其 java.util.Comparable 实现）或者根据传递给构造函数的 java.util.Comparator 实现来定位\",\"ConcurrentLinkedQueue 是基于链接节点的、线程安全的队列。并发访问不需要同步。因为它在队列的尾部添加元素并从头部删除它们，所以只要不需要知道队列的大小，\",\"ConcurrentLinkedQueue 对公共集合的共享访问就可以工作得很好。收集关于队列大小的信息会很慢，需要遍历队列。\"]},\"530\":{\"h\":\"（2）实现阻塞接口的队列\",\"t\":[\"java.util.concurrent 中加入了 BlockingQueue 接口和五个阻塞队列类。它实质上就是一种带有一点扭曲的 FIFO 数据结构。不是立即从队列中添加或者删除元素，线程执行操作阻塞，直到有空间或者元素可用。 五个队列所提供的各有不同：\",\"* ArrayBlockingQueue ：一个由数组支持的有界队列。 * LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。 * PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。 * DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。 * SynchronousQueue ：一个利用 BlockingQueue 接口的简单聚集（rendezvous）机制。\",\"image-20201214130757812\",\"/** * ConcurrentLinkedQueue : 是一个适用于高并发场景下的队列，通过无锁的方式，实现了高并发状态下的高性能，通常ConcurrentLinkedQueue性能好于BlockingQueue。 * 它是一个基于链接节点的无界线程安全队列。该队列的元素遵循先进先出的原则。 * 头是最先加入的，尾是最近加入的，该队列不允许null元素。 * */ public class ConcurrentLinkedQueueDemo { private static ConcurrentLinkedQueue q = new ConcurrentLinkedQueue(); public static void main(String[] args) { q.offer(\\\"张三\\\"); q.offer(\\\"李四\\\"); q.offer(\\\"王五\\\"); q.offer(\\\"赵六\\\"); // 从头获取元素,删除该元素 System.out.println(q.poll()); // 从头获取元素,不刪除该元素 System.out.println(q.peek()); // 获取总长度 System.out.println(q.size()); } } \",\"定义： 阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作是： 1、在队列为空时，获取元素的线程会等待队列变为非空。 2、当队列满时，存储元素的线程会等待队列可用。 阻塞队列是线程安全的。 用途： 阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。\",\"​ 阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。\"]},\"531\":{\"h\":\"1）ArrayBlockingQueue\",\"t\":[\"/** * ArrayBlockingQueue是一个有边界的阻塞队列，它的内部实现是一个数组。 * 有边界的意思是它的容量是有限的，我们必须在其初始化的时候指定它的容量大小，容量大小一旦指定就不可改变。 * ArrayBlockingQueue是以先进先出的方式存储数据，最新插入的对象是尾部，最新移出的对象是头部。 * */ public class ArrayBlockingQueueDemo { public static void main(String[] args) { // 初始化3个队列 ArrayBlockingQueue array = new ArrayBlockingQueue(3); array.add(\\\"张三\\\"); array.add(\\\"李四\\\"); array.add(\\\"王五\\\"); try { // 添加阻塞队列 boolean a = array.offer(\\\"赵六\\\", 1, TimeUnit.SECONDS); System.out.println(a); } catch (InterruptedException e) { e.printStackTrace(); } } } \"]},\"532\":{\"h\":\"2）LinkedBlockingQueue\",\"t\":[\"/** * LinkedBlockingQueue阻塞队列大小的配置是可选的， * 如果我们初始化时指定一个大小，它就是有边界的，如果不指定，它就是无边界的。 * 说是无边界，其实是采用了默认大小为Integer.MAX_VALUE的容量。它的内部实现是一个链表。 * 和ArrayBlockingQueue一样，LinkedBlockingQueue 也是以先进先出的方式存储数据，最新插入的对象是尾部，最新移出的对象是头部。 * */ public class LinkedBlockingQueueDemo { public static void main(String[] args) { // 初始化 LinkedBlockingQueue lbq = new LinkedBlockingQueue(3); lbq.add(\\\"张三\\\"); lbq.add(\\\"李四\\\"); lbq.add(\\\"李四\\\"); // 运行结果：3 System.out.println(lbq.size()); } } \"]},\"533\":{\"h\":\"3）PriorityBlockingQueue\",\"t\":[\"/** * 实现原理：PriorityBlockingQueue通过使用堆这种数据结构实现将队列中的元素按照某种排序规则进行排序，从而改变先进先出的队列顺序 * <p> * PriorityBlockingQueue是一个没有边界的队列，它的排序规则和 java.util.PriorityQueue一样。需要注意，PriorityBlockingQueue中允许插入null对象。 * 所有插入PriorityBlockingQueue的对象必须实现 java.lang.Comparable接口，队列优先级的排序规则就是按照我们对这个接口的实现来定义的。 * 另外，我们可以从PriorityBlockingQueue获得一个迭代器Iterator，但这个迭代器并不保证按照优先级顺序进行迭代。 * <p> * add方法添加元素时，是自下而上的调整堆，取出元素时，是自上而下的调整堆顺序； * * @Author: zhengtianqi * @Date: 2019/7/8 15:54 */ public class PriorityBlockingQueueDemo { public static void main(String[] args) { PriorityBlockingQueue<Task> q = new PriorityBlockingQueue<>(); Task t1 = new Task(); Task t2 = new Task(); Task t3 = new Task(); t1.setId(2); t2.setId(3); t3.setId(1); t1.setName(\\\"id为2\\\"); t2.setName(\\\"id为3\\\"); t3.setName(\\\"id为1\\\"); q.add(t1); q.add(t2); q.add(t3); try { System.out.println(\\\"容器：\\\" + q); System.out.println(q.take().getId()); System.out.println(\\\"容器：\\\" + q); } catch (InterruptedException e) { e.printStackTrace(); } } public static class Task implements Comparable<Task> { private int id; private String name; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } @Override public int compareTo(Task task) { return this.id > task.id ? 1 : (this.id < task.id ? -1 : 0); } @Override public String toString() { return this.id + \\\",\\\" + this.name; } } } \"]},\"534\":{\"h\":\"4）SynchronousQueue\",\"t\":[\"https://blog.51cto.com/14220760/2416470?source=dra\"]},\"535\":{\"h\":\"java操作txt文件总结\"},\"536\":{\"h\":\"（1）Java.io包\"},\"537\":{\"h\":\"File类\",\"t\":[\"这是Java中一个内置的包，专门用于文件读写的一个操作的类 在程序中使用 文件或者流的操作就要导入import java.io.*;\",\"File类可以表示一个文件，还可以表示一个目录（Directory），所以我们可以在程序中用File 类的对象可以表示一个文件 或者 目录 当创建了 File 对象之后，我们可以利用该对象来对文件或者目录进行书属性修改：例如：文件的名称，修改日期的日期等等 File 类的对象 还不能直接对文件进行读写操作，只能修改文件的属性\",\"示例： 1、本地文件读取\",\"import java.io.*; public class FileDemo { public static void main(String[] args) { File f1=new File(\\\"src\\\\\\\\aa.txt\\\");//相对路径，如果没有前面的src，就在当前目录创建文件 if(f1.exists()) { System.out.println(\\\"文件已经存在\\\"); }else { try { f1.createNewFile(); System.out.println(\\\"文件创建成功\\\"); } catch (Exception e) { // TODO: handle exception } } System.out.println(\\\"文件已经存在:\\\"+f1.exists()); System.out.println(\\\"文件的名字:\\\"+f1.getName()); System.out.println(\\\"文件的路径:\\\"+f1.getPath()); System.out.println(\\\"文件的绝对路径:\\\"+f1.getAbsolutePath()); System.out.println(\\\"是目录吗:\\\"+f1.isDirectory()); System.out.println(\\\"文件大小:\\\"+f1.length()); } } \",\"2、网络文件读取\",\"import java.io.File; import java.net.*; public class Main { public static void main(String[] args) throws Exception { File file = new File(new URI(\\\"https://test.com/test.txt\\\")); } } \"]},\"538\":{\"h\":\"（2）Stream流（字节流）\",\"t\":[\"流是指一连串流动的数据信号，通过FiFO(先进先出) 的方式接收和发送数据\",\"数据流又分为输入流和输出流 输入输出流又分为字节流和字符流 字节流：以字节为基本单位 , 在 java.io包中，大部分操作继承InputStream（输入字节流）类和OutputStream（输出字节流）类 字符流：两个字节为基本单位，专门处理字符串和文本，对于字符流进行操作的类主要是Reader（读取流）类和 Writer（写入流）类。\"]},\"539\":{\"h\":\"使用FileInputStream和FileOutputStream类\",\"t\":[\"继承于InputStream类，这是一个文件输入流，进行文件读操作的最基本的类 作用是将文件中的数据输入到内存中，我们可以用它来读文件操作 由于字节流的缘故，因此无法读取中文字符 示例如下：\",\"import java.io.*; public class FileStreamDemo { public static void main(String[] args) { try { File file=new File(\\\"src\\\\\\\\aa.txt\\\"); FileInputStream f1=new FileInputStream(file);//这里需要进行抛出异常处理 for (int i = 0; i < file.length(); i++) { char ch=(char)(f1.read());//循环读取字符 System.out.print(ch+\\\" \\\"); } System.out.println();//换行操作 f1.close();//关闭文件 } catch (Exception e) { // TODO: handle exception System.out.println(\\\"文件打开失败\\\"); } } } \",\"FileOutputStream类称为文件输出流，继承于OutputStream类，是文件的基本读写的一个类 它的作用和上面读文件恰恰相反，将内存中的数据输出到文件中，所以我们可以用这个类来进行写文件的操作 我们先按aa,txt文件的内容清空，然后实现下边的代码进行写操作 示例如下：\",\"import java.io.*; public class FileOuputDemo { public static void main(String[] args) throws FileNotFoundException { File file=new File(\\\"src\\\\\\\\aa.txt\\\"); FileOutputStream f1=new FileOutputStream(file);//(file,true)，这里有true的话，代表可以在文件后面追加内容 String str=\\\"I love coding\\\"; byte[] buff=str.getBytes();//将字符串转换为字节数组 try { f1.write(buff);//把字节数组的内容写进去文件 } catch (Exception e) { // TODO: handle exception }finally { try { f1.close(); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } } } \",\"FileInputStream类 和 FileOutputStream类总是成对出现的，一个用作输入流，另一个自然是输出流 我们在输入流中使用 byte（字节）数组 来存储我们的数据，因此我们不必考虑数据格式，所以说这两种操作的效率会比较高\"]},\"540\":{\"h\":\"（3）Stream流（字符流）\"},\"541\":{\"h\":\"FileWriter类 与 BufferedWriter类使用\",\"t\":[\"前面我们FileInputStream时，使用的是字节流，但是有个问题无法解决，它只能读取英文字符，而中文字符是无法读取的，会出现奇怪的东西。\",\"import java.io.*; public class FileWriterDemo { public static void main(String[] args) { String[] str= {\\\"春眠不觉晓,\\\",\\\"处处闻啼鸟,\\\",\\\"夜来风雨声,\\\",\\\"花落知多少,\\\"}; File file=new File(\\\"src\\\\\\\\cc.txt\\\");//我们在该类的位置创建一个新文件 FileWriter f=null;//创建文件写入对象 BufferedWriter f1=null;//创建字符流写入对象 try { //这里把文件写入对象和字符流写入对象分开写了 f=new FileWriter(\\\"src\\\\\\\\cc.txt\\\");//创建一个名为cc.txt的文件 f1=new BufferedWriter(f); //通过循环遍历上面的String 数组中的元素 for (int i = 0; i < str.length; i++) { f1.write(str[i]);//把String中的字符写入文件 f1.newLine();//换行操作 } } catch (Exception e) { // TODO: handle exception }finally {//如果没有catch 异常，程序最终会执行到这里 try { f1.close(); f.close();//关闭文件 } catch (Exception e2) { // TODO: handle exception } } } } \"]},\"542\":{\"h\":\"FileReader和BufferedReader类使用\",\"t\":[\"读取上面写入文件的数据\",\"import java.io.*; public class FileReaderDemo { public static void main(String[] args) { File file=new File(\\\"src\\\\\\\\cc.txt\\\"); FileReader f=null;//文件读取对象 BufferedReader f1=null;//字符流对象 try { f=new FileReader(file); f1=new BufferedReader(f); //循环打印cc文件中的每行数据 String str=null; while((str=f1.readLine())!=null) { System.out.println(str); } } catch (Exception e) { // TODO: handle exception }finally { try { f1.close(); f.close(); } catch (Exception e2) { // TODO: handle exception } } } } \"]},\"543\":{\"h\":\"（4）序列化与反序列化\",\"t\":[\"简化成一句话、序列化是把Java对象存在一个硬盘，网络，以便传输 也就是把我们的数据永久的存放到计算机当中\"]},\"544\":{\"h\":\"序列化利用FileOutputStream和ObjectOutputStream类\",\"t\":[\"import java.io.*; import java.util.*; /** * 序列化操作 * */ public class Xl { public static void main(String[] args) { //数据完成持久化的操作 List<String> list=new ArrayList<String>(); list.add(\\\"aaa\\\"); list.add(\\\"bbb\\\"); list.add(\\\"ccc\\\"); FileOutputStream f1=null; ObjectOutputStream f2=null; try { //第一行省略了前面的 File file = new File(~)的操作，直接创建一个文件 f1=new FileOutputStream(new File(\\\"src\\\\\\\\dd.txt\\\")); f2=new ObjectOutputStream(f1); f2.writeObject(list); } catch (Exception e) { // TODO: handle exception }finally { try { f2.close(); f1.close(); } catch (Exception e2) { // TODO: handle exception } } } \"]},\"545\":{\"h\":\"反序列化利用FileInputStream和ObjectInputStream类\",\"t\":[\"如果我们读入的是字符流数据，在反序列化的操作，我们需要实现Serializable接口\",\"import java.io.*; import java.util.*; //反序列化操作 public class FXL { public static void main(String[] args) { FileInputStream f=null; ObjectInputStream f1=null; List list=null; try { f=new FileInputStream(\\\"src\\\\\\\\dd.txt\\\");//对应我们前面往输入dd.txt 文件的内容 f1=new ObjectInputStream(f); list=(List<String>)f1.readObject(); } catch (Exception e) { // TODO: handle exception }finally { try { f1.close(); f.close(); } catch (Exception e2) { // TODO: handle exception } } //这种方法就不必循环打印数据了，可以一步到位 System.out.println(list); } } \"]},\"546\":{\"h\":\"（1）读取文件为流\",\"t\":[\"byte[] fileBytes = org.apache.commons.io.FileUtils.readFileToByteArray(new File(\\\"fileName\\\")); \"]},\"547\":{\"h\":\"（2）写入字节流到文件\",\"t\":[\"org.apache.commons.io.FileUtils.writeByteArrayToFile(new File(\\\"fileName\\\"), fileBytes); \"]},\"548\":{\"h\":\"（3）commons-io中用一行代码实现文件读写操作：\",\"t\":[\"private static void readFile() { try { List<String> lines = org.apache.commons.io.FileUtils.readLines(new File(\\\"D:\\\\\\\\rowkey.txt\\\")); for (String line : lines) { System.out.println(line); } } catch (IOException e) { e.printStackTrace(); } } private static void writeFile() { List<String> list = new ArrayList<>(); list.add(\\\"123\\\"); list.add(\\\"456\\\"); list.add(\\\"789\\\"); try { org.apache.commons.io.FileUtils.writeLines(new File(\\\"D:\\\\\\\\id.txt\\\"), list, true); } catch (IOException e) { e.printStackTrace(); } } \"]},\"549\":{\"h\":\"JAVA数据类型易混概念\",\"t\":[\"1、整型\",\"​ 在 Java 中 ， 整型的范围与运行 Java 代码的机器无关 。\",\"​ \",\"​ 在通常情况下， int类型最常用。 但如果表示星球上的居住人数 ，就需要使用 long 类型了。byte 和 short 类型主要用于特定的应用场合 ，例如 ，底层的文件处理或者需要控制占用存储空间量的大数组 。\",\"​ 长整型数值有一个后缀 L 或 1 ( 如 4000000000 L ) 。\",\"​ 十六进制数值有一个前缀 0x 或 0X ( 如0xCAFE）。\",\"​ 八进制有一个前缀 0 ,例如 ， 010 对应八进制中的 8。（很容易混淆，不建议使用）\",\"​ 从 Java 7 开始 ， 加上前缀 0b 或 0B 就可以写二进制数 。 例如 ，0b1001就是 9 。\",\"​ 从 Java 7 开始， 还可以为数字字面量加下划线 ， 如用1_000_000这些下划线只是为丫让人更易读 。Java编译器会去除这些下划线。 ( 或0b1111_0100_0010_0100_0000表示一百万）\",\"2、浮点型\",\"image-20200106150945185\",\"​ double 表示这种类型的数值精度是 float 类型的两倍 （ 有人称之为双精度数值 )\",\"很多情况下，不使用float。\",\"​ float 类型的数值有一个后缀 F 或 f ( 例如，3.14 F ) 。没有后缀 F的浮点数值 （ 如 3.14 ) 默认为 double 类型。当然 ， 也可以在浮点数值后面添加后缀 D 或 d（例如，3.14D）\",\"三个常量值：Double _ POSITIVE _ INFINITY 、 Double . NEGATIVEJNFINITY 和 Double . NaN\",\"public class ConstantTest { public static void main(String[] args) { System.out.println(\\\"Double.POSITIVE_INFINITY = \\\" + 1.0 / 0.0); System.out.println(\\\"Double.NEGATIVE_INFINITY = \\\" + -1.0 / 0.0); System.out.println(\\\"Double.NaN = \\\" + 0.0d / 0.0); System.out.println(Double.class); // 如果得到一个完全可预测的结果比运行速度更重要的话， 那么就应该使用StrictMath类 遵循IEEE 754 System.out.println(StrictMath.max(1, 2)); } } \",\"​ Warning：浮点数值不适用于无法接受舍入误差的金融计算中。如果在数值计算中不允许有任何舍入误差 ， 就应该使用 BigDecimal类。\",\"3、char类型\",\"​ char 类型原本用于表示单个字符。不过 ，现在情况已经有所变化 。如今，有些 Unicode字符可以用一个 char 值描述， 另外一些 Unicode 字符则需要两个char 值。\",\"image-20200106152036190\",\"​ Unicode 打破了传统字符编码机制的限制，解决世界上文字编码不一致的问题。在设计 Java 时决定采用16 位的 Unicode 字符集， 这样会比使用 8 位字符集的程序设计语言有很大的改进。现在 ， 16 位的 char 类型已经不能满足描述所有 Unicode 字符的需要了，利用码点解决。\",\"​ 最好不使用char类型，除非确定需要处理UTF-16代码单元。\",\"4、boolean 类型\",\"​ boolean（布尔）有两个值：true 或 false，与整型不能进行相互转换。\",\"5、数值类型之间的转换\",\"​ 在图3-1中有 6 个实心箭头 ，表示无信息丢失的转换 ；\",\"​ 有 3 个虚箭头 ， 表示可能有精度损失的转换。\",\"image-20200106160423586\",\"​ 如果两个操作数中有一个是 double类型 ， 另一个操作数就会转换为 double 类型。 ​ 否则 ， 如果其中一个操作数是 float 类型 ， 另一个操作数将会转换为 float 类型 。 ​ 否则 ，如果其中一个操作数是 long 类型， 另一个操作数将会转换为 long 类型 。 ​ 否则 ， 两个操作数都将被转换为 int 类型 。\",\"​ 强制转换也会造成精度丢失。\",\"​ 例如 ： ​ double x * 9.997 ; ​ int nx = ( int ) x ; ​ 这样 ， 变量 nx 的值为 9\",\"6、java.math下有两个很有用的类\",\"​ BigInteger 和 BigDecimal：\",\"​ Biglnteger 类实现了任意精度的整数运算 ， BigDecimal 实现了任意精度的浮点数运\",\"​ 使用静态的valueOf 方法可以将普通的数值转换为大数值：\",\"​ Biglnteger a = Biglnteger . valueOf ( 100 ) ;\",\"​\\t\\t大数值类中的 add 和 multiply 方法 。\\n​\\t\\t\\t\\tBiglnteger c = a.add ( b ) ;  / / c = a + b\\n​\\t\\t\\t\\tBiglnteger d = c.multiply(b.add(Biglnteger.valueOf (2))) ;  // d = c * ( b + 2 )\"]},\"550\":{\"h\":\"JDK并发包常用类\",\"t\":[\"提供并发控制手段: CountDownLatch、CyclicBarrier、Semaphore\",\"线程间数据交换: Exchanger\"]},\"551\":{\"h\":\"CountDownLatch：\",\"t\":[\"允许一个或多个线程等待其他线程完成操作。\",\"CountDownLatch的构造函数接受一个int类型的参数作为计数器，你想等待n个点完成，就传入n。\",\"两个重要的方法:\",\"countDown()：调用时，n会减1。\",\"await()：调用会阻塞当前线程，直到n变成0。\",\"await(long time,TimeUnit unit)：等待特定时间后，就不会继续阻塞当前线程。\",\"tips:计数器必须大于等于0，当为0时，await就不会阻塞当前线程。\",\"不提供重新初始化或修改内部计数器的值的功能。\"]},\"552\":{\"h\":\"CyclicBarrier\",\"t\":[\"可循环使用的屏障。\",\"让一组线程到达一个屏障（也可以叫同步点)时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。\",\"CyclicBarrier默认构造放时CyclicBarrier(int parities) ,其参数表示屏障拦截的线程数量，每个线程调用await方法告诉CyclicBarrier我已经到达屏障，然后当前线程被阻塞。\",\"// 王者荣耀需要10个玩家 CyclicBarrier cyclicBarrier = new CyclicBarrier(3, new Runnable() { @Override public void run() // 这是玩家都到齐之后会执行的代码 System.out.println(\\\"10人都已到达游戏战场\\\") } }); // 定义10线程，相当于10个玩家 for (int i = 0; i < 10; i++) { final int finalI = i; new Thread(new Runnable() { @Override public void run() { try { // 模拟每人到游戏战场所需时间 Thread.sleep((long) (Math.random()*5000)); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"第\\\"+Thread.currentThread().getName()+\\\"个人到达游戏战场\\\"); try { // 等待其他人到达游戏战场 cyclicBarrier.await(); } catch (InterruptedException e) { e.printStackTrace(); } catch (BrokenBarrierException e) { e.printStackTrace(); } System.out.println(Thread.currentThread().getName()+\\\"比赛开始\\\"); } }, String.valueOf(finalI)).start(); } \"]},\"553\":{\"h\":\"CountDownLatch和CyclicBarrier区别\",\"t\":[\"countDownLatch：\",\"计数器：计数器只能使用一次。\",\"等待：一个线程或多个等待另外n个线程完成之后才能执行。\",\"CyclicBarrier：\",\"计数器：计数器可以重置(通过reset()方法)。\",\"等待：n个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。\"]},\"554\":{\"h\":\"Semaphore\",\"t\":[\"用来控制同时访问资源的线程数量，通过协调各个线程，来保证合理的公共资源的访问。\",\"应用场景:流量控制，特别是公共资源有限的应用场景，比如数据链接，限流等。\",\"Semaphore semaphore = new Semaphore(10,true); semaphore.acquire(); //do something here semaphore.release(); \",\"public class TestCar { // 停车场同时容纳的车辆10 private static Semaphore semaphore=new Semaphore(10); public static void main(String[] args) { // 模拟100辆车进入停车场 for(int i=0;i<100;i++){ Thread thread=new Thread(new Runnable() { public void run() { try { System.out.println(\\\"====\\\"+Thread.currentThread().getName()+\\\"来到停车场\\\"); if(semaphore.availablePermits()==0){ System.out.println(\\\"车位不足，请耐心等待\\\"); } //获取令牌尝试进入停车场 semaphore.acquire(); System.out.println(Thread.currentThread().getName()+\\\"成功进入停车场\\\"); //模拟车辆在停车场停留的时间 Thread.sleep(new Random().nextInt(10000)); System.out.println(Thread.currentThread().getName()+\\\"驶出停车场\\\"); //释放令牌，腾出停车场车位 semaphore.release(); } catch (InterruptedException e) { e.printStackTrace(); } } },i+\\\"号车\\\"); thread.start(); } } } \"]},\"555\":{\"h\":\"Exchanger\",\"t\":[\"Exchanger是一个用于线程间协作的工具类，它提供一个同步点，在这个同步点上，两个线程可以交换彼此的数据。\",\"比如第一个线程执行exchange()方法，它会一直等待第二个线程也执行exchange，当两个线程都到同步点，就可以交换数据了。\",\"一般来说为了避免一直等待的情况，可以使用exchange( x,long timeout,TimeUnit unit),设置最大等待时间。Exchanger可以用于遗传算法。\"]},\"556\":{\"h\":\"JVM内存结构\",\"t\":[\"用于存储虚拟机加载的 类信息，常量，静态变量等数据。\",\"存放对象实例，所有的对象和数组都要在堆上分配，是 JVM 所管理的内存最大的一块区域。\",\"Java 方法执行的内存模型：存储局部变量表、操作数栈、动态链接、方法出口灯信息。\",\"生命周期与线程相同。\",\"作用与虚拟机栈类似，不同点本地方法栈为 native 方法执行服务，虚拟机栈为虚拟机执行的 java方法服务。\",\"当前线程所执行的行号指示器。是 JVM 内存区域最小的一块区域。执行字节码工作时就是利用程序计数器来选取下一条需要执行的字节码指令。\"]},\"557\":{\"h\":\"JVM垃圾回收算法\",\"t\":[\"​ 标记无用对象，然后进行清除回收。\",\"​ 缺点：效率不高，无法清除垃圾碎片。\",\"image-20200918092639589\",\"​ 按照容量划分二个大小相等的内存区域，每次使用其中的一块。当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉。这样就使每次的内存回收都是对内存区间的一半进行回收。\",\"​ 缺点：内存使用率不高，只有原来的一半\",\"image-20200918092729361\",\"​ 标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存\",\"image-20200918092801239\",\"​ 根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代；\",\"​ 新生代基本采用复制算法;\",\"​ 老年代采用标记整理算法。\",\"​ 新生代：朝生夕灭的对象（例如：方法的局部变量引用的对象等）。\",\"​ 老年代：存活得比较久，但还是要死的对象（例如：缓存对象、单例对象等）。\",\"​ 永久代：对象生成后几乎不灭的对象（例如：加载过的类信息）。\",\"image-20200918094003026\",\"·································································\",\"堆大小 = 新生代 + 老年代\",\"新生代与老年代的比例 = 1：2\"]},\"558\":{\"h\":\"JVM性能优化整理\",\"t\":[\"1、类加载过程\",\"​ Java语言是一种具有动态性的解释型语言，类(Class)只有被加载到JVM后才能运行。当运行指定程序时，JVM会将编译生成的.class文件按照需求和一定的规则加载到内存中，并组织成为一个完整的Java应用程序。\",\"​ 这个加载过程是由类加载器完成，具体来说，就是由ClassLoader和它的子类来实现的。类加载器本身也是一个类，其实质是把类文件从硬盘读取到内存中。\",\"​ 类的加载方式分为隐式加载和显示加载。隐式加载指的是程序在使用new等方式创建对象时，会隐式地调用类的加载器把对应的类加载到JVM中。显示加载指的是通过直接调用class.forName()方法来把所需的类加载到JVM中。\",\"7个阶段：加载-验证-准备-解析-初始化-使用-卸载\",\"（1）加载\",\"加载是类加载的第一个过程，在这个阶段，将完成一下三件事情:\",\"​ 通过一个类的全限定名获取该类的二进制流。\",\"​ 将该二进制流中的静态存储结构转化为方法去运行时数据结构。\",\"​ 在内存中生成该类的Class 对象，作为该类的数据访问入口。\",\"（2）验证\",\"验证的目的是为了确保Class 文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证: 文件格式验证∶验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.\",\"​ 元数据验证∶对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。 ​ 字节码验证∶是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如∶方法中的类型转换是否正确，跳转指令是否正确等。\",\"​ 符号引用验证∶这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。\",\"（3）解析\",\"​ 该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。\",\"（4）初始化\",\"​ 初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中的定义的java程序代码。\",\"（6）使用\",\"（7）卸载\",\"2、GC对象的判定方法\",\"（1）引用计数法\",\"​ 引用对象时，计数器+1；引用失效时，计数器-1。无法解决循环引用问题。\",\"（2）可达性算法（引用链法）\",\"该算法的思想是: 从一个被称为GC Roots的对象开始向下搜索，如果一个对象到GC Roots没有任何引用链相连时，则说明此对象不可用。（有向图进行管理）\",\"在Java中可以作为GC Roots 的对象有以下几种:\",\"虚拟机栈中引用的对象、方法区类静态属性引用的对象、方法区常量池引用的对象、本地方法栈JNI引用的对象\",\"3、java内存泄露\",\"​ 所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。Java中有垃圾回收机制，它可以保证一对象不再被引用的时候，即对象变成了孤儿的时候，对象将自动被垃圾回收器从内存中清除掉。\",\"​ 由于Java使用有向图的方式进行垃圾回收管理,可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的。\",\"​ Java 中的内存泄露的情况:长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是Java中内存泄露的发生场景。\",\"​ 通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中(例如放在一个全局map对象中)，然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。。\",\"​ 检查Java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。\",\"​ 如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存?不会，在下一个垃圾回收周期中，这个对象将是可被回收的。\",\"4、深拷贝和浅拷贝\",\"​ 浅拷贝就是对对象中的数据成员进行简单赋值，如果存在动态成员或者指针就会报错。 ​ 深拷贝就是对对象中存在的动态成员或指针重新开辟内存空间。\",\"5、类加载器\",\"实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。主要有一下四种类加载器: （1）启动类加载器(BootstrapClassLoader)用来加载Java核心类库，无法被Java程序直接引用。 （2）扩展类加载器(extensions class loader):它用来加载Java 的扩展库。Java虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载Java类。\",\"​ （3）系统类加载器(system class loader):它根据Java应用的类路径 (CLASSPATH)来加载Java类。一般来说,Java应用的类都是由它来完成加载的。可以通过ClassLoader.getSystemClassLoader()来获取它。 ​ （4）用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。\",\"6、类加载器双亲委派模型\",\"​\\t\\t当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。\"]},\"559\":{\"h\":\"JVM类加载过程\",\"t\":[\"image-20200927113941669\",\"image-20210807123832574\",\"类的加载，分为三步：\",\"（1）通过一个类的全限定名获取该类的二进制流\",\"（2）将该二进制流中的静态存储结构转化为方法去运行时数据结构\",\"（3）在内存中生成该类的Class对象，作为该类的数据访问入口\",\"验证的目的是为了确保Class文件的字节流的信息不会危害到虚拟机，分为四步：\"]},\"560\":{\"h\":\"（1）文件格式验证：\",\"t\":[\"验证字节流是否符合 Class 文件的规范，如：主次版本号是否在当前虚拟机范围内，常量池中收到常量是否有不被支持的类型。\"]},\"561\":{\"h\":\"（2）元数据验证：\",\"t\":[\"对字节码描述的信息进行语义分析，如果这个类是否有父类，是否集成了不被集成的类。\"]},\"562\":{\"h\":\"（3）字节码验证：\",\"t\":[\"是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。\"]},\"563\":{\"h\":\"（4）符号引用验证：\",\"t\":[\"这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。\",\"准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。\",\"public static int value = 123; \",\"在准备阶段初始值是0，在初始化阶段才会变成123\",\"该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。\",\"初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码\",\"Java语言是一种具有动态性的解释型语言，类（Class）只有被加载到 JVM 后才能运行。当运行指定程序时，JVM 会将编译生成的 .class 文件按照需求和一定的规则加载到内存中，并组成成为一个完整的 Java 应用程序。\",\"这个加载过程是由类加载器完成，具体来说，就是由ClassLoader和它的子类来实现的，类加载器本身也是一个类，其实质是把类文件从硬盘读取到内存中。\",\"类的加载方式分为隐式加载和显示加载。隐式加载指的是程序在使用 new 等方式创建对象时，会隐式地调用类的加载器把对应的类 加载到 JVM 中。显示加载指的是通过直接调用 class.forName() 方法来把所需的类加载到 JVM 中。\",\"任何一个工程项目都是由许多类组成的，当程序启动时，只把需要的类加载到 JVM 中，其他类只有被使用到的时候才会被加载，采用这种方法一方面可以加快加载速度，另一方面可以节约程序运行时对内存的开销。\",\"此外，在 java 语言中，每个类或接口都对应一个 .class文件，这些文件可以被看成是一个个可以被动态加载的单元，因此当只有部分类被修改时，只需要重新编译变化的类即可，而不需要重新编译所有文件，因此加快了编译速度。\",\"package com.ztq.clazz; /** * class的加载顺序 * * @author zhengtianqi */ public class ClazzLoadSequence { static class T1 { public static T1 t = new T1(); // step1. count = 0 t = null 只是引用，默认为空 static int count = 2; // step3. count = 2 private int m = 8; // step4. m = 8 private T1() { count++; // step2. count = 1 } } static class T2 { static int count = 2; // step1. count = 2 public static T2 t = new T2(); // step2. count = 2 private T2() { count++; // step3. count = 3 } } public static void main(String[] args) { // 2 System.out.println(T1.count); // 3 System.out.println(T2.count); } } \"]},\"564\":{\"h\":\"Kafka的简单使用\",\"t\":[\"http://kafka.apache.org/quickstart （linux版）\",\"windows版： 首先cmd到kafka的bin下 其中启动内置的zk用：zookeeper-server-start.bat D:\\\\environment\\\\kafka_2.12-2.3.0\\\\config\\\\zookeeper.properties 启动Kafka用：kafka-server-start.bat D:\\\\environment\\\\kafka_2.12-2.3.0\\\\config\\\\server.properties\",\"集群的设置: http://kafka.apache.org/quickstart#quickstart_multibroker\",\"建立KafkaProperties 类，编写连接kafka所需要的参数\",\"public class KafkaProperties { private static final String IP = \\\"127.0.0.1:9092\\\"; public static final String TOPIC = \\\"topic_test\\\"; public static Properties initConfig() { Properties properties = new Properties(); properties.setProperty(\\\"bootstrap.servers\\\", IP); properties.put(\\\"group.id\\\", \\\"group-1\\\"); // session.timeout.ms：消费者在被认为死亡之前可以与服务器断开连接的时间，默认是3s 。 properties.put(\\\"session.timeout.ms\\\", \\\"30000\\\"); // 消费者是否自动提交偏移量，默认值是true,避免出现重复数据和数据丢失，可以把它设为 false。 properties.put(\\\"enable.auto.commit\\\", \\\"false\\\"); properties.put(\\\"auto.commit.interval.ms\\\", \\\"1000\\\"); // auto.offset.reset:消费者在读取一个没有偏移量的分区或者偏移量无效的情况下的处理 properties.put(\\\"auto.offset.reset\\\", \\\"earliest\\\"); properties.put(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); properties.put(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); // earliest：在偏移量无效的情况下，消费者将从起始位置读取分区的记录。 properties.put(\\\"key.deserializer\\\", \\\"org.apache.kafka.common.serialization.StringDeserializer\\\"); // latest：在偏移量无效的情况下，消费者将从最新位置读取分区的记录 properties.put(\\\"value.deserializer\\\", \\\"org.apache.kafka.common.serialization.StringDeserializer\\\"); // max.partition.fetch.bytes：服务器从每个分区里返回给消费者的最大字节数 // fetch.max.wait.ms:消费者等待时间，默认是500。 // fetch.min.bytes:消费者从服务器获取记录的最小字节数。 // client.id：该参数可以是任意的字符串，服务器会用它来识别消息的来源。 // max.poll.records:用于控制单次调用 call() 方住能够返回的记录数量 // receive.buffer.bytes和send.buffer.bytes：指定了 TCP socket 接收和发送数据包的缓冲区大小，默认值为-1 return properties; } } \",\"public class KafkaConsumerConnection { private static KafkaConsumer<String, String> consumer = null; private KafkaConsumerConnection() { } public static KafkaConsumer<String, String> getConsumer() { if (consumer == null) { consumer = new KafkaConsumer<>(KafkaProperties.initConfig()); } return consumer; } } \",\"public class KafkaProducerConnection { private static KafkaProducer<String, String> producer = null; private KafkaProducerConnection() { } public static KafkaProducer<String, String> getProducer(){ if(producer == null){ producer = new KafkaProducer<>(KafkaProperties.initConfig()); } return producer; } } \",\"public class ProducerTest { public static void main(String[] args) { Producer<String, String> producer = KafkaProducerConnection.getProducer(); try { while (true) { String msg = \\\"Hello,\\\" + new Random().nextInt(100); ProducerRecord<String, String> record = new ProducerRecord<>(KafkaProperties.TOPIC, msg); producer.send(record); System.out.println(\\\"消息发送成功:\\\" + msg); Thread.sleep(500); } } catch (InterruptedException e) { e.printStackTrace(); } finally { producer.close(); } } } \",\"public class ConsumerTest { public static void main(String[] args) { Consumer<String, String> consumer = KafkaConsumerConnection.getConsumer(); consumer.subscribe(Collections.singletonList(KafkaProperties.TOPIC)); Duration duration = Duration.ofMillis(100); while (true) { ConsumerRecords<String, String> records = consumer.poll(duration); for (ConsumerRecord<String, String> record : records) { System.out.println(String.format(\\\"topic:%s,offset:%d,消息:%s\\\", record.topic(), record.offset(), record.value())); } } } } \"]},\"565\":{\"h\":\"maven梳理\"},\"566\":{\"h\":\"maven的命令：\",\"t\":[\"maven常用命令 创建maven项目：mvn archetype:create 指定 group： -DgroupId=packageName 指定 artifact：-DartifactId=projectName 创建web项目：-DarchetypeArtifactId=maven-archetype-webapp 创建maven项目：mvn archetype:generate 验证项目是否正确：mvn validate maven 打包：mvn package 只打jar包：mvn jar:jar 生成源码jar包：mvn source:jar 产生应用需要的任何额外的源代码：mvn generate-sources 编译源代码： mvn compile 编译测试代码：mvn test-compile 运行测试：mvn test 运行检查：mvn verify 清理maven项目：mvn clean 该操作会清空当前目录的target文件夹 生成eclipse项目：mvn eclipse:eclipse 清理eclipse配置：mvn eclipse:clean 生成idea项目：mvn idea:idea 安装项目到本地仓库：mvn install 发布项目到远程仓库：mvn:deploy 在集成测试可以运行的环境中处理和发布包：mvn integration-test 显示maven依赖树：mvn dependency:tree 显示maven依赖列表：mvn dependency:list 下载依赖包的源码：mvn dependency:sources 安装本地jar到本地仓库：mvn install:install-file -DgroupId=packageName -DartifactId=projectName -Dversion=version -Dpackaging=jar -Dfile=path WEB 启动tomcat：mvn tomcat:run 启动jetty：mvn jetty:run 运行打包部署：mvn tomcat:deploy 撤销部署：mvn tomcat:undeploy 启动web应用：mvn tomcat:start 停止web应用：mvn tomcat:stop 重新部署：mvn tomcat:redeploy 部署展开的war文件：mvn war:exploded tomcat:exploded maven 命令的格式为 mvn [plugin-name]:[goal-name]，可以接受的参数如下。 -D 指定参数，如 -Dmaven.test.skip=true 跳过单元测试； -P 指定 Profile 配置，可以用于区分环境； -e 显示maven运行出错的信息； -o 离线执行命令,即不去远程仓库更新包； -X 显示maven允许的debug信息； -U 强制去远程更新snapshot的插件或依赖，默认每天只更新一次。 \"]},\"567\":{\"h\":\"1、Maven的简介\"},\"568\":{\"h\":\"1.1 构建（build）\",\"t\":[\"除了编写源代码，一部分时间花在了编译、运行单元测试、生成文档、打包和部署等烦琐且不起眼的工作上，这就是构建。于是有人使用使用软件只需简单的一条命令，就能自动完成。\"]},\"569\":{\"h\":\"1.2 Maven的用途\",\"t\":[\"自动化构建过程、清理、编译、测试到生成报告，再到打包和部署。 依赖增加、版本不一致、版本冲突、依赖臃肿等问题：Maven通过一个坐标系统准确地定位每一个构件（artifact），也就是通过一组坐标Maven能够找到任何一个Java类库（如jar文件）。类似于经纬度定位。\"]},\"570\":{\"h\":\"2、Maven的安装和配置\"},\"571\":{\"h\":\"2.1 Maven怎么升级：\",\"t\":[\"解压新的maven到一个目录，只需更新系统变量指向它。\"]},\"572\":{\"h\":\"2.2 Maven目录介绍：\",\"t\":[\"（bin boot conf lib LINCENSE. txt NOTICE. txt README.txt）\",\"Bin目录：mvn运行脚本（mvn是unix的shell脚本，mvn.bat是windows版），这些脚本是用来配置java命令的。\",\"Boot目录： 里只有一个jar包，plexus-classworlds-2.5.2.jar是maven加载类库。\",\"Conf目录：settings.xml可以在机器上定义全局的行为。\",\"Lib类库\",\"默认情况下：\",\"大多数人需要把M2_HOME/conf/settings.xml复制到~/.m2/settings.xml\"]},\"573\":{\"h\":\"2.3 设置HTTP代理\",\"t\":[\"有些公司为了安全无法访问公共的Maven中央仓库，需要设置代理，必须保证代理服务器的通畅。\"]},\"574\":{\"h\":\"2.4 设置MAVEN_OPTS环境变量\",\"t\":[\"目的是让maven构建是速度增加。由于Mvn命令实际是使用java命令，默认无法满足maven运行的需要，容易产生java.lang.OutOfMemeoryError，需要设置系统环境变量MAVEN_OPTS的值为-Xms128m -Xmx512m。\"]},\"575\":{\"h\":\"2.5 参数设置：\",\"t\":[\" Linux：在~/.bash_profile文件中添加 \",\"export MAVEN_OPTS=\\\"-Xms512m -Xmx1024m\\\" \",\"（此设置是为了maven执行java时分配给大点的内存，解决容易引起maven导包或插件时卡顿） Windows：如下图\"]},\"576\":{\"h\":\"2.6 用户配置：\",\"t\":[\"把MAVEN_HOME/conf/seettings.xml cp 到 ~/.m2/下，在.m2下的settings.xml中所作的配置就是用户级别的配置，而直接编辑MAVEN_HOME/conf/seettings.xml所作的配置是全局的配置\",\"上传到私服的流程： a. 加入打包插件 b. mvn clean package // 加上clean 会清空target，然后再生成新的包。。。 c.mvn source:jar // 生成源码包 d.mvn deploy // 上传私服，别忘升级版本哦~~~ 2.idea和eclipse导入时不同： idea是project下的module eclipse是workspace下的project idea导入maven项目 https://blog.csdn.net/weixin_37909363/article/details/80915509 \"]},\"577\":{\"h\":\"3、使用入门\"},\"578\":{\"h\":\"3.1 编写pom.xml\",\"t\":[\"Maven的核心是pom.xml\",\"1618244002479\",\"第三方工具可以快速构建pom.xml的头\",\"Project是所有的pom.xml的根元素，其中第一个子元素modelVersion指定了当前POM模型的版本，对于Maven2和Maven3来说，它只能是4.0.0。\",\"最重要的是groupId、artifactId和version三行。这三行元素定义了一个项目的基本坐标，在Maven的世界，任何的jar、pom或者war都是以基于这些基本的坐标进行区分的。\",\"GroupId定义了项目属于哪个组，这个组往往和项目所在的组织或公司存在关联。\",\"ArtifactId定义了当前Maven项目在组中唯一的ID，子模块\",\"Version指定了版本\"]},\"579\":{\"h\":\"3.2编写主代码，项目打包过程\",\"t\":[\"此处介绍mvn clean complie、mvn clean test、mvn clean package、mvn clean install\"]},\"580\":{\"h\":\"3.2.1使用maven编译项目\",\"t\":[\"当我们编写一个main调用sayHello()打印helloworld字符串时。\",\"该代码的（com.sy.sa.myapp.helloworld）与之前的POM中定义的groupId和artifactId相吻合。一般来说，项目中Java类的包都应该基于项目的group和artifactId，方便搜索。\",\"当编码完毕，使用Maven进行编译，\",\"在项目根目录下运行命令mvn clean compile，\",\"mvn clean compile运行步骤：\",\"1618244073306\",\"（1）Clean告诉Maven清理输出目录target/，compile告诉Maven编译项目主代码，从输出中看到Maven首先执行了clean：Clean任务，删除target/目录；默认情况下，Maven构建的所有输出都在target/目录中；\",\"（2）接着执行resources：resources任务（未定义项目资源，暂且略过）；\",\"（3）最后执行compiler：compile任务，将项目主代码编译至targert/classes目录\"]},\"581\":{\"h\":\"3.2.2 使用maven编译测试类\",\"t\":[\"编写完测试用例运行命令mvn clean test\",\"需要maven-compiler-plugin插件\",\"1618244110010\",\"mvn clean test运行的步骤中会提示测试报告，显示一共运行了多少测试，失败了多少，出错了多少，跳过了多少\",\"1618244137853\"]},\"582\":{\"h\":\"3.2.3 使用maven将项目打包和运行\",\"t\":[\"mvn clean package进行打包，可以看到target下生成jar，\",\"它是根据artifact-version.jar规则进行命名的，还可以使用finalName来自定义该文件的名称。\",\"1618244166891\"]},\"583\":{\"h\":\"3.2.4 使用maven运行带main方法的类\",\"t\":[\"目前我们打成的jar不能识别main方法，需要指定main方法的位置。使用这个插件，来制定main方法的位置\",\" maven-shade-plug \",\"1618244193984\"]},\"584\":{\"h\":\"3.2.5 将项目打包放到本地maven仓库\",\"t\":[\"mvn clean install将此jar包放到maven指定的仓库，该仓库的地址是setting.xml的本地仓库的地址\",\"1618244251013\"]},\"585\":{\"h\":\"4、坐标和依赖\"},\"586\":{\"h\":\"4.1 坐标详解\",\"t\":[\"Maven坐标为各种构件引入了秩序，任何一个构件都必须明确定义自己的坐标。它们是groupId、artifactId、version、packaging、classifier\",\"1618244289269\"]},\"587\":{\"h\":\"4.1.1 groupId定义到项目\",\"t\":[\"与java包名类似，通常是反向的域名。GroupId为org.sonatype.nexus，（org.sonatype是非营利组织sonatype、nexus是实际项目）。该groupId与域名nexus. Sonatype.org反向对应\"]},\"588\":{\"h\":\"4.1.2 artifactId定义到项目其中的一个模块\",\"t\":[\" 为了方便区分，便于寻找实际构件，用nexus作为前缀 \"]},\"589\":{\"h\":\"4.1.3 version为版本\"},\"590\":{\"h\":\"4.1.4 packaging为该项目的打包方式，默认jar（可选）\"},\"591\":{\"h\":\"4.1.5 classifier为（可选，不能直接定义，由附加插件帮助生成）\"},\"592\":{\"h\":\"5、依赖\"},\"593\":{\"h\":\"5.1 依赖范围\",\"t\":[\"例：Junit依赖的测试范围test， 测试范围用元素scope表示\",\"Maven在编译项目主代码时候使用一套classpath\",\"在编译和执行测试的时候回使用另一套classpath\",\"依赖范围就是用来控制依赖于这三种classpath（编译classpath、测试classpath、运行classpath），Maven有以下几种依赖范围：\",\"Compile：编译依赖范围，三种classpath都有效(默认)\",\"Test：测试依赖范围\",\"Provided：已提供依赖范围（编译和测试）\",\"Runtime：运行时依赖规范\",\"System：系统依赖范围（编译和测试，必须显示的依赖文件的路径）\",\"1618244361109\"]},\"594\":{\"h\":\"5.2 传递性依赖\",\"t\":[\"有了传递依赖机制，Maven会直接依赖POM，将那些必要的简介依赖，以传递性依赖的形式引入到当前的项目中。\",\"A依赖B、B依赖C：A对于B是第一直接依赖，B对于C是第二直接依赖，A对于C是传递性依赖。传递依赖同样有生命周期\",\"1618244387386\"]},\"595\":{\"h\":\"5.3 排除依赖\"},\"596\":{\"h\":\"5.3.1引入相同版本的依赖\",\"t\":[\"像framework定义version\",\"<properties> <springframework.version>5.2.2</springframework.version> </properties> \"]},\"597\":{\"h\":\"5.3.2 依赖优化\",\"t\":[\"mvn dependency:list 查看当前项目已解析的依赖\",\"mvn dependency:tree 查看当前项目的依赖树\",\"mvn dependency:analyze 帮助分析当前项目的依赖\"]},\"598\":{\"h\":\"6、仓库\"},\"599\":{\"h\":\"6.1概念\",\"t\":[\"任何一个依赖，插件或者项目构建的输出，都可以称为构件\"]},\"600\":{\"h\":\"6.2 仓库的布局\",\"t\":[\"仓库布局的源码，是基于简单的文件系统\"]},\"601\":{\"h\":\"6.3 仓库的分类\",\"t\":[\"仓库的配置，中央仓库、远程仓库\",\"分类：\",\"1618244497271\"]},\"602\":{\"h\":\"6.4 仓库的配置\"},\"603\":{\"h\":\"6.4.1设置仓库\",\"t\":[\"（1) 在repositories元素下，可以使用repository子元素声明一个或者多个远程仓库。\",\"1618244522945\",\"（2）配置maven 更新频率和检查文件策略\",\"1618244544994\",\"（3）Maven的认证\",\"1618244566899\"]},\"604\":{\"h\":\"6.4.2 上传构件到私有仓库\",\"t\":[\"（1）首先配置好distributionManagement配置\",\"distributionManagement是项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。\",\"1618244592782\",\"（2）配置成功后，可以用mvn clean deploy Maven就会将项目构建输出的构建部署到配置对应的远程仓库。如果项目当前是快照版本，则部署到快照仓库地址，否则就部署到发布版本仓库地址。\"]},\"605\":{\"h\":\"6.4.3 Maven版本号机制\",\"t\":[\"1618244623527\",\"版本号(version number)是版本的标识号。\",\"1.版本命名规范\",\"软件版本号有四部分组成，第一部分为主版本号，第二部分为次版本号，第三部分为修订版本号，第四部分为日期版本号\",\"2.软件版本阶段说明\",\"3.版本号修改规则\",\"（1）主版本号：当整体框架结构发生变化时，此版本号增加。此版本号由项目决定是否修改。\",\"（2）次版本号：相对于主版本号而言，次版本号的升级对应的只是局部的变动，当项目在原有的基础上增加了部分功能时，主版本号不变，子版本号加 1，修正版本号复位为 0。\",\"（3）修订版本号：当项目在进行了局部修改或 bug 修正时，主版本号和子版本号都不变，修正版本号加 1。\",\"（4）日期版本号：发版当天的日期，需要包括年份。如：20160617\"]},\"606\":{\"h\":\"Netty介绍及简单示例\"},\"607\":{\"h\":\"简介\",\"t\":[\"netty是一个异步、基于事件驱动的网络应用框架，用以快速开发高性能、高可用的网络IO程序 netty主要针对在TCP协议下，面向Clients端的高并发应用，或者peer-to-peer场景下的大量数据持续性传输的应用 netty本质是一个NIO框架，适用于服务器通讯相关的多种场景。 Netty是一个提供异步事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络服务器和客户端程序。 Netty是一个NIO框架，使用它可以简单快速地开发网络应用程序，比如客户端和服务端的协议。Netty大大简化了网络程序的开发过程比如TCP和UDP的 Socket的开发。\"]},\"608\":{\"h\":\"互联网行业\",\"t\":[\"在分布式系统中，各个节点之间需要远程服务调用，高性能的 RPC 框架必不可少，Netty 作为 异步高性能的通信框架，往往作为基础通信组件被这些 RPC 框架使用 典型的应用有:阿里分布式服务框架 Dubbo 的 RPC 框架使用 Dubbo 协议进行节点间通信，Dubbo 协议默 认使用 Netty 作为基础通信组件，用于实现各进程节点之间的内部通信\"]},\"609\":{\"h\":\"游戏行业\",\"t\":[\"Netty 作为高性能的基础通信组件，提供了 TCP/UDP 和 HTTP 协议栈，方便定制和开发私有协议栈，账号登录服务器 地图服务器之间可以方便的通过 Netty 进行高性能的通信\"]},\"610\":{\"h\":\"大数据领域\",\"t\":[\"经典的 Hadoop 的高性能通信和序列化组件 Avro 的 RPC 框架，默认采用 Netty 进行跨界点通信，它的 Netty Service 基于 Netty 框架二次封装实现\",\"一个服务端通常会对一个请求作出响应\"]},\"611\":{\"h\":\"（1）引入依赖\",\"t\":[\"目前5停止维护，建议4：https://netty.io/wiki/user-guide.html\",\" <dependency> <groupId>io.netty</groupId> <artifactId>netty-all</artifactId> <version>4.1.70.Final</version> <scope>compile</scope> </dependency> \"]},\"612\":{\"h\":\"（2）服务端\",\"t\":[\"NioEventLoopGroup 是用来处理I/O操作的多线程事件循环器，Netty提供了许多不同的EventLoopGroup的实现用来处理不同传输协议。 在这个例子中我们实现了一个服务端的应用，因此会有2个NioEventLoopGroup会被使用。第一个经常被叫做‘boss’，用来接收进来的连接。第二个经常被叫做‘worker’，用来处理已经被接收的连接，一旦‘boss’接收到连接，就会把连接信息注册到‘worker’上。 如何知道多少个线程已经被使用，如何映射到已经创建的Channels上都需要依赖于EventLoopGroup的实现，并且可以通过构造函数来配置他们的关系。 ServerBootstrap 是一个启动NIO服务的辅助启动类。\",\"package com.example.echo; import io.netty.bootstrap.ServerBootstrap; import io.netty.channel.ChannelFuture; import io.netty.channel.ChannelInitializer; import io.netty.channel.ChannelOption; import io.netty.channel.EventLoopGroup; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.SocketChannel; import io.netty.channel.socket.nio.NioServerSocketChannel; public class EchoServer { private int port; public EchoServer(int port) { this.port = port; } public void run() throws Exception { // 接收连接 EventLoopGroup bossGroup = new NioEventLoopGroup(); // 处理信息 EventLoopGroup workerGroup = new NioEventLoopGroup(); try { // 定义server ServerBootstrap b = new ServerBootstrap(); // 添加分组 b.group(bossGroup, workerGroup) // 添加通道设置非阻塞 .channel(NioServerSocketChannel.class) // 服务端可连接队列数量 .option(ChannelOption.SO_BACKLOG, 128) // 开启长连接 .childOption(ChannelOption.SO_KEEPALIVE, true) // 流程处理 .childHandler(new ChannelInitializer<SocketChannel>() { @Override public void initChannel(SocketChannel channel) { channel.pipeline().addLast(new EchoServerHandler()); } }); // 在机器上绑定了机器所有网卡上的8080端口。当然现在你可以多次调用bind()方法(基于不同绑定地址)。 ChannelFuture cf = b.bind(port).sync(); // Wait until the server socket is closed. // In this example, this does not happen, but you can do that to gracefully // shut down your server. cf.channel().closeFuture().sync(); } finally { workerGroup.shutdownGracefully(); bossGroup.shutdownGracefully(); } } public static void main(String[] args) throws Exception { int port; if (args.length > 0) { port = Integer.parseInt(args[0]); } else { port = 9098; } new EchoServer(port).run(); } } \"]},\"613\":{\"h\":\"（3）处理函数\",\"t\":[\"channelRead()方法是在数据被接收的时候调用。让我们放一些代码到DiscardServerHandler类的channelRead()方法。 super.channelRead()，会走一个判断，若与channelRead0()中参数相同则走channelRead0()，走完channelRead0()之后就会释放ctx和msg，即SimpleChannelInboundHandler中的release()。 这个例子中，收到的消息的类型是ByteBuf exceptionCaught()事件处理方法是当出现Throwable对象才会被调用，即当Netty由于IO错误或者处理器在处理事件时抛出的异常时。在大部分情况下，捕获的异常应该被记录下来并且把关联的channel给关闭掉。然而这个方法的处理方式会在遇到不同异常的情况下有不同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。\",\"package com.example.echo; import io.netty.buffer.ByteBuf; import io.netty.buffer.ByteBufUtil; import io.netty.channel.ChannelHandlerContext; import io.netty.channel.SimpleChannelInboundHandler; import io.netty.util.CharsetUtil; public class EchoServerHandler extends SimpleChannelInboundHandler { /** * 这里我们覆盖了chanelRead()事件处理方法。每当从客户端收到新的数据时，这个方法会在收到消息时被调用，这个例子中，收到的消息的类型是ByteBuf * * @param ctx * @param msg */ @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception { super.channelRead(ctx, msg); } @Override protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception { ByteBuf in = (ByteBuf) msg; // 转换成UFT-8 System.out.println(\\\"Server get:\\\" + in.toString(CharsetUtil.UTF_8)); // 转换成ASCII System.out.println(\\\"Server get:\\\" + in.toString(CharsetUtil.US_ASCII)); // 转换16进制 System.out.printf(\\\"Server get: \\\"); System.out.println(ByteBufUtil.hexDump(in)); // 逐个字节读取 System.out.printf(\\\"Server get: \\\"); while (in.isReadable()) { // 读取1个字节转成10进制int表示 int b = in.readByte() & 0xFF; // 再转成2个16进制字符串 System.out.printf(Integer.toHexString(b) + \\\" \\\"); } // 返回数据 响应式协议 (与Discard唯一区别：DISCARD服务(丢弃服务，指的是会忽略所有接收的数据的一种协议)) ctx.write(msg); // 不需要释放msg，因为super.channelRead(ctx, msg);有释放资源的方法。 } /** * exceptionCaught()事件处理方法是当出现Throwable对象才会被调用，即当Netty由于IO错误或者处理器在处理事件时抛出的异常时。 * 在大部分情况下，捕获的异常应该被记录下来并且把关联的channel给关闭掉。 * 然而这个方法的处理方式会在遇到不同异常的情况下有不同的实现，比如你可能想在关闭连接之前发送一个错误码的响应消息。 * * @param ctx * @param cause */ @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { cause.printStackTrace(); ctx.close(); } } \",\"https://www.bookstack.cn/read/essential-netty-in-action/SUMMARY.mdhttp://ifeve.com/netty5-user-guide/\"]},\"614\":{\"h\":\"Redis数据结构与对象（一）-简单动态字符串\"},\"615\":{\"h\":\"简单动态字符串\"},\"616\":{\"h\":\"SDS的定义\",\"t\":[\"每个 sds.h/sdshdr 结构表示一个 SDS 值：\",\"struct sdshdr { // 记录 buf 数组中已使用字节的数量 // 等于 SDS 所保存字符串的长度 int len; // 记录 buf 数组中未使用字节的数量 int free; // 字节数组，用于保存字符串 char buf[]; }; \",\"图 2-1 展示了一个 SDS 示例：\",\"free 属性的值为 0 ，表示这个 SDS 没有分配任何未使用空间。\",\"len 属性的值为 5 ，表示这个 SDS 保存了一个五字节长的字符串。\",\"buf 属性是一个 char 类型的数组，数组的前五个字节分别保存了 'R' 、 'e' 、 'd' 、 'i' 、 's' 五个字符，而最后一个字节则保存了空字符 '\\\\0' 。\",\"img\",\"SDS 遵循 C 字符串以空字符结尾的惯例，保存空字符的 1 字节空间不计算在 SDS 的 len 属性里面，并且为空字符分配额外的 1 字节空间，以及添加空字符到字符串末尾等操作都是由 SDS 函数自动完成的，所以这个空字符对于 SDS 的使用者来说是完全透明的。\",\"遵循空字符结尾这一惯例的好处是，SDS 可以直接重用一部分 C 字符串函数库里面的函数。\",\"举个例子，如果我们有一个指向图 2-1 所示 SDS 的指针 s ，那么我们可以直接使用 stdio.h/printf 函数，通过执行以下语句：\",\"printf(\\\"%s\\\", s->buf); \",\"来打印出 SDS 保存的字符串值 \\\"Redis\\\" ，而无须为 SDS 编写专门的打印函数。\",\"图2-2 展示了另一个 SDS 示例:\",\"这个 SDS 和之前展示的 SDS 一样，都保存了字符串值 \\\"Redis\\\" 。\",\"这个 SDS 和之前展示的 SDS 的区别在于，这个 SDS 为 buf 数组分配了五字节未使用空间，所以它的 free 属性的值为 5（图中使用五个空格来表示五字节的未使用空间）。\",\"img\",\"接下来的一节将详细地说明未使用空间在 SDS 中的作用。\"]},\"617\":{\"h\":\"SDS 与 C 字符串的区别\",\"t\":[\"根据传统，C 语言使用长度为 N+1 的字符数组来表示长度为 N 的字符串，并且字符数组的最后一个元素总是空字符 '\\\\0' 。\",\"比如说，图 2-3 就展示了一个值为 \\\"Redis\\\" 的 C 字符串：\",\"img\",\"C 语言使用的这种简单的字符串表示方式，并不能满足 Redis 对字符串在安全性、效率、以及功能方面的要求，本节接下来的内容将详细对比 C 字符串和 SDS 之间的区别，并说明 SDS 比 C 字符串更适用于 Redis 的原因。\"]},\"618\":{\"h\":\"常数复杂度获取字符串长度\",\"t\":[\"因为 C 字符串并不记录自身的长度信息，所以为了获取一个 C 字符串的长度，程序必须遍历整个字符串，对遇到的每个字符进行计数，直到遇到代表字符串结尾的空字符为止，这个操作的复杂度为 O(N) 。\",\"举个例子，图 2-4 展示了程序计算一个 C 字符串长度的过程。\",\"img\",\"img\",\"img\",\"img\",\"img\",\"img\",\"和 C 字符串不同，因为 SDS 在 len 属性中记录了 SDS 本身的长度，所以获取一个 SDS 长度的复杂度仅为 O(1) 。\",\"举个例子，对于图 2-5 所示的 SDS 来说，程序只要访问 SDS 的 len 属性，就可以立即知道 SDS 的长度为 5 字节：\",\"img\",\"又比如说，对于图 2-6 展示的 SDS 来说，程序只要访问 SDS 的 len 属性，就可以立即知道 SDS 的长度为 11 字节。\",\"img\",\"设置和更新 SDS 长度的工作是由 SDS 的 API 在执行时自动完成的，使用 SDS 无须进行任何手动修改长度的工作。\",\"通过使用 SDS 而不是 C 字符串，Redis 将获取字符串长度所需的复杂度从 O(N) 降低到了 O(1) ，这确保了获取字符串长度的工作不会成为 Redis 的性能瓶颈。\",\"比如说，因为字符串键在底层使用 SDS 来实现，所以即使我们对一个非常长的字符串键反复执行 STRLEN 命令，也不会对系统性能造成任何影响，因为 STRLEN 命令的复杂度仅为 O(1) 。\"]},\"619\":{\"h\":\"杜绝缓冲区溢出\",\"t\":[\"除了获取字符串长度的复杂度高之外，C 字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow）。\",\"举个例子，<string.h>/strcat 函数可以将 src 字符串中的内容拼接到 dest 字符串的末尾：\",\"char *strcat(char *dest, const char *src); \",\"因为 C 字符串不记录自身的长度，所以 strcat 假定用户在执行这个函数时，已经为 dest 分配了足够多的内存，可以容纳 src 字符串中的所有内容，而一旦这个假定不成立时，就会产生缓冲区溢出。\",\"举个例子，假设程序里有两个在内存中紧邻着的 C 字符串 s1 和 s2 ，其中 s1 保存了字符串 \\\"Redis\\\" ，而 s2 则保存了字符串 \\\"MongoDB\\\" ，如图 2-7 所示。\",\"img\",\"如果一个程序员决定通过执行：\",\"strcat(s1, \\\" Cluster\\\"); \",\"将 s1 的内容修改为 \\\"Redis Cluster\\\" ，但粗心的他却忘了在执行 strcat 之前为 s1 分配足够的空间，那么在 strcat 函数执行之后，s1 的数据将溢出到 s2 所在的空间中，导致 s2 保存的内容被意外地修改，如图 2-8 所示。\",\"img\",\"与 C 字符串不同，SDS 的空间分配策略完全杜绝了发生缓冲区溢出的可能性：当 SDS API 需要对 SDS 进行修改时，API 会先检查 SDS 的空间是否满足修改所需的要求，如果不满足的话，API 会自动将 SDS 的空间扩展至执行修改所需的大小，然后才执行实际的修改操作，所以使用 SDS 既不需要手动修改 SDS 的空间大小，也不会出现前面所说的缓冲区溢出问题。\",\"举个例子，SDS 的 API 里面也有一个用于执行拼接操作的 sdscat 函数，它可以将一个 C 字符串拼接到给定 SDS 所保存的字符串的后面，但是在执行拼接操作之前，sdscat 会先检查给定 SDS 的空间是否足够，如果不够的话，sdscat 就会先扩展 SDS 的空间，然后才执行拼接操作。\",\"比如说，如果我们执行：\",\"sdscat(s, \\\" Cluster\\\"); \",\"其中 SDS 值 s 如图 2-9 所示，那么 sdscat 将在执行拼接操作之前检查 s 的长度是否足够，在发现 s 目前的空间不足以拼接 \\\" Cluster\\\" 之后，sdscat 就会先扩展 s 的空间，然后才执行拼接 \\\" Cluster\\\" 的操作，拼接操作完成之后的 SDS 如图 2-10 所示。\",\"img\",\"img\",\"注意图 2-10 所示的 SDS ：sdscat 不仅对这个 SDS 进行了拼接操作，它还为 SDS 分配了 13 字节的未使用空间，并且拼接之后的字符串也正好是 13 字节长，这种现象既不是 bug 也不是巧合，它和 SDS 的空间分配策略有关，接下来的小节将对这一策略进行说明。\"]},\"620\":{\"h\":\"减少修改字符串时带来的内存重分配次数\",\"t\":[\"正如前两个小节所说，因为 C 字符串并不记录自身的长度，所以对于一个包含了 N 个字符的 C 字符串来说，这个 C 字符串的底层实现总是一个 N+1 个字符长的数组（额外的一个字符空间用于保存空字符）。\",\"因为 C 字符串的长度和底层数组的长度之间存在着这种关联性，所以每次增长或者缩短一个 C 字符串，程序都总要对保存这个 C 字符串的数组进行一次内存重分配操作：\",\"如果程序执行的是增长字符串的操作，比如拼接操作（append），那么在执行这个操作之前，程序需要先通过内存重分配来扩展底层数组的空间大小 ——如果忘了这一步就会产生缓冲区溢出。\",\"如果程序执行的是缩短字符串的操作，比如截断操作（trim），那么在执行这个操作之后，程序需要通过内存重分配来释放字符串不再使用的那部分空间 ——如果忘了这一步就会产生内存泄漏。\",\"举个例子，如果我们持有一个值为 \\\"Redis\\\" 的 C 字符串 s ，那么为了将 s 的值改为 \\\"Redis Cluster\\\" ，在执行：\",\"strcat(s, \\\" Cluster\\\"); \",\"之前，我们需要先使用内存重分配操作，扩展 s 的空间。\",\"之后，如果我们又打算将 s 的值从 \\\"Redis Cluster\\\" 改为 \\\"Redis Cluster Tutorial\\\" ，那么在执行：\",\"strcat(s, \\\" Tutorial\\\"); \",\"之前，我们需要再次使用内存重分配扩展 s 的空间，诸如此类。\",\"因为内存重分配涉及复杂的算法，并且可能需要执行系统调用，所以它通常是一个比较耗时的操作：\",\"在一般程序中，如果修改字符串长度的情况不太常出现，那么每次修改都执行一次内存重分配是可以接受的。\",\"但是 Redis 作为数据库，经常被用于速度要求严苛、数据被频繁修改的场合，如果每次修改字符串的长度都需要执行一次内存重分配的话，那么光是执行内存重分配的时间就会占去修改字符串所用时间的一大部分，如果这种修改频繁地发生的话，可能还会对性能造成影响。\",\"为了避免 C 字符串的这种缺陷，SDS 通过未使用空间解除了字符串长度和底层数组长度之间的关联：在 SDS 中，buf 数组的长度不一定就是字符数量加一，数组里面可以包含未使用的字节，而这些字节的数量就由 SDS 的 free 属性记录。\",\"通过未使用空间，SDS 实现了空间预分配和惰性空间释放两种优化策略。\"]},\"621\":{\"h\":\"空间预分配\",\"t\":[\"空间预分配用于优化 SDS 的字符串增长操作：当 SDS 的 API 对一个 SDS 进行修改，并且需要对 SDS 进行空间扩展的时候，程序不仅会为 SDS 分配修改所必须要的空间，还会为 SDS 分配额外的未使用空间。\",\"其中，额外分配的未使用空间数量由以下公式决定：\",\"如果对 SDS 进行修改之后，SDS 的长度（也即是 len 属性的值）将小于 1 MB ，那么程序分配和 len 属性同样大小的未使用空间，这时 SDS len 属性的值将和 free 属性的值相同。举个例子，如果进行修改之后，SDS 的 len 将变成 13 字节，那么程序也会分配 13 字节的未使用空间，SDS 的 buf 数组的实际长度将变成 13 + 13 + 1 = 27 字节（额外的一字节用于保存空字符）。\",\"如果对 SDS 进行修改之后，SDS 的长度将大于等于 1 MB ，那么程序会分配 1 MB 的未使用空间。举个例子，如果进行修改之后，SDS 的 len 将变成 30 MB ，那么程序会分配 1 MB 的未使用空间，SDS 的 buf 数组的实际长度将为 30 MB + 1 MB + 1 byte 。\",\"通过空间预分配策略，Redis 可以减少连续执行字符串增长操作所需的内存重分配次数。\",\"举个例子，对于图 2-11 所示的 SDS 值 s 来说，如果我们执行：\",\"sdscat(s, \\\" Cluster\\\"); \",\"那么 sdscat 将执行一次内存重分配操作，将 SDS 的长度修改为 13 字节，并将 SDS 的未使用空间同样修改为 13 字节，如图 2-12 所示。\",\"img\",\"img\",\"如果这时，我们再次对 s 执行：\",\"sdscat(s, \\\" Tutorial\\\"); \",\"那么这次 sdscat 将不需要执行内存重分配：因为未使用空间里面的 13 字节足以保存 9 字节的 \\\" Tutorial\\\" ，执行 sdscat 之后的 SDS 如图 2-13 所示。\",\"img\",\"在扩展 SDS 空间之前，SDS API 会先检查未使用空间是否足够，如果足够的话，API 就会直接使用未使用空间，而无须执行内存重分配。\",\"通过这种预分配策略，SDS 将连续增长 N 次字符串所需的内存重分配次数从必定 N 次降低为最多 N 次。\"]},\"622\":{\"h\":\"惰性空间释放\",\"t\":[\"惰性空间释放用于优化 SDS 的字符串缩短操作：当 SDS 的 API 需要缩短 SDS 保存的字符串时，程序并不立即使用内存重分配来回收缩短后多出来的字节，而是使用 free 属性将这些字节的数量记录起来，并等待将来使用。\",\"举个例子，sdstrim 函数接受一个 SDS 和一个 C 字符串作为参数，从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符。\",\"比如对于图 2-14 所示的 SDS 值 s 来说，执行：\",\"sdstrim(s, \\\"XY\\\"); // 移除 SDS 字符串中的所有 'X' 和 'Y' \",\"会将 SDS 修改成图 2-15 所示的样子。\",\"img\",\"img\",\"注意执行 sdstrim 之后的 SDS 并没有释放多出来的 8 字节空间，而是将这 8 字节空间作为未使用空间保留在了 SDS 里面，如果将来要对 SDS 进行增长操作的话，这些未使用空间就可能会派上用场。\",\"举个例子，如果现在对 s 执行：\",\"sdscat(s, \\\" Redis\\\"); \",\"那么完成这次 sdscat 操作将不需要执行内存重分配：因为 SDS 里面预留的 8 字节空间已经足以拼接 6 个字节长的 \\\" Redis\\\" ，如图 2-16 所示。\",\"img\",\"通过惰性空间释放策略，SDS 避免了缩短字符串时所需的内存重分配操作，并为将来可能有的增长操作提供了优化。\",\"与此同时，SDS 也提供了相应的 API ，让我们可以在有需要时，真正地释放 SDS 里面的未使用空间，所以不用担心惰性空间释放策略会造成内存浪费。\"]},\"623\":{\"h\":\"二进制安全\",\"t\":[\"C 字符串中的字符必须符合某种编码（比如 ASCII），并且除了字符串的末尾之外，字符串里面不能包含空字符，否则最先被程序读入的空字符将被误认为是字符串结尾 ——这些限制使得 C 字符串只能保存文本数据，而不能保存像图片、音频、视频、压缩文件这样的二进制数据。\",\"举个例子，如果有一种使用空字符来分割多个单词的特殊数据格式，如图 2-17 所示，那么这种格式就不能使用 C 字符串来保存，因为 C 字符串所用的函数只会识别出其中的 \\\"Redis\\\" ，而忽略之后的 \\\"Cluster\\\" 。\",\"img\",\"虽然数据库一般用于保存文本数据，但使用数据库来保存二进制数据的场景也不少见，因此，为了确保 Redis 可以适用于各种不同的使用场景，SDS 的 API 都是二进制安全的（binary-safe）：所有 SDS API 都会以处理二进制的方式来处理 SDS 存放在 buf 数组里的数据，程序不会对其中的数据做任何限制、过滤、或者假设 ——数据在写入时是什么样的，它被读取时就是什么样。\",\"这也是我们将 SDS 的 buf 属性称为字节数组的原因 ——Redis 不是用这个数组来保存字符，而是用它来保存一系列二进制数据。\",\"比如说，使用 SDS 来保存之前提到的特殊数据格式就没有任何问题，因为 SDS 使用 len 属性的值而不是空字符来判断字符串是否结束，如图 2-18 所示。\",\"img\",\"通过使用二进制安全的 SDS ，而不是 C 字符串，使得 Redis 不仅可以保存文本数据，还可以保存任意格式的二进制数据。\"]},\"624\":{\"h\":\"兼容部分 C 字符串函数\",\"t\":[\"虽然 SDS 的 API 都是二进制安全的，但它们一样遵循 C 字符串以空字符结尾的惯例：这些 API 总会将 SDS 保存的数据的末尾设置为空字符，并且总会在为 buf 数组分配空间时多分配一个字节来容纳这个空字符，这是为了让那些保存文本数据的 SDS 可以重用一部分 <string.h> 库定义的函数。\",\"img\",\"举个例子，如图 2-19 所示，如果我们有一个保存文本数据的 SDS 值 sds ，那么我们就可以重用 <string.h>/strcasecmp 函数，使用它来对比 SDS 保存的字符串和另一个 C 字符串：\",\"strcasecmp(sds->buf, \\\"hello world\\\"); \",\"这样 Redis 就不用自己专门去写一个函数来对比 SDS 值和 C 字符串值了。\",\"与此类似，我们还可以将一个保存文本数据的 SDS 作为 strcat 函数的第二个参数，将 SDS 保存的字符串追加到一个 C 字符串的后面：\",\"strcat(c_string, sds->buf); \",\"这样 Redis 就不用专门编写一个将 SDS 字符串追加到 C 字符串之后的函数了。\",\"通过遵循 C 字符串以空字符结尾的惯例，SDS 可以在有需要时重用 <string.h> 函数库，从而避免了不必要的代码重复。\"]},\"625\":{\"h\":\"总结\",\"t\":[\"表 2-1 对 C 字符串和 SDS 之间的区别进行了总结。\",\"表 2-1 C 字符串和 SDS 之间的区别\",\"image-20220122144100590\"]},\"626\":{\"h\":\"SimpleDateFormat引发的线程安全问题\",\"t\":[\"​ 在写java程序时，有时间戳转换的操作。\",\"import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; /** * @author zhengtianqi * @date 2019/10/12 */ public class DateTrans { public static void main(String[] args) { // 将2019-10-12 18:50:30 改成 2019年10月12日 String inDate = \\\"2019-10-12 18:50:30\\\"; SimpleDateFormat inPut = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); SimpleDateFormat outPut = new SimpleDateFormat(\\\"yyyy年MM月dd日\\\"); try { Date temp = inPut.parse(inDate); String outDate = outPut.format(temp); System.out.println(outDate); } catch (ParseException e) { System.out.println(\\\"时间转换出错，出错信息为 ={}\\\" + e); } } } \",\"涉及时间戳转换时，每次我们都new一个SimpleDateFormat对象，用起来很麻烦。\",\"我们就把它们放到了一个常量类里，随时用随时取。\",\"/** * 枚举类 常量类 * * @author zhengtianqi * @date 2019/8/16 */ public enum ConstantUtils { public static final SimpleDateFormat IN_FORMAT = new SimpleDateFormat(\\\"yyyyMMddHHmmssSSS\\\"); public static final SimpleDateFormat OUT_FORMAT = new SimpleDateFormat(\\\"yyyy-MM-dd\\\"); public static final SimpleDateFormat VIEW_FORMAT = new SimpleDateFormat(\\\"yyyy年MM月\\\"); public static final SimpleDateFormat INNER_FORMAT = new SimpleDateFormat(\\\"yyyy-MM\\\"); public static final SimpleDateFormat RECALL_FORMAT = new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"); } \",\"可是你想省事，麻烦就随之而来了！\",\"先看看错误：\",\"[2019-10-12 17:45:35,468][locallog][ERROR][TID: N/A][../filters/GlobalExeption.exceptionHandler:18][10.7.5.22][] - 服务器内部错误! java.lang.NumberFormatException: For input string: \\\".220188E.4220188\\\" at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043) ~[?:1.8.0_221] at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110) ~[?:1.8.0_221] at java.lang.Double.parseDouble(Double.java:538) ~[?:1.8.0_221] at java.text.DigitList.getDouble(DigitList.java:169) ~[?:1.8.0_221] at java.text.DecimalFormat.parse(DecimalFormat.java:2089) ~[?:1.8.0_221] at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1869) ~[?:1.8.0_221] at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1514) ~[?:1.8.0_221] at java.text.DateFormat.parse(DateFormat.java:364) ~[?:1.8.0_221] \",\"debug发现传出的参数不是自己想要的参数。可是为什么呢？\",\"​ 因为它是线程不安全的，当并发环境下，如果考虑不周使用SimpleDateFormat方法可以会出现线程安全方面的问题。原因当问我们使用parse方法时，使用CalendarBuilder日历创建者类创建日期，其中calendar实例因为cpu时间片切换时共享变量进行clear操作，导致数据不一致。\",\"具体原因：https://blog.csdn.net/lululove19870526/article/details/83684568\",\"​ 1、临时创建：对于每个转换都new一个实例，有背与我们代码简洁的初衷，放弃。\",\"​ 2、synchronized：阻塞，让线程不在并发，对效率影响很大，放弃。\",\"​ 3、ThreadLocal：线程隔离机制，代码量减少了，和1一样也牺牲了部分空间，还是个不错的解决方法。\",\"​ https://www.jianshu.com/p/3c5d7f09dfbd\",\"​ 4、Apache的 DateFormatUtils 与 FastDateFormat：线程安全，但是木有parse()方法\",\"​ 5、Joda-Time：感觉不错，就是源码有点多没敢用，github目前2.4K star。\",\"​ 用了ThreadLocal\",\"/** * 枚举类 常量类 * * @author zhengtianqi * @date 2019/8/16 */ public enum ConstantUtils { public static final ThreadLocal<SimpleDateFormat> IN_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\\\"yyyyMMddHHmmssSSS\\\")); public static final ThreadLocal<SimpleDateFormat> VIEW_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\\\"yyyy-MM-dd\\\")); public static final ThreadLocal<SimpleDateFormat> OUT_FORMAT = ThreadLocal.withInitial(() -> new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\")); } \",\"// 调用 ConstantUtils.IN_FORMAT.get().format(requestParams.getReleaseTime()) \"]},\"627\":{\"h\":\"Spark相关概述\",\"t\":[\"​ 集群资源管理服务（Cluster Manager）\",\"​ 运行作业任务的节点（WorkerNode），\",\"​ 每个应用的任务控制节点 Driver 和 每个机器节点上有具有任务的执行进程（Executor）\",\"image-20191218134210879\",\"说明：\",\"image-20191218140600902\",\"（1）RDD\",\"​ Spark 的核心概念是弹性分布式数据集。RDD 是一个只读且不可变的分布式对象集合，创建、转化即调用 RDD 操作者一系列过程贯穿于 Spark 大数据处理的始终。\",\"（2）DAG\",\"​ Spark使用有向无环图进行任务调度。\",\"（3）Spark SQL\",\"​ 用于结构化数据的计算。\",\"（4）DataFrame\",\"​ 分布式的、按照名名列的形式组织的数据集合。\",\"（5）SQLContext\",\"​ Spark SQL 提供 SQLContext 封装 Spark 中的所有关系型功能，可以用前面提到的SparkContext创建SQLContext。\",\"（6）JDBC数据源\",\"三、Spark 和 HDFS 的配合关系\",\"​ \",\"（1）读取文件的详细步骤：\",\"SparkScheduler 与 HDFS 交互获取 File A 的文件信息。\",\"HDFS返回该文件具体的 Block 信息\",\"SparkScheduler 根据具体的 Block 数据量，决定一个并行度，创建多个 Task 去读取这些文件Block\",\"Executor 端执行 Task 并读取具体的 Block，作为 RDD（弹性分部数据集）的一部分\",\"（2）HDFS文件写入的详细步骤：\",\"SparkScheduler 创建要写入文件的目录\",\"根据 RDD 分区分块情况，计算写出数据的 Task 数，并下发这些任务到 Executor\",\"Executor 执行这些 Task，将具体 RDD 的数据写入到第一步创建的目录下\"]},\"628\":{\"h\":\"String、 StringBuilder、StringBuffer区别\"},\"629\":{\"h\":\"（1）运行速度\",\"t\":[\"​ StringBuilder > StringBuffer > String ​ String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，即String对象一旦创建之后该对象是不可更改的，但后两者的对象是变量，是可以更改的。\",\"​ 因为String修改其实是new了一个新对象，原来的String被JVM的垃圾回收机制（GC）给回收掉了。\",\"image-20200721154908228\",\"​ Java中对String对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程，所以执行速度很慢。\"]},\"630\":{\"h\":\"（2）线程安全\",\"t\":[\"StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的\"]},\"631\":{\"h\":\"（3）继承关系\",\"t\":[\"image-20200721155019047\",\"image-20200721154514018\",\"参考：https://blog.csdn.net/itchuxuezhe_yang/article/details/89966303\"]},\"632\":{\"h\":\"TCP IP四层网络模型\"},\"633\":{\"h\":\"1、用户发送请求\"},\"634\":{\"h\":\"2、服务器接收请求\"},\"635\":{\"h\":\"3、网络连接模型\",\"t\":[\"（《网络是怎么连接的》课本翻译）\"]},\"636\":{\"h\":\"4、使用协议进行通讯\",\"t\":[\"​ socket是一种抽象层，应用程序通过它来发送和接收数据，就像应用程序打开一个文件句柄，把数据读写到磁盘上一样。主要的socket类型为： ​ 1.流套接字（stream socket）-TCP ​ 2.数据报文套接字（datagram socket）-UDP\"]},\"637\":{\"h\":\"5、Socket通讯模型\",\"t\":[\"6、TCP协议的通信过程\",\"​ 对于TCP通信来说，每个TCPSocket的内核中都有一个发送缓冲区和一个接收缓冲区，TCP的全双工的工作模式及TCP的滑动窗口就是依赖于这两个独立的Buffer和该Buffer的填充状态。\"]},\"638\":{\"h\":\"TCP与UDP的区别\",\"t\":[\"​ 网络协议中，TCP/IP有两个具有代表性的传输层协议，分别是TCP和UDP。\",\"​ 计算机与网络设备要相互通信，双方就必须基于相同的方法和规则。而我们就把这种规则称为协议（protocol）\",\"​ TCP/IP 是互联网相关的各类协议族的总称，比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。\",\"img\",\"​ UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。\",\"​ 在OSI模型中，UDP在第四层传输层，处于IP协议的上一层。\",\"​ UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。特点如下：\"]},\"639\":{\"h\":\"（1）面向无连接\",\"t\":[\"​ 首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\",\"具体来说就是：\",\"​ 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了 ​ 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\"]},\"640\":{\"h\":\"（2）单播、多播、广播\",\"t\":[\"​ UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\"]},\"641\":{\"h\":\"（3）不可靠性\",\"t\":[\"​ 有可能收不到、数据可能不完整（丢包）\"]},\"642\":{\"h\":\"（4）头部开销小、传输高效\",\"t\":[\"image-20200721081546701\",\"UDP 头部包含了以下几个数据：\",\"​ 两个十六位的端口号，分别为源端口（可选字段）和目标端口 ​ 整个数据报文的长度 ​ 整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误 ​ 因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的\",\"​ TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构。\"]},\"643\":{\"h\":\"（1）TCP连接\",\"t\":[\"三次握手、四次挥手\"]},\"644\":{\"h\":\"（2）特点\",\"t\":[\"面向连接：\",\"​ 面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。\",\"仅支持单播传输：\",\"​ 每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。\",\"面向字节流： TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。\",\"可靠传输：\",\"​ 对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。\",\"提供拥塞控制：\",\"​ 当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞\",\"TCP提供全双工通信： TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）\"]},\"645\":{\"h\":\"4、对比\",\"t\":[\"image-20200721082159974\",\"​\\t\\tTCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为\\n​\\t\\t对数据准确性要求高，速度可以相对较慢的，可以选用TCP\"]},\"646\":{\"h\":\"TCP握手、挥手协议\"},\"647\":{\"h\":\"1、TCP三次握手协议（打开连接）\",\"t\":[\"第一次： A城发信，B城收到了------> 此时B城就会明白 ：A城的发信能力和自己的收信能力是没问题的\",\"第二次：B城发信，A城收到了-----> 此时A城就会明白 ：A城的发信能力和收信能力都是没问题的，B城的发信能力和收信能力都是没问题的。但是B不知道自己发信能力如何，所以要进行第三次握手\",\"第三次：A城发信，B城收到了，此时B城就会明白，B城的发信能力和自己的收信能力是没有问题的。\",\"更加简洁的图片\"]},\"648\":{\"h\":\"2、TCP四次挥手协议（关闭连接）\",\"t\":[\"第一次：A和B打电话，通话即将结束后，A说“我有事先忙了，我得关闭链接了”，\",\"第一次握手(SYN=1, seq=x)\",\"客户端发送一个TCP的SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号X,保存在包头的序列号(Sequence Number)字段里。\",\"发送完毕后，客户端进入SYN_SEND 状态。\",\"第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):\",\"服务器发回确认包(ACK)应答。即SYN 标志位和ACK 标志位均为1。服务器端选择自己ISN 序列号，放到Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的ISN 加1，即X+1。\",\"发送完毕后，服务器端进入SYN_RCVD 状态。\",\"第三次握手(ACK=1，ACKnum=y+1)\",\"客户端再次发送确认包(ACK)，SYN标志位为0，ACK标志位为1，并且把服务器发来ACK的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN发完毕后，客户端进入ESTABLISHED 状态，当服务器端接收到这个包时，也进入ESTABLISHED 状态，TCP握手结束。\"]},\"649\":{\"h\":\"（2）四次挥手\",\"t\":[\"第一次挥手(FIN=1，seq=x)\",\"假设客户端想要关闭连接，客户端发送一个FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进入FIN_WAIT_1 状态。\",\"第二次挥手(ACK=1，ACKnum=x+1)\",\"服务器端确认客户端的FIN包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。发送完毕后，服务器端进入CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入FIN_WAIT_2 状态，等待服务器端关闭连接。\",\"第三次挥手(FIN=1，seq=w)\",\"服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN置为1。发送完毕后，服务器端进入LAST_ACK 状态，等待来自客户端的最后一个ACK。\",\"第四次挥手(ACK=1，ACKnum=w+1)\",\"客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入TIME_WAIT状态，等待可能出现的要求重传的ACK包。\",\"服务器端接收到这个确认包之后，关闭连接，进入CLOSED 状态。\",\"客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的ACK，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入CLOSED状态。\"]},\"650\":{\"h\":\"ThreadLocal\",\"t\":[\"引言：本博客《SimpleDateFormat引发的线程安全问题》中提到，可以利用 ThreadLocal 来解决SimpleDateFormat的线程安全问题。之后看到阿里巴巴开发规范中也有提到，SimpleDateFormat禁止使用static进行修饰。\",\"image-20200331153816952\",\"ThreadLocal归纳下来就2类用途：\",\"（1）保存线程上下文信息，在任意需要的地方可以获取 （2）线程安全的，避免某些情况需要考虑线程安全必须同步带来的性能损失\",\"​ 由于ThreadLocal的特性，同一线程在某地方进行设置，在随后的任意地方都可以获取到。从而可以用来保存线程上下文信息。\",\"​ 常用的比如每个请求怎么把一串后续关联起来，就可以用ThreadLocal进行set，在后续的任意需要记录日志的方法里面进行get获取到请求id，从而把整个请求串起来。还有比如Spring的事务管理，用ThreadLocal存储Connection，从而各个DAO可以获取同一Connection，可以进行事务回滚，提交等操作。\",\"package cn.edu.bjut; public class ThreadLocalTest { private static ThreadLocal<Integer> threadLocal = new ThreadLocal<>(); public static void main(String[] args) { // 一个线程向ThreadLocal里面写值并打印，另一个线程向ThreadLocal里取值并打印 new Thread(() -> { try { for (int i = 0; i < 100; i++) { threadLocal.set(i); System.out.println(Thread.currentThread().getName() + \\\"=\\\" + threadLocal.get()); try { Thread.sleep(200); } catch (InterruptedException e) { e.printStackTrace(); } } } finally { threadLocal.remove(); } }, \\\"threadlocal1\\\").start(); // new Thread(() -> { try { for (int i = 0; i < 100; i++) { System.out.println(Thread.currentThread().getName() + \\\"=\\\" + threadLocal.get()); try { Thread.sleep(200); } catch (InterruptedException e) { e.printStackTrace(); } } } finally { threadLocal.remove(); } }, \\\"threadlocal2\\\").start(); } } \",\"代码的执行结果：\",\"threadlocal1=0 threadlocal2=null threadlocal2=null threadlocal1=1 threadlocal2=null threadlocal1=2 ....... \",\"结果可以看到 ：\",\"（1）第二个线程 是访问不到 第一个线程 所存的值的。它们存在线程的隔离。\",\"（2）也就是说每个线程有一个自己的 ThreadLocalMap ，所以每个线程往这个 ThreadLocal 中读写隔离的，并且是互相不会影响的。\",\"img\",\"一个ThreadLocal只能存储一个Object对象，如果需要存储多个 Object 对象那么就需要多个 ThreadLocal\",\"ThreadLocal 会产生内存泄露吗？\",\"内存泄露：我的理解就是当我们不实用 ThreadLocal 实例的时候，它没有办法 GC 掉，或者等内存将要满的时候才会发生GC。所以如果多个线程使用 ThreadLocal 的话，就会导致大量内存被占据。\",\"Why？\",\"为什么会这样？这就要学习一下 java 对象的引用包括 ： 强引用，软引用，弱引用，虚引用 。\",\"弱引用也是用来描述非必需对象的，当 JVM 进行垃圾回收时，无论内存是否充足，该对象仅仅被弱引用关联，那么就会被回收。\",\"当仅仅只有 ThreadLocalMap 中的 Entry 的 key 指向 ThreadLocal 的时候，ThreadLocal 会进行回收的！！！\",\"ThreadLocal被垃圾回收后，在 ThreadLocalMap 里对应的 Entry 的键值会变成null，但是Entry是强引用，那么Entry里面存储的Object，并没有办法进行回收，所以 ThreadLocalMap 做了一些额外的回收工作。\",\"》》》》》》\",\"但是很多时候，我们都是用在线程池的场景，程序不停止，线程基本不会销毁！！！\",\"如果使用线程池，使用不当会导致内存泄露，编码时候要养成良好的习惯，线程中使用完 ThreadLocal 变量后，要记得及时 remove 掉。\",\"在某些项目中，ThreadLocal用来存储用户信息，进行父子线程中的数据传递，比如下拦截器中的使用：\",\"如果不remove掉，后面每次新请求过来，线程ThreadLocal中似乎已经有值了。\",\"原因大概大家已经知道了，程序运行在tomcat中，执行程序的线程是tomcat的工作线程，而tomcat的工作线程是基于线程池的。\",\"线程池会重用固定的几个线程，我们将 server.tomcat.threads.max 设置为1，把工作线程池最大线程数设置为1，这样始终是同一个线程在处理请求，因此下一个请求的线程中会遗留上一次请求的信息。\",\"解决方案只需要在每次请求结束之后将ThreadLocal清空或者在请求之前将其清空即可。\",\"如下代码：\",\"public class HeaderInterceptor implements AsyncHandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { if (!(handler instanceof HandlerMethod)) { return true; } SecurityContextHolder.setUserId(ServletUtils.getHeader(request, SecurityConstants.DETAILS_USER_ID)); SecurityContextHolder.setUserName(ServletUtils.getHeader(request, SecurityConstants.DETAILS_USERNAME)); SecurityContextHolder.setUserKey(ServletUtils.getHeader(request, SecurityConstants.USER_KEY)); String token = SecurityUtils.getToken(); if (StringUtils.isNotEmpty(token)) { LoginUser loginUser = AuthUtil.getLoginUser(token); if (StringUtils.isNotNull(loginUser)) { AuthUtil.verifyLoginUserExpire(loginUser); SecurityContextHolder.set(SecurityConstants.LOGIN_USER, loginUser); } } return true; } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { SecurityContextHolder.remove(); } } \",\"import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import com.alibaba.ttl.TransmittableThreadLocal; public class SecurityContextHolder { private static final TransmittableThreadLocal<Map<String, Object>> THREAD_LOCAL = new TransmittableThreadLocal<>(); public static void set(String key, Object value) { Map<String, Object> map = getLocalMap(); map.put(key, value == null ? StringUtils.EMPTY : value); } public static String get(String key) { Map<String, Object> map = getLocalMap(); return Convert.toStr(map.getOrDefault(key, StringUtils.EMPTY)); } public static <T> T get(String key, Class<T> clazz) { Map<String, Object> map = getLocalMap(); return StringUtils.cast(map.getOrDefault(key, null)); } public static Map<String, Object> getLocalMap() { Map<String, Object> map = THREAD_LOCAL.get(); if (map == null) { map = new ConcurrentHashMap<String, Object>(); THREAD_LOCAL.set(map); } return map; } public static void setLocalMap(Map<String, Object> threadLocalMap) { THREAD_LOCAL.set(threadLocalMap); } public static Long getUserId() { return Convert.toLong(get(SecurityConstants.DETAILS_USER_ID), 0L); } public static void setUserId(String account) { set(SecurityConstants.DETAILS_USER_ID, account); } public static String getUserName() { return get(SecurityConstants.DETAILS_USERNAME); } public static void setUserName(String username) { set(SecurityConstants.DETAILS_USERNAME, username); } public static String getUserKey() { return get(SecurityConstants.USER_KEY); } public static void setUserKey(String userKey) { set(SecurityConstants.USER_KEY, userKey); } public static String getPermission() { return get(SecurityConstants.ROLE_PERMISSION); } public static void setPermission(String permissions) { set(SecurityConstants.ROLE_PERMISSION, permissions); } public static void remove() { THREAD_LOCAL.remove(); } } \",\"学习资源来自于： http://www.jiangxinlingdu.com/ 「公众号：匠心零度 」中的《手撕面试题threadlocal》\\n参考：https://blog.csdn.net/jisuanji12306/article/details/127038874\"]},\"651\":{\"h\":\"Tomcat性能优化整理\",\"t\":[\"-Xms<size> \",\"表示JVM初始化堆的大小\",\"-Xmx<size> \",\"表示JVM堆的最大值\",\"​ 这两个值的大小一般根据需要进行设置。当应用程序需要的内存超出堆的最大值时虚拟机就会提示内存溢出，并且导致应用服务崩溃。因此一般建议堆的最大值设置为可用内存的最大值的80%。\",\"​ 在catalina.bat中，设置JAVA_OPTS='-xms256m-Xmx512M‘，表示初始化内存为256 MB，可以使用的最大内存为512 MB。\",\"​ 当web应用程序向要记录客户端的信息时，它也会记录客户端的IP地址或者通过域名服务器查找机器名转换为IP地址。\",\"​ DNS查询需要占用网络，并且包括可能从很多很远的服务器或者不起作用的服务器上去获取对应的IP的过程，这样会消耗一定的时间。\",\"​ 为了消除DNS查询对性能的影响我们可以关闭DNS查询，方式是修改server.xml文件中的enableLookups参数值。\",\"​ 通过应用程序的连接器(Connector)进行性能控制的的参数是创建的处理请求的线程数。Tomcat 使用线程池加速响应速度来处理请求。\",\"​ 在Java中线程是程序运行时的路径，是在一个程序中与其它控制线程无关的、能够独立运行的代码段。它们共享相同的地址空间。\",\"​ 多线程帮助程序员写出CPU最大利用率的高效程序，使空闲时间保持最低，从而接更多的请求。\",\"​ Tomcat4中可以通过修改minProcessors和maxProcessors的值来控制线程数。这些值在安装后就已经设定为默认值并且是足够使用的，但是随着站点的扩容而改大这些值。\",\"​ minProcessors 服务器启动时创建的处理请求的线程数应该足够处理一个小量的负载。也就是说，如果一天内每秒仅发生5次单击事件，并且每个请求任务处理需要1秒钟，那么预先设置线程数为5就足够了。但在你的站点访问量较大时就需要设置更大的线程数，指定为参数maxProcessors的值。\",\"​ maxProcessors的值也是有上限的，应防止流量不可控制(或者恶意的服务攻击)，从而导致超出了虚拟机使用内存的大小。如果要加大并发连接数，应同时加大这两个参数。\",\"​ Web server 允许的最大连接数还受制于操作系统的内核参数设置，通常Windows是2000个左右，Linux是1000个左右。\",\"在Tomcat5对这些参数进行了调整，请看下面属性:\",\"​ maxThreads Tomcat 使用线程来处理接收的每个请求。这个值表示Tomcat可创建的最大的线程数。 ​ acceptCount指定当所有可以使用的处理请求的线程数都被使用时，可以放到处理队列中的请求数，超过这个数的请求将不予处理。 ​ connnection Timeout网络连接超时，单位:毫秒。设置为0表示永不超时，这样设置有隐患的。通常可设置为30000毫秒。\",\"​ minSpareThreadsTomcat初始化时创建的线程数。 ​ maxSpareThreads一旦创建的线程超过这个值，Tomcat就会关闭不再需要的socket 线程。\",\"​ 最好的方式是多设置几次并且进行测试，观察响应时间和内存使用情况。在不同的机器、操作系统或虚拟机组合的情况下可能会不同，而且并不是所有人的web站点的流量都是一样的，因此没有一刀切的方案来确定线程数的值。\",\"​ 首先检查程序有没有限入死循环 ​ 这个问题主要还是由这个问题 java.lang.0utOfMemoryError:Javaheap space引起的。\",\"​ 第一次出现这样的的问题以后，引发了其他的问题。在网上—查可能是JAVA的堆栈设置太小的原因。\",\"跟据网上的答案大致有这两种解决方法:\",\"（1）设置环境变量 解决方法:手动设置Heap size 修改TOMCAT_HOME/bin/catalina.sh\",\"​ set JAVA_OPTS=-Xms32m-Xmx512m\",\"​ 可以根据自己机器的内存进行更改。\",\"（2）java-Xms32m-Xmx800m className 就是在执行JAVA类文件时加上这个参数，其中className 是需要执行的确类名。(包括包名)这个解决问题了。而且执行的速度比没有设置的时候快很多。\",\"​ 如果在测试的时候可能会用Eclispe这时候就需要在Eclipse->run-arguments中的VM arguments中输入-Xms32m-Xmx800m这个参数就可以了。\",\"（3）java.lang.OutOfMemoryError: PermGen space PermGen space的全称是Permanent Generation space ,是指内存的永久保存区域，这块内存主要是被JVM存放Class和Meta信息的,Class在被Loader时就会被放到PermGen space中,它和存放类实例(Instance)的Heap区域不同,GC(GarbageCollection)不会在主程序运行期对PermGen space进行清理，所以如果你的应用中有很多CLASS的话，就很可能出现PermGen space 错误。 解决方法:手动设置MaxPermSize大小修\",\"（4）java.lang.OutOfMemoryError:Java heap space Heap size设置 JVM堆的设置是指java程序运行过程中JVM可以调配使用的内存空间的设置.JVM在启动的时候会自动设置Heap size的值，其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。可以利用JVM提供的-Xmn-Xms-Xmx等选项可进行设置。Heap size的大小是Young Generation和TenuredGeneraion之和。\",\"​ 提示:在JVM中如果98%的时间是用于GC且可用的Heap size不足2%的时候将抛出此异常信息。 ​ 提示:Heap Size最大不要超过可用物理内存的80%，一般的要将-Xms 和-Xmx选项设置为相同，而-Xms为1/4的-Xmx值。 解决方法:手动设置Heap size 修改 TOMCAT_HOME/bin/catalina.sh 在“echo\\\"Using CATALINA_BASE:$CATALINA_BASE\\\"\\\"上面加入以下行:JAVA_OPTS=\\\"-server-Xms800m-Xmx800m-XX:MaxNewSize=256m\\\"\",\"5、\"]},\"652\":{\"h\":\"WordCount简析\",\"t\":[\"package org.apache.hadoop.examples; import java.io.IOException; import java.util.StringTokenizer; import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.Path; import org.apache.hadoop.io.IntWritable; import org.apache.hadoop.io.Text; import org.apache.hadoop.mapreduce.Job; import org.apache.hadoop.mapreduce.Mapper; import org.apache.hadoop.mapreduce.Reducer; import org.apache.hadoop.mapreduce.lib.input.FileInputFormat; import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; import org.apache.hadoop.util.GenericOptionsParser; public class WordCount { /** * map 阶段 * <p> * Object 此处为文本数据的起始位置的偏移量;可以直接使用 Long 类型，源码此处使用Object做了泛化 * Text 输入< key, value >对的 value 值，此处为一段具体的文本数据 * Text 输出< key, value >对的 key 值，此处为一个单词 * IntWritable：输出< key, value >对的 value 值，此处固定为 1 */ public static class TokenizerMapper extends Mapper<Object, Text, Text, IntWritable> { // IntWritable 是 Hadoop 对 Integer 的进一步封装，使其可以进行序列化。 private final static IntWritable one = new IntWritable(1); // map 端的任务是对输入数据按照单词进行切分，每个单词为 Text 类型。 private Text word = new Text(); /** * @param key 输入数据在原数据中的偏移量 * @param value 具体的数据数据，此处为一段字符串 * @param context 用于暂时存储 map() 处理后的结果 * @throws IOException IO异常 * @throws InterruptedException 中断异常 */ @Override public void map(Object key, Text value, Context context ) throws IOException, InterruptedException { // 字符串分割，也可以用 apache.common.lang3的 StringUtils.split StringTokenizer itr = new StringTokenizer(value.toString()); // map 输出的 key value while (itr.hasMoreTokens()) { word.set(itr.nextToken()); context.write(word, one); } } } /** * reduce阶段，map的输出是reduce的输入 * Text：输入< key, value >对的key值，此处为一个单词 * IntWritable：输入< key, value >对的value值 * Text：输出< key, value >对的key值，此处为一个单词 * IntWritable：输出< key, value >对，此处为相同单词词频累加之后的值。实际上就是一个数字 */ public static class IntSumReducer extends Reducer<Text, IntWritable, Text, IntWritable> { private IntWritable result = new IntWritable(); /** * @param key 输入< key, value >对的key值，也就是一个单词 * @param values 一系列的key值相同的序列化结构 * @param context 临时存储reduce端产生的结果 * @throws IOException IO异常 * @throws InterruptedException 中断异常 */ @Override public void reduce(Text key, Iterable<IntWritable> values, Context context ) throws IOException, InterruptedException { // 将相同的key进行合并，value累加 int sum = 0; for (IntWritable val : values) { sum += val.get(); } result.set(sum); // 单词和它的数目 context.write(key, result); } } public static void main(String[] args) throws Exception { Configuration conf = new Configuration(); String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs(); if (otherArgs.length < 2) { System.err.println(\\\"Usage: wordcount <in> [<in>...] <out>\\\"); System.exit(2); } // main函数调用Job类及逆行MapReduce 作业的初始化 Job job = Job.getInstance(conf, \\\"word count\\\"); job.setJarByClass(WordCount.class); // 设置 job 的 map 阶段的执行类 job.setMapperClass(TokenizerMapper.class); // 设置 job 的 combine 阶段的执行类 job.setCombinerClass(IntSumReducer.class); // 设置 job 的 reduce 阶段的执行类 job.setReducerClass(IntSumReducer.class); // map的输出 key、value 映射 job.setOutputKeyClass(Text.class); // 设置程序的输出的value值的类型 job.setOutputValueClass(IntWritable.class); // 调用 addInputFormat 设置输入路径 for (int i = 0; i < otherArgs.length - 1; ++i) { // Path 是绝对路径 FileInputFormat.addInputPath(job, new Path(otherArgs[i])); } // 输入文件 和 输出文件的路径 FileOutputFormat.setOutputPath(job, new Path(otherArgs[otherArgs.length - 1])); // 等待任务完成，任务完成之后退出程序 System.exit(job.waitForCompletion(true) ? 0 : 1); } } \"]},\"653\":{\"h\":\"Yarn概述\",\"t\":[\"​ Yarn的基本思想是将 JobTracker 的资源管理和作业的调度/监控两大主要职能拆分为两个独立的进程：\",\"​ a. 一个全局的 Resource Manager\",\"​ b. 每个应用对应的 Application Master（AM）\",\"​ Resource Manager 和每个节点上的 Node Manager（NM）组成了全新的通用操作系统，以分布式的方式管理应用程序。\",\"​ Resource Manager拥有为系统中所有应用分配资源的决定权。与之相关的是应用程序的Application Master，负责与Resource Manager协商资源，并与Node Manager协同工作来执行和监控任务。\",\"image-20191218091838954\"]},\"654\":{\"h\":\"（1）Resource Manager\",\"t\":[\"​ Yarn Resource Manager是一个纯粹的调度器，它负责整个系统的资源管理和分配。它本身主要由两个组件构成：调度器（Scheduler）和应用程序管理器（Applications Manager，AM）。\",\"​ 调度器根据容量、队列等限制条件，将系统中的资源分配给各个正在运行的应用程序。\",\"注意：该调度器是一个“纯调度器”，他不再从事任何与具体应用程序相关的工作\"]},\"655\":{\"h\":\"（2）Application Master\",\"t\":[\"​ Application Master实际上是特定框架库的一个实例，负责与 Resource Manager协商资源，并和Resource Manager协同工作来 执行和监控Container，以及它们的资源消耗。\"]},\"656\":{\"h\":\"（3）Node Manager\",\"t\":[\"​ Node Manager 是每个节点的框架代理。她负责启动应用的Container，监控Container的资源使用（包括CPU、内存、硬盘和网络带宽等），并把这些信息汇报给调度器。\"]},\"657\":{\"h\":\"（4）Resource Request 和 Container\",\"t\":[\"​ Yarn 被设计成可以允许应用程序（通过 Application Master） 以共享的、安全的，以及多用租户的方式使用集群的资源。它也会感知集群的网络拓扑，一边可以有效地调度，以及优化数据访问。\",\"​ （1）客户端提交 MapReduce作业\",\"​ （2）Yarn 资源管理器负责协调集群上计算资源的分配\",\"​ （3）Yarn 节点管理器（Node Manager）负责启动和监视集群中机器上的计算容器（Container）\",\"​ （4）应用程序的 Master 负责协调运行 MapReduce 作业的任务，它和MapReduce 任务在容器中运行，这些同期由资源管理器分配对节点管理器进行管理\",\"​\\t（5）分布式文件系统（HDFS）用来与其他实体间共享作业文件\"]},\"658\":{\"h\":\"互斥锁\"},\"659\":{\"h\":\"1、关于“互斥”和“同步”的概念\",\"t\":[\"互斥 : 就是线程A访问了一组数据，线程BCD就不能同时访问这些数据，直到A停止访问了 同步 : 就是ABCD这些线程要约定一个执行的协调顺序，比如D要执行，B和C必须都得做完，而B和C要开始，A必须先得做完。\",\"互斥 ：就是不同线程通过竞争进入临界区（共享的数据和硬件资源），为了防止访问冲突，在有限的时间内只允许其中之一独占性的使用共享资源。如不允许同时写\",\"同步 ：关系则是多个线程彼此合作，通过一定的逻辑关系来共同完成一个任务。一般来说，同步关系中往往包含互斥，同时对临界区的资源会按照某种逻辑顺序进行访问。如先生产后使用\",\"总的来说，两者的区别就是：\",\"互斥是通过竞争对资源的独占使用，彼此之间不需要知道对方的存在，执行顺序是一个乱序。\",\"同步是协调多个相互关联线程合作完synchronized不同用法锁对象说明\"]},\"660\":{\"h\":\"2、JAVA中synchronized和Lock是互斥锁\",\"t\":[\"修饰在静态方法上，锁对象是当前类的Class对象 修饰在实例方法上，锁对象是当前实例对象 同步块中，锁对象是synchronized括号后面的对象成任务，彼此之间知道对方存在，执行顺序往往是有序的。\"]},\"661\":{\"h\":\"3、synchronized的用法\",\"t\":[\"/** 如下demo的4个方法展示了不同使用方法下锁对象 **/ public class SynchronizedDemo { private static final Object LOCK = new Object(); public static synchronized void s1(){ System.out.println(\\\"类同步方法，锁对象是当前Class对象\\\"); } public synchronized void s2() { System.out.println(\\\"实例同步方法，锁对象是当前对象\\\"); } public void s3() { synchronized (LOCK) { System.out.println(\\\"同步块，锁对象是LOCK对象\\\"); } } public void s4() { synchronized (SynchronizedDemo.class) { System.out.println(\\\"同步块，锁对象和静态同步方法的锁对象一样都是当前Class对象\\\"); } } } \"]},\"662\":{\"h\":\"伪共享\",\"t\":[\"​ 以近代CPU的视角来说，它们的作用都是作为CPU与主内存之间的高速数据缓冲区，L1最靠近CPU核心；L2其次；L3再次。\",\"​ 图具有3级缓存的处理器\",\"image-20201214133601256\",\"image-20201214133612299\",\"图片来自： https://lwn.net/Articles/252125/\",\"​ 早期，缓存设计过去常常在CPU外部安装L2和L3缓存，这会对延迟产生负面影响。\",\"​ 缓存设计总是在不断发展，特别是随着内存变得更便宜，更快，更密集。英特尔和AMD已经在缓存设计方面做了大量实验，\",\"​ 英特尔甚至尝试使用L4缓存。CPU市场正以前所未有的速度向前发展。\",\"L1（1级）高速缓存是计算机系统中存在的最快内存。在访问优先级方面，L1缓存具有CPU在完成特定任务时最可能需要的数据。L1缓存通常也有两种分割方式，分为指令缓存和数据缓存。指令高速缓存处理有关CPU必须执行的操作的信息，而数据高速缓存保存要在其上执行操作的数据。 L2（级别2）缓存比L1缓存慢，在大多数现代CPU中，L1和L2高速缓存存在于CPU内核本身，每个内核都有自己的高速缓存。 L3（Level 3）缓存是最大的缓存单元，也是最慢的缓存单元。它的范围在4MB到50MB之间。现代CPU在CPU裸片上有专用空间用于L3缓存，占用了大量空间。\",\"数据从RAM流到L3缓存，然后是L2，最后是L1。\",\"当处理器正在寻找执行操作的数据时，它首先尝试在L1高速缓存中找到它。如果CPU能够找到它，则该条件称为缓存命中。\",\"然后它继续在L2中找到它，然后在L3中找到它。\",\"如果找不到数据，它会尝试从主存储器访问它。这称为缓存未命中。\",\"缓存，是由缓存行组成的。一般一行缓存行有64字节 所以使用缓存时，并不是一个一个字节使用，而是一行缓存行、一行缓存行这样使用；换句话说，CPU存取缓存都是按照一行，为最小单位操作的。\",\"image-20201214133830361\"]},\"663\":{\"h\":\"产生原因：\",\"t\":[\"数据X、Y、Z被加载到同一Cache Line中， 线程A在Core1修改X，线程B在Core2上修改Y\",\"根据MESI，假设是Core1是第一个发起操作的CPU核，Core1上的L1 Cache Line由S（共享）状态变成M（修改，脏数据）状态，然后告知其他的CPU核，图例则是Core2，引用同一地址的Cache Line已经无效了； 当Core2发起写操作时，首先导致Core1将X写回主存，Cache Line状态由M变为I（无效），而后才是Core2从主存重新读取该地址内容，Cache Line状态由I变成E（独占），最后进行修改Y操作， Cache Line从E变成M。可见多个线程操作在同一Cache Line上的不同数据，相互竞争同一Cache Line，导致线程彼此牵制影响，变成了串行程序，降低了并发性。\"]},\"664\":{\"h\":\"解决方法：\",\"t\":[\"此时我们则需要将共享在多线程间的数据进行隔离，使他们不在同一个Cache Line上，从而提升多线程的性能。即 缓存行的填充。\",\"图片来自：https://blog.csdn.net/qq_27680317/article/details/78486220\",\"M 修改 (Modified) E 独享、互斥 (Exclusive) S 共享 (Shared) I 无效 (Invalid)\"]},\"665\":{\"h\":\"6.1、伪共享的产生\",\"t\":[\"​ 假如业务场景中，上述的类满足以下几个特点：\",\"​ 当value变量改变时，modifyTime肯定会改变createTime变量和key变量在创建后，就不会再变化。flag也经常会变化，不过与modifyTime和value变量毫无关联。\",\"​ 当上面的对象需要由多个线程同时的访问时，从Cache角度来说，就会有一些有趣的问题。当我们没有加任何措施时，Data对象所有的变量极有可能被加载在L1缓存的一行Cache Line中。\",\"image-20201214133935704\",\"​ 如图所示，每次value变更时，根据MESI协议，对象其他CPU上相关的Cache Line全部被设置为失效。其他的处理器想要访问未变化的数据(key 和 createTime)时，必须从内存中重新拉取数据，增大了数据访问的开销。\",\"image-20201214133955605\"]},\"666\":{\"h\":\"6.2、解决方法\"},\"667\":{\"h\":\"（1）缓存行的填充\",\"t\":[\"image-20201214134132982\",\"​ 在JDK1.8以前，我们一般是在属性间增加长整型变量来分隔每一组属性。\",\"​ 通过填充变量，使不相关的变量分开。被操作的每一组属性占的字节数\",\"​ 加上前后填充属性所占的字节数，不小于一个cache line的字节数就可以达到要求\"]},\"668\":{\"h\":\"6.2、解决方法\"},\"669\":{\"h\":\"（2）Contended注解方式\",\"t\":[\"image-20201214134208507\",\"​ 在JDK1.8中，新增了一种注解@sun.misc.Contended，来使各个变量在Cache line中分隔开。注意，jvm需要添加参数-XX:-RestrictContended才能开启此功能\",\"采取上述措施图示：\",\"image-20201214134235050\",\"更多实例：ConcurrentHashMap、Thread 、Disruptor\"]},\"670\":{\"h\":\"偏向锁\"},\"671\":{\"h\":\"0、从偏向锁到重量锁\",\"t\":[\"​ 在java同步代码快中，synchronized的使用方式无非有两个 :\",\"​ 1）通过对一个对象进行加锁来实现同步\",\"synchronized(lockObject){ //代码 } \",\"​ 2）对一个方法进行synchronized声明，进而对一个方法进行加锁来实现同步。\",\"public synchornized void test(){ //代码 } \",\"​ 无论是对一个对象进行加锁还是对一个方法进行加锁，实际上，都是对对象进行加锁\"]},\"672\":{\"h\":\"1、先了解一下对象在JVM内存中的布局，如下图\",\"t\":[\"img\",\"​ Mark Word：包含一系列的标记位，比如轻量级锁的标记位，偏向锁标记位等等。在32位系统占4字节，在64位系统中占8字节；\",\"​ Class Pointer：用来指向对象对应的Class对象（其对应的元数据对象）的内存地址。在32位系统占4字节，在64位系统中占8字节；\",\"​ Length：如果是数组对象，还有一个保存数组长度的空间，占4个字节；\",\"​ 对齐填充：Java对象占用空间是8字节对齐的，即所有Java对象占用bytes数必须是8的倍数。\",\"​ 从上图我们可以看出，对象中关于锁的信息是存在Markword里的。\"]},\"673\":{\"h\":\"2、锁的创建\",\"t\":[\"// 随便创建一个对象 LockObject lockObject = new LockObject(); synchronized(lockObject){ //代码 } \",\"​ 1）当我们创建一个对象LockObject时，该对象的部分Markword关键数据如下。\",\"1571144064662\",\"​ 从图中可以看出，偏向锁的标志位是“01”，状态是“0”，表示该对象还没有被加上偏向锁。（“1”是表示被加上偏向锁）。\",\"​ 该对象被创建出来的那一刻，就有了偏向锁的标志位，这也说明了所有对象都是可偏向的，但所有对象的状态都为“0”，也同时说明所有被创建的对象的偏向锁并没有生效。\",\"​ 2）不过，当线程执行到临界区（critical section）时，此时会利用CAS(Compare and Swap)操作，将线程ID插入到Markword中，同时修改偏向锁的标志位。\",\"​ 此时的Mark word的结构信息如下：\",\"1571144092579\",\"​ 此时偏向锁的状态为“1”，说明对象的偏向锁生效了，同时也可以看到，哪个线程获得了该对象的锁。\",\"​ 3）这个锁会偏向于第一个获得它的线程，在接下来的执行过程中，假如该锁没有被其他线程所获取，没有其他线程来竞争该锁，那么持有偏向锁的线程将永远不需要进行同步操作。\",\"​ 4）在此线程之后的执行过程中，如果再次进入或者退出同一段同步块代码，并不再需要去进行加锁或者解锁操作，而是会做以下的步骤：\",\"​ a、Load-and-test，也就是简单判断一下当前线程id是否与Markword当中的线程id是否一致. ​ b、如果一致，则说明此线程已经成功获得了锁，继续执行下面的代码. ​ c、如果不一致，则要检查一下对象是否还是可偏向，即“是否偏向锁”标志位的值。 ​ d、如果还未偏向，则利用CAS操作来竞争锁，也即是第一次获取锁时的操作。\",\"​ 5）如果此对象已经偏向了，并且不是偏向自己，则说明存在了竞争。此时可能就要根据另外线程的情况，可能是重新偏向，也有可能是做偏向撤销，但大部分情况下就是升级成轻量级锁了。可以看出，偏向锁是针对于一个线程而言的，线程获得锁之后就不会再有解锁等操作了，这样可以省略很多开销。假如有两个线程来竞争该锁话，那么偏向锁就失效了，进而升级成轻量级锁了。\",\"6）为什么要这样做呢？因为经验表明，其实大部分情况下，都会是同一个线程进入同一块同步代码块的。这也是为什么会有偏向锁出现的原因。在Jdk1.6之后，偏向锁的开关是默认开启的，适用于只有一个线程访问同步块的场景\"]},\"674\":{\"h\":\"公平锁、非公平锁\",\"t\":[\"1、概念：\",\"​ 公平锁：加锁前先查看是否有排队等待的线程，有的话优先处理排在前面的线程，先来先得。 ​ 公平所：线程加锁时直接尝试获取锁，获取不到就自动到队尾等待。\",\"​ 更多的是直接使用非公平锁：非公平锁比公平锁性能高5-10倍，因为公平锁需要在多核情况下维护一个队列，如果当前线程不是队列的第一个无法获取锁，增加了线程切换次数。\",\"​ 原理 ： https://www.cnblogs.com/little-fly/p/10365109.html\",\"​ https://www.jianshu.com/p/06340f8feb05\",\"​\",\"2、Java语言中:\",\"​ 公平和非公平锁的队列都基于锁内部维护的一个双向链表，表结点Node的值就是每一个请求当前锁的线程。\",\"​    两者的区别：https://www.jianshu.com/p/c7d17b5c6be3\"]},\"675\":{\"h\":\"加密解密\",\"t\":[\"（1）明文：未加密的消息m；\",\"（2）密文：加密后的消息ct；\",\"（3）加解密算法：把明文变成密文，密文变成明文的转换函数；\",\"（4）加密密钥：明文 加密成 密文 需要的参数；\",\"（5）解密密钥：密文变成 明文 需要的参数\"]},\"676\":{\"h\":\"（1）对称加密算法\",\"t\":[\"对称加密算法 ： 加密密钥 = 解密密钥\"]},\"677\":{\"h\":\"（2）非对称加密算法\",\"t\":[\"对称加密算法 ： 加密密钥 != 解密密钥\"]},\"678\":{\"h\":\"（3）混合加密机制\",\"t\":[\"混合加密算法：对称加密 + 非对称加密\"]},\"679\":{\"h\":\"加密过程\",\"t\":[\"（a）首先利用对称加密技术加密索要安全传输的消息\",\"（b）然后将对称密钥通过非对称加密的方式用公钥进行加密，附在（a）所述消息中\"]},\"680\":{\"h\":\"解密过程\",\"t\":[\"（a）首先使用私钥解密密钥\",\"（b）然后再用此密钥解密消息\"]},\"681\":{\"h\":\"（4）为什么需要混合加密机制？\"},\"682\":{\"h\":\"安全？速度快？\",\"t\":[\"​ 先拿对称加密和非对称加密算法，做一个对比\",\"​ 本文中的私钥、公钥是非对称加密的说法；密钥是对称加密的说法。\",\"1571142451345\",\"谈一下混合的好处：\",\"（a）利用对称加密的速度快：进行网络消息传输时响应及时；\",\"（b）非对称加密的安全优势：给你一个通过公钥加密的密钥，你先拿私钥解开加密的密钥，然后才能解开消息，保证密钥不被泄露。（注：有点绕；此处私钥、公钥是非对称加密的说法；密钥是对称加密的说法。）\"]},\"683\":{\"h\":\"单例模式\",\"t\":[\"继之前的单例模式（https://blog.csdn.net/qq_23034755/article/details/90547215）深入学习，越看越容易不明白了[哭哭]：\",\"一、单例优势与劣势\",\"优点：\",\"​ （1）可以节约内存，因为它限制了实例的个数，有利于Java垃圾回收。\",\"​ （2）数据库或者Socket连接要收到一定的限制，必须保持同一时间只能有一个连接的存在等这种单线程操作。\",\"​ （3）提供了对唯一实例的受控访问。\",\"缺点：\",\"​ （1）没有抽象层，不能继承扩展很难。 ​ （2）违背了“单一职责原则”，一个类只重视内部关系，而忽略外部关系。\",\"​ （3）不适用于变化对象。\",\"​ （4）滥用单例会出现一些负面问题：\",\"a. 如为节省资源将数据库连接池对象设计为单例\",\"可能会导致共享连接池对象对程序过多而出现连接池溢出。\",\"b. 如果实例化的对象长时间不被利用\",\"系统会认为是垃圾而被回收，这样将导致对象状态丢失。\",\"二、单例模式与数据库连接（mysql为例，自己的理解）\",\"​ （1）mysql是有最大连接数的，连接数超过最大会出现错误\",\"​ （2）如果利用单例模式对connection对象封装，那么系统中只存在一个mysql连接实例，大家共用。所以没有办法并发，就存在了排队。\",\"​ （3）排队希望教给mysql引擎去解决。\",\"​ （4）后来为了获取更高的效率，利用数据库连接池（connection pool），连接池概念（https://zhengtianqi.github.io/2019/09/01/池化之线程池/）。\",\"​ （5）利用单例模式来管理connection pool，如：在初始化时创建100个connection对象（小于mysql最大连接数），然后需要的时候提供一个，用完之后返回到pool中。\",\"​\\t\\t（6）这个pool存在哪里呢？若为全局变量，又违背了单例模式的用意（单例模式只有真正的单一实例的需求时才可以使用。一个设计得当的系统不应该有所谓的全局变量的，这些变量应该放到它们所描述的实体所对应的类中去）\"]},\"684\":{\"h\":\"可信与可信计算\",\"t\":[\"一、“可信”有比较多的定义\",\"（1）TCG用实体行为的预期性来定义 “可信” ：如果一个实体的行为是预期的方式符合预期的目标，则该实体是可信的。\",\"（2）ISO/IEC 15408标准定义“可信”为：参与计算的组件、操作或过程在任意条件下是可预测的，并能够抵御病毒和物理干扰。\",\"（3）IEEE CS可信计算技术委员会（IEEE ComputerSocietyTechnical Committeeon Dependable Computing）所谓 “可信” 是指计算机系统所提供的服务是可以论证其是可信赖的，即不仅计算机系统所提供的服务是可信赖的，而且这种可信赖还是可论证的。这种可信依赖更多地指系统的可靠性、可用性和可维护性。\",\"（4）我国著名的信息安全专家沈昌祥院士对上述定义进行了综合和拓展，他认为“可信”要做到一个实体在实现给定目标对其行为总是同预期的结果一样，强调行为结果的可预测性和可控制性。\",\"（5）张焕国教授认为可信计算系统是能够提供系统的可靠性、可用性、安全性（信息的安全性和行为的安全性）的计算机系统，通俗的称为：可信≈可靠+安全。\",\"（6）另外，还有其他一些解释：可信是指计算机系统提供的服务可以被证明是可信赖的；如果一个系统按照预期的设计和策略运行，那么这个系统是可信的；当第二个实体符合第一个实体的期望行为时，第一个实体可假设第二个实体是可信的。\",\"二、为什么这么多定义？\",\"（1）因为他们的研究背景不同：可信赖计算（dependable computing）、安全计算（security computing）和信任计算（trusted computing）。他们统称为可信计算。\",\"（2）本文主要研究沈昌祥院士的trusted computing，信任计算\",\"（3）信任计算源自早起的安全硬件设计，基本思想是：假定真实性可以用于计算机系统中首先建立一个信任根，再建立一条信任链，一级度量认证一级，一级信任一级，把信任关系扩大到整个计算机系统，从而确保计算机系统可信。\",\"三、信任的属性\",\"（1）信任是一种二元关系，它可以是一对一、一对多（个体对群体）、多对一（群体对个体）或多对多（群体对群体）的。\",\"（2）信任具有二重性，既有主观性又有客观性。\",\"（3）信任不一定具有对称性，即A信任B，则不一定就有B信任A。\",\"（4）信任可度量，也就是说信任有程度之分，可以划分等级。\",\"（5）信任可传递，但不绝对，而且在传递过程中可能有损失，传递的路径越长，损失的可能性就越大。\",\"（6）信任具有动态性，即信任与环境(上下文)和时间因素相关。\",\"四、信任链\",\"​ \",\"五、可信根\",\"1569664589958\",\"图中的链也是信任链\",\"六、待研究领域\",\"（1）系统结构：包括硬件结构、TPM的物理安全、TPM的嵌入式软件、软件结构\",\"（2）密码技术：公钥密码、传统密码、哈希函数、随机数产生\",\"（3）信任链技术：包括信任的传递\",\"（4）信任的度量：动态度量、存储和报告机制、可信测试\",\"（5）可信软件：包括可信操作系统、可信编译、可信数据库、可信应用软件\",\"（6）可信网络：可信网络结构、可信网络协议、可信网络设备\",\"七、理论基础\",\"（1）可信模型：数学模型、行为学模型\",\"（2）可信度量理论：软件的动态可信性度量理论与模型\",\"（3）信任链理论：信任的传递理论、信任传递的损失度量\",\"（4）软件理论：可信性度量理论、可信软件工程、软件行为学\"]},\"685\":{\"h\":\"可信基本概念\",\"t\":[\"可信的基本思想是在计算机系统中首先建立一个信任根，在计算机系统启动和运行过程中再建立一条信任链，实现对计算机系统局部或全局的可信验证，从而发现不可信实体，及时恢复或阻断运行，从而确保系统安全。\",\"后来由产生可信操作系统、可信应用、可信网络到可信浏览器等等等等整套可信的体系。\"]},\"686\":{\"h\":\"（1）可信1.0（软件容错）\",\"t\":[\"​ 可信计算技术的发展最早可追溯到２０世纪８０年代，以世界容错组织为代表，通过纯软件实现的容错、故障诊断等机制，验证计算机部件的运行状态，从而实现计算机部件的冗余备份和故障切换。但是众所周知，纯软件实现的安全机制极易被攻击，所以说软件容错是有弊端的。\"]},\"687\":{\"h\":\"（2）可信2.0（硬件可信）\",\"t\":[\"​ 2000年左右，以 TCG 组织（Trusted Computing Group）为代表，TCG组织制定了TPM（Trusted Platform Module）的标准，很多安全芯片都是符合这个规范的。而且由于其硬件实现安全防护，正逐渐成为PC，尤其是便携式PC的标准配置。\",\"​ 通过为计算机增加硬件实现的信任根 TPM 构建开机启动的信任链，从而实现终端计算机的可信启动，标志着可信计算进入了2.0时代。\"]},\"688\":{\"h\":\"（3）可信3.0（主动防御体系）\",\"t\":[\"​ 沈昌祥院士在可信3.0战略中提出：可信 3.0 已经形成了自主创新的体系，并在很多领域开展了规模应用。\",\"​ 总结一下:\"]},\"689\":{\"h\":\"（a）TPCM\",\"t\":[\"​ TPCM（可信平台控制模块，一个硬件）作为自主可控的可信节点植入可信根。这个信任根置于主板，先于中央处理器（CPU）启动并对基本输入输出系统（BIOS）进行验证。构成了宿主机 CPU 加可信平台控制模块的双节点，实现信任链在 “加电第一时刻” 开始建立；\"]},\"690\":{\"h\":\"（b） 可信基础支撑软件框架\",\"t\":[\"​ 宿主软件系统 + 可信软件基的双系统体系结构；\"]},\"691\":{\"h\":\"（c）三层三元对等的可信连接框架\",\"t\":[\"​ 提高了网络连接的整体可信性、安全性和可管理性；\"]},\"692\":{\"h\":\"（d）加密算法均自主设计\",\"t\":[\"​ 命名为SM 国产密码算法，并自主设计了双数字证书认证结构。\"]},\"693\":{\"h\":\"（f）主动免疫可信架构信任链传递示意图：\",\"t\":[\"​ \"]},\"694\":{\"h\":\"2、可信的应用\"},\"695\":{\"h\":\"（1）基础架构图\",\"t\":[\"沈昌祥院士提到可信云的基础架构：\"]},\"696\":{\"h\":\"（2）可信的安全保障机制\"},\"697\":{\"h\":\"（a）运行环境\",\"t\":[\"通过建立云架构下的可信链，为虚拟运行环境提供可信保障；\"]},\"698\":{\"h\":\"（b）监控技术\",\"t\":[\"通过建立基于可信第三方的监控技术，可以有效监控云服务的执行，解决云服务不可信问题；\"]},\"699\":{\"h\":\"（c）隔离技术\",\"t\":[\"通过基于可信根支撑的隔离技术，可以在云环境建立起具有可信保障的多层隔离防线，为虚拟机提供安全可信的隔离环境；\"]},\"700\":{\"h\":\"（d）接入技术\",\"t\":[\"通过可信接入技术提供可信的云环境接入方法，解决开放云环境所带来的一系列安全问题。\"]},\"701\":{\"h\":\"可重入锁\"},\"702\":{\"h\":\"1、可重入锁：\",\"t\":[\"​ 也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。 ​ \\\"独占\\\"，就是在同一时刻只能有一个线程获取到锁，而其它获取锁的线程只能处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁。\",\"​ “可重入“，就是支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。\",\"​ 在JAVA环境下 ReentrantLock 和synchronized 都是可重入锁。\"]},\"703\":{\"h\":\"2、Synchronized和ReentrantLock\",\"t\":[\"1）性能区别：\",\"​ 在Synchronized优化以前，synchronized的性能是比ReenTrantLock差很多的，但是自从Synchronized引入了偏向锁，轻量级锁（自旋锁）后，两者的性能就差不多了，在两种方法都可用的情况下，官方甚至建议使用synchronized，其实 synchronized的优化我感觉就借鉴了ReenTrantLock中的CAS技术。都是试图在用户态就把加锁问题解决，避免进入内核态的线程阻塞。\",\"2）原理区别：\",\"​ Synchronized: 进过编译，会在同步块的前后分别形成monitorenter和monitorexit这个两个字节码指令。在执行monitorenter指令时，首先要尝试获取对象锁。如果这个对象没被锁定，或者当前线程已经拥有了那个对象锁，把锁的计算器加1，相应的，在执行monitorexit指令时会将锁计算器就减1，当计算器为0时，锁就被释放了。如果获取对象锁失败，那当前线程就要阻塞，直到对象锁被另一个线程释放为止。\",\"​ ReentrantLock: 是java.util.concurrent包下提供的一套互斥锁，相比Synchronized，ReentrantLock类提供了一些高级功能，主要有以下3项：\",\"等待可中断，持有锁的线程长期不释放的时候，正在等待的线程可以选择放弃等待，这相当于Synchronized来说可以避免出现死锁的情况。通过lock.lockInterruptibly()来实现这个机制。\",\"公平锁，多个线程等待同一个锁时，必须按照申请锁的时间顺序获得锁，Synchronized锁非公平锁，ReentrantLock默认的构造函数是创建的非公平锁，可以通过参数true设为公平锁，但公平锁表现的性能不是很好。\",\"锁绑定多个条件，一个ReentrantLock对象可以同时绑定对个对象。ReenTrantLock提供了一个Condition（条件）类，用来实现分组唤醒需要唤醒的线程们，而不是像synchronized要么随机唤醒一个线程要么唤醒全部线程。\",\"demo\",\" public class SynchronizedTest implements Runnable { public synchronized void get() { System.out.println(Thread.currentThread().getName()); set(); } public synchronized void set() { System.out.println(Thread.currentThread().getName()); } @Override public void run() { get(); } public static void main(String[] args) { SynchronizedTest synchronizedTest = new SynchronizedTest(); new Thread(synchronizedTest).start(); new Thread(synchronizedTest).start(); new Thread(synchronizedTest).start(); } } public class ReentrantLockTest implements Runnable { ReentrantLock lock = new ReentrantLock(); public void get() { lock.lock(); System.out.println(Thread.currentThread()); set(); lock.unlock(); } public void set() { lock.lock(); System.out.println(Thread.currentThread()); lock.unlock(); } @Override public void run() { get(); } public static void main(String[] args) { ReentrantLockTest lock = new ReentrantLockTest(); new Thread(lock).start(); new Thread(lock).start(); new Thread(lock).start(); } } \"]},\"704\":{\"h\":\"可靠性和容错技术\",\"t\":[\"​ 为了提高计算机系统的可靠性，人们通过长期的研究总结出了两种技术：避错技术和容错技术。\",\"一、避免技术\",\"​ 避错技术试图构造一个不包含故障的完美系统，其手段是采用精确的设计和质量控制方法尽量避免把故障引入系统。避错系统对元器件的制造工艺、精确的阈值有很高的要求。实际上做到这点是不可能的，因此避错技术对系统的可靠性的提高受到很大的限制。\",\"二、容错技术\",\"​ 容错是指当出现某些指定的硬件故障或软件故障时，系统仍能执行规定的一组程序，或者说程序不会因为系统故障而中止或被修改，并且执行结果也不包含系统故障引起的差错。容错的思想是在系统体系结构上精心设计，利用外加资源的冗余技术掩蔽故障带来的影响，从而自动恢复系统或达到安全停机的目的。\",\"​ 所以我们重点研究容错技术：\",\"​ 容错的目标是降低或者最小化故障对系统可用性、可靠性、安全性、持续性等得影响。\",\"​ 容错按系统级别划分，分为三个级别，硬件容错、软件容错以及系统容错。硬件容错常用的方法包括使用冗余、多备份技术、增加内存、能源系统冗余等。硬件错误通常能够够在两个物理机上进行隔离处理。软件容错主要是正对软件的鲁棒性特征进行增强。常见的方法有checkpoint/restart，recovery blocks，N-Version Programs等。对于系统容错，设计一个独立与目标系统的子系统，通过定义定义规则来容忍系统缺陷。对缺陷的处理，有以下几类技术：\",\"使用缺陷避免技术来避一些错误。使用成熟的设计方法论、验证以及确认方法论、代码检查、上线前的演练等；\",\"在可能会存在的缺陷时，可以选择缺陷移除技术。例如测试、集成测试、回归测试、背靠背测试等；\",\"或者是在遭遇错误是，缺陷回避的方式，是的潜在的缺陷不会被激活。常见技术是通过重新配置系统来达到避免的目标；\",\"缺陷容忍技术，系统能够对缺陷进行侦测、诊断、孤立、覆盖、不错、以及系统恢复。使用以上多种技术混合。\"]},\"705\":{\"h\":\"图解公钥私钥\",\"t\":[\"1、鲍勃有两把钥匙，一把是公钥，另一把是私钥。\",\"1569332117257\",\"2、鲍勃把公钥送给他的朋友们----帕蒂、道格、苏珊----每人一把。\",\"1569332140572\",\"3、苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。\",\"1569332191207\",\"4、鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。\",\"1569332213926\",\"5、鲍勃给苏珊回信，决定采用\\\"数字签名\\\"。他写完后先用Hash函数，生成信件的摘要（digest）。\",\"1569332234555\",\"6、然后，鲍勃使用私钥，对这个摘要加密，生成\\\"数字签名\\\"（signature）。\",\"1569332255195\",\"7、鲍勃将这个签名，附在信件下面，一起发给苏珊。\",\"1569332274920\",\"8、苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。\",\"1569332297876\",\"9、苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。\",\"1569332325389\",\"10、复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成\\\"数字签名\\\"，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。\",\"1569332348936\",\"11、后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找\\\"证书中心\\\"（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成\\\"数字证书\\\"（Digital Certificate）。\",\"1569332371090\",\"12、鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。\",\"1569332395630\",\"13、苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明\\\"数字签名\\\"是否真的是鲍勃签的。\",\"1569332424970\",\"14、下面，我们看一个应用\\\"数字证书\\\"的实例：https协议。这个协议主要用于网页加密。\",\"1569332446930\",\"15、首先，客户端向服务器发出加密请求。\",\"1569332470793\",\"16、服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。\",\"1569332492570\",\"17、客户端（浏览器）的\\\"证书管理器\\\"，有\\\"受信任的根证书颁发机构\\\"列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。\",\"1569332511083\",\"18、如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。\",\"1569332532928\",\"19、如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。\",\"1569332579189\"]},\"706\":{\"h\":\"基于JavaAgent的全链路监控（1）\",\"t\":[\"​ 在使用skywalking时，使用到了Javaagent技术作为节点的探针，使用Javaagent做字节码植入，无侵入式的收集，并通过HTTP或者gRPC方式发送数据到Skywalking Collector。\",\"​ 后来查阅资料发现javaagent用途还是很广的，有JRebel，各种线上诊断工具（Btrace, Greys），还有阿里开源的 Arthas，在此记录一下javaagent的学习历程。\",\"​ 其实 Java Agent 一点都不神秘，也是一个 Jar 包，只是启动方式和普通 Jar 包有所不同，对于普通的Jar包，通过指定类的 main 函数进行启动，但是 Java Agent 并不能单独启动，必须依附在一个 Java 应用程序运行。\",\"​ 我们可以使用 Agent 技术构建一个独立于应用程序的代理程序，用来协助监测、运行甚至替换其他 JVM 上的程序，使用它可以实现虚拟机级别的 AOP 功能。\"]},\"707\":{\"h\":\"（1）建立maven的空java项目\",\"t\":[\"​ 修改pom为：包含一些常量的定义和一个插件\",\" <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <java.version>1.8</java.version> <!-- Build args --> <argline>-Xms512m -Xmx512m</argline> <updateReleaseInfo>true</updateReleaseInfo> <maven.test.skip>true</maven.test.skip> <!-- 自定义MANIFEST.MF --> <maven.configuration.manifestFile>src/main/resources/META-INF/MANIFEST.MF</maven.configuration.manifestFile> </properties> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-shade-plugin</artifactId> <version>2.4.3</version> <executions> <execution> <phase>package</phase> <goals> <goal>shade</goal> </goals> <configuration> <transformers> <transformer implementation=\\\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\\\"> <manifestEntries> <!--指明包含 premain 方法的类名，否则打包出来的文件会找不到 MANIFEST.MF --> <Premain-Class>cn.edu.bjut.test.AgentTest</Premain-Class> </manifestEntries> </transformer> </transformers> </configuration> </execution> </executions> </plugin> </plugins> </build> \"]},\"708\":{\"h\":\"（2）MANIFEST.MF 文件\",\"t\":[\"​ 在 META-INF 目录下创建 MANIFEST.MF 文件：\",\"image-20200717132223819\",\"​ 内容为\",\"Manifest-Version: 1.0 Premain-Class: cn.edu.bjut.test.AgentTest Can-Redefine-Classes: true \"]},\"709\":{\"h\":\"（3）写一个main函数\",\"t\":[\"​ 因为 Java Agent 的特殊性，需要一些特殊的配置，例如指定 Agent 的启动类等。这样才能在加载 Java Agent 之后，找到并运行对应的 agentmain 或者 premain 方法。配置方式主要有两种，一种是利用 maven-assembly-plugin 插件（推荐），一种是 MANIFEST.MF 文件。\",\"import java.lang.instrument.Instrumentation; /** * 测试项目启动执行的agent * * @author zhengtianqi */ public class AgentTest { /** * JVM 首先尝试在代理类上调用以下方法 */ public static void premain(String agentArgs, Instrumentation inst) { System.out.println(\\\"执行了JavaAgent \\\" + agentArgs); } /** * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法 */ public static void premain(String agentArgs) { } } \"]},\"710\":{\"h\":\"（4）打包\",\"t\":[\"​ mvn clean package\",\"​ Javaagent 程序写好了，怎么运行它呢？上面看到 Agent 程序分为两种，一种是 premain 函数，在主程序运行之前执行；一种是 agentmain 函数，在主程序运行之后执行。Java 加载这两种 Agent 程序也有区别：\"]},\"711\":{\"h\":\"（1）主程序运行前\",\"t\":[\"​ 无侵入式，通过 JVM 参数 -javaagent:**.jar[=test] 启动，其中 test 为传入 premain 的 agentArgs 的参数，程序启动的时候，会优先加载 Java Agent，并执行其 premain 方法，这个时候，其实大部分的类都还没有被加载，这个时候可以实现对新加载的类进行字节码修改，但是如果 premain 方法执行失败或抛出异常，那么 JVM 会被中止，这是很致命的问题。\"]},\"712\":{\"h\":\"（2）主程序运行后加载\",\"t\":[\"​ 有侵入式，程序启动之后，通过某种特定的手段加载 Java Agent，这个特定的手段就是 VirtualMachine 的 attach api，这个 api 其实是 JVM 进程之间的的沟通桥梁，底层通过socket 进行通信，JVM A 可以发送一些指令给JVM B，B 收到指令之后，可以执行对应的逻辑，比如在命令行中经常使用的 jstack、jps 等，很多都是基于这种机制实现的。\",\"​ VirtualMachine 的实现位于 tools.jar 中\",\"<dependency> <groupId>com.sun</groupId> <artifactId>tools</artifactId> <version>1.8</version> <scope>system</scope> <systemPath>${java.home}/../lib/tools.jar</systemPath> </dependency> \",\"因为是进程间通信，所以使用 attach api 的也是一个独立的Java进程，下面是一个简单的实现：\",\" public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException { VirtualMachine virtualMachine = null; try { // 80000 是进程号 virtualMachine = VirtualMachine.attach(\\\"80000\\\"); // 第一个参数是 agent jar包路径，第二个参数为传入 agentmain 的 args 参数 virtualMachine.loadAgent(\\\"D:\\\\git\\\\credible\\\\checkpoint-agent\\\\target\\\\checkpoint-agent-1.0-SNAPSHOT.jar\\\", \\\"test\\\"); } finally { if (virtualMachine != null) { virtualMachine.detach(); } } } \"]},\"713\":{\"h\":\"基于JavaAgent的全链路监控（2）\"},\"714\":{\"h\":\"1、介绍\",\"t\":[\"​ 方法耗时利用前人轮子字节码操作工具ByteBuddy：Byte Buddy是一个代码生成和操作库，用于在Java应用程序运行时创建和修改Java类，而无需编译器的帮助。 除了Java类库附带的代码生成实用程序外，Byte Buddy还允许创建任意类，并且不限于实现用于创建运行时代理的接口。 此外，Byte Buddy提供了一个方便的API，可以使用Java代理或在构建过程中手动更改类。\"]},\"715\":{\"h\":\"2、pom.xml\",\"t\":[\"引入ByteBuddy并打入到Agent包中\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\"> <modelVersion>4.0.0</modelVersion> <groupId>cn.edu.bjut</groupId> <artifactId>checkpoint-agent</artifactId> <version>1.0-SNAPSHOT</version> <properties> <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding> <java.version>1.8</java.version> <!-- Build args --> <argline>-Xms512m -Xmx512m</argline> <updateReleaseInfo>true</updateReleaseInfo> <maven.test.skip>true</maven.test.skip> <!-- 自定义MANIFEST.MF --> <maven.configuration.manifestFile>src/main/resources/META-INF/MANIFEST.MF</maven.configuration.manifestFile> <javassist.version>3.12.1.GA</javassist.version> <guava.version>15.0</guava.version> <byte-buddy.version>1.8.20</byte-buddy.version> <maven-shade-plugin.version>2.4.3</maven-shade-plugin.version> <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version> </properties> <dependencies> <dependency> <groupId>javassist</groupId> <artifactId>javassist</artifactId> <version>${javassist.version}</version> </dependency> <dependency> <groupId>com.google.guava</groupId> <artifactId>guava</artifactId> <version>${guava.version}</version> <scope>compile</scope> </dependency> <dependency> <groupId>net.bytebuddy</groupId> <artifactId>byte-buddy</artifactId> <version>${byte-buddy.version}</version> </dependency> <dependency> <groupId>net.bytebuddy</groupId> <artifactId>byte-buddy-agent</artifactId> <version>${byte-buddy.version}</version> </dependency> </dependencies> <!-- 将javassist包打包到Agent中 --> <build> <plugins> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-shade-plugin</artifactId> <version>${maven-shade-plugin.version}</version> <executions> <execution> <phase>package</phase> <goals> <goal>shade</goal> </goals> <configuration> <transformers> <transformer implementation=\\\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\\\"> <manifestEntries> <!--指明包含 premain 方法的类名，否则打包出来的文件会找不到 MANIFEST.MF --> <Premain-Class>cn.edu.bjut.agent.MyAgent</Premain-Class> </manifestEntries> </transformer> </transformers> </configuration> </execution> </executions> </plugin> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-compiler-plugin</artifactId> <version>${maven-compiler-plugin.version}</version> <configuration> <source>8</source> <target>8</target> </configuration> </plugin> </plugins> </build> </project> \"]},\"716\":{\"h\":\"3、MethodCostTime.java\",\"t\":[\"package cn.edu.bjut.monitor; import net.bytebuddy.implementation.bind.annotation.Origin; import net.bytebuddy.implementation.bind.annotation.RuntimeType; import net.bytebuddy.implementation.bind.annotation.SuperCall; import java.lang.reflect.Method; import java.util.concurrent.Callable; /** * @author zhengtianqi */ public class MethodCostTime { @RuntimeType public static Object intercept(@Origin Method method, @SuperCall Callable<?> callable) throws Exception { long start = System.currentTimeMillis(); try { // 原有函数执行 return callable.call(); } finally { System.out.println(method + \\\" 方法耗时：\\\" + (System.currentTimeMillis() - start) + \\\"ms\\\"); } } } \"]},\"717\":{\"h\":\"4、MyAgent.java\",\"t\":[\"package cn.edu.bjut.agent; import cn.edu.bjut.monitor.JvmStack; import cn.edu.bjut.monitor.MethodCostTime; import com.google.common.util.concurrent.ThreadFactoryBuilder; import net.bytebuddy.agent.builder.AgentBuilder; import net.bytebuddy.description.type.TypeDescription; import net.bytebuddy.dynamic.DynamicType; import net.bytebuddy.implementation.MethodDelegation; import net.bytebuddy.matcher.ElementMatchers; import net.bytebuddy.utility.JavaModule; import java.lang.instrument.Instrumentation; import java.util.concurrent.*; /** * @author zhengtianqi */ public class MyAgent { /** * JVM 首先尝试在代理类上调用以下方法 */ public static void premain(String agentArgs, Instrumentation inst) { System.out.println(\\\"this is my agent：\\\" + agentArgs); AgentBuilder.Transformer transformer = (builder, typeDescription, classLoader, javaModule) -> { return builder // 拦截任意方法 .method(ElementMatchers.any()) // 委托 .intercept(MethodDelegation.to(MethodCostTime.class)); }; AgentBuilder.Listener listener = new AgentBuilder.Listener() { @Override public void onDiscovery(String s, ClassLoader classLoader, JavaModule javaModule, boolean b) { } @Override public void onTransformation(TypeDescription typeDescription, ClassLoader classLoader, JavaModule javaModule, boolean b, DynamicType dynamicType) { } @Override public void onIgnored(TypeDescription typeDescription, ClassLoader classLoader, JavaModule javaModule, boolean b) { } @Override public void onError(String s, ClassLoader classLoader, JavaModule javaModule, boolean b, Throwable throwable) { } @Override public void onComplete(String s, ClassLoader classLoader, JavaModule javaModule, boolean b) { } }; new AgentBuilder .Default() // 指定需要拦截的类 .type(ElementMatchers.nameStartsWith(\\\"cn.edu.bjut\\\")) .transform(transformer) .with(listener) .installOn(inst); /** * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法 */ public static void premain(String agentArgs) { } } \"]},\"718\":{\"h\":\"5、MANIFEST.MF\",\"t\":[\"Manifest-Version: 1.0 Premain-Class: cn.edu.bjut.agent.MyAgent Can-Redefine-Classes: true \"]},\"719\":{\"h\":\"6、测试\",\"t\":[\"VM options: -javaagent:D:\\\\git\\\\credible\\\\checkpoint-agent\\\\target\\\\checkpoint-agent-1.0-SNAPSHOT.jar=testargs \",\"image-20200719170509172\",\"结果：\",\"image-20200719170325930\"]},\"720\":{\"h\":\"基于JavaAgent的全链路监控（3）\",\"t\":[\"​ 除了监控java方法的执行耗时，我们还需要获取应用实例的jvm内存与gc信息，以实时把控我们的服务器性能是否在安全范围。监控jvm内存与gc信息是非常重要的，尤其是在大促以及微博火热爆点的时候，我们需要根据监控信息进行扩容，以保证系统稳定。\",\"在--- title: 基于JavaAgent的全链路监控（2）的基础上增加\"]},\"721\":{\"h\":\"（1）MyAgent.java\",\"t\":[\"​\",\"package cn.edu.bjut.agent; import com.google.common.util.concurrent.ThreadFactoryBuilder; import java.util.concurrent.*; /** * @author zhengtianqi */ public class MyAgent { /** * JVM 首先尝试在代理类上调用以下方法 */ public static void premain(String agentArgs, Instrumentation inst) { // 使用ScheduledExecutorService创建定时任务 ScheduledExecutorService schedule = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().setNameFormat(\\\"scheduled-%d\\\").build()); // 创建并执行在给定延迟后启用的一次性操作 schedule.scheduleAtFixedRate(() -> { // 此方法为打印jvm信息喝gc信息 JvmStack.printMemoryMetric(); JvmStack.printGcMetric(); }, 0L, 1000L, TimeUnit.MILLISECONDS); } /** * 如果代理类没有实现上面的方法，那么 JVM 将尝试调用该方法 */ public static void premain(String agentArgs) { } } \"]},\"722\":{\"h\":\"对象存储与指针压缩\",\"t\":[\"​ 我们知道在Java中基本数据类型的大小，例如int类型占4个字节、long类型占8个字节，那么Integer对象和Long对象会占用多少内存呢？\",\"​ 一、对象存储：\",\"​ 一个Java对象在内存中包括对象头、实例数据和补齐填充3个部分：\",\"image-20191120195326698\",\"​\",\"​ (1) 对齐填充 :\",\"​ Java对象占用空间是8字节对齐的，即所有Java对象占用bytes数必须是8的倍数。\",\"​ 例如，一个包含两个属性的对象：int和byte，这个对象需要占用8+4+1=13个字节，这时就需要加上大小为3字节的padding进行8字节对齐，最终占用大小为16个字节。\",\"image-20191120195453758\",\"32位系统 对象头占用空间= 4 + 4 = 8 byte\",\"64位系统 对象头占用空间= 8 + 8 =16 byte\",\"64位开启指针压缩 对象头占用空间= 4 + 8 = 12 byte\",\"注：\",\"​ 若为数组对象，对象头占用空间 + 4 byte\",\"​ 静态属性不算在对象大小内\",\"​ 从JDK 1.6 update14开始，64位的JVM正式支持了 -XX:+UseCompressedOops 这个可以压缩指针，起到节约内存占用的新参数。\",\"​ JDK 1.8，默认该参数就是开启的。\",\"​ (2) 对象的实际数据\",\"​ 对象实际数据包括了对象的所有成员变量，其大小由各个成员变量的大小决定\",\"image-20191120195618441\",\"​ 对于reference类型来说，在32位系统上占用4bytes, 在64位系统上占用8bytes。\",\"​ 对象实际数据包括了对象的所有成员变量，其大小由各个成员变量的大小决定，\",\"​ 比如：byte和boolean是1个字节，short和char是2个字节，int和float是4个字节，long和double是8个字节，reference是4个字节（64位系统中是8个字节）。\",\"二、指针压缩\",\"​ 从上文的分析中可以看到，64位JVM消耗的内存会比32位的要多大约1.5倍，这是因为对象指针在64位JVM下有更宽的寻址。\",\"​ 对于那些将要从32位平台移植到64位的应用来说，平白无辜多了1/2的内存占用，这是开发者不愿意看到的\",\"OOP的全称为：Ordinary Object Pointer，就是普通对象指针。启用CompressOops后，会压缩的对象：\",\"​ 每个Class的属性指针（静态成员变量）；\",\"​ 每个对象的属性指针；\",\"​ 普通对象数组的每个元素指针。\",\"​ 当然，压缩也不是所有的指针都会压缩，对一些特殊类型的指针，JVM是不会优化的，例如指向PermGen（1.8废弃）的Class对象指针、本地变量、堆栈元素、入参、返回值和NULL指针不会被压缩。\",\"​ 1.新生代：Eden+From Survivor+To Survivor\",\"​ 2.老年代：OldGen\",\"​ 3.永久代（方法区的实现） : PermGen----->替换为Metaspace(本地内存中)\",\"​ (1) 验证对象头大小\",\"image-20191120195845734\",\"​ 对象头大小=Class Pointer的空间大小为4字节+MarkWord为8字节=12字节；\",\"​ 实际数据大小=int类型4字节+long类型8字节=12字节（静态变量不在计算范围之内）\",\"​ 共24 byte\",\"​ (2) 验证对象头大小 非压缩情况下\",\"image-20191120200005300\",\"​ 对象头大小=Class Pointer的空间大小为8字节+MarkWord为8字节=16字节；\",\"​ 实际数据大小=int类型4字节+int类型4字节=8字节（静态变量不在计算范围之内）\",\"​ 共32byte\",\"​ (3) 验证对象头对齐填充\",\"image-20191120200059442\",\"​ 对象头大小=Class Pointer的空间大小为4字节+MarkWord为8字节=12字节；\",\"​ 实际数据大小=int类型4字节+int类型4字节=8字节（静态变量不在计算范围之内）\",\"​ 共20byte 所以需要有4字节的填充\",\"​ (4) 验证对象头 数组\",\"image-20191120200152966\",\"​ Shallow Size比较简单，这里对象头大小为12字节， 实际数据大小为4字节，所以Shallow Size为16。\",\"​ 对于Retained Size来说，要计算数组占用的大小，对于数组来说，它的对象头部多了一个用来存储数组长度的空间，该空间大小为4字节，所以数组对象的大小 = 引用对象头大小12字节 + 存储数组长度的空间大小4字节 + 数组的长度*数组中对象的RetainedSize + padding大小\",\"​ long[] arr = new long[6];，它是一个长度为6的long类型的数组，由于long类型的大小为8字节，所以数组中的实际数据是68=48字节，那么数组对象的大小=12+4+68+0=64，最终的Retained Size=Shallow Size + 数组对象大小=16+64=80。\",\"主要参考：http://www.ideabuffer.cn/2017/05/06/Java对象内存布局/\"]},\"723\":{\"h\":\"并发编程总结\",\"t\":[\"1、Synchronized\",\"​ Synchronized是由JVM实现的一种实现互斥同步的一种方式，如果你查看被Synchronized修饰过的程序块编译后的字节码，会发现，被Synchronized修饰过的程序块，在编译前后被编译器生成了monitor enter和monitor exit两个字节码指令。\",\"​ 这两个指令是什么意思呢?在虚拟机执行到monitor enter指令时，首先要尝试获取对象的锁︰如果这个对象没有锁定，或者当前线程已经拥有了这个对象的锁，把锁的计数器+1;当执行monitorexit指令时将锁计数器-1﹔当计数器为O时，锁就被释放了。如果获取对象失败了，那当前线程就要阻塞等待，直到对象锁被另外一个线程释放为止。\",\"​ Java中Synchronize通过在对象头设置标记，达到了获取锁和释放锁的目的。\",\"​ Synchronize是非公平锁。\",\"2、Synchronized锁对象\",\"​ “锁”的本质其实是monitorenter和monitorexit字节码指令的一个Reference类型的参数，即要锁定和解锁的对象。我们知道，使用Synchronized可以修饰不同的对象，因此，对应的对象锁可以这么确定。 （1）如果 Synchronized 明确指定了锁对象，比如 Synchronized(变量名)、Synchronized(this)等，说明加解锁对象为该对象。 （2）如果没有明确指定: 若Synchronized修饰的方法为非静态方法，表示此方法对应的对象为锁对象; 若Synchronized修饰的方法为静态方法，则表示此方法对应的类对象为锁对象。 注意，当一个对象被锁住时，对象里面所有用Synchronized修饰的方法都将产生堵塞，而对象里非 Synchronized修饰的方法可正常被调用，不受锁影响。\",\"3、Synchronized可重入锁\",\"​ 可重入性是锁的一个基本要求，是为了解决自己锁死自己的情况。比如下面的伪代码，一个类中的同步方法调用另一个同步方法，假如Synchronized 不支持重入，进入method2方法时当前线程获得锁，method2方法里面执行method1时当前线程又要去尝试获取锁，这时如果不支持重入，它就要等释放，把自己阻塞，导致自己锁死自己。 ​ 对Synchronized来说，可重入性是显而易见的，刚才提到，在执行monitor enter指令时，如果这个对象没有锁定，或者当前线程已经拥有了这个对象的锁(而不是已拥有了锁则不能继续获取)，就把锁的计数器+1，其实本质上就通过这种方式实现了可重入性。\",\"4、JVM对java的原生锁的优化\",\"​ 在Java 6之前，Monitor的实现完全依赖底层操作系统的互斥锁来实现,也就是我们刚才在问题二中所阐述的获取/释放锁的逻辑。由于Java层面的线程与操作系统的原生线程有映射关系，如果要将一个线程进行阻塞或唤起都需要操作系统的协助，这就需要从用户态切换到内核态来执行，这种切换代价十分昂贵，很耗处理器时间，现代JDK中做了大量的优化。\",\"​ 一种优化是使用自旋锁，即在把线程进行阻塞操作之前先让线程自旋等待一段时间，可能在等待期间其他线程已经解锁，这时就无需再让线程执行阻塞操作，避免了用户态到内核态的切换。现代JDK中还提供了三种不同的Monitor实现，也就是三种不同的锁: 偏向锁、轻量级锁、重量级锁\",\"​ 这三种锁使得JDK得以优化Synchronized的运行，当JVM检测到不同的竞争状况时，会自动切换到适合的锁实现，这就是锁的升级、降级。\",\"​ 当没有竞争出现时，默认会使用偏向锁。JVM会利用CAS操作，在对象头上的Mark Word部分设置线程ID，以表示这个对象偏向于当前线程，所以并不涉及真正的互斥锁，因为在很多应用场景中，大部分对象生命周期中最多会被一个线程锁定，使用偏斜锁可以降低无竞争开销。\",\"​ 如果有另一线程试图锁定某个被偏斜过的对象，JVM就撤销偏斜锁，切换到轻量级锁实现。\",\"​ 轻量级锁依赖CAS操作 Mark Word来试图获取锁，如果重试成功，就使用普通的轻量级锁;否则,进—步升级为重量级锁。\",\"5、Synchronize 和 ReentrantLock实现原理的不同\",\"Synchronized通过在对象头中设置标记实现了这一目的，是一种JVM原生的锁实现方式，而 ReentrantLock 以及所有的基于Lock接口的实现类，都是通过用一个volitile 修饰的int型变量，并保证每个线程都能拥有对该int的可见性和原子修改，其本质是基于所谓的AQS框架。\",\"6、AQS框架\",\"​ AQS(AbstractQueuedSynchronizer类)是一个用来构建锁和同步器的框架,各种Lock包中的锁(常用的有ReentrantLock、ReadWriteLock)，以及其他如Semaphore、CountDownLatch，甚至是早期的FutureTask 等，都是基于AQS来构建。\",\"（1）AQS内部定义了一个volatile int state变量，表示同步状态：当线程调用lock方法时，如果state=0，说明没有任何线程占有共享资源的锁，可以获得锁并将state=1;如果state=1，则说明有线程目前正在使用共享变量，其他线程必须加入同步队列进行等待。\",\"（2）\"]},\"724\":{\"h\":\"悲观锁、乐观锁\"},\"725\":{\"h\":\"1、悲观锁\",\"t\":[\"假设会发生并发冲突，屏蔽一切可能违反数据完整性的操作（具有强烈的独占和排他性）\",\"​ 依赖数据库的锁机制实现，以保证操作最大程度的独占性。\",\"​ 百度百科：正如其名，它指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度，因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）。\"]},\"726\":{\"h\":\"2、缺点\",\"t\":[\"数据库性能的大量开销，特别是对长事务而言，这样的开销无法承受\"]},\"727\":{\"h\":\"3、实现方法\",\"t\":[\"​ Mysql中 :\",\"​ 在sql后面加上 for update或者for update nowait\",\"​ for update和for update nowait区别：\",\"​ 1. for update 锁定当前操作数据，其他事务等待\",\"​ 2. for update nowait 锁定当前数据，其他事务发现数据被锁定，立即返回\\\"ORA-00054错误，内容是资源正忙, 但指定以 NOWAIT 方式获取资源\\\"\",\"​ 例如：select * from account where name=\\\"123\\\" for update\",\"​ 优点：无论是在单机还是分布式中，只要使用的是同一个数据库，那么悲观锁就能起到作用。\",\"​ 缺点：锁定数据后，必将影响其他操作，在大流量的情况下，操作速度变慢\",\"​ JAVA中 ：\",\"​ 独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。\"]},\"728\":{\"h\":\"4、使用场景举例\",\"t\":[\"以MySQL InnoDB为例\",\"Demo：\",\"​\",\" begin; select amount from item where item_id = 1 for update; // 通过amount来做出一些行为,例如告诉用户库存不足,购买失败,然后只有amount > 1才进入更新库存操作 update item set amount = amount - 1 where item_id = 1; commit; \",\"​ 由于是串行执行,其他事务的for update必须等该当前事务的 for update 语句执行,所以我们不必担心我们获得的amount被修改过,因为它永远是最新的\"]},\"729\":{\"h\":\"0、乐观锁：\",\"t\":[\"不是真正的锁，而是一种实现 : 是一种实现的\"]},\"730\":{\"h\":\"1、乐观锁：\",\"t\":[\"假设不会发生并发冲突，只有在提交操作时检查是否违反数据完整性，乐观锁不能解决脏读问题\",\"​ 乐观锁大多都基于数据版本（version）记录机制实现，何谓数据版本？即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据表增加一个“version”字段来实现。读取出数据时，将此版本一同读出，之后更新时，对此版本后 +1。此时，将提交的版本数据与数据库表对应记录的当前版本信息对比时，如果提交的数据版本号大于数据库当前版本号，则予以更新，否则认为是过期数据。\"]},\"731\":{\"h\":\"2、优缺点：\",\"t\":[\"​ 优点 ：可以多个事务同时进行，然后根据返回的不同结果做相应的操作，避免了长事务中的数据库加锁开销。\",\"​ 缺点 ：乐观锁机制往往基于系统中的数据存储逻辑，因此也具备一定的局限性，如在上例中，由于乐观锁机制是在我们的系统中实现，来自外部系统的用户余额更新操作不受我们系统的控制，因此可能会造成脏数据被更新到数据库中。\",\"在系统设计阶段，我们应该充分考虑到这些情况出现的可能性，并进行相应调整（如将乐观锁策略在数据库存储过程中实过程中实现，对外只开放基于此存储过程的数据更新途径，而不是将数据库表直接对外公开）。\"]},\"732\":{\"h\":\"3、步骤 :\",\"t\":[\" // 1.查询出商品信息 select (status,status,version) from t_goods where id=#{id} // 2.根据商品信息生成订单 // 3.修改商品 update t_goods set status=2,version=version+1 where id=#{id} and versio{139}}; \"]},\"733\":{\"h\":\"手写一个简单Autowired\",\"t\":[\"首先写一个controller和service\",\"package cn.edu.bjut.spring.controller; import cn.edu.bjut.spring.Autowired; import cn.edu.bjut.spring.service.UserService; public class UserController { @Autowired private UserService userService; } \",\"package cn.edu.bjut.spring.service; public class UserService { public String findUserById(String id) { return null; } } \",\"package cn.edu.bjut.spring; import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Retention(RetentionPolicy.RUNTIME) @Target(ElementType.FIELD) public @interface Autowired { } \",\"利用反射\",\"package cn.edu.bjut.spring; import cn.edu.bjut.spring.controller.UserController; import java.util.stream.Stream; public class TestAutowired { public static void main(String[] args) { UserController userController = new UserController(); Class<? extends UserController> clazz = userController.getClass(); // 获取所有的属性值 Stream.of(clazz.getDeclaredFields()).forEach(field -> { // 只有通过方法才能够设置具体的属性值 String name = field.getName(); Autowired annotation = field.getAnnotation(Autowired.class); if (annotation != null) { field.setAccessible(true); // 获取属性的类型 Class<?> type = field.getType(); try { // new一个新实例 Object o = type.newInstance(); field.set(userController, o); } catch (InstantiationException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } }); } } \"]},\"734\":{\"h\":\"排序之比较器Comparable<T>\",\"t\":[\" JAVA中可以通过实现 Comparable接口的方式让对象进行排序。使用方法： 1、实体继承Comparable 2、实现compareTo方法，根据需求进行比较 \",\"package com.bjut.fight.utils.comparable; public class Student implements Comparable<Student> { private String name; private int age; public Student(String name, int age) { this.name = name; this.age = age; } @Override public int compareTo(Student o) { // 1表示大于，-1表示小于，0表示等于 return this.age >= o.age ? 1 : -1; } public void print() { System.out.println(this.name + \\\",\\\" + this.age); } } \",\"public class Test { public static void main(String[] args) { Student stu1 = new Student(\\\"zhangsan\\\", 10); Student stu2 = new Student(\\\"zhangsan\\\", 21); Student stu3 = new Student(\\\"zhangsan\\\", 19); Student stu4 = new Student(\\\"zhangsan\\\", 26); Student[] students = {stu1, stu2, stu3, stu4}; Arrays.sort(students); for (Student stu : students) { stu.print(); } } } \",\" 为什么实现compareTo两个元素比较，不需要扫描全部，下一个元素插入的时候就把顺序排好了，它使用的是二叉树中序排序，下边是（网上最多介绍的）简单的处理方法： （1）设置根节点 （2）新增节点，与根节点比较大小， 小则放到左子树（若左子树已经存在，则用此左子树进行递归调用） 大则放到右子树（若右子树已经存在，则用此右子树进行递归调用） \",\"package com.bjut.fight.utils.comparable; /** * @author 郑天祺 on 2020/1/2 9:26 */ public class MyComparable { public static class BinaryTree<T> { class Node { private Comparable<T> data; private Node left; private Node right; Node(Comparable<T> data) { this.data = data; } void addNode(Node newNode) { if (newNode.data.compareTo((T) this.data) < 0) { if (this.left == null) { this.left = newNode; } else { this.left.addNode(newNode); } } if (newNode.data.compareTo((T) this.data) >= 0) { if (this.right == null) { this.right = newNode; } else { this.right.addNode(newNode); } } } void print() { if (this.left != null) { left.print(); } System.out.println(this.data + \\\"\\\\t\\\"); if (this.right != null) { this.right.print(); } } } private Node root; public void add(Comparable<T> data) { Node newNode = new Node(data); if (root == null) { root = newNode; } else { root.addNode(newNode); } } public void print() { this.root.print(); } } } \",\"public class Test { public static void main(String[] args) { MyComparable.BinaryTree<Integer> bt = new MyComparable.BinaryTree<>(); bt.add(1); bt.add(2); bt.add(0); bt.print(); } } \"]},\"735\":{\"h\":\"排序之比较器Comparator<T>\",\"t\":[\"​ Comparator，又名比较器，是为了比较两个对象的大小而抽象出的一个接口，使用比较多。在java.util下。比较功能，对一些对象的集合施加了一个整体排序 。 可以将比较器传递给排序方法（如Collections.sort或Arrays.sort ），以便对排序顺序进行精确控制。\",\"​ Comparable，这个接口往往是可比较类实现的。在 java.lang 包下。Comparable接口对实现它的每个类的对象强加一个整体排序。 这个排序被称为类的自然排序。该接口有且只有一个方法int compareTo(T o)所以继承此接口需要实现该方法。compareTo返回值-1、0、1。 Collections.sort （和Arrays.sort ）可以自动对实现此接口的对象进行列表（和数组）排序。\",\"​ 上篇已经介绍Comparable的用法，此处只介绍Compatator：\",\"public static void main(String[] args) { Student stu1 = new Student(\\\"zhangsan\\\", 10); Student stu2 = new Student(\\\"zhangsan\\\", 21); Student stu3 = new Student(\\\"zhangsan\\\", 19); Student stu4 = new Student(\\\"zhangsan\\\", 26); List<Student> students = new ArrayList<>(4); students.add(stu1); students.add(stu2); students.add(stu3); students.add(stu4); Collections.sort(students, new Comparator<Student>() { @Override public int compare(Student o1, Student o2) { return o1.getAge() - o2.getAge(); } }); } \",\"JDK1.8引入Lambda表达式：可以替换为：\",\"// 1 Collections.sort(students, (o1, o2) -> o1.getAge() - o2.getAge()); // 若1为正常由小到大顺序，可以改成2的写法 Collections.sort(students, Comparator.comparingInt(Student::getAge)); // 也可以采用stream进行处理（分组，排序，求最大最小等sql几乎操作都可以） List<Student> studentStream = students.stream().sorted(Comparator.comparingInt(Student::getAge)).collect(Collectors.toList()); \"]},\"736\":{\"h\":\"数字签名\",\"t\":[\"​ 数字签名技术是消息传递进行加密获得的签名。如HTTP请求时将请求体加密。数字签名可以用于证实数字内容的完整性和来源。常见的数字签名算法：椭圆曲线数字签名算法。。。\"]},\"737\":{\"h\":\"（1）椭圆曲线数字签名算法:\"},\"738\":{\"h\":\"生成数字签名\",\"t\":[\"获取消息m的数字摘要Hm 即 Hm = h(m);; 使用RFC6979协议，通过私钥pk和m生成确定随机数k; 计算R = k * G，其中R为曲线上的一点，取其横坐标r作为数字签名的一部分，然后计算s，即s = (Hm + r * pk) / k; 得到消息m的数字签名为Sig = <r, s> \"]},\"739\":{\"h\":\"验证数字签名\",\"t\":[\"根据Sig，使用对应的公钥P验证其签名; 判断等式s * R = Hm * G + r * P是否成立，成立则通过验证 \"]},\"740\":{\"h\":\"验证方法解释\",\"t\":[\"由椭圆公式：r 得到 R ; 因为：s = (Hm + r * pk) / k 得到 s * k = (Hm + r * pk); 又因为：P = pk * G; 所以：s * (k * G) = Hm * G + r * (pk * G) ; 推出 s * R = Hm * G + r * P \"]},\"741\":{\"h\":\"原理解释：\",\"t\":[\"https://www.cnblogs.com/wsonepiece/p/3977021.html\"]},\"742\":{\"h\":\"（2）Schnorr数字签名算法\"},\"743\":{\"h\":\"生成数字签名\",\"t\":[\"计算消息m的数字摘要: Hm = H(m) 生成确定性随机数k，计算 R = k * G , 取R的横坐标 r 作为签名的一部分 计算签名另一部分：s = k + h(P || R || m) * pk 得到数字签名 Sig = <r , s> \"]},\"744\":{\"h\":\"验证数字签名\",\"t\":[\"利用公钥P验证其签名 s * G = R + h(P || R || m) * P 是否成立，成立则通过验证 多个签名： (s1 + .. + S50) * G = R1 + .. + R50 + h1 * P1 + .. h50 * P50 \"]},\"745\":{\"h\":\"验证方法解释\",\"t\":[\"因为：s = k + h(P || R || m) * pk ; 又因为：P = pk * G ; 所以：s * G = k * G + h(P || R || m) * (pk * G) 所以：s * G = R + h * (P || R || m) * P 由r 得到 R \"]},\"746\":{\"h\":\"文件上传之Content-Type\"},\"747\":{\"h\":\"1、Content-Type介绍\",\"t\":[\"Content-Type是指http/https发送信息至服务器时的内容编码类型，contentType用于表明发送数据流的类型，服务器根据编码类型使用特定的解析方式，获取数据流中的数据。\",\"在网络请求中，常见的Content-Type有：\"]},\"748\":{\"h\":\"1.1、常见的页面资源类型\",\"t\":[\"​ text/html，text/plain，text/css，text/javascript，image/jpeg，image/png，image/gif等；\",\"​ 常见的页面提交或上传文件类型\",\"​ application/x-www-form-urlencoded，multipart/form-data，application/json，application/xml等。\"]},\"749\":{\"h\":\"1.2、form表单可以定义enctype属性，该属性是发送到服务器之前应该如何对表单数据进行编码\",\"t\":[\"（1）默认为application/x-www-form-urlencoded编码（包含POST和GET）\",\"​ 其中：数据会变成key1=value1&key2=value2的形式；\",\"​ 有特殊字符需要utf-8；\",\"​ 请求类型为GET时，格式化后的字符串直接拼接到url的后面；\",\"​ 请求类型为POST时，格式化后的字符串会放在http body的Form Data中发送。\",\"（2）multipart/form-data\",\"​ 其中：使用表单上传文件时必须指定enctype属性值为multipart/form-data；\",\"​ 请求体被分割成多部分，每部分使用 --boundary分割（分成小部分？查其他资料）\",\"此处为form方式文件上传后端接收demo：\",\"@PostMapping(value=\\\"/publish\\\") public void formUpload(@RequestParam(\\\"programImg\\\") CommonsMultipartFile file){ String programImgName = file.getOriginalFilename(); byte[] fileData = file.getBytes(); } \",\"​ （3）application/json\",\"​ 和form类似，json可以比formData的数据结构更加复杂\",\"​ 文件上传可以把文件编码成Base64，使用键值方式上传\",\"此处为json方式文件上传后端接收demo：\",\"@PostMapping(value = \\\"/upload\\\") public void jsonUpload(@RequestBody HashMap<String, String> requestMap) { String fileData = requestMap.get(\\\"fileData\\\"); String fileName = requestMap.get(\\\"fileName\\\"); // 此处前端上传的Base64后端无法直接解开，因为它的串包含一个头，需要把头去掉。 fileData = StringUtils.split(fileData, \\\",\\\")[1]; byte[] buffer = new BASE64Decoder().decodeBuffer(fileData); } \",\"​\"]},\"750\":{\"h\":\"池化之线程池\",\"t\":[\"java中池化技术是提前保存大量的资源，以备不时之需以及重复使用。\"]},\"751\":{\"h\":\"1、池化技术\",\"t\":[\"Tips：不是深度学习中的卷积和赤化\",\"在实际应用当做，分配内存、创建进程、线程都会设计到一些系统调用，系统调用需要导致程序从用户态切换到内核态，是非常耗时的操作。因此，当程序中需要频繁的进行内存申请释放，进程、线程创建销毁等操作时，通常会使用内存池、进程池、线程池技术来提升程序的性能。\",\"进程池、线程池：先启动若干数量的线程，并让这些线程都处于睡眠状态，当需要一个开辟一个线程去做具体的工作时，就会唤醒线程池中的某一个睡眠线程，让它去做具体工作，当工作完成后，线程又处于睡眠状态，而不是将线程销毁。当线程数达到一定数量时，可以在队列中等待。\",\"内存池：内存池是指程序预先从操作系统申请一块足够大内存，此后，当程序中需要申请内存的时候，不是直接向操作系统申请，而是直接从内存池中获取；同理，当程序释放内存的时候，并不真正将内存返回给操作系统，而是返回内存池。当程序退出(或者特定时间)时，内存池才将之前申请的内存真正释放。\"]},\"752\":{\"h\":\"2、线程池好处\",\"t\":[\"几乎所有需要异步或者并发执行任务的程序都可以使用线程池。\",\"合理使用会给我们带来以下好处。\",\"降低系统消耗：重复利用已经创建的线程降低线程创建和销毁造成的资源消耗。\",\"提高响应速度：当任务到达时，任务不需要等到线程创建就可以立即执行。\",\"提供线程可以管理性：可以通过设置合理分配、调优、监控。\"]},\"753\":{\"h\":\"3、线程池工作流程\",\"t\":[\"1、判断核心线程池里的线程是否都有在执行任务，否->创建一个新工作线程来执行任务。是->走下个流程。\",\"2、判断工作队列是否已满，否->新任务存储在这个工作队列里，是->走下个流程。\",\"3、判断线程池里的线程是否都在工作状态，否->创建一个新的工作线程来执行任务，是->走下个流程。\",\"4、按照设置的策略来处理无法执行的任务。\"]},\"754\":{\"h\":\"4、线程池的创建\",\"t\":[\"// 创建线程工厂实例 ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"demo-pool-%d\\\").build(); // 创建线程池，核心线程数、最大线程数、空闲保持时间、队列长度、拒绝策略可自行定义 ExecutorService pool = new ThreadPoolExecutor(5, 20, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy()); \"]},\"755\":{\"h\":\"1.corePoolSize：\",\"t\":[\"核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。\"]},\"756\":{\"h\":\"2.maximumPoolSize：\",\"t\":[\"线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。\"]},\"757\":{\"h\":\"3.keepAliveTime：\",\"t\":[\"线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。\"]},\"758\":{\"h\":\"4.unit：\",\"t\":[\"线程保持活动时间单位，天(DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS).微秒(MICROSECONDS)、纳秒(NANOSECONDS)\"]},\"759\":{\"h\":\"5.workQueue：\",\"t\":[\"任务队列，保存等待执行的任务的阻塞队列。一般来说可以选择如下阻塞队列：\",\"(1) ArrayBlockingQueue:基于数组的有界阻塞队列。\",\"​ (2)LinkedBlockingQueue:基于链表的阻塞队列。\",\"​ (3)SynchronizedQueue:一个不存储元素的阻塞队列。\",\"​ (4)PriorityBlockingQueue:一个具有优先级的阻塞队列。\"]},\"760\":{\"h\":\"6.threadFactory：\",\"t\":[\"设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\"]},\"761\":{\"h\":\"7.handler：\",\"t\":[\"饱和策略也叫拒绝策略。当队列和线程池都满了，即达到饱和状态。所以需要采取策略来处理新的任务。默认策略是AbortPblicy\",\"(1)AbortPolicy:直接抛出异常。\",\"(2)CallerRunsPolicy:调用者所在的线程来运行任务。\",\"(3)DiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。\",\"(4)DiscardPolicy:不处理，直接丢掉。\",\"当然可以根据自己的应用场景，实现RejectedExecutionHandler接口自定义策略。\"]},\"762\":{\"h\":\"5、向线程池提交任务\",\"t\":[\"可以使用execute()和submit()两种方式提交任务。\",\"execute():无返回值，所以无法判断任务是否被执行成功。\",\"submit(:用于提交需要有返回值的任务。线程池返回一个future类型的对象，通过这个future对象可以判断任务是否执行成功，并且可以通过future的get()来获取返回值，get()方法会阻塞当前线程知道任务完成。get(long timeout,TimeUnit unit)可以设置超时时间。\"]},\"763\":{\"h\":\"6、线程池的关闭\"},\"764\":{\"h\":\"（1）正常关闭\",\"t\":[\"ExecutorService pool=...； // 用于线程内无迭代，且预期在短时间内能执行完毕的线程任务； pool.shutdown(); // 用于线程内有迭代逻辑，或执行完成时间无法预估的场景（此类线程任务代码必须进行中断信号的处理）； pool.shutdownNow(); \",\"可以通过shutdown()或shutdownNow()来关闭线程池。\",\"它们的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt来中断线程，所以无法响应终端的任务可以能永远无法停止\",\"shutdownNow首先将线程池状态设置成STOP;然后尝试停止所有的正在执行或者暂停的线程，并返回等待执行任务的列表。\",\"shutdown只是将线程池的状态设置成shutdown状态，然后中断所有没有正在执行任务的线程。\",\"只要调用两者之一，isShutdown就会返回true,当所有任务都已关闭，isTerminaed就会返回true。一般来说调用shutdown方法来关闭线程池，如果任务不一定要执行完，可以直接调用shutdownNow方法。\"]},\"765\":{\"h\":\"（2）中断异常处理\",\"t\":[\" //所有会引起中断异常的代码段都要单独处理中断异常，绝对不可合并在Exception或Throwable里处理；并根据代码结构和业务逻辑判断，是否需要恢复中断异常 try { Thread.sleep(1000L); } catch (InterruptedException e) { // 中断处理 } catch (Exception e) { // 其它异常处理 } \"]},\"766\":{\"h\":\"（3）库代码中断异常处理\",\"t\":[\"//库代码中断异常处理主要有两种方式，如下：\",\"传递InterruptedException：避开这个异常通常是最明智的策略——只需将InterruptedException传递给方法的调用者。\",\"恢复中断：有时不能抛出InterruptedException，例如代码位于Runnable中时。在这些情况下，捕获InterruptedException并使用当前线程上的Interrupt方法恢复中断状态，这样在调用栈中更高层的代码将看到引发了一个中断。\"]},\"767\":{\"h\":\"（4）检查中断状态\",\"t\":[\"// 测试当前线程是否已经中断。线程的中断状态 由该方法清除。 Thread.interrupted(); // 测试线程是否已经中断。线程的中断状态不受该方法的影响。 Thread.currentThread().isInterrupted(); \"]},\"768\":{\"h\":\"（5）线程内有迭代逻辑时的中断处理参考代码模板\",\"t\":[\" // 迭代必须包含对中断信号的响应，以及对中断异常的处理 while (线程中断状态为false) { // 业务代码 } int listSize = 100; for (int i = 0; i < listSize; i++) { if (线程中断状态为false) { break; } // 业务代码 } \"]},\"769\":{\"h\":\"7、线程池如何配置合理\",\"t\":[\"配置线程池可以从以下几个方面考虑。\",\"任务是cpu密集型、IO密集型或者混合型·任务优先级，高中低。\",\"任务时间执行长短。\",\"任务依赖性:是否依赖其他系统资源。\",\"cpu密集型可以配置可能小的线程,比如n+1个线程。io密集型可以配置较多的线程，如2n个线程。\",\"混合型可以拆成io密集型任务和cpu密集型任务，\",\"如果两个任务执行时间相差大，否->分解后执行吞吐量将高于串行执行吞吐量。否->没必要分解。\",\"可以通过Runtime.getRuntime().availableProcessors()来获取cpu个数。建议使用有界队列，增加系统的预警能力和稳定性。\"]},\"770\":{\"h\":\"8、JDK线程示例\"},\"771\":{\"h\":\"（0）FixedThreadPool\",\"t\":[\"可重用固定线程数的线程池。查看源码：\",\"public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>()); } \",\"corePoolSize和maxPoolSize都被设置成我们设置的nThreads。 当线程池中的线程数大于corePoolSize ,keepAliveTime为多余的空闲线程等待新任务的最长时间，超过这个时间后多余的线程将被终止，如果设为0，表示多余的空闲线程会立即终止。 工作流程:\",\"1.当前线程少于corePoolSize,创建新线程执行任务。\",\"2.当前运行线程等于corePoolSize,将任务加入LinkedBlockingQueue。\",\"3.线程执行完1中的任务，会循环反复从LinkedBlockingQueue获取任务来执行。LinkedBlockingQueue作为线程池工作队列(默认容量Integer.MAX_VALUE)。因此可能会造成如下。\",\"1.当线程数等于corePoolSize时，新任务将在队列中等待，因为线程池中的线程不会超过corePoolSize。\",\"2.maxnumPoolSize等于说是一个无效参数。\",\"3.keepAliveTime等于说也是一个无效参数。\",\"4.运行中的FixedThreadPool(未执行shundown或shundownNow)则不会调用拒绝策略。\",\"5.由于任务可以不停的加到队列，当任务越来越多时很容易造成OOM。\"]},\"772\":{\"h\":\"（1）SingleThreadExecutor\",\"t\":[\"是使用单个worker线程的Executor。查看源码:\",\" public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())); } public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), threadFactory)); } \",\"corePoolSize和maxnumPoolSize被设置为1。其他参数和FixedThreadPool相同。执行流程以及造成的影响同FixedThreadPool。\"]},\"773\":{\"h\":\"（2）CachedThreadPool\",\"t\":[\"根据需要创建新线程的线程池。查看源码:\",\"public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()); } public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), threadFactory); } \",\"corePoolSize设置为0,maxmumPoolSize为Integer.MAX_VALUE。keepAliveTime为60秒。工作流程:\",\"1.首先执行SynchronousQueue.offer (Runnable task)。如果当前maximumPool中有空闲线程正在执行SynchronousQueue.pol(keepAliveTIme,TimeUnit.NANOSECONDS)，那么主线程执行offer操作与空闲线程执行的poll操作配对成功，主线程把任务交给空闲线程执行，execute方法执行完成；否则执行下面的步骤2。\",\"2.当初始maximumPool为空或者maximumPool中当前没有空闲线程时，将没有线程执行SynchronousQueue.poll (keepAliveTime, TimeUnit.NANOSECONDS)。这种情况下，步骤1将失败。此时CachedThreadPool会创建一个新线程执行任务，execute()方法执行完成。\",\"3.在步骤2中新创建的线程将任务执行完后，会执行SynchronousQueue.poll (keepAliveTime,TimeUnit.NANOSECONDS)。这个poll操作会让空闲线程最多在SynchronousQueue中等待60秒钟。如果60秒钟内主线程提交了一个新任务(主线程执行步骤1)，那么这个空闲线程将执行主线程提交的新任务；否则，这个空闲线程将终止。由于空闲60秒的空闲线程会被终止，因此长时间保持空闲的CachedThreadPool不会使用任何资源。\"]},\"774\":{\"h\":\"（3）创建定时任务\",\"t\":[\" // 禁止使用Timer，一律使用ScheduledExecutorService ScheduledExecutorService schedule = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().setNameFormat(\\\"scheduled-%d\\\").build()); // 创建并执行在给定延迟后启用的一次性操作 schedule.schedule(new DemoWorker(), 60000L, TimeUnit.MILLISECONDS); /* * 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期； * 也就是将在 initialDelay 后开始执行，w然后在 initialDelay+period 后执行，接着在 initialDelay + 2 * period 后执行，依此类推。 */ schedule.scheduleAtFixedRate(new DemoWorker(), 60000L, 60000L, TimeUnit.MILLISECONDS); // 创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。 schedule.scheduleWithFixedDelay(new DemoWorker(), 60000L, 60000L, TimeUnit.MILLISECONDS); \"]},\"775\":{\"h\":\"9、建议\"},\"776\":{\"h\":\"CountDownLatch实现所有线程达到某一个目标后，再继续进行下一步工作\",\"t\":[\"ThreadFactory namedThreadFactory = new ThreadFactoryBuilder().setNameFormat(\\\"demo-pool-%d\\\").build(); ExecutorService executor = new ThreadPoolExecutor(5, 20, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy()); int count = 500; // CountDownLatch的计数器需要和任务数相同，执行完一个任务调用countDown让计数器减一 CountDownLatch latch = new CountDownLatch(count); for (int i = 0; i < count; i++) { executor.submit(new Runnable() { @Override public void run() { try { Thread.sleep(50); System.out.println(\\\"运行任务\\\"); } catch (Exception e) { e.printStackTrace(); } latch.countDown(); } }); } try { latch.await(); } catch (InterruptedException e) { e.printStackTrace(); } System.out.println(\\\"都运行完了\\\"); \"]},\"777\":{\"h\":\"采用Lock加锁在finally块中释放锁，保证不论是否抛出异常锁一定会被释放：\",\"t\":[\"Lock lock = new ReentrantLock(); lock.lock(); try { System.out.println(Thread.currentThread().getName() + \\\"得到了锁\\\"); System.out.println(\\\"do something...\\\"); } catch (Exception e) { System.out.println(\\\"handle exception\\\"); } finally { lock.unlock(); System.out.println(Thread.currentThread().getName() + \\\"释放了锁\\\"); } \",\"10、springboot线程池ThreadPoolTaskExecutor以及@Async异步注解使用方法\"]},\"778\":{\"h\":\"方式一：\",\"t\":[\"在Application启动类上面加上@EnableAsync，在需要异步执行的方法上加上@Async注解\"]},\"779\":{\"h\":\"方式二：直接调用ThreadPoolTaskExecutor\",\"t\":[\"配置线程池的类型与参数，如下\",\"import org.apache.commons.lang3.concurrent.BasicThreadFactory; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.ScheduledThreadPoolExecutor; import java.util.concurrent.ThreadPoolExecutor; /** * 线程池配置 **/ @Configuration public class ThreadPoolConfig { // 核心线程池大小 private int corePoolSize = 50; // 最大可创建的线程数 private int maxPoolSize = 200; // 队列最大长度 private int queueCapacity = 1000; // 线程池维护线程所允许的空闲时间 private int keepAliveSeconds = 300; @Bean(name = \\\"threadPoolTaskExecutor\\\") public ThreadPoolTaskExecutor threadPoolTaskExecutor() { ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); executor.setMaxPoolSize(maxPoolSize); executor.setCorePoolSize(corePoolSize); executor.setQueueCapacity(queueCapacity); executor.setKeepAliveSeconds(keepAliveSeconds); // 线程池对拒绝任务(无线程可用)的处理策略 executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); return executor; } } \",\"然后使用该配置\",\"// 使用方式一 @Autowired private ThreadPoolTaskExecutor threadPoolTaskExecutor; threadPoolTaskExecutor.submit(xxxxx); // 使用方式二：必须指定bean名字不然就默认加载到其他的配置 @Async(\\\"threadPoolTaskExecutor\\\") public void hello(String name){ logger.info(\\\"异步线程启动 started.\\\"+name); } \"]},\"780\":{\"h\":\"用户行为特征提取\",\"t\":[\"玩家每天游戏的各种操作（登录，充值等），这些行为都会记录到日志中，根据这些日志信息统计并分析用户行为。\"]},\"781\":{\"h\":\"（1）、时延\",\"t\":[\"​ 由于 Hadoop MapReduce 底层设计因素，在进行计算的过程中，在 Map 阶段的处理结果会写入磁盘中，在 Reduce 阶段再去下载 Map 阶段处理完的结果，Reduce 计算完毕后的结果又会回写磁盘中。\",\"​ 这样反复操作磁盘，I/O 开销很大，所耗费的时间自然也就偏高。这就意味着，Hadoop MapReduce 计算模型适合处理 批处理任务，而对实时统计任务则不适合，如 股票交易系统，银行交易系统。\"]},\"782\":{\"h\":\"（2）、吞吐量\",\"t\":[\"​ 在 Map 阶段中，被访问的数据是不能被修改的，直到整个作业 Job 完成。这就意味着，Hadoop MapReduce 是一个面向批处理的计算模型。\"]},\"783\":{\"h\":\"（3）、应用：\",\"t\":[\"​ 适合离线计算，MapReduce 支持统计用户点击量（PV）、独立访问量（UV）及大数据及的信息检索等。\",\"image-20191223112428348\",\"​ a. 收集数据\",\"image-20191223112725005\",\"​ b. 采用HDFS将收集的数据按照业务进行分类存储\",\"​ c. 使用计算模型进行分析、计算（模型有 Spark 、 Hive 、 Pig、 Tez 、 Flink等）\"]},\"784\":{\"h\":\"（1）统计结果\",\"t\":[\"​ 针对运营：了解用户对哪些业务感兴趣，需求量比较大，就可以重点投入。\",\"​ 针对开发者：统计数据后的结果\"]},\"785\":{\"h\":\"（2）分析项目的目的\",\"t\":[\"​ a、可以分析各个业务模块的活跃度、在各个模块停留的时间及用户的消费明细。\",\"​ b、企业制定决策，需要实际数据作为支撑，用户行为结果能够帮助企业在某块业务进行决策时提供可靠的数据依据。\",\"​ c、推送活动信息能不能造成反感。可以通过精准推送来提升用户的留存感，如用户在浏览某商品高，可推荐该商品的优惠活动。\",\"​ 从业务数据中有效的分析各类统计指标（KPI）和数据源，让读者能够将数据源和**各类统计指标（KPI）**合理地关联起来。\"]},\"786\":{\"h\":\"（1）数据源 与 统计指标（KPI）分析\",\"t\":[\"​ 指标，这是很重要的；\",\"​ 合理的制定和可配置的制定可以更加方便后续工作。\",\"​ 每条日志记录通常表示：用户的一次行为记录。这些记录以 JSON 数据格式对操作行为进行封装。\",\"image-20191223114826757\",\"image-20191223114900518\"]},\"787\":{\"h\":\"（2）数据源 与 统计指标（KPI）的关系\",\"t\":[\"image-20191223115309185\"]},\"788\":{\"h\":\"（1）流程设计\",\"t\":[\"image-20191223115738971\",\"解释：\",\"a. 数据量小，简单 使用脚本，反之用Flume等收集集群\",\"b. 原始数据不一定是有效数据，所以要数据清洗，然后在用Hive进行数据建模\",\"c. 实时计算可以用Flink、Spark、Storm\",\"d. 最后结果可以存储在Oracle、Mysql、HBase、或者HDFS\"]},\"789\":{\"h\":\"（2）统计指标设计\",\"t\":[\"a. 用户一周内登陆总数：根据用户ID去重来统计一周内登陆总数\",\"// 用户 ID 去重，全平台，全站点统计 SELECT COUNT(DISTINCT ‘uid’) FROM ip_login WHERE tm BETWEEN 2019-12-23 AND 2019-12-29; \",\"b. 用户一周中登陆分布情况，根据 IP 分组统计一周内的用户登录分布情况\",\"// 用户 ID 去重且根据 IP 字段分组，全平台，全站点统计 SELECT ‘ip’, COUNT(DISTINCT 'uid') FROM ip_login WHERE tm BETWEEN 2019-12-23 AND 2019-12-29 GROUP BY 'uid','ip'; \",\"c. 不同平台下一周用户的登录情况，根据平台分组统计一周内的用户登录情况\",\"// 用户 ID 去重且根据 plat 字段分组，全站点统计 SELECT 'plat', COUNT(DISTINCT 'uid') FROM ip_login WHERE tm BETWEEN 2019-12-23 AND 2019-12-29 GROUP BY 'uid', 'palt'; \",\"d. 不同站点下一周用户的登录情况，根据不同站点统计一周内用户的登录情况\",\"// 用户 ID 去重且根据 bpid 字段分组，全平台统计 SELECT ‘bpid’, COUNT(DISTINCT 'uid') FROM ip_login WHERE tm BETWEEN 2019-12-23 AND 2019-12-29 GROUP BY 'uid', 'plat'; \",\"e. 用户一周内 PC 端和移动端登录情况：根据 PC 字段和移动端字段值来统计一周内用户登录情况\",\"// 使用CASE WHEN 条件语句统计多指标任务 SELECT COUNT(CASE WHEN ‘ispc’ = 0 THEN 1 END), COUNT(CASE WHEN 'ismobile' = 1 THEN 1 END) FROM ip_login WHERE tm BETWEEN 2019-12-23 AND 2019-12-29; \",\"f. 用户一周内每天的登录总数：按照天分组来统计每天用户登录总数\",\"// 按照分区时间分组，用户 ID 去重进行全平台、全站点统计 SELECT tm, COUNT(DISTINCT 'uid') FROM ip_login WHERE tm BETWEEN 2019-12-23 AND 2019-12-29 GROUP 'uid', tm; \",\"注意：在编写Hive SQL进行指标统计进行去重\",\"小数量使用 COUNT DISTINCT\",\"数据量大推荐使用 GROUP BY 去重，避免数据倾斜（？） 数据倾斜无非就是大量的相同key被partition分配到一个分区里,造成了'一个人累死,其他人闲死'的情况：https://blog.csdn.net/weixin_35353187/article/details/84303518\",\"此篇文章为《Hadoop大数据挖掘入门到放弃》笔记！\"]},\"790\":{\"h\":\"理解IO阻塞与非阻塞\"},\"791\":{\"h\":\"1、饭店吃饭的例子\",\"t\":[\"A君喜欢下馆子吃饭，服务员点完餐后，A君一直坐在座位上等待厨师炒菜，什么事情也没有干，过了一会服务员端上饭菜后，A君就开吃了 -- 【阻塞I/O】\",\"B君也喜欢下馆子，服务员点完餐后，B君看这个服务员长得不错便前去搭讪，一直和服务员聊人生理想，并时不时的打听自己的饭做好了没有，过了一会饭也做好了，B君也撩到了美女服务员的微信号 -- 【非阻塞I/O 】\"]},\"792\":{\"h\":\"2、阻塞与非阻塞调用对比\"},\"793\":{\"h\":\"3、阻塞IO\"},\"794\":{\"h\":\"4、非阻塞IO\"},\"795\":{\"h\":\"5、I/O复用模型\",\"t\":[\"​ 前面讲的非阻塞仍然需要进程不断的轮询重试。能不能实现当数据可读了以后给程序一个通知呢？所以这里引入了一个IO多路复用模型，I/O多路复用的本质是通过一种机制（系统内核缓冲I/O数据），让单个进程可以监视多个文件描述符，一旦某个描述符就绪（一般是读就绪或写就绪），能够通知程序进行相应的读写操作。\",\"​ 常见的IO多路复用方式有【select、poll、epoll】，都是Linux API提供的IO复用方式\"]},\"796\":{\"h\":\"6、I/O复用select模型\"},\"797\":{\"h\":\"7、select、epoll、poll模型对比\"},\"798\":{\"h\":\"（1）select 时间复杂度O(n)\"},\"799\":{\"h\":\"过程\",\"t\":[\"（1）从用户空间拷贝fd_set到内核空间\",\"（2）注册回调函数\",\"（3）遍历所有fd，调用其对应的poll方法\",\"（4）以tcp_poll为例，其核心实现就是__pollwait，也就是上面注册的回调函数。\",\"（5）把（当前进程）挂到设备的等待队列中，不同的设备有不同的等待队列\",\"（6）poll方法返回时会返回一个描述读写操作是否就绪的mask掩码，根据这个mask掩码给fd_set赋值\",\"（7）如果遍历完所有的fd，还没有返回一个可读写的mask掩码，则会调用schedule_timeout是调用select的进程（也就是current）进入睡眠。当设备驱动发生自身资源可读写后，会唤醒其等待队列上睡眠的进程。如果超过一定的超时时间（schedule_timeout指定），还是没人唤醒，则调用select的进程会重新被唤醒获得CPU，进而重新遍历fd，判断有没有就绪的fd。\",\"（8）把fd_set从内核空间拷贝到用户空间。\"]},\"800\":{\"h\":\"总结\",\"t\":[\"​ 内核仅仅知道，有I/O事件发生了，却并不知道是哪几个I/O流。\",\"​ 我们只能无差别轮询所有的流，找出能读出数据（或写入数据的流），对他们进行操作。\",\"​ 处理的流越多，无差别遍历的事件就越长（O(n)）\",\"​ 内核需要将消息传递到用户空间，都需要内核拷贝动作\"]},\"801\":{\"h\":\"（2）poll 时间复杂度O(n)\"},\"802\":{\"h\":\"过程\",\"t\":[\"while true { // 知道有一个流有I/O事件时，才往下执行 select(streams[]) for i in streams[] { if i has data read until unavailable } } \"]},\"803\":{\"h\":\"总结\",\"t\":[\"​ poll本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态，但是它没有最大连接数的限制，原因是它是基于链表来存储的。\",\"​ 内核需要将消息传递到用户空间，都需要内核拷贝动作\"]},\"804\":{\"h\":\"（3）epoll 时间复杂度O(1)\"},\"805\":{\"h\":\"过程\",\"t\":[\"{ active_stream[] = epoll_wait(epollfd) for i in active_stream[] { read or write till } } \"]},\"806\":{\"h\":\"总结\",\"t\":[\"​ epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知用户线程，epoll实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。\",\"​ 内核和用户空间共享一块内存来实现的\",\"​ 优点：\",\"​ [1]、没有最大并发连接的限制，能打开的FD的上限远大于1024（1G的内存上能监听约10万个端口）\",\"​ [2]、效率提升，不是轮询的方式，不会随着FD数目的增加效率下降。\",\"​ [3]、 内存拷贝，利用mmap()文件映射内存加速与内核空间的消息传递；即epoll使用mmap减少复制开销。\"]},\"807\":{\"h\":\"总结：\",\"t\":[\"​ 表面上看epoll的性能最好，但是在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。\"]},\"808\":{\"h\":\"8、多路复用的好处\",\"t\":[\"​ select，poll，epoll都是IO多路复用的机制。\",\"​ I/O多路复用可以通过把多个 I/O 的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。\",\"​ 它的最大优势是系统开销小，并且不需要创建新的进程或者线程，降低了系统的资源开销\",\"​\\t\\t但是select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。\"]},\"809\":{\"h\":\"线程相关的知识\",\"t\":[\"在命令式编程中：线程之间的通信机制有两种：共享内存和消息传递。\",\"1）在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信。\",\"2）在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显示进行通信。\",\"Java的并发采用的是共享内存模型，Java线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。\",\"简单例子：\",\"​ 全局变量A，方法B和C都对A进行操作，B和C就可以利用A进行通讯。\",\"JMM 的一个抽象概念，并不真实存在。\",\"​ 在JAVA中：\",\"1）共享变量：所有实例域、静态域和数组元素存储在堆内存中，堆内存在线程之间共享。\",\"2）局部变量、方法定义参数和异常处理器参数不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响。\",\"JMM决定一个线程和主内存的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。\",\"img\",\"从上图来看，线程 A与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：\",\"首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。\",\"然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。\",\"img\",\"在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：\",\"1） 编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。\",\"2）指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。\",\"3）内存系统的重排序。由于处理器使用缓存和读/写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。\",\"img\",\"上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。\",\"综上，多个线程之间，执行的顺序是会随机改变的，需要我们注意。\",\"​ 在顺序一致性模型中，所有操作完全按程序的顺序串行执行。而在JMM 中，临界区内的代码可以重排序（但 JMM 不允许临界区内的代码“逸出”到临界区之外，那样会破坏监视器的语义）。\",\"1）顺序一致性模型保证单线程内的操作会按程序的顺序执行，而 JMM 不保证单线程内的操作会按程序的顺序执行（比如上面正确同步的多线程程序在临界区内的重排序）。这一点前面已经讲过了，这里就不再赘述。\",\"2）顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而 JMM 不保证所有线程能看到一致的操作执行顺序。这一点前面也已经讲过，这里就不再赘述。\",\"3） JMM 不保证对 64 位的 long 型和 double 型变量的读/写操作具有原子性，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。\",\"这个差异与处理器总线的工作机制密切相关。在计算机中，数据通过总线在处理器和内存之间传递。每次处理器和内存之间的数据传递都是通过一系列步骤来完成的，这一系列步骤称之为总线事务（bus transaction）。总线事务包括读事务（read transaction）和写事务（write transaction）。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会读/写内存中一个或多个物理上连续的字。这里的关键是，总线会同步试图并发使用总线的事务。在一个处理器执行总线事务期间，总线会禁止其它所有的处理器和 I/O 设备执行内存的读/写。下面让我们通过一个示意图来说明总线的工作机制：\",\"在一些 32 位的处理器上，如果要求对 64 位数据的写操作具有原子性，会有比较大的开销。为了照顾这种处理器，java 语言规范鼓励但不强求 JVM 对 64 位的 long型变量和 double 型变量的写具有原子性。当 JVM 在这种处理器上运行时，会把一个 64 位 long/ double 型变量的写操作拆分为两个 32 位的写操作来执行。这两个 32 位的写操作可能会被分配到不同的总线事务中执行，此时对这个 64 位变量的写将不具有原子性。\",\"img\"]},\"810\":{\"h\":\"自旋锁\"},\"811\":{\"h\":\"1、自旋锁概念（spinlock）\",\"t\":[\"是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。\",\"获取锁的线程一直处于活跃状态，但是并没有执行任何有效的任务，使用这种锁会造成busy-waiting。\"]},\"812\":{\"h\":\"2、自旋锁的优点 :\",\"t\":[\"自旋锁不会使线程状态发生切换，一直处于用户态，即线程一直都是active的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换。 （线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能）\"]},\"813\":{\"h\":\"3、自旋锁应用 :\",\"t\":[\"由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用CPU时间。\",\"如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。\"]},\"814\":{\"h\":\"4、简单自旋锁的实现 ：\",\"t\":[\"public class SimpleSpinLock { /** * 持有锁的线程，null表示锁未被线程持有 */ private static AtomicReference<Thread> ref = new AtomicReference<>(); public void Lock() { Thread currentThread = Thread.currentThread(); // 当ref为null的时候compareAndSet返回true，反之为false // 通过循环不断的自旋判断锁是否被其他线程持有 while (!ref.compareAndSet(null, currentThread)) { } } public void unLock() { Thread currentThread = Thread.currentThread(); if (ref.get() != currentThread) { } ref.set(null); } } test： public class SimpleSpinLockTest { private static int n = 0; public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor pool = new ThreadPoolExecutor(100, 100, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), new DefaultNameThreadFactory(\\\"SimpleSpinLock\\\")); CountDownLatch countDownLatch = new CountDownLatch(100); SimpleSpinLock simpleSpinLock = new SimpleSpinLock(); for (int i = 0; i < 100; i++) { pool.submit(() -> { simpleSpinLock.Lock(); n++; simpleSpinLock.unLock(); // 计数减一 countDownLatch.countDown(); }); } // 要求主线程等待所有任务全部准备好才一起并行执行 countDownLatch.await(); System.out.println(n); } } \"]},\"815\":{\"h\":\"5、可重入的自旋锁和不可重入的自旋锁 ：\",\"t\":[\"仔细分析一下上述就可以看出，它是不支持重入的，即当一个线程第一次已经获取到了该锁，在锁释放之前又一次重新获取该锁，第二次就不能成功获取到。\",\"由于不满足CAS，所以第二次获取会进入while循环等待，而如果是可重入锁，第二次也是应该能够成功获取到的。为了实现可重入锁，我们需要引入一个计数器，用来记录获取锁的线程数----》其他章节可重入锁\"]},\"816\":{\"h\":\"6、 另有三种常见的形式 :\",\"t\":[\"TicketLock ，CLHlock 和 MCSlock：https://www.cnblogs.com/stevenczp/p/7136416.html\"]},\"817\":{\"h\":\"读写锁\"},\"818\":{\"h\":\"1、读写锁介绍：\",\"t\":[\"​ ReadWriteLock同Lock一样也是一个接口，提供了readLock和writeLock两种锁的操作机制，一个是只读的锁，一个是写锁。\",\"​ 理论上，读写锁比互斥锁允许对于共享数据更大程度的并发。与互斥锁相比，读写锁是否能够提高性能取决于读写数据的频率、读取和写入操作的持续时间、以及读线程和写线程之间的竞争。\",\"​ 一些业务场景中，大部分 只是读数据，写数据很少，如果仅仅是读数据的话并不会影响数据正确性（出现脏读），而如果在这种业务场景下，依然使用独占锁的话，很显然这将是出现性能瓶颈的地方。 针对这种读多写少的情况，java还提供了另外一个实现Lock接口的ReentrantReadWriteLock(读写锁)。读写所允许同一时刻被多个读线程访问，但是在写线程访问时，所有的读线程和其他的写线程都会被阻塞。\",\"​\",\"​ 读-读能共存， ​ 读-写不能共存， ​ 写-写不能共存。\",\"连接：https://blog.csdn.net/j080624/article/details/82790372、https://ifeve.com/read-write-locks/\"]},\"819\":{\"h\":\"2、总结：\",\"t\":[\"公平性选择：支持非公平性（默认）和公平的锁获取方式，吞吐量还是非公平优于公平；\",\"重入性：支持重入，读锁获取后能再次获取，写锁获取之后能够再次获取写锁，同时也能够获取读锁；\",\"锁降级：遵循获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁\"]},\"820\":{\"h\":\"3、写锁的获取：\",\"t\":[\"​ 写锁是独占式锁，而实现写锁的同步语义是通过重写 AQS 中的 tryAcquire() 方法实现的，源码：\",\"protected final boolean tryAcquire(int acquires) { Thread current = Thread.currentThread(); // 1. 获取 写锁 当前的同步状态 int c = getState(); // 2. 获取 写锁 获取的次数 int w = exclusiveCount(c); if (c != 0) { // (Note: if c != 0 and w == 0 then shared count != 0) // 3.1 当 读锁 已被读线程获取 或者 当前线程不是已经获取 写锁 的线程的话 // 当前线程获取 写锁失败 if (w == 0 || current != getExclusiveOwnerThread()) return false; if (w + exclusiveCount(acquires) > MAX_COUNT) throw new Error(\\\"Maximum lock count exceeded\\\"); // Reentrant acquire // 3.2 当前线程 获取写锁，支持可重复加锁 setState(c + acquires); return true; } // 3.3 写锁 未被任何线程获取，当前线程可获取 写锁 if (writerShouldBlock() ||!compareAndSetState(c, c + acquires)) return false; setExclusiveOwnerThread(current); return true; } static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; } \",\"其中EXCLUSIVE_MASK为: static final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1; EXCLUSIVE _MASK为1左移16位然后减1，即为0x0000FFFF。\",\"而exclusiveCount方法是将同步状态（state为int类型）与0x0000FFFF相与，即取同步状态的低16位。那么低16位代表什么呢？\",\"根据exclusiveCount方法的注释为独占式获取的次数即写锁被获取的次数，现在就可以得出来一个结论同步状态的低16位用来表示写锁的获取次数\",\"static int sharedCount(int c) { return c >>> SHARED_SHIFT; } \",\"该方法是获取读锁被获取的次数，是将同步状态（int c）右移16次，即取同步状态的高16位，现在我们可以得出另外一个结论同步状态的高16位用来表示读锁被获取的次数。\",\"img\",\"当读锁已经被读线程获取或者写锁已经被其他写线程获取，则写锁获取失败；否则，获取成功并支持重入，增加写状态。\"]},\"821\":{\"h\":\"4、写锁的释放：\",\"t\":[\"​ 写锁释放通过重写AQS的tryRelease方法，源码为：\",\"protected final boolean tryRelease(int releases) { if (!isHeldExclusively()) throw new IllegalMonitorStateException(); //1. 同步状态减去写状态 int nextc = getState() - releases; //2. 当前写状态是否为0，为0则释放写锁 boolean free = exclusiveCount(nextc) == 0; if (free) setExclusiveOwnerThread(null); //3. 不为0则更新同步状态 setState(nextc); return free; } \",\"​ 减少写状态int nextc = getState() - releases，只需要用当前同步状态直接减去写状态的原因：写状态是由同步状态的低16位表示的。\"]},\"822\":{\"h\":\"5、读锁的获取\",\"t\":[\"​ 读锁不是独占式锁，即同一时刻该锁可以被多个读线程获取也就是一种共享式锁。\",\"protected final int tryAcquireShared(int unused) { Thread current = Thread.currentThread(); int c = getState(); //1. 如果写锁已经被获取并且获取写锁的线程不是当前线程的话，当前 // 线程获取读锁失败返回-1 if (exclusiveCount(c) != 0 && getExclusiveOwnerThread() != current) return -1; int r = sharedCount(c); if (!readerShouldBlock() && r < MAX_COUNT && //2. 当前线程获取读锁 compareAndSetState(c, c + SHARED_UNIT)) { //3. 下面的代码主要是新增的一些功能，比如getReadHoldCount()方法 //返回当前获取读锁的次数 if (r == 0) { firstReader = current; firstReaderHoldCount = 1; } else if (firstReader == current) { firstReaderHoldCount++; } else { HoldCounter rh = cachedHoldCounter; if (rh == null || rh.tid != getThreadId(current)) cachedHoldCounter = rh = readHolds.get(); else if (rh.count == 0) readHolds.set(rh); rh.count++; } return 1; } //4. 处理在第二步中CAS操作失败的自旋已经实现重入性 return fullTryAcquireShared(current); } \",\"​ 当写锁被其他线程获取后，读锁获取失败，否则获取成功利用CAS更新同步状态。\"]},\"823\":{\"h\":\"6、读锁的释放\",\"t\":[\"protected final boolean tryReleaseShared(int unused) { Thread current = Thread.currentThread(); // 前面还是为了实现getReadHoldCount等新功能 if (firstReader == current) { // assert firstReaderHoldCount > 0; if (firstReaderHoldCount == 1) firstReader = null; else firstReaderHoldCount--; } else { HoldCounter rh = cachedHoldCounter; if (rh == null || rh.tid != getThreadId(current)) rh = readHolds.get(); int count = rh.count; if (count <= 1) { readHolds.remove(); if (count <= 0) throw unmatchedUnlockException(); } --rh.count; } for (;;) { int c = getState(); // 读锁释放 将同步状态减去读状态即可 int nextc = c - SHARED_UNIT; if (compareAndSetState(c, nextc)) // Releasing the read lock has no effect on readers, // but it may allow waiting writers to proceed if // both read and write locks are now free. return nextc == 0; } } \"]},\"824\":{\"h\":\"7、锁降级\",\"t\":[\"​ 读写锁支持锁降级，遵循按照获取写锁，获取读锁再释放写锁的次序，写锁能够降级成为读锁，不支持锁升级，关于锁降级下面的示例代码摘自ReentrantWriteReadLock源码中：\",\"void processCachedData() { rwl.readLock().lock(); if (!cacheValid) { // Must release read lock before acquiring write lock rwl.readLock().unlock(); rwl.writeLock().lock(); try { // Recheck state because another thread might have // acquired write lock and changed state before we did. if (!cacheValid) { data = ... cacheValid = true; } // Downgrade by acquiring read lock before releasing write lock rwl.readLock().lock(); } finally { rwl.writeLock().unlock(); // Unlock write, still hold read } } try { use(data); } finally { rwl.readLock().unlock(); } } } \"]},\"825\":{\"h\":\"责任链模式\",\"t\":[\"最近一直听大佬说责任链模式，决定看看到底是什么。本文由翻阅《大话设计模式》得\",\"​ 击鼓传花游戏，也称传彩球。中国民间游戏，流行于中国各地。数人、十数人或数十人围成一个圆圈席地而坐，另外一个人背对着人圈以槌击鼓。鼓响时，开始传花，花由一个人的手里传。\",\"​ 有时候，花束就开始依次传递，鼓声一落，假如花束在某人手中，则该人就得饮酒（多是唱歌、跳舞、说笑话；或回答问题、猜谜、按纸条规定行事等）。\",\"​ 击鼓传花便是责任链模式的应用。在责任链模式里，很多的对象由每一个对象对其下家的引用而联接起来形成一条链。\",\"​ 请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。\",\"​ 在这个游戏中，参与游戏的人士具体处理者的对象，击鼓的人士客户端的对象。花代表请求。每个参加游戏的人有两个行为：（1）将花传下去（2）喝酒。击鼓的人不知道最终是哪个人执行了喝酒，但必然是做游戏的人们中的一个。\",\"​ 一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个：一是承担责任，二是把责任推给下家。不答应出现某一个具体处理者对象在承担了一部分责任后又把责任向下传的情况。\",\"​ 但是在实际的系统里，纯的责任链很难找到；假如坚持责任链不纯便不是责任链模式，那么责任链模式便不会有太大的意义了。\",\"（1）系统已经有一个由处理者对象组成的链。这个链可能由复合模式给出。？？\",\"（2）当有多于一个的处理者对象会处理一个请求，而且在事先并不知道到底由哪一个处理者对象处理一个请求。这个处理者对象是动态确定的。\",\"（3）当系统想发出一个请求给多个处理者对象中的某一个，但是不明显指定是哪一个处理者对象会处理此请求。\",\"（4）当处理一个请求的处理者对象集合需要动态地指定时。？？\",\"​ 光看概念不好理解\",\"四、责任链模式的长处\",\"灵活性：允许传给链结构的起点，但不知道最终在哪个节点上处理\",\"低耦合：发出请求与处理请求的对象之间耦合度降低，允许多个处理着处理最终处理这个命令。\",\"五、责任链的实践\",\"​ 一个链可以是一条线，一个树，也可以是一个环。链的拓扑结构可以是单连通的或多连通的，责任链模式并不指定责任链的拓扑结构。但是责任链模式要求在同一个时间里，命令只可以被传给一个下家（或被处理掉）；而不可以传给多于一个下家。”\",\"笔者其他常见的设计模式：\",\"建造起模式：https://blog.csdn.net/qq_23034755/article/details/90487984\",\"单例模式：https://blog.csdn.net/qq_23034755/article/details/90547215\",\"观察者模式：https://blog.csdn.net/qq_23034755/article/details/90705205\",\"发布订阅模式：https://blog.csdn.net/qq_23034755/article/details/91340383\"]},\"826\":{\"h\":\"轻量级锁\"},\"827\":{\"h\":\"1、轻量级锁\",\"t\":[\"锁撤销升级为轻量级锁之后，那么对象的Markword也会进行相应的的变化。\",\"​ 下面先简单描述下锁撤销之后，升级为轻量级锁的过程：\",\"​ a) 线程在自己的栈桢中创建锁记录 LockRecord。 ​ b) 将锁对象的对象头中的MarkWord复制到线程的刚刚创建的锁记录中。 ​ c) 将锁记录中的Owner指针指向锁对象。 ​ d) 将锁对象的对象头的MarkWord替换为指向锁记录的指针。\"]},\"828\":{\"h\":\"2、锁消除\",\"t\":[\"由于偏向锁失效了，那么接下来就得把该锁撤销，锁撤销的开销花费还是挺大的，其大概的过程如下：\",\"​ a) 在一个安全点停止拥有锁的线程。\",\"​ b) 遍历线程栈，如果存在锁记录的话，需要修复锁记录和Markword，使其变成无锁状态。\",\"​ c) 唤醒当前线程，将当前锁升级成轻量级锁。\",\"所以，如果某些同步代码块大多数情况下都是有两个及以上的线程竞争的话，那么偏向锁就会是一种累赘，对于这种情况，我们可以一开始就把偏向锁这个默认功能给关闭\"]},\"829\":{\"h\":\"3、锁膨胀\",\"t\":[\"当出现有两个线程来竞争锁的话，那么偏向锁就失效了，此时锁就会膨胀，升级为轻量级锁。这也是我们经常所说的锁膨胀\"]},\"830\":{\"h\":\"达梦数据库\",\"t\":[\"国产oracle系数据库学习笔记\"]},\"831\":{\"h\":\"1 规划安装用户和用户组：\",\"t\":[\"不推荐使用 root 安装，规划单独的用户安装。\",\"[root@KylinDCA03 opt]# groupadd dinstall [root@KylinDCA03 opt]# useradd -g dinstall -m -d /home/dmdba -s /bin/bash dmdba [root@KylinDCA03 opt]# passwd dmdba \",\"更改用户 dmdba 的密码 。 新的 密码： 重新输入新的 密码： passwd：所有的身份验证令牌已经成功更新。\"]},\"832\":{\"h\":\"2 规划安装目录：\",\"t\":[\"创建安装目录/dm8，并修改安装目录的所属组给 dmdba 用户和该用户所属组\",\"[root@KylinDCA03 opt]# mkdir /dm8 [root@KylinDCA03 opt]# ls -ld /dm8 drwxr-xr-x 2 root root 6 12 月 20 18:50 /dm8 [root@KylinDCA03 opt]# chown dmdba:dinstall /dm8 [root@KylinDCA03 opt]# ls -ld /dm8 drwxr-xr-x 2 dmdba dinstall 6 12 月 20 18:50 /dm8 \"]},\"833\":{\"h\":\"3 挂载 iso 镜像文件：\",\"t\":[\"[root@KylinDCA03 opt]# mkdir /mnt/dm [root@KylinDCA03 opt]# mount /opt/dm8_20210818_x86_rh6_64_ent_8.4.2.18_pack14.iso /mnt/dm mount: /mnt/dm: WARNING: source write-protected, mounted read-only. [root@KylinDCA03 opt]# su - dmdba [dmdba@KylinDCA03 ~]$ cd /mnt/dm [dmdba@KylinDCA03 dm]$ ll 总用量 739440 -r-xr-xr-x 1 root root 2784248 8 月 23 14:36 'DM8 Install.pdf' -r-xr-xr-x 1 root root 754402133 8 月 23 14:40 DMInstall.bin \"]},\"834\":{\"h\":\"4 安装方式：\",\"t\":[\"（1）第一次启动虚拟机，执行下 xhost +\",\"[root@KylinDCA03 桌面]# xhost + access control disabled, clients can connect from any host \",\"（2）查看 root 用户的 DISPLAY 变量值\",\"[root@KylinDCA03 桌面]# echo $DISPLAY :0.0 \",\"（3）切换 dmdba 用户\",\"[root@KylinDCA03 桌面]# su - dmdba 上一次登录： 一 12 月 20 18:54:09 CST 2021 pts/1 上 （4）设置 dmdba 用户的 DISPLAY 变量值为步骤（1）中的值（仅对当前会话生效） [dmdba@KylinDCA03 ~]$ export DISPLAY=:0.0 [dmdba@KylinDCA03 ~]$ cd /mnt/dm [dmdba@KylinDCA03 dm]$ ll 总用量 739440 -r-xr-xr-x 1 root root 2784248 8 月 23 14:36 'DM8 Install.pdf' -r-xr-xr-x 1 root root 754402133 8 月 23 14:40 DMInstall.bin ## 2 图形化界面方式安装 DM 数据库 [dmdba@KylinDCA03 dm]$ ./DMInstall.bin \",\"安装时报 tmp 不足的解决方法 如果安装时报错 tmp 不足，可以设置 DM_INSTALL_TMPDIR 变量，指定到别的路径下(存 储空间大于 2G)。 设置参考如下：\",\"[root@localhost opt]# mkdir tmp [root@localhost opt]# chown dmdba:dinstall /opt/tmp 或 [root@localhost opt]# chmod 777 /opt/tmp \",\"[root@localhost opt]# su - dmdba 上一次登录： 四 6 月 30 09:06:43 CST 2022 pts/1 上 [dmdba@localhost ~]$ export DM_INSTALL_TMPDIR=/opt/tmp [dmdba@localhost ~]$ cd /mnt/dm [dmdba@localhost dm]$ ll 总用量 927088 -r-xr-xr-x 1 root root 2802237 3 月 4 13:39 'DM8 Install.pdf' -r-xr-xr-x 1 root root 946534466 3 月 4 13:44 DMInstall.bin [dmdba@localhost dm]$ ./DMInstall.bin \",\"（5）设置文件打开数\",\"vim /etc/security/limits.conf \",\"（6）界面提示使用 root 用户执行如下脚本\",\"[root@KylinDCA03 桌面]# /dm8/script/root/root_installer.sh 移动 /dm8/bin/dm_svc.conf 到/etc 目录 修改服务器权限 创建 DmAPService 服务 Created symlink /etc/systemd/system/multi-user.target.wants/DmAPService.service → /usr/lib/systemd/system/DmAPService.service. 创建服务(DmAPService)完成 启动 DmAPService 服务 \"]},\"835\":{\"h\":\"5 卸载 DM 数据库\",\"t\":[\"图形化卸载 DM 数据库 DM 安装目录下执行./uninstall.sh 卸载 DM 数据库：\",\"[dmdba@KylinDCA03 dm8]$ ./uninstall.sh \",\"界面提示使用 root 用户执行如下脚本\",\"[root@KylinDCA03 桌面]# /dm8/root_uninstaller.sh 删除 DmAPService 服务 Removed /etc/systemd/system/multi-user.target.wants/DmAPService.service. 删除/etc/dm_svc.conf 文件 命令行方式卸载 DM 数据库 DM 安装目录下执行./uninstall.sh -i 卸载 DM 数据库： [dmdba@KylinDCA03 dm8]$ ./uninstall.sh -i \"]},\"836\":{\"h\":\"方式1 DM 数据库配置助手图形化界面方式创建数据库\",\"t\":[\"（1）运行 dbca.sh 创建数据库\",\"[dmdba@KylinDCA03 ~]$ cd /dm8/tool [dmdba@KylinDCA03 tool]$ ./dbca.sh \",\"簇大小 页大小 字符集 大小写敏感 VARCHAR 类型以字符为单位等一旦指定，数据库创建完成将无法更改。页是达梦数据库的最小存储单元，达梦中 varchar 类型长度默认不能大于页大小的一半。 VARCHAR 类型以字符为单位（默认以字节为单位） 以字节为单位： Varchar(10), gb18030 字符集，一个中文占用两个字节，Varchar(10)只能保存五个中文。 Varchar(10), utf-8 字符集，一个中文占用三个字节，Varchar(10)只能保存三个中文。 以字符为单位： Varchar(10),不管什么字符集，Varchar(10)都能保存十个中文。\",\"（2）界面提示使用 root 用户执行脚本：\",\"[root@KylinDCA03 network-scripts]# mv /dm8/bin/DmServiceDMSERVER.service /usr/lib/systemd/system/DmServiceDMSERVER.service [root@KylinDCA03 network-scripts]# systemctl enable DmServiceDMSERVER.service Created symlink /etc/systemd/system/multi-user.target.wants/DmServiceDMSERVER.service → /usr/lib/systemd/system/DmServiceDMSERVER.service. [root@KylinDCA03 network-scripts]# systemctl start DmServiceDMSERVER.service \"]},\"837\":{\"h\":\"方式2 dminit 命令行创建数据库实例\",\"t\":[\"dminit 创建 DM 数据库 dminit 是 DM 初始化数据库的命令行工具，位于 DM 安装目录 bin 下。\",\"[dmdba@KylinDCA03 bin]$ ./dminit help 关键字 说明（默认值） -------------------------------------------- INI_FILE 初始化文件dm.ini存放的路径 PATH 初始化数据库存放的路径 CTL_PATH 控制文件路径 LOG_PATH 日志文件路径 EXTENT_PATH 数据文件使用的簇大小（16），可选值：16，32，64，单位：页 PAGE_SIZE 数据页大小（8），可选值：4，8，16，32，单位：K CASE_SENSITIVE 大小敏感（Y），可选值：Y/N，1/0 CHARSET/UNICODE_FLAG 字符集（0），可选值：0[GB18030]，1[UTF-8]，2[EUC-KR] SEC_PRIV_MODE 权限管理模式（0），可选值：0[TRADITION]，1[BMJ]，2[EVAL] LENGTH_IN_CHAR VARCHAR类型长度是否以字符为单位（N），可选值：Y/N，1/0 SYSDBA_PWD 设置SYSDBA密码（SYSDBA） SYSAUDITOR_PWD 设置SYSAUDITOR密码（SYSAUDITOR） DB_NAME 数据库名（DBNAME） INSTANCE_NAME 实例名（DMSERVER） PORT_NUM 监听端口号（5236） BUFFER 系统缓存大小（100），单位M TIME_ZONE 设置时区（+08:00） [dmdba@KylinDCA03 bin]$ ./dminit path=/dm8/data db_name=DMTEST instance_NAME=DMTESTSVR sysdba_pwd=Dameng123 port_num=5238 PAGE_SIZE=16 initdb V8 db version: 0x7000c file dm.key not found, use default license! License will expire on 2022-08-20 Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL log file path: /dm8/data/DMTEST/DMTEST01.log log file path: /dm8/data/DMTEST/DMTEST02.log write to dir [/dm8/data/DMTEST]. create dm database success. 2021-12-20 19:59:56 \",\"dminit 方式创建数据库不会自动注册数据库服务（DM 数据库配置助手方式默认自动注册数 据库服务），所以不能以服务方式启动数据库，如果要以服务方式启动，则需要注册数据库 服务。\"]},\"838\":{\"h\":\"两种方式注册数据库服务：\",\"t\":[\"（3.1）DM 数据库配置助手注册数据库服务 执行 dbca.sh 打开 DM 数据库配置助手，选择“注册数据库服务” 界面提示使用 root 用户执行脚本：\",\"[root@KylinDCA03 ~]# systemctl enable DmServiceDMTESTSVR.service Created symlink /etc/systemd/system/multi-user.target.wants/DmServiceDMTESTSVR.service → /usr/lib/systemd/system/DmServiceDMTESTSVR.service. [root@KylinDCA03 ~]# systemctl start DmServiceDMTESTSVR.service \",\"[dmdba@KylinDCA03 bin]$ ./disql sysdba/Dameng123:5238 服务器[LOCALHOST:5238]:处于普通打开状态 登录使用时间 : 12.397(ms) disql V8 SQL> select name from v\\\\$database; 行号 NAME ---------- ------ 1 DMTEST 已用时间: 8.418(毫秒). 执行号:50600. SQL> select instance_name from v\\\\$instance; 行号 INSTANCE_NAME ---------- ------------- 1 DMTESTSVR 已用时间: 0.563(毫秒). 执行号:50601. SQL> \",\"（3.2）root 执行注册服务脚本\",\"[root@KylinDCA04 ~]# cd $DM_HOME/script/root [root@KylinDCA03 root]# ./dm_service_installer.sh -t dmserver -p DMTESTSVR -dm_ini /dm8/data/DMTEST/dm.ini Created symlink /etc/systemd/system/multi-user.target.wants/DmServiceDMTESTSVR.service → /usr/lib/systemd/system/DmServiceDMTESTSVR.service. 创建服务(DmServiceDMTESTSVR)完成 \"]},\"839\":{\"h\":\"1 连接数据库\",\"t\":[\"如果使用客户端工具连接远端数据库服务器，需要开放数据库服务器防火墙对应端口（开放 端口后需 reload）： [root@localhost ~]# firewall-cmd --add-port=5236/tcp --permanent --zone=public [root@localhost ~]# firewall-cmd --reload [root@localhost ~]# firewall-cmd --list-ports \",\"也可以关闭数据库服务器的防火墙\",\"[root@localhost dm]# systemctl status firewalld [root@localhost dm]# systemctl stop firewalld \"]},\"840\":{\"h\":\"方式一 DM 管理工具图形化界面连接数据库\",\"t\":[\"[dmdba@KylinDCA03 ~]$ cd $DM_HOME/tool [dmdba@KylinDCA03 tool]$ ./manager \"]},\"841\":{\"h\":\"方式二 disql 命令行方式连接数据库\",\"t\":[\"[dmdba@KylinDCA03 ~]$ cd /dm8/bin [dmdba@KylinDCA03 bin]$ ./disql sysdba/Dameng123:5236 服务器[LOCALHOST:5236]:处于普通打开状态 登录使用时间 : 1.829(ms) disql V8 SQL> select name from v\\\\$database; 行号 NAME ---------- ---- 1 DM 已用时间: 2.913(毫秒). 执行号:51600. SQL> select instance_name from v\\\\$instance; 26 / 118 行号 INSTANCE_NAME ---------- ------------- 1 DMSERVER 已用时间: 0.434(毫秒). 执行号:51601. SQL> exit [dmdba@KylinDCA03 bin]$ ./disql sysdba/Dameng123:5238 服务器[LOCALHOST:5238]:处于普通打开状态 登录使用时间 : 12.397(ms) disql V8 SQL> select name from v\\\\$database; 行号 NAME ---------- ------ 1 DMTEST 已用时间: 8.418(毫秒). 执行号:50600. SQL> select instance_name from v\\\\$instance; 行号 INSTANCE_NAME ---------- ------------- 1 DMTESTSVR 已用时间: 0.563(毫秒). 执行号:50601. SQL> \"]},\"842\":{\"h\":\"网络配置助手配置连接串\",\"t\":[\"网络配置助手\",\"[dmdba@KylinDCA04 tool]$ ./nca.sh \",\"网络配置助手实际写的是 dm_svc.conf 文件，也可以直接手工编辑该文件。\",\"[dmdba@KylinDCA03 tool]$ cat /etc/dm_svc.conf TIME_ZONE=(480) LANGUAGE=(cn) DM=(127.0.0.1:5236) DMTEST=(127.0.0.1:5238) \"]},\"843\":{\"h\":\"DM 数据库\",\"t\":[\"DM 数据库启动顺序：读取配置参数文件 dm.ini,找到控制文件 dm.ctl，启动后台进程和线程，启动数据库实例，启动到mount 状态，根据控制文件中的数据文件路径和练级日志文件路径，找到并打开数据文件和联机日志，启动到 OPEN 状态。 Oracle 启动顺序：nomount->mount->open Shutdown：关闭状态 Mount：配置状态，此时可以修改数据库归档配置 主备等模式，不能进行数据文件的读写。此时数据库不能对外正常提供务。 Open：打开状态，此时数据库提供正常的服务。可以读写数据文件。正常访问表，读取数据。 Suspend：只读状态，只能读，不能写（DML 操作一旦 commit，数据库即会被挂起）。 MOUNT 和 OPEN 可以相互转换（与 Oracle 不同）。SUSPEND 和 OPEN 也可以相互转换。 但 MOUNT 和 SUSPEND 之间不能相互转换。\",\"SQL> select status$ from v\\\\$instance; 行号 STATUS$ ---------- ------- 1 OPEN 已用时间: 4.453(毫秒). 执行号:52100. SQL> alter database mount; 操作已执行 已用时间: 371.497(毫秒). 执行号:0. SQL> select status$ from v\\\\$instance; 行号 STATUS$ ---------- ------- 1 MOUNT 已用时间: 0.599(毫秒). 执行号:52101. SQL> alter database open; 29 / 118 操作已执行 已用时间: 333.412(毫秒). 执行号:0. SQL> select status$ from v\\\\$instance; 行号 STATUS$ ---------- ------- 1 OPEN 已用时间: 0.463(毫秒). 执行号:52102. SQL> alter database suspend; 操作已执行 已用时间: 102.752(毫秒). 执行号:0. SQL> select status$ from v\\\\$instance; 行号 STATUS$ ---------- ------- 1 SUSPEND 已用时间: 0.514(毫秒). 执行号:52103. SQL> exit \",\"MOUNT 状态下，可以配置归档，设置主备模式，修改联机日志文件路径等，MOUNT 状态下不能读写数据（但可以读动态性能视图中的数据，因为动态视图数据来源于控制文件或内存中的，比如 v$datafile v$database 等），MOUNT 状态数据库不能对外提供服务（不能读写数据，业务中断）\",\"[dmdba@localhost ~]$ disql sysdba/SYSDBA@OA 服务器[127.0.0.1:5236]:处于普通打开状态 登录使用时间 : 1.744(ms) disql V8 SQL> alter database mount; 操作已执行 已用时间: 9.672(毫秒). 执行号:0. SQL> select * from t_test; select * from t_test; 第 1 行附近出现错误[-510]:系统处于 MOUNT 状态. 已用时间: 0.587(毫秒). 执行号:0. SQL> insert into t_test(id) values(4); insert into t_test(id) values(4); [-510]:系统处于 MOUNT 状态. 已用时间: 0.403(毫秒). 执行号:0. SQL> select name, status$ from v\\\\$instance; 行号 NAME STATUS$ ---------- ---------- ------- 1 DMOASERVER MOUNT 已用时间: 3.317(毫秒). 执行号:2700. SQL> select name, status$ from v\\\\$database; 行号 NAME STATUS$ ---------- ---- ----------- 1 DMOA 3 已用时间: 1.347(毫秒). 执行号:2701. SQL> select path from v\\\\$datafile; 行号 PATH ---------- ------------------------- 1 /dm8/data/DMOA/SYSTEM.DBF 2 /dm8/data/DMOA/ROLL.DBF 3 /dm8/data/DMOA/TEMP.DBF 4 /dm8/data/DMOA/MAIN.DBF 5 /dm8/data/DMOA/DMHR.DBF \"]},\"844\":{\"h\":\"Root 启动：\",\"t\":[\"（1） systemctl 服务方式管理（CentOS6 使用 service 命令）\",\"systemctl start|status|stop|enable|disable DmServiceDMSERVER \",\"（2） DM 服务查看器管理（以 root 方式打开才有启动的权限）\",\"[root@KylinDCA04 tool]# ./dmservice.sh \"]},\"845\":{\"h\":\"dmdba 用户启动\",\"t\":[\"两种启动方式，都可以将数据库启动到 mount 状态）： （1） 前台启动方式（dmserver） 如果没有注册数据库服务，只能使用此方式启动。其他的启动方式都需要注册数据库服务。 前台启动方式，界面输入 exit 或者按 CTRL+C 即会关闭数据库；\",\"[dmdba@KylinDCA03 bin]$ ./dmserver /dm8/data/DMTEST/dm.ini file dm.key not found, use default license! version info: develop DM Database Server x64 V8 4-2-18-21.08.20-146029-10013-ENT startup... Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL Database mode = 0, oguid = 0 License will expire on 2022-08-20 file lsn: 28292 ndct db load finished ndct fill fast pool finished iid page's trxid[6012] NEXT TRX ID = 6013 pseg_collect_mgr_items, total collect 0 active_trxs, 0 cmt_trxs, 0 pre_cmt_trxs, 0 active_pages, 0 cmt_pages, 0 pre_cmt_pages, 0 mgr pages, 0 mgr recs! total 0 active crash trx, pseg_crash_trx_rollback sys_only(0) begin ... pseg_crash_trx_rollback end, total 0 active crash trx, include 0 empty_trxs, 0 empty_pages which only need to delete mgr recs. pseg_crash_trx_rollback end pseg recv finished nsvr_startup end. aud sys init success. aud rt sys init success. systables desc init success. ndct_db_load_info success. nsvr_process_before_open begin. nsvr_process_before_open success. total 0 active crash trx, pseg_crash_trx_rollback sys_only(0) begin ... pseg_crash_trx_rollback end, total 0 active crash trx, include 0 empty_trxs, 0 empty_pages which only need to delete mgr recs. pseg_crash_trx_rollback end SYSTEM IS READY. \",\"（2）后台启动方式（DmServiceDMSERVER）\",\"[dmdba@KylinDCA03 ~]$ cd /dm8/bin [dmdba@KylinDCA03 bin]$ ll Dm* -rwxr-xr-x 1 dmdba dinstall 13827 12 月 20 19:33 DmAPService -rwxr-xr-x 1 dmdba dinstall 14850 12 月 20 19:33 DmAuditMonitorService -rwxr-xr-x 1 dmdba dinstall 13655 12 月 20 19:33 DmInstanceMonitorService -rwxr-xr-x 1 dmdba dinstall 14110 12 月 20 19:33 DmJobMonitorService -rwxr-xr-x 1 dmdba dinstall 16117 12 月 20 19:53 DmServiceDMSERVER -rwxr-xr-x 1 dmdba dinstall 16122 12 月 20 21:56 DmServiceDMTESTSVR [dmdba@KylinDCA03 bin]$ ./DmServiceDMTESTSVR start Starting DmServiceDMTESTSVR: [ OK ] [dmdba@KylinDCA03 bin]$ ./DmServiceDMTESTSVR stop Stopping DmServiceDMTESTSVR: [ OK ] [dmdba@KylinDCA03 bin]$ ./DmServiceDMTESTSVR start mount Starting DmServiceDMTESTSVR: [ OK ] [dmdba@KylinDCA03 bin]$ ./DmServiceDMTESTSVR status DmServiceDMTESTSVR (pid 35387) is running. [dmdba@KylinDCA03 bin]$ \"]},\"846\":{\"h\":\"DM 管理工具（manager）\",\"t\":[\"图形化管理数据库，联机工具，包含用户管理 角色权限管理 表空间 模式 模式下对象（表 索引 约束 函数 过程 视图等) 数据库物理联机备份 作业管理等功能\",\"[dmdba@KylinDCA03 tool]$ ./manager \"]},\"847\":{\"h\":\"DM 控制台工具（console）\",\"t\":[\"DM 控制台工具是一个脱机工具，提供脱机备份还原 修改数据库参数（修改后重启数据库才能生效）等功能。\",\"[dmdba@KylinDCA03 tool]$ ./console \"]},\"848\":{\"h\":\"DM 数据迁移工具（dts）\",\"t\":[\"DM 数据迁移工具支持其他数据库迁移到达梦，或者达梦迁移到文件等功能。\",\"[dmdba@KylinDCA03 tool]$ ./dts \"]},\"849\":{\"h\":\"DM 性能监视工具（monitor）：\",\"t\":[\"可以用来监视数据库的线程 事务会话 表空间占用等信息。\",\"[dmdba@KylinDCA03 tool]$ ./monitor \"]},\"850\":{\"h\":\"DM8 数据库是由数据库和实例构成\"},\"851\":{\"h\":\"数据库：\",\"t\":[\"DM 数据库指的是磁盘上存放在 DM 数据库中的数据的集合\"]},\"852\":{\"h\":\"实例：\",\"t\":[\"实例一般是由一组正在运行的 DM 后台进程/线程以及一个大型的共享内存组成\"]},\"853\":{\"h\":\"DM 存储结构\",\"t\":[\" 表空间是 DM 数据库的最大存储单元，所有数据都存储在表空间中。 表空间采用段（segment） 簇（extent）和页（page，对应 block）的方式管理。 一个表空间可以包含一个或多个数据文件。一个数据文件仅能归属于一个表空间。 DM 物理文件包含：配置文件 控制文件 数据文件 联机日志（此四个文件必不可少，缺少一个将无法正常启动）。 配置文件包括（服务配置 dm.ini，守护配置，复制配置，审计配置） 控制文件，数据文件，重做日志文件，备份文件，归档日志文件，跟踪日志文件等\"]},\"854\":{\"h\":\"DM 数据库参数的类型：\",\"t\":[\"READ ONLY：手动参数，不能通过 SQL 命令或函数修改；只能通过修改 dm.ini 文本文件修改此参数（需要重启数据库才能生效）。 SYS：动态（系统级）参数。数据库运行中可以直接修改，可以即可以修改内存中的值，也可以修改参数文件中的值。可以通过 SQL 命令或系统函数修改。 SESSION:动态（会话级）参数，数据库运行中可以直接修改，可以即可以修改内存中的值，也可以修改参数文件中的值，还可以只修改当前会话的值。可以通过 SQL 命令或函数修改，且可以只针对当前会话生效。 IN FILE：静态参数，不能修改内存中的值，只能修改参数文件中的值，可以通过 SQL 命令或函数修改，但需要重启数据库才能生效。 静态参数在数据库运行期间不能修改内存中的值，动态参数在数据库运行期间可以修改内存中的值（修改后立即生效）。\"]},\"855\":{\"h\":\"运行时的内存池：\",\"t\":[\"特点：使用时申请，用完即释放。包含：虚拟内存池 vm pool 会话池 session pool 排序区 HASH 区等。 排序区和 HASH 区 排序区：SORT_BUF_SIZE 少量的数据排序，优先在内存中排序，此时占用排序区； 大量的数据排序，内存中放不下，占用临时表空间排序。 如果业务经常有排序，可以适当调大排序区，提高效率。 HASH 区：HJ_BUF_SIZE HASH 连接 HASH 分区占用哈希区。如果业务 hash 连接较多，可以调大哈希区。\"]},\"856\":{\"h\":\"DM 线程\",\"t\":[\"DM 是单进程多线程对称服务器架构。Oracle 是多进程架构。\"]},\"857\":{\"h\":\"监听线程\",\"t\":[\"用于在服务器端口上进行循环监听，有来自客户的连接请求，监听线程被唤醒并生成一个会话线程，将申请的任务加入工作线程的任务队列，等待工作线程进行处理。 会话线程 dm_sql_thd 每个会话 session 对应一个会话线程，会话多时该线程会多，会话对应的线程 id 可以在 v$sessions 中查询。\"]},\"858\":{\"h\":\"工作线程\",\"t\":[\"DM 的核心线程；默认 16 个工作线程。\"]},\"859\":{\"h\":\"IO 线程\",\"t\":[\"用于读写数据 需要处理的数据块不在缓冲区中，此时需要将相关数据块读入缓冲区 -物理读 缓冲区满或系统关闭时，此时需要将部分脏数据块写入磁盘 -写脏块 检查点到来时，需要将所有脏数据块写入磁盘\"]},\"860\":{\"h\":\"日志刷新线程\",\"t\":[\"日志的刷盘。主要用于事务提交或检查点时将日志缓冲区中的 REDO 日志写入到日志文 件中。\"]},\"861\":{\"h\":\"日志归档线程\",\"t\":[\"完成 redo 日志的归档。\"]},\"862\":{\"h\":\"日志重做线程\",\"t\":[\"主要用于系统故障恢复，日志重做线程根据 REDO 日志进行并行的故障恢复\"]},\"863\":{\"h\":\"调度线程\",\"t\":[\"用于定时调度任务。 检查系统级的时间触发器； 清理 SQL 缓存 计划缓存中失效的项，或者超出缓存限制后淘汰不常用的缓存项； 动态缓冲区检查。根据需要动态扩展或动态收缩系统缓冲池； 自动执行检查点; 会话超时检测; 必要时执行数据更新页刷盘； 唤醒等待的工作线程;\",\"当客户端发起请求，首先到达监听线程，监听线程创建一个会话线程，将任务加入工作线程队列。 Sql 语法语义权限解析（字典缓冲区，语法语义校验，权限校验）： 首先在 sql 缓冲区中查找是否有对应的 sql 语句，如果找到，再查找对应的执行计划，找到执行计划，根据执行计划执行 sql，这个过程称为软解析；如果 sql 缓冲区中没有找到对应 sql 语句，会将该sql 语句加入 sql 缓冲区，并生成对应执行计划，执行计划放入 sql 缓冲区，根据执行计划执行 sql 语句，返回结果集，这个过程称为硬解析）。 从系统性能提升来说，要减少硬解析。查询（读数据，数据缓冲区，如果数据缓冲区中存在数据页，则直接从数据缓冲区中读取数据，称为逻辑读；如果数据缓冲区中不存在该数据页，会话线程调用 IO 线程，IO 线程从磁盘上的数据文件中读取数据页并放入到数据缓冲区，称为物理读。 从系统性能考虑，应减少物理读，提高逻辑读）,如果查询涉及 HASH 连接等，会占用 HASH 区，如果涉及到排序，少量的数据排序（内存中能排下的）则占用排序区，HASH 区和排序区以会话池或虚拟池的方式申请。 修改（将数据读入数据缓冲区，此过程同上，在数据缓冲区中修改，修改会产生 redo 和 undo，redo 放在日志缓冲区中，undo 写入回滚段； 修改完成后，执行 commit，日志刷新线程将日志缓冲区中的数据写入联机日志文件；当数据库执行检查点时，IO 线程会将脏页写入磁盘数据文件。\"]},\"864\":{\"h\":\"管理表空间\",\"t\":[\"表空间是 DM 数据库的最大逻辑存储单元，表中的数据在逻辑上都是存放在表空间中，在物理上存放在表空间对应的物理数据文件。表空间由数据文件组成，表空间采用段 簇 页的方式进行管理。 DM 默认预定义 SYSTEM ROLL MAIN TEMP HMAIN 五个表空间。 SYSTEM：系统表空间，存放数据字典等信息（表 字段 视图等对象的定义 用户角色权限信息等，部分隐含参数写入SYSTEM 表空间），SYSTEM 表空间自动扩展不允许关闭。 ROLL：回滚表空间，存放回滚页，数据库中的 DML 操作对应都会生成 redo 和 undo，undo 信息放入 ROLL 表空间对应的数据文件中，redo 信息写入联机日志文件，用于保证数据的一致性。 ROLL 回滚段数据包含 Active unexpired expired 三种状态。 遇到查询记录过旧的错误（等同于 oracle 的快照过旧的错误）。解决方法： 1 增大 undo_retention（回滚段的保留时长）, 及时 分段提交。扩大 ROLL 表空间。 2 查询时间过长导致，可以考虑优化查询。 MAIN：用户默认表空间，当创建用户时，如果为指定用户的默认表空间，则 MAIN 为用户的默认表空间。相当于 Oracle 的 USERS 表空间。 TEMP：临时表空间，存放临时表数据 临时结果集等，当大量的数据排序或创建索引等占用临时表空间。DM 中临时表空间由参数 TEMP_SIZE 指定。\"]},\"865\":{\"h\":\"修改TMP表空间\",\"t\":[\"数据库启动时会按照如下参数重建 TEMP 表空间。\",\"select name, value, type from v\\\\$parameter t where name like 'TEMP%'; # TEMP_SIZE：临时表空间初始大小 # TEMP_PATH: 临时表空间路径 # TEMP_SPACE_LIMIT：临时表空间的空间限制，0 表示不限制。 \",\"修改临时表空间的初始大小：\",\"# alter system set 'TEMP_SIZE'=100 spfile; \",\"收缩 TEMP 表空间的方法： 1 重启数据库，TEMP 表空间数据文件会重建。 2 在线收缩临时表空间使用 SP_TRUNC_TS_FILE 函数。\"]},\"866\":{\"h\":\"创建表空间\",\"t\":[\"使用 create tablespace 语句创建表空间：\",\"create tablespace tbs DATAFILE 'TBS01.DBF' size 32; \",\"DM 数据文件大小，最大值不能低于页大小的 4096 倍（如果页大小是 8K，最小值将不 低于 32M），最大值为页大小的 2 的 31 次方-1（如果页大小是 8K，最大值为 16T-1）。\"]},\"867\":{\"h\":\"表空间重命名\",\"t\":[\"DM 预定义表空间不支持重命名，自定义表空间支持重命名。\",\"alter tablespace tbs RENAME TO dmtbs; \"]},\"868\":{\"h\":\"归档管理\",\"t\":[\"默认情况下，达梦数据库运行在非归档模式下。 归档是对 REDO 日志的归档。归档的目的是使数据库故障时可以恢复到故障的前一刻（完 全恢复），或者恢复到指定的时间点或指定 LSN（Log Sequence Number）（不完全恢复）。 假如现网每天凌晨 0 点备份； 第二天下午 14：00 数据磁盘损坏，数据库故障。 故障时联机日志中只有 13：30-14：00；此时如果没有开启数据库归档，则数据库无法恢复 到故障前一刻 14：00（缺失凌晨 0 点-13：30 的 redo 信息）。 开归档就可以将凌晨 0 点-14：00 的 redo 信息保存在归档日志文件中，数据库恢复时就可以 利用归档将数据库恢复到最新的状态。 联机备份，数据库需要开启归档状态。 利用归档可以做完全恢复和不完全恢复。\"]},\"869\":{\"h\":\"SQL 开启归档\",\"t\":[\"归档开启： alter database mount; alter database ARCHIVELOG; alter database ADD ARCHIVELOG 'type=local, dest=/dm8/arch, file_size=64, space_limit=10240'; alter database open; 查看归档配置： select arch_mode from v\\\\$database; select * from v\\\\$dm_arch_ini; 修改归档的配置（修改归档空间上限）： alter database modify archivelog 'type=local, dest=/dm8/arch, SPACE_LIMIT=20480'; SQL 关闭归档 SQL> alter database mount; 操作已执行 已用时间: 438.355(毫秒). 执行号:0. SQL> alter database noarchivelog; 操作已执行 已用时间: 41.445(毫秒). 执行号:0. SQL> alter database delete archivelog 'type=local,dest=/dm8/arch'; 操作已执行 已用时间: 0.519(毫秒). 执行号:0. SQL> alter database open; 操作已执行 已用时间: 322.559(毫秒). 执行号:0. SQL> select arch_mode from v\\\\$database; 行号 ARCH_MODE ---------- --------- 1 N 已用时间: 0.654(毫秒). 执行号:714. SQL> select * from v\\\\$dm_arch_ini; 未选定行 \"]},\"870\":{\"h\":\"修改 dm.ini 和 dmarch.ini 配置文件开启归档\",\"t\":[\"[dmdba@KylinDCA03 DM]$ cat dmarch.ini #DaMeng Database Archive Configuration file #this is comments ARCH_WAIT_APPLY = 0 [ARCHIVE_LOCAL1] ARCH_TYPE = LOCAL ARCH_DEST = /dm8/arch ARCH_FILE_SIZE = 64 ARCH_SPACE_LIMIT = 10240 ARCH_FLUSH_BUF_SIZE = 0 [dmdba@KylinDCA03 DM]$ cat dm.ini|grep ARCH_INI ARCH_INI = 1 #dmarch.ini \"]},\"871\":{\"h\":\"归档日志文件的切换和删除\",\"t\":[\"数据库自动完成归档的切换，DM 支持手工切换归档；\",\"alter SYSTEM ARCHIVE LOG CURRENT; alter SYSTEM SWITCH LOGFILE; alter DATABASE ARCHIVELOG CURRENT; \"]},\"872\":{\"h\":\"归档文件的删除\",\"t\":[\"select * from v\\\\$ifun t where name like 'SF_ARCHIVELOG_%'; SF_ARCHIVELOG_DELETE_BEFORE_LSN SF_ARCHIVELOG_DELETE_BEFORE_TIME # 删除10天前的归档日志。 Select SF_ARCHIVELOG_DELETE_BEFORE_TIME(sysdate-10); \",\"针对业务繁忙期间，出现磁盘 IO 不定时繁忙的情况，因为配置了归档的空间上限（归档达 到此上限），生成新的归档日志前删除旧的归档日志文件造成了 IO 的不定时繁忙。 解决方案：配置 JOB 作业，在业务空间期定时清理 N 天之前的归档文件。\"]},\"873\":{\"h\":\"用户类型\",\"t\":[\"DM 默认的预定义用户： SYS：系统内置用户，不允许登录。 SYSDBA：系统管理员，拥有几乎所有权限（除审计和强制访问控制） SYSAUDITOR：系统审计管理员，具有审计相关权限。 SYSSSO：系统安全管理员，具有强制访问控制等权限； SYSDBO：安全版本才有的用户，安全操作员。\"]},\"874\":{\"h\":\"系统口令策略\",\"t\":[\"PWD_POLICY（隐含参数，不在 dm.ini 中）参数指定系统的口令策略，默认为 2； 系统支持的口令策略有： 0 无策略 1 禁止与用户名相同 2 口令长度需大于等于 INI 参数 PWD_MIN_LEN 设置的值 4 至少包含一个大写字母（A-Z） 8 至少包含一个数字（0-9） 16 至少包含一个标点符号（英文输入法状态下，除“和空格外的所有符号） 口令策略可单独应用，也可组合应用。组合应用时，如需要应用策略 2 和 4，则设置口 令策略为 2+4=6 即可。 PWD_POLICY 是隐含参数，PWD_POLICY，只能通过函数或 SQL 语句修改。\",\"select * from v\\\\$parameter t where t.name = 'PWD_POLICY'; create user hr IDENTIFIED by dameng123; \"]},\"875\":{\"h\":\"修改系统口令策略：\",\"t\":[\"alter SYSTEM set 'PWD_POLICY' = 15 BOTH; \"]},\"876\":{\"h\":\"SQL 管理用户\",\"t\":[\"create user hrtest IDENTIFIED by dameng123 \"]},\"877\":{\"h\":\"用户输入错误多次（默认 3 次），将会被锁定。\",\"t\":[\"select * from dba_users; select b.USERNAME,a.* from sysusers a, dba_users b where a.id = b.USER_ID; \"]},\"878\":{\"h\":\"创建用户\",\"t\":[\"create user hrtest IDENTIFIED by Dameng123 DEFAULT TABLESPACE TBSTEST; \"]},\"879\":{\"h\":\"用户锁定和解锁：\",\"t\":[\"alter user hr ACCOUNT UNLOCK; alter user hr ACCOUNT LOCK; \"]},\"880\":{\"h\":\"修改用户的默认表空间：\",\"t\":[\"alter user hr DEFAULT TABLESPACE dmtbs; \"]},\"881\":{\"h\":\"修改用户密码:\",\"t\":[\"alter user hrtest IDENTIFIED by \\\"Dameng@123\\\"; \"]},\"882\":{\"h\":\"删除用户：\",\"t\":[\"drop user if EXISTS hr; drop user if EXISTS hr CASCADE; --生产环境慎用 \"]},\"883\":{\"h\":\"用户资源限制\",\"t\":[\"用户资源限制设置（可以直接使用 limit 子句，也可以使用 profile 来管理用户的资源限制）：\",\"alter user hr LIMIT FAILED_LOGIN_ATTEMPS 5, PASSWORD_LOCK_TIME 3; \",\"DM 支持使用 profile 管理用户资源限制（新版本支持，2021 年 10 月以后的版本）\",\"select * from DBA_PROFILES; create profile profile1 limit FAILED_LOGIN_ATTEMPS 5, PASSWORD_LOCK_TIME 3, PASSWORD_LIFE_TIME 180; alter user hrtest PROFILE profile1; \",\"查询用户使用的profile资源限制文件\",\"select a.pid profileid, b.name profile_name, a.uid userid, c.name user_name from SYSUSERPROFILES a, SYSOBJECTS b, SYSOBJECTS c where a.PID = b.id and a.UID = c.ID; \",\"密码带有特殊字符的登录处理 达梦中密码带有特殊字符需要双引号括起来，在 linux 系统下可以使用单引号‘转义。\",\"[dmdba@KylinDCA03 ~]$ disql hrtest/'\\\"Dameng@123\\\"' 服务器[LOCALHOST:5236]:处于普通打开状态 登录使用时间 : 1.589(ms) disql V8 SQL> conn hrtest/\\\"Dameng@123\\\" \",\"也可以使用右斜杠\\\\转义\",\"[dmdba@localhost ~]$ disql dmoa/\\\\\\\"Dameng@123\\\\\\\" 服务器[LOCALHOST:5236]:处于普通打开状态 登录使用时间 : 3.162(ms) disql V8 SQL> alter user dmoa identified by \\\"Dameng123@#'\\\"; 操作已执行 已用时间: 6.184(毫秒). 执行号:1000. SQL> exit [dmdba@localhost ~]$ disql dmoa/\\\\\\\"Dameng123@#\\\\'\\\\\\\" 服务器[LOCALHOST:5236]:处于普通打开状态 登录使用时间 : 1.863(ms) disql V8 SQL> \"]},\"884\":{\"h\":\"赋予数据库权限（系统权限）：\",\"t\":[\"SQL> grant create table to hrtest; 操作已执行 已用时间: 3.431(毫秒). 执行号:1700. \"]},\"885\":{\"h\":\"赋予对象权限:\",\"t\":[\"SQL> grant select on dmhr.employee to hrtest; 操作已执行 已用时间: 0.535(毫秒). 执行号:1703. \"]},\"886\":{\"h\":\"查看当前用户拥有的权限：\",\"t\":[\"select * from session_privs; \"]},\"887\":{\"h\":\"权限的回收：\",\"t\":[\"SQL> revoke select on dmhr.employee from hrtest; ## 操作已执行 已用时间: 1.792(毫秒). 执行号:1704. SQL> revoke create table from hrtest; ## 操作已执行 已用时间: 1.704(毫秒). 执行号:1705 ## 赋予查询对象权限，精确到列 SQL> grant select (employee_id, employee_name) on dmhr.employee to hrtest; ## 操作已执行 已用时间: 2.175(毫秒). 执行号:1706. \",\"相关数据字典：\",\"select * from dba_sys_privs t where t.GRANTEE= 'HRTEST'; select * from dba_role_privs t where t.GRANTEE= 'HRTEST'; select * from dba_tab_privs t where t.GRANTEE= 'HRTEST'; DM 默 认 不 能 授 予 用 户 在 其 他 模 式 下 数 据 定 义 （ DDL ） 的 权 限 ， 由 参 数 ENABLE_DDL_ANY_PRIV 指定，默认为 0。 grant select any table to hrtest; select * from v\\\\$parameter t where name like '%ENABLE_DDL_ANY_PRIV%'; alter SYSTEM set 'ENABLE_DDL_ANY_PRIV' = 1 both; --开启后可正常赋予权限 grant create any table to hrtest; grant create any index to hrtest; \"]},\"888\":{\"h\":\"角色类型\",\"t\":[\"角色是权限的集合，角色使权限管理更加方便。 DBA：具有几乎所有权限（除审计和强制访问控制之外），默认赋给 SYSDBA 用户。 PUBLIC：具有对当前模式下对象的 DML 数据操作权限。 RESOURCE：具有在当前模式下对象定义权限（创建表 索引 视图等）； SOI：具有查询 sys 开头系统表的权限； VTI：具有查询 v$开头的动态视图权限（动态视图记录在 v$dynamic_tables，如果没有此权限，DM 管理工具上会报没有查询 v$视图权限） DB_AUDIT_开头的角色是审计相关角色，具有审计相关权限，默认赋给 SYSAUDITOR。 DB_POLICY_开头的角色是安全相关角色，具有强制访问控制等权限，默认赋给 SYSSSO。\",\"select * from dba_roles; create role r1; grant create table to r1; grant select on dmhr.department to r1; grant r1 to hrtest; sp_set_role('R1',0) --角色禁用和启用，禁用后角色权限将不在生效。 \",\"赋予对象权限增加 with grant option 说明权限可以转授，回收时要增加 cascade 关键字级联 回收权限，否则报错：\",\"revoke select on dmhr.employee from r2 CASCADE; \"]},\"889\":{\"h\":\"备份还原基本概念\",\"t\":[\"备份包含物理备份和逻辑备份。 物理备份是拷贝有效的数据页。逻辑备份是导出数据库中逻辑数据。 物理备份分为完全备份 增量备份；联机备份（热备）和脱机备份（冷备）。 完全备份是指一个备份包含指定数据库或表空间的所有数据； 增量备份是指在一次全备份或上一次增量备份后，以后每次的备份只需备份与前一次相比增加或者被修改的文件； 增量备份包含差异增量备份和累积增量备份，默认是差异增量备份。 差异增量备份的基础备份集可以是全量备份，也可以是增量备份； 累计增量备份的基备份集只能是全量备份。 热备：指数据库启动状态下的备份 冷备：指数据库关闭状态下的备份。 备份级别：全库备份 表空间级备份 表级备份 归档备份。 物理还原是备份的逆过程； 恢复是使用归档将数据库恢复到最新状态或指定时间点；或使用备份集中的 redo 信息将数据库恢复至一致性状态。\"]},\"890\":{\"h\":\"备份 还原与恢复的关系\",\"t\":[\"备份还原两个重要参数：\",\"select * from v\\\\$parameter t where name in ('BAK_PATH', 'BAK_USE_AP'); \",\"BAK_PATH：DM 默认的备份路径，生成环境不要和源库数据文件放在同一磁盘上。避免磁 盘损坏，数据文件和备份文件同时损坏的情况。 BAK_USE_AP：备份还原策略，默认使用 DMAP 辅助进程。\"]},\"891\":{\"h\":\"查看 AP 服务是否启动：\",\"t\":[\"[dmdba@KylinDCA04 bak]$ ps -ef|grep dmap dmdba 86474 1 0 4 月 14 ? 00:00:01 /dm8/bin/dmap \",\"如果 AP 服务没有启动，则备份报错： [执行语句1]:\",\"backup database; 执行失败(语句1) -7170: bakres 连接 DMAP 失败 \"]},\"892\":{\"h\":\"脱机备份与还原数据库\",\"t\":[\"脱机备份（数据库关闭状态下的备份） 一 使用 dmrman 工具可以脱机备份 库备份（冷备）\",\"RMAN> backup database '/dm8/data/DM/dm.ini'; backup database '/dm8/data/DM/dm.ini'; file dm.key not found, use default license! Database mode = 0, oguid = 0 Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL EP[0]'s cur_lsn[46292], file_lsn[46292] Processing backupset /dm8/data/DM/bak/DB_DM_FULL_20211222_152753_249786 [Percent:100.00%][Speed:0.00M/s][Cost:00:00:00][Remaining:00:00:00] backup successfully! time used: 00:00:01.255 \"]},\"893\":{\"h\":\"表空间的还原和恢复\",\"t\":[\"测试删除普通表空间数据文件，演示普通表空间的还原于恢复。 DM8 表空间的还原与恢复需要在脱机状态下操作. 制造测试数据，然后删除表空间数据文件：\",\"[dmdba@KylinDCA04 ~]$ DmServiceDMSERVER start Starting DmServiceDMSERVER: [ OK ] [dmdba@KylinDCA04 ~]$ disql sysdba/SYSDBA 服务器[LOCALHOST:5236]:处于普通打开状态 登录使用时间 : 28.250(ms) disql V8 SQL> select count(*) from t_dept; 行号 COUNT(*) ---------- -------------------- 1 46 已用时间: 1.278(毫秒). 执行号:501. SQL> insert into t_dept select * from dmhr.department; 99 / 118 影响行数 47 已用时间: 1.972(毫秒). 执行号:502. SQL> commit; 操作已执行 已用时间: 1.313(毫秒). 执行号:503. SQL> select count(*) from t_dept; 行号 COUNT(*) ---------- -------------------- 1 93 已用时间: 0.318(毫秒). 执行号:504. SQL> insert into t_dept select * from dmhr.department; 影响行数 47 已用时间: 1.972(毫秒). 执行号:502. SQL> commit; 操作已执行 已用时间: 1.313(毫秒). 执行号:503. SQL> select count(*) from t_dept; 行号 COUNT(*) ---------- -------------------- 1 140 SQL> select table_name, tablespace_name,owner from dba_tables t where t.table_name='T_DEPT'; 行号 TABLE_NAME TABLESPACE_NAME OWNER ---------- ---------- --------------- ------ 1 T_DEPT MAIN SYSDBA 已用时间: 103.392(毫秒). 执行号:600. SQL> host rm MAIN.DBF 表空间 MAIN 的还原与恢复演示： [dmdba@KylinDCA04 full]$ dmrman dmrman V8 RMAN> restore database '/dm8/data/DAMENG/dm.ini' tablespace main from backupset '/dm8/backup/full/CONSOLEFULLBAK'; restore database '/dm8/data/DAMENG/dm.ini' tablespace main from backupset '/dm8/backup/full/CONSOLEFULLBAK'; file dm.key not found, use default license! 100 / 118 Database mode = 0, oguid = 0 Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL EP[0]'s cur_lsn[1507247], file_lsn[1507247] [Percent:100.00%][Speed:0.00M/s][Cost:00:00:02][Remaining:00:00:00] restore successfully. time used: 00:00:02.595 表空间的恢复系统会自动利用归档恢复到最新状态。 RMAN> recover database '/dm8/data/DAMENG/dm.ini' tablespace main; recover database '/dm8/data/DAMENG/dm.ini' tablespace main; Database mode = 0, oguid = 0 Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL EP[0]'s cur_lsn[1507247], file_lsn[1507247] [Percent:100.00%][Speed:0.00PKG/s][Cost:00:00:00][Remaining:00:00:00] recover successfully. time used: 464.414(ms) \",\"全库的还原与恢复 测试场景：删除 system 数据文件 使用全量备份集或增量备份集进行还原和恢复步骤相同。 假如 a（全量）->b1(增量)-> b2(增量) -> c1(增量) 如果全量备份丢失，基于其增量的备份也将无法正常使用\",\"（1）数据库的还原\",\"RMAN> restore database '/dm8/data/DM/dm.ini' from backupset '/dm8/backup/full/ONLINEBAK_02'; restore database '/dm8/data/DM/dm.ini' from backupset '/dm8/backup/full/ONLINEBAK_02'; [Percent:0.00%][Speed:0.00M/s][Cost:00:00:01][Remaining:00:00:00]Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL [Percent:100.00%][Speed:0.00M/s][Cost:00:00:02][Remaining:00:00:00] restore successfully. time used: 00:00:02.330 \",\"（2）数据库的恢复\",\"RMAN> recover database '/dm8/data/DM/dm.ini' with archivedir '/dm8/arch'; recover database '/dm8/data/DM/dm.ini' with archivedir '/dm8/arch'; Database mode = 0, oguid = 0 Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL EP[0]'s cur_lsn[46002], file_lsn[46002] EP:0 total 4 pkgs applied, percent: 11% EP:0 total 8 pkgs applied, percent: 22% EP:0 total 12 pkgs applied, percent: 34% EP:0 total 16 pkgs applied, percent: 45% EP:0 total 20 pkgs applied, percent: 57% EP:0 total 24 pkgs applied, percent: 68% EP:0 total 28 pkgs applied, percent: 80% 102 / 118 EP:0 total 32 pkgs applied, percent: 91% EP:0 total 35 pkgs applied, percent: 100% recover successfully! time used: 294.062(ms) \",\"（3）更新数据库魔数\",\"RMAN> recover database '/dm8/data/DM/dm.ini' update db_magic; recover database '/dm8/data/DM/dm.ini' update db_magic; Database mode = 0, oguid = 0 Normal of FAST Normal of DEFAULT Normal of RECYCLE Normal of KEEP Normal of ROLL EP[0]'s cur_lsn[46292], file_lsn[46292] recover successfully! time used: 00:00:01.009 不完全恢复的使用场景： 表误删除（DROP），可以指定归档恢复到删除的前一刻。 recover database '/dm8/data/DMTEST/dm.ini' with archivedir '/dm8/arch' until lsn XX; recover database '/dm8/data/DMTEST/dm.ini' with archivedir '/dm8/arch' until time XX; show 查看备份集 RMAN> show backupset '/dm8/data/DAMENG/bak_full'; remove 删除备份集 RMAN> remove backupset '/dm8/data/DAMENG/bak_increment'; check 检查备份集 RMAN> check backupset '/dm8/data/DAMENG/bak_full'; \"]},\"894\":{\"h\":\"联机备份与还原数据库\",\"t\":[\"联机备份：数据库是启动状态，联机备份要求数据库打开归档。 备份时 AP 服务需要为启动状态。 SQL 备份数据库 备份数据库\",\"backup database; --全量备份 backup database increment; --增量备份 backup database full to ONLINEBAK_01 backupset '/dm8/backup/full/ONLINEBAK_01'; backup database increment BASE ON BACKUPSET '/dm8/backup/full/ONLINEBAK_01' to ONLINEBAKINCR_01 backupset '/dm8/backup/incr/ONLINEBAK_01' ; backup database increment with BACKUPDIR '/dm8/backup/full/' to ONLINEBAKINCR_02 backupset '/dm8/backup/incr/ONLINEBAK_02' ; 备份集管理 --查看备份集 select * from v\\\\$backupset; --备份集相关函数 select * from v\\\\$ifun t where t.name like 'SF_BAKSET%'; SF_BAKSET_BACKUP_DIR_ADD('DISK','/dm8/backup/full/'); SF_BAKSET_BACKUP_DIR_ADD('DISK','/dm8/backup/incr/'); --校验备份集 select SF_BAKSET_CHECK('DISK','/dm8/backup/incr/ONLINEBAK_02'); --查看各个增量备份集的基础备份集： select t.BACKUP_NAME, t.BACKUP_PATH, LEVEL, t.type, SYS_CONNECT_BY_PATH(t.BACKUP_NAME, '/') BACKUP_BASECONNECT, CONNECT_BY_ISLEAF ISLEAF from (select a.BACKUP_NAME, a.BACKUP_PATH, a.BASE_NAME, a.TYPE from v\\\\$BACKUPSET a) t connect by t.BASE_NAME = PRIOR t.BACKUP_NAME start with t.type = 0; 表空间备份 backup tablespace dmtbs; backup tablespace dmtbs INCREMENT with BACKUPDIR '/dm8/backup/full/' to DMTBSINCR_01 backupset '/dm8/backup/incr/DMTBSINCR_01' ; 表和归档的备份 backup table dmhr.employee; --表的备份 backup archivelog all; --归档备份 库级 表空间的还原和恢复不支持联机恢复，只支持脱机还原恢复。 \"]},\"895\":{\"h\":\"运算符\"},\"896\":{\"h\":\"^ 位异或运算\",\"t\":[\"运算规则：两个数转为二进制，然后从高位开始比较，如果 相同 则为0，不相同 则为1\",\"比如：8^11\",\"8转为二进制是1000，11转为二进制是1011.从高位开始比较得到的是：0011.然后二进制转为十进制，就是Integer.parseInt(\\\"0011\\\",2)=3\"]},\"897\":{\"h\":\"重放攻击\",\"t\":[\"​ 重放攻击(Replay Attacks)又称重播攻击、回放攻击，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。\",\"​ 重放攻击可以由发起者，也可以由拦截并重发该数据的敌方进行。攻击者利用网络监听或者其他方式盗取认证凭据，之后再把它重新发给认证服务器。\",\"​ 重放攻击在任何网络通过程中都可能发生，是计算机世界黑客常用的攻击方式之一。\",\"（来自百度百科）\",\"一个存在安全漏洞的登录系统：\",\"前端web页面用户输入账号、密码，点击登录。\",\"请求提交之前，web端首先通过客户端脚本如javascript对密码原文进行md5加密。\",\"提交账号、md5之后的密码\",\"请求提交至后端，验证账号与密码是否与数据库中的一致，一致则认为登录成功，反之失败。\",\"解析：\",\"​ 目前的腾讯电脑管家，360等软件，会将你的网络请求原封不动的发送到他们的后端保存一份、当然不止这些安全软件，其他软件也可以做到。这样就会将你的账户就很容易被别人使用。\",\"​ 这样的话md5加密就起不到任何作用了。\",\"So：\",\"​ 我们考虑加入盐值，登录时候，session(或者redis缓存)中存一份随机数（称为盐值）。同样的盐值页面中也存在一份。所以我们不仅仅考虑用户名和md5密码了，还需要一份盐值作为网络请求的身份参照物，这样做稍微安全一些。\",\"More：\",\"​ 存在简单md5暴力破解的时候，我们需要增强密码强度。但是用户不喜欢这样，就需要我们自己加盐值。\",\"如：MD5(固定盐值+密码)\",\"More and More：\",\"加时间戳和流水号；\",\"一应答机制和一次性口令机制（应用广泛）\",\"重放攻击可以是登录认证，也可以是其他方式，\",\"从用户端考虑或从服务端考虑也会不同，\",\"当然会会有不同的分类。\",\"任性不提。。。\",\"​ 用验证码代替时间戳，将密码通过md5算法加密，再将验证码加在后面，然后再用md5算法加密，在网络传输过程中以密文的形式传输到后台管理。\",\"​\\t后台数据库保存的是用md5算法加密的密码，将该密文加上保存在session(或redis)失效范围内的验证码用md5算法加密，得到的密文与请求中的口令对比，如配对，则验证成功，否则，验证失败。\"]},\"898\":{\"h\":\"重构\",\"t\":[\"​ 在百度百科里给出的定义是:在不改变软件系统外部行为的前提下，改善它的内部结构。通过调整程序代码改善软件的质量、性能，使其程序的设计模式和架构更趋合理，提高软件的扩展性和维护性。\",\"​ 也许有人会问，为什么不在项目开始时多花些时间把设计做好，而要以后花时间来重构呢？\",\"​ 首先要知道一个完美得可以预见未来任何变化的设计，或一个灵活得可以容纳任何扩展的设计是不存在的。系统设计人员对即将着手的项目往往只能从大方向予以把控，而无法知道每个细枝末节。\",\"​ 其次永远不变的就是变化，提出需求的用户往往要在软件成型后，才开始\\\"品头论足\\\"，系统设计人员毕竟不是先知先觉的神仙，功能的变化导致设计的调整再所难免。\",\"​ 所以\\\"测试为先，持续重构\\\"作为良好开发习惯被越来越多的人所采纳，测试和重构像黄河的护堤，成为保证软件质量的法宝\",\"正确性（Correctness）：系统满足规格说明和用户目标的程度，即在预定环境下能正确地完成预期功能的程度\",\"健壮性（Robustness）：在硬件发生故障、输入的数据无效或操作错误等意外环境下，系统能做出适当响应的程度\",\"效率（Efficiency）：为了完成预定的功能，系统需要的计算资源的多少\",\"完整性（Efficiency）或安全性（Security）：对未经授权的人使用软件或数据的企图，系统能够控制（禁止）的程度\",\"可用性（Usability）：系统在完成预定应该完成的功能时令人满意的程度\",\"风险（Risk）：按预定的成本和进度把系统开发出来，并且为用户所满意的概率\",\"可理解性（Comprehensibility）：理解和使用该系统的容易程度\",\"可维修性（Maintainability）：诊断和改正在运行现场发现的错误所需要的工作量的大小\",\"灵活性（Maintainability）或适应性（Adaptability）：修改或改进正在运行的系统需要的工作量的多少\",\"可再用性（Reusability）：在其他应用中该程序可以被再次使用的程度（或范围）\",\"可移植性（Portability）：把程序从一种硬件配置和（或）软件系统环境转移到另一种配置和环境时，需要的工作量多少。有一种定量度量的方法是：用原来程序设计和调试的成本除移植时需用的费用\",\"互运行性（Interoperability）：把该系统和另一个系统结合起来需要的工作量的多少\",\"重构的目的就是为了保证软件满足以上特性。\",\"​ 在不改变系统功能的情况下，改变系统的实现方式。为什么要这么做？投入精力不用来满足客户关心的需求，而是仅仅改变了软件的实现方式，这是否是在浪费客户的投资呢？\",\"​ 重构的重要性要从软件的生命周期说起。软件不同与普通的产品，他是一种智力产品，没有具体的物理形态。一个软件不可能发生物理损耗，界面上的按钮永远不会因为按动次数太多而发生接触不良。那么为什么一个软件制造出来以后，却不能永远使用下去呢？\",\"​ 对软件的生命造成威胁的因素只有一个：需求的变更。一个软件总是为解决某种特定的需求而产生，时代在发展，客户的业务也在发生变化。有的需求相对稳定一些，有的需求变化的比较剧烈，还有的需求已经消失了，或者转化成了别的需求。在这种情况下，软件必须相应的改变，考虑到成本和时间等因素，当然不是所有的需求变化都要在软件系统中实现。但是总的说来，软件要适应需求的变化，以保持自己的生命力。\",\"​ 软件产品最初制造出来，是经过精心的设计，具有良好架构的。但是随着时间的发展、需求的变化，必须不断的修改原有的功能、追加新的功能，还免不了有一些缺陷需要修改。为了实现变更，不可避免的要违反最初的设计构架。经过一段时间以后，软件的架构就千疮百孔了。bug越来越多，越来越难维护，新的需求越来越难实现，软件的构架对新的需求渐渐的失去支持能力，而是成为一种制约。最后新需求的开发成本会超过开发一个新的软件的成本，这就是这个软件系统的生命走到尽头的时候。重构就能够最大限度的避免这样一种现象。系统发展到一定阶段后，使用重构的方式，不改变系统的外部功能，只对内部的结构进行重新的整理。通过重构，不断的调整系统的结构，使系统对于需求的变更始终具有较强的适应能力。\",\"​ 案例很简单，这是给一家出租店用的程序。计算每一位顾客的消费金额并打印详单。操作者告诉程序：顾客租了哪些影片？租期多长？程序会根据租赁时间和影片类型计算费用。影片分为三类：普通片、儿童片、新片。除了计算费用还有为顾客计算积分，积分会根据租片类型是否为新片而不同。\",\"为了实现这个功能。我们编写出了以下代码（三个类：Movie、Rental、Consumer）：\",\"1618675966507\",\"1618675987731\",\"1618676025236\",\"存在的问题：\",\"（1）对于consumer里面的statement方法。 这个方法做的事情太多，如果用户希望对系统做一点修改，首先他们希望以html格式 输出详单，这样可在网页上直接显示。这个变化的影响是：根本不可能在打印html报表的函数中复用目前statement的任何行为。唯一可以做的就是编写一个全新的htmlStatement 大量重复statement的行为。如果计费标准发生变化必须同时修改statement和htmlstatement， 不断的修改和不断的复制粘贴，在程序要保存很长时间时，造成潜在的威胁.\",\"（2）如果用户希望改变影片分类规则，但还未决定怎么改，他们设想几种方案。 这些方案都会影响消费和积分的计算方式。为了应付分类规则和计费规则的变化，程序不得不对statement做出修改，但是如果我们把statement内的代码，复制到htmlstatement函数中，就必须确保将来的任何修改在两个地方保持一致，随着各种规则变得愈来愈复杂，适当的修改点越来越难找，不犯错的机会也越来越少。\",\"（3）你的态度也行倾向于尽量少修改程序，不管怎么说。它运行的很好。你心里牢牢记着那句古老的工程谚语：如果它没坏。就不要动它 也行这个程序还没坏，但是它造成了伤害，它让你的生活比较难过，因为你发现很难完成客户所需的修改。你发现自己需要为程序添加一个特性。而代码结构使你无法方便的达到目的，那就先重构那个程序。 重构，真的是可以锻炼自己思维和代码的编写能力\"]},\"899\":{\"h\":\"Step1、重构第一步-可靠的测试\",\"t\":[\"01 进行重构时，我们需要依赖测试，让它告诉我们是否引入bug。好的测试是重构的根本\",\"02 重构的前提是要有一个可靠的测试，这个测试必须有自我检验能力\"]},\"900\":{\"h\":\"Step2、重构第二步-分解重组statement 找出代码的逻辑泥团并运用Extract Method\",\"t\":[\"这个函数太长了，代码块越小，代码的功能越好管理。代码的处理和移动也越轻松 代码重构目标：希望将长长的函数切开，把较小的块移动到更合适的类中，最终能够降低代码重复和扩展 将 switch这段逻辑泥团抽离为函数。 在分析函数内的局部变量和参数，其中statement() while循环中有两个： thisAmount、each, thisAmount会被修改，each不会被修改。 任何不会被修改的变量都可以被当成参数传入新的函数 注意每次调整都要编译测试 重构技术就是以 微小 的步伐修改程序，如果你犯下错误，很容易发现它\",\"1618676190337\"]},\"901\":{\"h\":\"Step3、重构第三步-更改amountFor中的变量名\",\"t\":[\"好的代码应该清楚表达出自己的功能，变量名称是代码清晰的关键。 任何一个傻瓜都能写出计算机可以理解的代码。唯有写出人类容易理解的代码，才是优秀的程序员。 代码应该表现自己的目的 随着对程序的理解逐渐加深，我也就不断的把这些理解嵌入到代码中，这么一来才不会遗忘我曾经理解的东西\",\"1618676232016\"]},\"902\":{\"h\":\"Step4、重构第四步-搬移金额计算代码\",\"t\":[\"观察amountFor时，发现这个函数没有使用来自Consumer类的信息，使用了来自Rental类的信息。 所以应该改这段代码搬移到Rental类。并且做相应的调整：更改方法名、参数等 更改调用处 运用Replace Temp with Query把thisAmount除去\",\"1618676280257\",\"第一步：先将计算金额代码搬移到Rental类中\",\"Rental类中添加方法 getCharge\",\"第二步：针对搬移后的代码，调整Consumer类\"]},\"903\":{\"h\":\"Step5、重构第五步-运用Extract Method 参考抽取计算金额，来抽取积分\",\"t\":[\"1618676358941\",\"第一步：将积分计算方法搬移到Rental类中\",\"第二步：2、更改consumer类中获取积分\"]},\"904\":{\"h\":\"Step6、重构第六步-去掉临时变量\",\"t\":[\"临时变量只在自己所属的函数中有效，所以它们会助长冗长而复杂的函数。 运用Replace Temp with Query,并利用查询函数(query method)来取代totalAmount和frequentRentalPoints这两个临时变量。 由于类中的任何函数都可以调用上述查询函数，所以它能够促成较干净的设计，而减少冗长复杂的函数。\",\"1618676411155\",\"第一步：totalAmount和frequenRenterPoint两个临时变量\",\"第二步：使用查询函数来替代\"]},\"905\":{\"h\":\"Step7、重构第七步-运用多态取代与价格相关的条件逻辑\",\"t\":[\"对于switch语句，最好不要在另一个对象的属性基础上运用switch语句。如果不得不使用。也应该在对象自己的数据上使用而不是在别人的数据上使用。 这暗示getCharge应该移动到Movie中 租期的长度来自Rental对象，计算费用的时候需要两项数据：租期长度和影片类型 为什么选择租期长度呢。因为本系统可能发生变化是加入新影片类型。这种变化带有不稳定性倾向 如果影片类型发生变化，我希望尽量控制它造成的影响。所以在Movie对象中计算费用\",\"1618676461026\"]},\"906\":{\"h\":\"Step8、重构第八步-运用多态取代与价格相关的条件逻辑\",\"t\":[\"用多态替换Switch，如果创建三个子类继承Movie，调用方就必须创建具体的子类对象（违反依赖倒置原则）。 一个对象具有状态，并且不同状态下有不同的行为，引入State模式： 创建接口Price作为Movie的属性，接口方法getCharge(int daysRented)，再创建三个实现类，把Switch分支的逻辑移至具体的实现类 依赖倒置原则，调用方应该依赖抽象类或接口，不要依赖具体实现类\",\"创建price接口 将getPriceCode、getCharge getFrequentRenterPoint抽象出来\",\"1618676506490\",\"1618676526483\",\"创建子类继承Price 实现具体的实现\",\"1、每个方法只做一件事，每个方法抽象层级不能多于两层，根据这个原则抽取方法。\",\"2、根据类的职责和对象之间的依赖关系，把方法移至对应的类。\",\"3、应该调用对象的接口方法，不要直接操作对象的属性。\",\"4、尽量减少方法中的临时变量，简化逻辑，增加可读性。\"]},\"907\":{\"h\":\"（1）、什么时候重构\",\"t\":[\"三次法则：事不过三，三则重构 添加功能时重构（New Feature） 代码的设计无法帮助我轻松的添加我所需要的特性，如果用某种方式来设计，添加特性会简单的多。一旦完成重构，新特性的添加会更快速，更流畅 修补错误时重构（Bug Fix） 调试过程中，运用重构，多半是为了让代码更具有可读性 复审代码时重构（Code Review)重构可以帮助我们复审代码\"]},\"908\":{\"h\":\"（2）、什么时候不重构\",\"t\":[\"既有代码太混乱，且不能正常工作，需要重写而不是重构。 项目接近最后期限时，应该避免重构。\"]},\"909\":{\"h\":\"（1）、改善重复代码\",\"t\":[\"​ 重复的代码是坏味道中出现频率最高的情形非其莫属。如果在一个的以上地方看到相同的代码，那么就可以肯定：想办法将它们合而为一，代码会变得更好。最单纯的重复代码就是“同一个类的两个函数含有相同的表达式”，这时候可以采用抽取方法提炼出重复的代码，然后让这两个地点都调用被提炼出的那一段代码。\",\"​ 另一种常见情况就是“两个互为兄弟的子类内含相同的表达式”，这时候只需对两个类抽取方法，然后将提炼出的代码推入到超类中。如果代码之间只是类似而并非完全相同，那么就需要通过抽取方法将相似部分和差异部分分开，构成单独一个函数。如果有些函数以不同的算法做相同的事，可以使用比较清晰的一个替换掉其余的。\"]},\"910\":{\"h\":\"（2）、改善过长的函数、过大的类、 过长的参数列\",\"t\":[\"​ 程序员都喜欢简短的函数。拥有短函数的对象会活的比较好、比较长。不熟悉面向对象技术的人，常常觉得对象程序中只有无穷无尽的委托，根本没有进行任何计算。和此类程序共同生活数年后，你才会知道这些小小函数的价值。\",\"​ 应该积极地分解函数，将长长的函数变为多个短小的函数。一般会遵循这样的原则：每当感觉需要用注释来说明点什么的时候，就把需要说明的东西写进一个独立函数中，并以其用途命名。不要嫌麻烦。可以对一组甚至短短一行代码做这件事，哪怕替换后的函数调用动作比函数自身还长，只要函数名称能够解释其用途，也应毫不犹豫地那么做。关键不在于函数的长度，而在于函数“做什么”和“如何做”之间的语义距离。 ​ 如果想利用单个的类做太多的事情，其内往往会出现太多实例变量。一旦如此，重复的代码就接踵而来。可以将几个变量一起提炼至新类内。提炼时应该选择类内彼此相关的变量，将它们放在一起。通常如果类内的数个变量有着相同的前缀或字尾，这就意味有机会把它们提炼到某个组件内。和“太多实例变量”一样，类内如果有太多代码，也是代码重复、混乱并最终走向死亡的源头。最简单的方案是把多余的东西消弭于类内部。如果有五个“百行函数”，它们之中很多代码都相同，那么或许你可以把它们变成五个“十行函数”和十个提炼出的“双行函数”。\",\"​ 刚开始学编程的时候，或许都是“把函数所需的所有东西都以参数传递进去”。这样也是可以理解的，因为除此之外就只能选择全局数据，而全局数据是邪恶的东西。对象技术告诉我们，如果你手上没有所需的东西，总可以叫一个对象给你。有了对象，你就不必要把函数所需的所有东西都以参数传递给它，只需传给它足够的、让函数能从中获得自己的东西就行。太长的的参数列难以理解，太多参数会造成前后不一致、不易使用，而且一旦需要更多数据，就不得不修改它。如果将对象传递给函数，大多数修改都将没有必要，因为很可能只需增加一两条请求，就能得到更多的数据。\"]},\"911\":{\"h\":\"（3）、发散式变化\",\"t\":[\"​ 我们希望软件能够容易被修改——毕竟软件再怎么说本来就该是“软”的。一旦需要修改，我们希望能够跳到系统某一点，只在该处做修改。如果不能做到这点，你就会嗅出两种紧密相关的刺鼻味道中的一种。如果某个类经常因为不同的原因在不同的方向上发生变化，发散式变化就出现了。其主要指“一个类受多种变化的影响”。当你看着一个类说：“呃，如果新加入一个数据库，就必须修改这三个函数；如果新出现一种工具，就必须修改这四个函数。”那么此时也许将这个对象分成两个会更好，这样对每个对象就可以只因一种变化而需要修改因为不同的原因，在不同的方向上，修改同一个类。应该分解成更小的类，每个类只因一种原因而修改。多层结构系统，开发人员往往容易把全部逻辑都放在Service层，导致Service类非常庞大且不断被修改。\"]},\"912\":{\"h\":\"（4）、霾弹式修改\",\"t\":[\"​ 如果每遇到变化，都必须在许多不同的类内做出许多小修改，你所面临的坏味道就是霾弹式修改。其主要指“一种变化引发多个类相应修改”。如果需要修改的代码散布四周，不但很难找到它们，也很容易忘记某个重要的修改。这种情况可以把所有需要的代码放进同一个类。如果眼下没有合适的类可以安置这些代码，就创造一个。通常可以运用内联类把一系列相关行为放进同一个类。\"]},\"913\":{\"h\":\"（5）、 依恋情节\",\"t\":[\"​ 众所周知，对象技术的全部要点在于：其是一种“将数据和对数据的操作行为包装在一起”的技术。有一种经典的气味：函数对于某个类的兴趣高过对自己所处类的兴趣。在很多情况下，都能够看到：某个函数为了计算某个值，从另一个对象那儿调用几乎半打的取值函数。疗法也显而易见：把这个函数移至另一个地点，移到它该去的地方。‘有时候一个函数往往会用到几个类的功能，那么它究竟该被置于何处呢？处理原则通常为：判断哪个类拥有最多被此函数使用的数据，然后就把这个函数和那些数据摆在一起。\"]},\"914\":{\"h\":\"（6）、数据泥团\",\"t\":[\"​ 如果用比较形象的事物来形容数据项，我想“小孩子”是一个不错的选择，数据项就像小孩子，喜欢成群结队地呆在一块儿。常常可以在很多地方看到相同的三四项数据：两个类中相同的字段、许多函数签名中相同的参数。这些总是绑在一起出现的数据真应该拥有属于它们自己的对象。这种情况可以先找出这些数据以字段形式出现的地方，将它们提炼到一个独立对象中，然后将注意力转移到函数签名上，运用参数对象为它减肥。这样做的直接好处是可以将很多参数列缩短，简化函数调用。一个比较好的评判方法是：删掉众多数据中的一项。这么做其它数据有没有因而失去意义？如果它们不再有意义，这就是一个明确的信号：应该为它们产生一个新对象。\"]},\"915\":{\"h\":\"（7）、基本类型偏执\",\"t\":[\"​ 大多数编程环境都有两种数据：结构类型允许你将数据组织成有意义的形式；基本类型则是构成结构类型的积木块。但是请记住：结构总是会带来一定的额外开销。它们可能代表着数据库中的表，如果只为做一两件事而创建结构类型也可能显得很麻烦。 对象的一个极大价值在于：它们模糊甚至打破横亘于基本数据和体积较大的类之间的界限。如果你有一组应该总是被放在一起的字段，可以将其抽取为一个独立的类。如果你在参数列中看到基本型数据，可以引入参数对象进行处理。如果你发现自己正从数组中挑选数据，可以运用以对象取代数组进行处理。 由一个起始值和一个结束值组成的range类：如果你有大量的基本数据类型字段，就有可能将其中部分存在逻辑联系的字段组织起来，形成一个类。更进一步的是，将与这些数据有关联的方法也一并移入类中 如果你发现自己正从数组中挑选数据，可运用 以对象取代数组。\"]},\"916\":{\"h\":\"（8）、Switch惊悚现身\",\"t\":[\"​ 面向对象程序的一个较明显特征是：少用switch语句。从本质上说，switch语句的问题在于重复。你常会发现同样的switch语句散布于不同的地方。如果要为它添加一个新的case语句，就必须找到所用switch语句并修改它们。面向对象中的多态概念可为此带来优雅的解决办法。大多数时候，一看到switch语句，那就应该考虑以多态来替换它。switch语句常常根据类型码进行选择，你要的是“与该类型码相关的函数或类”，所以应该将switch语句提炼到一个独立函数中，再将它搬移到需要多态性的那个类里。\"]},\"917\":{\"h\":\"（9）、平行继承体系\",\"t\":[\"​ 平行继承体系其实是霾弹式修改的特殊情况。在这种情况下，每当为某个类增加一个子类，必须也为另一个类增加一个子类。如果发现某个继承体系的类名称前缀和另一个继承体系的类名称前缀完全相同，这种坏味道就会被嗅出。 ​ 消除这种重复性的一般策略是：让一个 ​ 继承体系的实例引用另一个继承体系的实例。\",\"1618677203153\"]},\"918\":{\"h\":\"（10）、冗赘类\",\"t\":[\"​ 你所创建的每一个类，都得有人去理解它、维护它，这些工作都是需要花钱的。如果一个类的所得并不值其身价，他就应该消失。项目中经常会出现这样的情况：某个类原本对得起自己的价值，但重构使它身形缩水，不再做那么多工作；或开发者事先规划了某些变化，并添加一个类来应付这些变化，但变化实际没有发生。不管是哪种原因，都应该让这个类庄严赴义吧。如果某些子类并没有做足够的工作，我们可以尝试“折叠继承体系”，将超类和子类合为一体，那样就会减少维护时间。对于那些几乎没用的组件，就应该将这个类的所有特性搬移到另一个类中，然后移除原类。\"]},\"919\":{\"h\":\"（11）、夸夸其谈未来性\",\"t\":[\"​ 我们经常会说：“我想总有一天需要做这事”，并因而企图以各样的钩子和特殊情况来处理一些非必要的事情。一旦这样，坏味道就浮现出来了。夸夸其谈未来的结果往往会造成系统更加难以理解和维护。如果所有的装置都被用到了，那就值得那么做；如果用不到，就不值得。用不上的装置只会阻挡你的路，给你添乱，那就搬开它吧。如果某个抽象类其实没有太大作用，可以将超类和子类合为一体。将不必要的委托转移到另一个类中，并消除原先的类。如果函数的某些参数未被用上，那么就将参数移走。如果函数名称带有多余的抽象意味，就应该对它重命名，让它现实一些。\"]},\"920\":{\"h\":\"（12）、令人迷惑的暂时字段\",\"t\":[\"​ 有时候你会发现：类中的某个实例变量仅为某种特定情况而设。这样的代码让人难以理解，因为你通常认为对象在所有时候都需要它的所有变量。当变量在未被使用的情况下去猜测其当初设置的目的，会让你发疯的。可以使用提炼新类为这个可怜的孤儿创造一个家，然后把所有和这个变量相关的代码都放进这个新家。也许还可以使用“将Null值替换为Null对象”在“变量不合法”的情况下创建一个Null对象，从而避免写出条件式代码。\"]},\"921\":{\"h\":\"（13）、 过度耦合的消息链\",\"t\":[\"​ 如果你看到用户向一个对象请求另一个对象，然后再向后者请求另一个对象，然后再请求另一个对象.....这就是消息链。这种方式意味着客户代码将与某些功能函数中的导航结构紧密耦合。一旦对象间的关系发生任何变化，客户端就不得不做出相应修改。 这时候我们可以隐藏“委托关系”，并在服务类上建立客户所需要的所有函数。你可以在消息链的不同位置进行这种重构手法。理论上是可以重构消息链上的任何一个对象，但是这样做往往会把一系列对象都变成“中间人”。通常更好的选择是：先观察消息链最终得到的对象是用来干什么的，再看看能否通过抽取方法把使用该对象的代码提炼到一个独立函数中，然后再将这个函数推入消息链。\",\"String result=Class.getFile().getFileChannel().getFileSource().getFileName() String result=Class.getFile().getFileName(); \",\"​ 常常是因为数据结构的层次很深，需要层层调用getter获取内层数据。 个人认为Message Chains如果频繁出现，考虑这个字段是否应该移到较外层的类，或者把调用链封装在较外层类的方法。\"]},\"922\":{\"h\":\"（14）、中间人\",\"t\":[\"​ 我们都知道对象的基本特征之一就是封装——对外部世界隐藏其内部细节。封装往往伴随着委托。比如你对Boss说是否有时间参加一个会议，他把这个消息“委托”给他的记事本，然后才能回答你。但是，你没有必要知道Boss到底使用传统记事本或电子记事本亦或秘书来记录自己的约会。人们可能会过度使用委托。你也许会看到某个类接口中有一半的函数都委托给其它类，这样就是过度委托。这时候就应该移除中间人，直接和真正的负责人打交道。如果这样“不干实事”的函数只有少数几个，可以将它们放进调用端。如果中间人还有其它行为，可以把它变成实责对象的子类，这样你既可以扩展原对象的行为，又不必负担那么多的委托动作。\"]},\"923\":{\"h\":\"（15）、狎昵关系\",\"t\":[\"​\\t\\t有时候你会看到两个类过于亲密，花费太多时间去探究彼此的private成分。如果这发生在两个“人”之间，我们无比做卫道士；但对于类，我们就希望它们严守清规。也许就像古代的恋人一样，过分狎昵的类必须拆散。可以通过“移动方法”和“移动字段”帮它们划清界限，从而减少狎昵行径。如果两个类实在是情投意合，可以把两者共同点提炼到一个安全地点，让它们坦荡地使用这个新类。或者通过隐藏“委托关系”让另一个类来为它们传递相思情。将双向关联改为单向关联提炼类，将两个类的共同点提炼到新类中，让它们共同使用新类\"]},\"924\":{\"h\":\"锁粗化\",\"t\":[\"转自：https://blog.csdn.net/qq_26222859/article/details/80546917\",\"参考：https://www.jianshu.com/p/f05423a21e78\",\"通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽可能短，但是大某些情况下，一个程序对同一个锁不间断、高频地请求、同步与释放，会消耗掉一定的系统资源，因为锁的讲求、同步与释放本身会带来性能损耗，这样高频的锁请求就反而不利于系统性能的优化了，虽然单次同步操作的时间可能很短。锁粗化就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。\",\"public void doSomethingMethod(){ synchronized(lock){ //do some thing } //这是还有一些代码，做其它不需要同步的工作，但能很快执行完毕 synchronized(lock){ //do other thing } } \",\"上面的代码是有两块需要同步操作的，但在这两块需要同步操作的代码之间，需要做一些其它的工作，而这些工作只会花费很少的时间，那么我们就可以把这些工作代码放入锁内，将两个同步代码块合并成一个，以降低多次锁请求、同步、释放带来的系统性能消耗，合并后的代码如下 :\",\"public void doSomethingMethod(){ //进行锁粗化：整合成一次锁请求、同步、释放 synchronized(lock){ //do some thing //做其它不需要同步但能很快执行完的工作 //do other thing } } \",\"注意：这样做是有前提的，就是中间不需要同步的代码能够很快速地完成，如果不需要同步的代码需要花很长时间，就会导致同步块的执行需要花费很长的时间，这样做也就不合理了。\",\"另一种需要锁粗化的极端的情况是：\",\"for(int i=0;i<size;i++){ synchronized(lock){ } } \",\"上面代码每次循环都会进行锁的请求、同步与释放，看起来貌似没什么问题，且在jdk内部会对这类代码锁的请求做一些优化，但是还不如把加锁代码写在循环体的外面，这样一次锁的请求就可以达到我们的要求，除非有特殊的需要：循环需要花很长时间，但其它线程等不起，要给它们执行的机会。\",\"锁粗化后的代码如下：\",\"synchronized(lock){ for(int i=0;i<size;i++){ } } \"]},\"925\":{\"h\":\"阻塞锁\"},\"926\":{\"h\":\"1、阻塞锁优势\",\"t\":[\"​ 与自旋锁不同，改变了线程的运行状态。\",\"​ 在JAVA环境中，线程Thread有如下几个状态：\",\"新建状态\",\"就绪状态\",\"运行状态\",\"阻塞状态\",\"死亡状态\",\"​ 阻塞锁，可以说是让线程进入阻塞状态进行等待，当获得相应的信号（唤醒，时间） 时，才可以进入线程的准备就绪状态，准备就绪状态的所有线程，通过竞争，进入运行状态。 ​ JAVA中，能够进入 / 退出、阻塞状态或包含阻塞锁的方法有 ，synchronized 关键字（其中的重量锁），ReentrantLock，Object.wait() / notify() ，LockSupport.park() / unpart()\"]},\"927\":{\"h\":\"2、阻塞锁的优势：\",\"t\":[\"​ 在于，阻塞的线程不会占用CPU时间， 不会导致 CPU占用率过高，但进入时间以及恢复时间都要比自旋锁略慢。在竞争激烈的情况下 阻塞锁的性能要明显高于自旋锁。\"]},\"928\":{\"h\":\"3、阻塞锁应用：\",\"t\":[\"​ 理想的情况则是， 在线程竞争不激烈的情况下，使用自旋锁；竞争激烈的情况下使用，阻塞锁。\"]},\"929\":{\"h\":\"4、阻塞锁的简单实现：\",\"t\":[\" public class ClhLock { /** * 定义一个节点，默认的lock状态为true */ public static class ClhNode { private volatile Thread isLocked; } /** * 尾部节点,只用一个节点即可 */ private volatile ClhNode tail; private static final ThreadLocal<ClhNode> LOCAL = new ThreadLocal<>(); private static final AtomicReferenceFieldUpdater<ClhLock, ClhNode> UPDATER = AtomicReferenceFieldUpdater.newUpdater(ClhLock.class, ClhNode.class, \\\"tail\\\"); public void lock() { // 新建节点并将节点与当前线程保存起来 ClhNode node = new ClhNode(); LOCAL.set(node); // 将新建的节点设置为尾部节点，并返回旧的节点（原子操作），这里旧的节点实际上就是当前节点的前驱节点 // 个人理解=>大概相当于把AtomicReferenceFieldUpdater中原有的tail取出，并用新建的节点将原有的tail替代，这个操作是原子性的。 // 操作原子性的由来：AtomicReferenceFieldUpdater是一个基于反射的工具类，它能对指定类的指定的volatile引用字段进行原子更新。(这个字段不能是private的)。 ClhNode preNode = UPDATER.getAndSet(this, node); if (preNode != null) { preNode.isLocked = Thread.currentThread(); LockSupport.park(this); preNode = null; LOCAL.set(node); } // 如果不存在前驱节点，表示该锁没有被其他线程占用，则当前线程获得锁 } public void unLock() { // 获取当前线程对应的节点 // 对应博客中的这句话：申请线程只在本地变量上自旋，避免了多处理器系统上，每个进程/线程占用的处理器都在读写同一个变量serviceNum // 每次读写操作都必须在多个处理器缓存之间进行缓存同步 ClhNode node = LOCAL.get(); // 如果tail节点等于node，则将tail节点更新为null，同时将node的lock状态职位false，表示当前线程释放了锁 if (!UPDATER.compareAndSet(this, node, null)) { // System.out.println(\\\"unlock\\\\t\\\" + node.isLocked.getName()); LockSupport.unpark(node.isLocked); } node = null; } } \"]},\"930\":{\"h\":\"5、demo：\",\"t\":[\"public class ClhLockTest { private static int num = 0; public static void main(String[] args) throws InterruptedException { ThreadPoolExecutor pool = new ThreadPoolExecutor(1000, 1000, 1, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), new DefaultNameThreadFactory(\\\"SimpleSpinLock\\\")); CountDownLatch countDownLatch = new CountDownLatch(1000); ClhLock clhLock = new ClhLock(); for (int i = 0; i < 1000; i++) { pool.submit(() -> { clhLock.lock(); num++; clhLock.unLock(); // 计数减一 countDownLatch.countDown(); }); } // 要求主线程等待所有任务全部准备好才一起并行执行 countDownLatch.await(); System.out.println(num); } } \"]},\"931\":{\"h\":\"Database\"},\"932\":{\"h\":\"Posts\"},\"933\":{\"h\":\"Guarantee\"},\"934\":{\"h\":\"Distributed\"},\"935\":{\"h\":\"Dev Ops\"},\"936\":{\"h\":\"Spring\"},\"937\":{\"h\":\"Java\"}},\"dirtCount\":0,\"index\":[[\"竞争激烈的情况下使用\",{\"1\":{\"928\":1}}],[\"死亡状态\",{\"1\":{\"926\":1}}],[\"帮它们划清界限\",{\"1\":{\"923\":1}}],[\"帮助分析当前项目的依赖\",{\"1\":{\"597\":1}}],[\"帮助用户找到最适合自己的服务器ip\",{\"1\":{\"222\":1}}],[\"帮助用户找到他们正在寻找的信息\",{\"1\":{\"55\":1}}],[\"狎昵关系\",{\"0\":{\"923\":1}}],[\"令人迷惑的暂时字段\",{\"0\":{\"920\":1}}],[\"令策略为\",{\"1\":{\"874\":1}}],[\"夸夸其谈未来的结果往往会造成系统更加难以理解和维护\",{\"1\":{\"919\":1}}],[\"夸夸其谈未来性\",{\"0\":{\"919\":1}}],[\"坏味道就浮现出来了\",{\"1\":{\"919\":1}}],[\"折叠继承体系\",{\"1\":{\"918\":1}}],[\"冗赘类\",{\"0\":{\"918\":1}}],[\"少用switch语句\",{\"1\":{\"916\":1}}],[\"少量的数据排序\",{\"1\":{\"855\":1,\"863\":1}}],[\"许多函数签名中相同的参数\",{\"1\":{\"914\":1}}],[\"喜欢成群结队地呆在一块儿\",{\"1\":{\"914\":1}}],[\"喜欢编程的小伙伴可以加我共同探讨\",{\"1\":{\"1\":1}}],[\"疗法也显而易见\",{\"1\":{\"913\":1}}],[\"众所周知\",{\"1\":{\"913\":1}}],[\"霾弹式修改\",{\"0\":{\"912\":1}}],[\"呃\",{\"1\":{\"911\":1}}],[\"太多参数会造成前后不一致\",{\"1\":{\"910\":1}}],[\"太多实例变量\",{\"1\":{\"910\":1}}],[\"太长的的参数列难以理解\",{\"1\":{\"910\":1}}],[\"混乱并最终走向死亡的源头\",{\"1\":{\"910\":1}}],[\"混合型可以拆成io密集型任务和cpu密集型任务\",{\"1\":{\"769\":1}}],[\"混合加密算法\",{\"1\":{\"678\":1}}],[\"混合加密机制\",{\"0\":{\"678\":1}}],[\"哪怕替换后的函数调用动作比函数自身还长\",{\"1\":{\"910\":1}}],[\"哪个线程获得了该对象的锁\",{\"1\":{\"673\":1}}],[\"拥有短函数的对象会活的比较好\",{\"1\":{\"910\":1}}],[\"拥有几乎所有权限\",{\"1\":{\"873\":1}}],[\"违反依赖倒置原则\",{\"1\":{\"906\":1}}],[\"违背了\",{\"1\":{\"683\":1}}],[\"搬移金额计算代码\",{\"0\":{\"902\":1}}],[\"唯有写出人类容易理解的代码\",{\"1\":{\"901\":1}}],[\"唯一可以做的就是编写一个全新的htmlstatement\",{\"1\":{\"898\":1}}],[\"唯一标志\",{\"1\":{\"213\":1}}],[\"唯一的机器生成的标识符\",{\"1\":{\"208\":1}}],[\"唯一索引不可以\",{\"1\":{\"110\":2}}],[\"唯一索引可以为空\",{\"1\":{\"110\":2}}],[\"唯一索引是一种索引\",{\"1\":{\"110\":2}}],[\"唯一索引\",{\"1\":{\"101\":1,\"110\":4}}],[\"希望将长长的函数切开\",{\"1\":{\"900\":1}}],[\"造成潜在的威胁\",{\"1\":{\"898\":1}}],[\"造成了\",{\"1\":{\"789\":1}}],[\"积分会根据租片类型是否为新片而不同\",{\"1\":{\"898\":1}}],[\"积少成多\",{\"1\":{\"172\":1}}],[\"儿童片\",{\"1\":{\"898\":1}}],[\"影片分为三类\",{\"1\":{\"898\":1}}],[\"影响行数\",{\"1\":{\"893\":2}}],[\"影响文件的读写性能\",{\"1\":{\"433\":1}}],[\"顾客租了哪些影片\",{\"1\":{\"898\":1}}],[\"顾名思义\",{\"1\":{\"250\":1}}],[\"案例很简单\",{\"1\":{\"898\":1}}],[\"客户的业务也在发生变化\",{\"1\":{\"898\":1}}],[\"客户端就不得不做出相应修改\",{\"1\":{\"921\":1}}],[\"客户端会根据这张列表\",{\"1\":{\"705\":1}}],[\"客户端\",{\"1\":{\"705\":1}}],[\"客户端向服务器发出加密请求\",{\"1\":{\"705\":1}}],[\"客户端提交\",{\"1\":{\"657\":1}}],[\"客户端等待了某个固定时间\",{\"1\":{\"649\":1}}],[\"客户端接收到来自服务器端的关闭请求\",{\"1\":{\"649\":1}}],[\"客户端接收到这个确认包之后\",{\"1\":{\"649\":1}}],[\"客户端进入fin\",{\"1\":{\"649\":1}}],[\"客户端进入established\",{\"1\":{\"648\":1}}],[\"客户端进入syn\",{\"1\":{\"648\":1}}],[\"客户端再次发送确认包\",{\"1\":{\"648\":1}}],[\"客户端发送一个fin\",{\"1\":{\"649\":1}}],[\"客户端发送一个tcp的syn\",{\"1\":{\"648\":1}}],[\"客户端发起\",{\"1\":{\"522\":1}}],[\"客户端发起请求\",{\"1\":{\"14\":1}}],[\"客户端用之前生成的私钥解密服务段传过来的信息\",{\"1\":{\"522\":1}}],[\"客户端解密信息\",{\"1\":{\"522\":1}}],[\"客户端解析证书\",{\"1\":{\"522\":1}}],[\"客户端和服务器需要交换\",{\"1\":{\"522\":1}}],[\"客户端工具\",{\"1\":{\"297\":1}}],[\"客户端的协议使用grpc协议\",{\"1\":{\"214\":1}}],[\"客户端启动失败\",{\"1\":{\"214\":1}}],[\"客户端判断自己的创建的顺序节点是否是最小的\",{\"1\":{\"214\":1}}],[\"客户端判断是否获得锁\",{\"1\":{\"214\":1}}],[\"客户端以前缀\",{\"1\":{\"214\":1}}],[\"客户端需记录\",{\"1\":{\"214\":1}}],[\"客户端需创建一个定时任务作为\",{\"1\":{\"214\":1}}],[\"客户端将自己全局唯一的\",{\"1\":{\"214\":1}}],[\"客户端将收到通知\",{\"1\":{\"214\":1}}],[\"客户端分别为自己的\",{\"1\":{\"214\":1}}],[\"客户端连接\",{\"1\":{\"214\":1}}],[\"客户端可以判断自己是否获得锁\",{\"1\":{\"214\":1}}],[\"客户端对于\",{\"1\":{\"161\":1}}],[\"客户端是否有创建权限等\",{\"1\":{\"14\":1}}],[\"客户端通过调用这个实例的create\",{\"1\":{\"14\":1}}],[\"客户端通过调用这个实例的open\",{\"1\":{\"14\":1}}],[\"客户端直接和datanode交互读取数据\",{\"1\":{\"14\":1}}],[\"客户端与namenode得到文件的块及位置信息列表\",{\"1\":{\"14\":1}}],[\"客户端还会根据网络拓扑来确定它与每一个datanode的位置信息\",{\"1\":{\"14\":1}}],[\"却不能永远使用下去呢\",{\"1\":{\"898\":1}}],[\"却并不知道是哪几个i\",{\"1\":{\"800\":1}}],[\"健壮性\",{\"1\":{\"898\":1}}],[\"健康检查通用配置\",{\"1\":{\"414\":1}}],[\"品头论足\",{\"1\":{\"898\":1}}],[\"失效范围内的验证码用md5算法加密\",{\"1\":{\"897\":1}}],[\"失败\",{\"1\":{\"891\":1}}],[\"失败了多少\",{\"1\":{\"581\":1}}],[\"攻击者利用网络监听或者其他方式盗取认证凭据\",{\"1\":{\"897\":1}}],[\"破坏认证的正确性\",{\"1\":{\"897\":1}}],[\"校验备份集\",{\"1\":{\"894\":1}}],[\"校验和以隐藏文件的形式被单独存放在hdfs中\",{\"1\":{\"14\":1}}],[\"制造测试数据\",{\"1\":{\"893\":1}}],[\"制定压缩的类型\",{\"1\":{\"317\":1}}],[\"演示普通表空间的还原于恢复\",{\"1\":{\"893\":1}}],[\"脱机备份\",{\"1\":{\"892\":1}}],[\"脱机备份与还原数据库\",{\"0\":{\"892\":1}}],[\"辅助进程\",{\"1\":{\"890\":1}}],[\"盘损坏\",{\"1\":{\"890\":1}}],[\"累计增量备份的基备份集只能是全量备份\",{\"1\":{\"889\":1}}],[\"累计年化担保贷款本金×80\",{\"1\":{\"189\":1}}],[\"差异增量备份的基础备份集可以是全量备份\",{\"1\":{\"889\":1}}],[\"差集\",{\"1\":{\"133\":1}}],[\"冷备\",{\"1\":{\"889\":2,\"892\":1}}],[\"冷门字段分别放一个表\",{\"1\":{\"129\":1}}],[\"热备\",{\"1\":{\"889\":2}}],[\"热点点赞\",{\"1\":{\"428\":1}}],[\"义\",{\"1\":{\"887\":1}}],[\"式\",{\"1\":{\"887\":1}}],[\"户\",{\"1\":{\"887\":1}}],[\"予\",{\"1\":{\"887\":1}}],[\"授\",{\"1\":{\"887\":1}}],[\"默\",{\"1\":{\"887\":1}}],[\"默认赋给\",{\"1\":{\"888\":3}}],[\"默认预定义\",{\"1\":{\"864\":1}}],[\"默认以字节为单位\",{\"1\":{\"836\":1}}],[\"默认容量integer\",{\"1\":{\"771\":1}}],[\"默认策略是abortpblicy\",{\"1\":{\"761\":1}}],[\"默认会使用偏向锁\",{\"1\":{\"723\":1}}],[\"默认会给容器指定和分配各种子系统\",{\"1\":{\"250\":1}}],[\"默认该参数就是开启的\",{\"1\":{\"722\":1}}],[\"默认采用\",{\"1\":{\"610\":1}}],[\"默认jar\",{\"0\":{\"590\":1}}],[\"默认无法满足maven运行的需要\",{\"1\":{\"574\":1}}],[\"默认情况下\",{\"1\":{\"572\":1,\"580\":1,\"868\":1}}],[\"默认情况下每个分片会每秒自动刷新一次\",{\"1\":{\"4\":1}}],[\"默认每天只更新一次\",{\"1\":{\"566\":1}}],[\"默认方法就是一个在接口里面有了一个实现的方法\",{\"1\":{\"527\":1}}],[\"默认方法\",{\"1\":{\"527\":2}}],[\"默认工作在\",{\"1\":{\"520\":1,\"521\":1}}],[\"默认提供的线程池对象\",{\"1\":{\"472\":1}}],[\"默认端点\",{\"1\":{\"418\":1}}],[\"默认是差异增量备份\",{\"1\":{\"889\":1}}],[\"默认是500\",{\"1\":{\"564\":1}}],[\"默认是3s\",{\"1\":{\"564\":1}}],[\"默认是never\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"412\":2,\"414\":2}}],[\"默认是info\",{\"1\":{\"404\":1,\"408\":1,\"409\":1}}],[\"默认线程隔离\",{\"1\":{\"402\":1}}],[\"默认5s\",{\"1\":{\"402\":1}}],[\"默认值为\",{\"1\":{\"564\":1}}],[\"默认值是true\",{\"1\":{\"435\":1,\"564\":1}}],[\"默认值是50秒\",{\"1\":{\"74\":1}}],[\"默认值\",{\"1\":{\"401\":1,\"435\":1,\"837\":1}}],[\"默认未开启\",{\"1\":{\"396\":1,\"404\":1,\"416\":1}}],[\"默认路径的密码\",{\"0\":{\"322\":1}}],[\"默认访问端口号为\",{\"1\":{\"317\":1}}],[\"默认镜像地址无法访问\",{\"1\":{\"295\":1}}],[\"默认token有效期为24小时\",{\"1\":{\"294\":1}}],[\"默认tcp\",{\"1\":{\"263\":1}}],[\"默认10000\",{\"1\":{\"402\":1}}],[\"默认10s\",{\"1\":{\"402\":1}}],[\"默认10秒一次\",{\"1\":{\"263\":1}}],[\"默认1秒\",{\"1\":{\"263\":1}}],[\"默认与container相同\",{\"1\":{\"263\":1}}],[\"默认使用\",{\"1\":{\"890\":1}}],[\"默认使用的协议为tcp\",{\"1\":{\"254\":1}}],[\"默认使用myisam\",{\"1\":{\"91\":1}}],[\"默认创建的docker容器会统一通过一对veth虚拟网卡\",{\"1\":{\"250\":1}}],[\"默认分为\",{\"1\":{\"161\":1}}],[\"默认的lock状态为true\",{\"1\":{\"929\":1}}],[\"默认的备份路径\",{\"1\":{\"890\":1}}],[\"默认的预定义用户\",{\"1\":{\"873\":1}}],[\"默认的atomicinteger的value为0\",{\"1\":{\"444\":1}}],[\"默认的\",{\"1\":{\"93\":1}}],[\"默认都加上\",{\"1\":{\"82\":1}}],[\"默认为application\",{\"1\":{\"749\":1}}],[\"默认为空\",{\"1\":{\"563\":1}}],[\"默认为\",{\"1\":{\"549\":1,\"874\":1,\"887\":1}}],[\"默认为true\",{\"1\":{\"402\":1}}],[\"默认为false\",{\"1\":{\"263\":1}}],[\"默认为1s\",{\"1\":{\"214\":1}}],[\"默认为0\",{\"1\":{\"82\":1}}],[\"默认为可重复读\",{\"1\":{\"74\":1}}],[\"默认binlog\",{\"1\":{\"74\":1}}],[\"默认\",{\"0\":{\"877\":1},\"1\":{\"64\":1,\"141\":3,\"146\":2,\"148\":1,\"149\":1,\"155\":3,\"593\":1,\"819\":1,\"858\":1}}],[\"默认账号密码均为minioadmin\",{\"1\":{\"63\":1}}],[\"默认升序asc\",{\"1\":{\"23\":1}}],[\"默认没有开启\",{\"1\":{\"23\":2}}],[\"默认3s\",{\"1\":{\"19\":1}}],[\"默认6h\",{\"1\":{\"14\":1}}],[\"赋予查询对象权限\",{\"1\":{\"887\":1}}],[\"赋予对象权限增加\",{\"1\":{\"888\":1}}],[\"赋予对象权限\",{\"0\":{\"885\":1}}],[\"赋予数据库权限\",{\"0\":{\"884\":1}}],[\"赋值字符串\",{\"1\":{\"388\":2}}],[\"至少包含一个标点符号\",{\"1\":{\"874\":1}}],[\"至少包含一个数字\",{\"1\":{\"874\":1}}],[\"至少包含一个大写字母\",{\"1\":{\"874\":1}}],[\"隐含参数\",{\"1\":{\"874\":1}}],[\"隐式加载指的是程序在使用\",{\"1\":{\"563\":1}}],[\"隐式加载指的是程序在使用new等方式创建对象时\",{\"1\":{\"558\":1}}],[\"隐式使用较大的类型\",{\"1\":{\"25\":1}}],[\"归档备份\",{\"1\":{\"889\":1,\"894\":1}}],[\"归档达\",{\"1\":{\"872\":1}}],[\"归档文件的删除\",{\"0\":{\"872\":1}}],[\"归档开启\",{\"1\":{\"869\":1}}],[\"归档的目的是使数据库故障时可以恢复到故障的前一刻\",{\"1\":{\"868\":1}}],[\"归档是对\",{\"1\":{\"868\":1}}],[\"归档管理\",{\"0\":{\"868\":1}}],[\"归档日志文件的切换和删除\",{\"0\":{\"871\":1}}],[\"归档日志文件\",{\"1\":{\"853\":1}}],[\"倍\",{\"1\":{\"866\":1}}],[\"扩大\",{\"1\":{\"864\":1}}],[\"扩展\",{\"1\":{\"620\":1}}],[\"扩展类加载器\",{\"1\":{\"558\":1}}],[\"扩展容量和性能的同时\",{\"1\":{\"161\":1}}],[\"扩展名分别是\",{\"1\":{\"91\":1}}],[\"遇到查询记录过旧的错误\",{\"1\":{\"864\":1}}],[\"件中\",{\"1\":{\"860\":1}}],[\"区和排序区以会话池或虚拟池的方式申请\",{\"1\":{\"863\":1}}],[\"区\",{\"1\":{\"855\":2,\"863\":1}}],[\"区等\",{\"1\":{\"855\":1}}],[\"区别就是自己颁发的证书需要客户端验证通过\",{\"1\":{\"522\":1}}],[\"区别\",{\"0\":{\"109\":1},\"1\":{\"317\":1}}],[\"审计配置\",{\"1\":{\"853\":1}}],[\"审批项目\",{\"1\":{\"189\":1}}],[\"守护配置\",{\"1\":{\"853\":1}}],[\"守护程序启动\",{\"1\":{\"282\":1}}],[\"簇\",{\"1\":{\"853\":1,\"864\":1}}],[\"簇大小\",{\"1\":{\"836\":1}}],[\"控制文件\",{\"1\":{\"853\":2}}],[\"控制文件路径\",{\"1\":{\"837\":1}}],[\"控制台工具是一个脱机工具\",{\"1\":{\"847\":1}}],[\"控制台工具\",{\"0\":{\"847\":1}}],[\"界面上的按钮永远不会因为按动次数太多而发生接触不良\",{\"1\":{\"898\":1}}],[\"界面输入\",{\"1\":{\"845\":1}}],[\"界面提示使用\",{\"1\":{\"834\":1,\"835\":1,\"836\":1,\"838\":1}}],[\"据\",{\"1\":{\"887\":1}}],[\"据库服务\",{\"1\":{\"837\":1}}],[\"据列值的头指针\",{\"1\":{\"97\":1}}],[\"→\",{\"1\":{\"834\":1,\"836\":1,\"838\":2}}],[\"储空间大于\",{\"1\":{\"834\":1}}],[\"储引擎之一\",{\"1\":{\"93\":1}}],[\"桌面\",{\"1\":{\"834\":4,\"835\":1}}],[\"达梦中密码带有特殊字符需要双引号括起来\",{\"1\":{\"883\":1}}],[\"达梦中\",{\"1\":{\"836\":1}}],[\"达梦数据库运行在非归档模式下\",{\"1\":{\"868\":1}}],[\"达梦数据库\",{\"0\":{\"830\":1}}],[\"达到了获取锁和释放锁的目的\",{\"1\":{\"723\":1}}],[\"升级为轻量级锁\",{\"1\":{\"829\":1}}],[\"升级为轻量级锁的过程\",{\"1\":{\"827\":1}}],[\"唤醒\",{\"1\":{\"926\":1}}],[\"唤醒等待的工作线程\",{\"1\":{\"863\":1}}],[\"唤醒当前线程\",{\"1\":{\"828\":1}}],[\"唤醒消费者\",{\"1\":{\"472\":2}}],[\"遍历线程栈\",{\"1\":{\"828\":1}}],[\"遍历所有fd\",{\"1\":{\"799\":1}}],[\"笔者其他常见的设计模式\",{\"1\":{\"825\":1}}],[\"笔记\",{\"1\":{\"789\":1}}],[\"责任链的实践\",{\"1\":{\"825\":1}}],[\"责任链模式并不指定责任链的拓扑结构\",{\"1\":{\"825\":1}}],[\"责任链模式的长处\",{\"1\":{\"825\":1}}],[\"责任链模式\",{\"0\":{\"825\":1}}],[\"灵活性\",{\"1\":{\"825\":1,\"898\":1}}],[\"灵活度高\",{\"1\":{\"206\":1}}],[\"光看概念不好理解\",{\"1\":{\"825\":1}}],[\"喝酒\",{\"1\":{\"825\":1}}],[\"猜谜\",{\"1\":{\"825\":1}}],[\"花费太多时间去探究彼此的private成分\",{\"1\":{\"923\":1}}],[\"花代表请求\",{\"1\":{\"825\":1}}],[\"花束就开始依次传递\",{\"1\":{\"825\":1}}],[\"花由一个人的手里传\",{\"1\":{\"825\":1}}],[\"花落知多少\",{\"1\":{\"541\":1}}],[\"鼓声一落\",{\"1\":{\"825\":1}}],[\"鼓响时\",{\"1\":{\"825\":1}}],[\"鼓励有条件的省级再担保机构进一步提高分担风险责任比例\",{\"1\":{\"189\":1}}],[\"鼓励中小企业依法合规通过政府采购合同融资\",{\"1\":{\"188\":1}}],[\"鼓励各地区\",{\"1\":{\"188\":1}}],[\"鼓励担保公司更加积极地服务于这些领域\",{\"1\":{\"167\":1}}],[\"鼓励整个行业朝着更高效\",{\"1\":{\"166\":1}}],[\"仔细分析一下上述就可以看出\",{\"1\":{\"815\":1}}],[\"型变量的写操作拆分为两个\",{\"1\":{\"809\":1}}],[\"型变量的写具有原子性\",{\"1\":{\"809\":1}}],[\"型变量的读\",{\"1\":{\"809\":1}}],[\"型和\",{\"1\":{\"809\":1}}],[\"逸出\",{\"1\":{\"809\":1}}],[\"临界区内的代码可以重排序\",{\"1\":{\"809\":1}}],[\"临时变量只在自己所属的函数中有效\",{\"1\":{\"904\":1}}],[\"临时结果集等\",{\"1\":{\"864\":1}}],[\"临时表空间的空间限制\",{\"1\":{\"865\":1}}],[\"临时表空间路径\",{\"1\":{\"865\":1}}],[\"临时表空间初始大小\",{\"1\":{\"865\":1}}],[\"临时表空间\",{\"1\":{\"864\":1}}],[\"临时存储reduce端产生的结果\",{\"1\":{\"652\":1}}],[\"临时创建\",{\"1\":{\"626\":1}}],[\"临时\",{\"1\":{\"288\":3}}],[\"临时性顺序节点\",{\"1\":{\"214\":1}}],[\"临时性节点4\",{\"1\":{\"214\":1}}],[\"临时目录\",{\"1\":{\"74\":1}}],[\"综上\",{\"1\":{\"809\":1}}],[\"综合起来\",{\"1\":{\"166\":1}}],[\"综合而言\",{\"1\":{\"140\":1}}],[\"局部变量\",{\"1\":{\"809\":1}}],[\"找出代码的逻辑泥团并运用extract\",{\"0\":{\"900\":1}}],[\"找出能读出数据\",{\"1\":{\"800\":1}}],[\"找到执行计划\",{\"1\":{\"863\":1}}],[\"找到并打开数据文件和联机日志\",{\"1\":{\"843\":1}}],[\"找到并运行对应的\",{\"1\":{\"709\":1}}],[\"找到控制文件\",{\"1\":{\"843\":1}}],[\"找到daemonize\",{\"1\":{\"352\":1}}],[\"找到bind配置\",{\"1\":{\"352\":1}}],[\"找到\",{\"1\":{\"343\":1}}],[\"找到cdn缓存服务器以后\",{\"1\":{\"222\":1}}],[\"挂到设备的等待队列中\",{\"1\":{\"799\":1}}],[\"挂载到\",{\"1\":{\"372\":2}}],[\"挂载到容器内部的存储卷配置\",{\"1\":{\"263\":1}}],[\"挂载从库nfs共享目录\",{\"1\":{\"367\":1}}],[\"挂载预定义的configmap对象到容器内部\",{\"1\":{\"263\":1}}],[\"挂载集群与定义的secre对象到容器内部\",{\"1\":{\"263\":1}}],[\"挂载\",{\"0\":{\"259\":1,\"372\":1,\"833\":1}}],[\"什么时候不重构\",{\"0\":{\"908\":1}}],[\"什么时候重构\",{\"0\":{\"907\":1}}],[\"什么事情也没有干\",{\"1\":{\"791\":1}}],[\"什么是网络地址\",{\"1\":{\"526\":1}}],[\"什么是间接融资\",{\"0\":{\"171\":1}}],[\"什么是索引覆盖\",{\"0\":{\"104\":1},\"1\":{\"104\":1}}],[\"饭店吃饭的例子\",{\"0\":{\"791\":1}}],[\"理想的情况则是\",{\"1\":{\"928\":1}}],[\"理解和使用该系统的容易程度\",{\"1\":{\"898\":1}}],[\"理解io阻塞与非阻塞\",{\"0\":{\"790\":1}}],[\"理论上是可以重构消息链上的任何一个对象\",{\"1\":{\"921\":1}}],[\"理论上\",{\"1\":{\"818\":1}}],[\"理论基础\",{\"1\":{\"684\":1}}],[\"理论是有时间期限的\",{\"1\":{\"190\":1}}],[\"企业制定决策\",{\"1\":{\"785\":1}}],[\"了解用户对哪些业务感兴趣\",{\"1\":{\"784\":1}}],[\"吞吐量还是非公平优于公平\",{\"1\":{\"819\":1}}],[\"吞吐量\",{\"0\":{\"782\":1}}],[\"股票交易系统\",{\"1\":{\"781\":1}}],[\"批处理任务\",{\"1\":{\"781\":1}}],[\"批量再担保合同\",{\"1\":{\"189\":1}}],[\"批量担保产品\",{\"1\":{\"189\":1}}],[\"批量担保\",{\"1\":{\"189\":1}}],[\"批量担保业务合同\",{\"1\":{\"189\":1}}],[\"批量担保业务合作意向函\",{\"1\":{\"189\":1}}],[\"批量担保业务合作\",{\"1\":{\"189\":1}}],[\"批量担保业务\",{\"0\":{\"189\":1}}],[\"充值等\",{\"1\":{\"780\":1}}],[\"充分发挥增信分险作用\",{\"1\":{\"165\":1}}],[\"充分发挥热门数据的操作效率\",{\"1\":{\"129\":1}}],[\"玩家每天游戏的各种操作\",{\"1\":{\"780\":1}}],[\"迭代必须包含对中断信号的响应\",{\"1\":{\"768\":1}}],[\"绝对不可合并在exception或throwable里处理\",{\"1\":{\"765\":1}}],[\"饱和策略也叫拒绝策略\",{\"1\":{\"761\":1}}],[\"纳秒\",{\"1\":{\"758\":1}}],[\"天之前的归档文件\",{\"1\":{\"872\":1}}],[\"天\",{\"1\":{\"758\":1}}],[\"天然支持范围\",{\"1\":{\"102\":1}}],[\"否\",{\"1\":{\"753\":3,\"769\":2}}],[\"否则报错\",{\"1\":{\"888\":1}}],[\"否则获取成功利用cas更新同步状态\",{\"1\":{\"822\":1}}],[\"否则执行下面的步骤2\",{\"1\":{\"773\":1}}],[\"否则认为是过期数据\",{\"1\":{\"730\":1}}],[\"否则打包出来的文件会找不到\",{\"1\":{\"707\":1,\"715\":1}}],[\"否则最先被程序读入的空字符将被误认为是字符串结尾\",{\"1\":{\"623\":1}}],[\"否则就部署到发布版本仓库地址\",{\"1\":{\"604\":1}}],[\"否则返回默认值\",{\"1\":{\"527\":1}}],[\"否则返回0\",{\"1\":{\"135\":1}}],[\"否则\",{\"1\":{\"442\":1,\"549\":3,\"723\":1,\"725\":1,\"773\":1,\"820\":1,\"897\":1}}],[\"否则一直是待命状态\",{\"1\":{\"432\":1}}],[\"否则会被强制删干净\",{\"1\":{\"500\":1}}],[\"否则会触发异常\",{\"1\":{\"402\":1}}],[\"否则会找不到文件\",{\"1\":{\"317\":1}}],[\"否则有报错\",{\"1\":{\"287\":1}}],[\"否则下载镜像\",{\"1\":{\"263\":1}}],[\"否则监听列表中前一个\",{\"1\":{\"214\":1}}],[\"否则使用不到索引\",{\"1\":{\"82\":1}}],[\"否则直接放到内存中\",{\"1\":{\"45\":1}}],[\"否则随着客户端的增加\",{\"1\":{\"14\":1}}],[\"几乎所有需要异步或者并发执行任务的程序都可以使用线程池\",{\"1\":{\"752\":1}}],[\"池化技术\",{\"0\":{\"751\":1}}],[\"池化之线程池\",{\"0\":{\"750\":1},\"1\":{\"683\":1}}],[\"椭圆曲线数字签名算法\",{\"0\":{\"737\":1},\"1\":{\"736\":1}}],[\"求最大最小等sql几乎操作都可以\",{\"1\":{\"735\":1}}],[\"何谓数据版本\",{\"1\":{\"730\":1}}],[\"购买失败\",{\"1\":{\"728\":1}}],[\"购买承租人指定的租赁物\",{\"1\":{\"187\":1}}],[\"立即返回\",{\"1\":{\"727\":1}}],[\"屏蔽一切可能违反数据完整性的操作\",{\"1\":{\"725\":1}}],[\"屏障才会开门\",{\"1\":{\"552\":1}}],[\"乐观锁机制往往基于系统中的数据存储逻辑\",{\"1\":{\"731\":1}}],[\"乐观锁大多都基于数据版本\",{\"1\":{\"730\":1}}],[\"乐观锁不能解决脏读问题\",{\"1\":{\"730\":1}}],[\"乐观锁\",{\"0\":{\"724\":1,\"729\":1,\"730\":1}}],[\"乐观锁插件\",{\"1\":{\"64\":2}}],[\"悲观锁的实现\",{\"1\":{\"725\":1}}],[\"悲观锁\",{\"0\":{\"724\":1,\"725\":1}}],[\"刚开始学编程的时候\",{\"1\":{\"910\":1}}],[\"刚才提到\",{\"1\":{\"723\":1}}],[\"刚好有另外一个用户也在下单\",{\"1\":{\"219\":1}}],[\"入参\",{\"1\":{\"722\":1}}],[\"堆内存在线程之间共享\",{\"1\":{\"809\":1}}],[\"堆栈元素\",{\"1\":{\"722\":1}}],[\"堆大小\",{\"1\":{\"557\":1}}],[\"普通片\",{\"1\":{\"898\":1}}],[\"普通对象数组的每个元素指针\",{\"1\":{\"722\":1}}],[\"普通索引\",{\"1\":{\"101\":1}}],[\"起到节约内存占用的新参数\",{\"1\":{\"722\":1}}],[\"拦截任意方法\",{\"1\":{\"717\":1}}],[\"拦截未知的运行时异常\",{\"1\":{\"419\":1}}],[\"怎么运行它呢\",{\"1\":{\"710\":1}}],[\"怎么获取下标\",{\"1\":{\"458\":1}}],[\"连同本身的数字证书\",{\"1\":{\"705\":1}}],[\"连接等\",{\"1\":{\"863\":1}}],[\"连接较多\",{\"1\":{\"855\":1}}],[\"连接数据库\",{\"0\":{\"839\":1}}],[\"连接数超过最大会出现错误\",{\"1\":{\"683\":1}}],[\"连接6个子网\",{\"1\":{\"526\":1}}],[\"连接池概念\",{\"1\":{\"683\":1}}],[\"连接池\",{\"1\":{\"518\":2}}],[\"连接超时时间\",{\"1\":{\"305\":1}}],[\"连接配置中心失败\",{\"1\":{\"297\":1}}],[\"连接到一个虚拟网桥交换机docker0上\",{\"1\":{\"250\":1}}],[\"连接中断或\",{\"1\":{\"155\":1}}],[\"连接首次建立\",{\"1\":{\"154\":1}}],[\"连接\",{\"1\":{\"154\":1,\"818\":1,\"855\":1,\"891\":1}}],[\"连接在一起\",{\"1\":{\"125\":1}}],[\"连接键\",{\"1\":{\"23\":1}}],[\"连接对象启动一个\",{\"1\":{\"23\":1}}],[\"她想到了一个办法\",{\"1\":{\"705\":1}}],[\"她写完后用鲍勃的公钥加密\",{\"1\":{\"705\":1}}],[\"她负责启动应用的container\",{\"1\":{\"656\":1}}],[\"苏珊感觉不对劲\",{\"1\":{\"705\":1}}],[\"苏珊实际拥有的是道格的公钥\",{\"1\":{\"705\":1}}],[\"苏珊再对信件本身使用hash函数\",{\"1\":{\"705\":1}}],[\"苏珊收信后\",{\"1\":{\"705\":2}}],[\"苏珊要给鲍勃写一封保密的信\",{\"1\":{\"705\":1}}],[\"苏珊\",{\"1\":{\"705\":1}}],[\"道格就可以冒充鲍勃\",{\"1\":{\"705\":1}}],[\"道格想欺骗苏珊\",{\"1\":{\"705\":1}}],[\"道格\",{\"1\":{\"705\":1}}],[\"帕蒂\",{\"1\":{\"705\":1}}],[\"鲍勃拿到数字证书以后\",{\"1\":{\"705\":1}}],[\"鲍勃将这个签名\",{\"1\":{\"705\":1}}],[\"鲍勃使用私钥\",{\"1\":{\"705\":1}}],[\"鲍勃给苏珊回信\",{\"1\":{\"705\":1}}],[\"鲍勃收信后\",{\"1\":{\"705\":1}}],[\"鲍勃把公钥送给他的朋友们\",{\"1\":{\"705\":1}}],[\"鲍勃有两把钥匙\",{\"1\":{\"705\":1}}],[\"孤立\",{\"1\":{\"704\":1}}],[\"诊断和改正在运行现场发现的错误所需要的工作量的大小\",{\"1\":{\"898\":1}}],[\"诊断\",{\"1\":{\"704\":1}}],[\"背靠背测试等\",{\"1\":{\"704\":1}}],[\"避开这个异常通常是最明智的策略\",{\"1\":{\"766\":1}}],[\"避错系统对元器件的制造工艺\",{\"1\":{\"704\":1}}],[\"避错技术试图构造一个不包含故障的完美系统\",{\"1\":{\"704\":1}}],[\"避错技术和容错技术\",{\"1\":{\"704\":1}}],[\"避免磁\",{\"1\":{\"890\":1}}],[\"避免数据倾斜\",{\"1\":{\"789\":1}}],[\"避免了多处理器系统上\",{\"1\":{\"929\":1}}],[\"避免了长事务中的数据库加锁开销\",{\"1\":{\"731\":1}}],[\"避免了用户态到内核态的切换\",{\"1\":{\"723\":1}}],[\"避免了缩短字符串时所需的内存重分配操作\",{\"1\":{\"622\":1}}],[\"避免技术\",{\"1\":{\"704\":1}}],[\"避免进入内核态的线程阻塞\",{\"1\":{\"703\":1}}],[\"避免某些情况需要考虑线程安全必须同步带来的性能损失\",{\"1\":{\"650\":1}}],[\"避免单个文件过大\",{\"1\":{\"433\":1}}],[\"避免直接抛出newruntimeexception\",{\"1\":{\"413\":1}}],[\"避免空指针\",{\"1\":{\"413\":1}}],[\"避免死锁\",{\"1\":{\"214\":1}}],[\"避免每次都去请求数据库导致连接数和线程数过大\",{\"1\":{\"211\":1}}],[\"避免io争抢并减少锁表的几率\",{\"1\":{\"132\":1}}],[\"避免出现重复数据和数据丢失\",{\"1\":{\"564\":1}}],[\"避免出现重复的代码\",{\"1\":{\"413\":1}}],[\"避免出现\",{\"1\":{\"82\":1}}],[\"避免出现堵塞\",{\"1\":{\"82\":1}}],[\"避免使用\",{\"1\":{\"82\":1}}],[\"避免存容器中丢失数据\",{\"1\":{\"63\":1}}],[\"人\",{\"1\":{\"923\":1}}],[\"人们可能会过度使用委托\",{\"1\":{\"922\":1}}],[\"人们通过长期的研究总结出了两种技术\",{\"1\":{\"704\":1}}],[\"人力资源的员工表\",{\"1\":{\"25\":1}}],[\"轻量级锁依赖cas操作\",{\"1\":{\"723\":1}}],[\"轻量级锁\",{\"0\":{\"826\":1,\"827\":1},\"1\":{\"703\":1,\"723\":1}}],[\"外层函数获得锁之后\",{\"1\":{\"702\":1}}],[\"外网ip地址\",{\"1\":{\"343\":1}}],[\"沈昌祥院士提到可信云的基础架构\",{\"1\":{\"695\":1}}],[\"沈昌祥院士在可信3\",{\"1\":{\"688\":1}}],[\"宿主软件系统\",{\"1\":{\"690\":1}}],[\"宿主机端口\",{\"1\":{\"260\":1}}],[\"宿主机端口映射容器端口\",{\"1\":{\"241\":1}}],[\"纯的责任链很难找到\",{\"1\":{\"825\":1}}],[\"纯软件实现的安全机制极易被攻击\",{\"1\":{\"686\":1}}],[\"纯调度器\",{\"1\":{\"654\":1}}],[\"待研究领域\",{\"1\":{\"684\":1}}],[\"待发送短信的订单已纳入处理队列\",{\"1\":{\"437\":1}}],[\"损失的可能性就越大\",{\"1\":{\"684\":1}}],[\"群体对群体\",{\"1\":{\"684\":1}}],[\"群体对个体\",{\"1\":{\"684\":1}}],[\"滥用单例会出现一些负面问题\",{\"1\":{\"683\":1}}],[\"哭哭\",{\"1\":{\"683\":1}}],[\"深入学习\",{\"1\":{\"683\":1}}],[\"深拷贝就是对对象中存在的动态成员或指针重新开辟内存空间\",{\"1\":{\"558\":1}}],[\"深拷贝和浅拷贝\",{\"1\":{\"558\":1}}],[\"谈一下混合的好处\",{\"1\":{\"682\":1}}],[\"速度快\",{\"0\":{\"682\":1}}],[\"速度可以相对较慢的\",{\"1\":{\"645\":1}}],[\"附在信件下面\",{\"1\":{\"705\":1}}],[\"附在\",{\"1\":{\"679\":1}}],[\"附加说明\",{\"1\":{\"158\":1}}],[\"密钥是对称加密的说法\",{\"1\":{\"682\":2}}],[\"密文变成\",{\"1\":{\"675\":1}}],[\"密文变成明文的转换函数\",{\"1\":{\"675\":1}}],[\"密文\",{\"1\":{\"675\":2}}],[\"密码带有特殊字符的登录处理\",{\"1\":{\"883\":1}}],[\"密码技术\",{\"1\":{\"684\":1}}],[\"密码等支付信息\",{\"1\":{\"520\":1}}],[\"密码\",{\"1\":{\"63\":1,\"155\":1,\"831\":2,\"897\":1}}],[\"概念\",{\"1\":{\"674\":1}}],[\"偏向锁的开关是默认开启的\",{\"1\":{\"673\":1}}],[\"偏向锁的标志位是\",{\"1\":{\"673\":1}}],[\"偏向锁是针对于一个线程而言的\",{\"1\":{\"673\":1}}],[\"偏向锁标记位等等\",{\"1\":{\"672\":1}}],[\"偏向锁\",{\"0\":{\"670\":1},\"1\":{\"723\":1}}],[\"独立访问量\",{\"1\":{\"783\":1}}],[\"独享\",{\"1\":{\"664\":1}}],[\"独占锁是一种悲观锁\",{\"1\":{\"727\":1}}],[\"独占\",{\"1\":{\"663\":1,\"702\":1}}],[\"独占内存\",{\"1\":{\"232\":1}}],[\"变成了串行程序\",{\"1\":{\"663\":1}}],[\"变量不合法\",{\"1\":{\"920\":1}}],[\"变量值为步骤\",{\"1\":{\"834\":1}}],[\"变量值\",{\"1\":{\"834\":1}}],[\"变量名称是代码清晰的关键\",{\"1\":{\"901\":1}}],[\"变量名\",{\"1\":{\"723\":1}}],[\"变量后\",{\"1\":{\"650\":1}}],[\"变量\",{\"1\":{\"549\":1,\"834\":1}}],[\"脏数据\",{\"1\":{\"663\":1}}],[\"脏读\",{\"0\":{\"72\":1},\"1\":{\"72\":1,\"106\":1}}],[\"换句话说\",{\"1\":{\"662\":1}}],[\"换行操作\",{\"1\":{\"539\":1,\"541\":1}}],[\"现代处理器采用了指令级并行技术\",{\"1\":{\"809\":1}}],[\"现代jdk中还提供了三种不同的monitor实现\",{\"1\":{\"723\":1}}],[\"现代jdk中做了大量的优化\",{\"1\":{\"723\":1}}],[\"现代cpu在cpu裸片上有专用空间用于l3缓存\",{\"1\":{\"662\":1}}],[\"现在我们可以得出另外一个结论同步状态的高16位用来表示读锁被获取的次数\",{\"1\":{\"820\":1}}],[\"现在就可以得出来一个结论同步状态的低16位用来表示写锁的获取次数\",{\"1\":{\"820\":1}}],[\"现在情况已经有所变化\",{\"1\":{\"549\":1}}],[\"现在预习一下java8新特性应该还来得及\",{\"1\":{\"527\":1}}],[\"现在的问题是\",{\"1\":{\"475\":1}}],[\"现在生产者\",{\"1\":{\"458\":1}}],[\"现在生产者想要写入\",{\"1\":{\"454\":1}}],[\"现在消费者\",{\"1\":{\"456\":1}}],[\"现在只需要简单的说\",{\"1\":{\"453\":1}}],[\"现在呢\",{\"1\":{\"453\":1}}],[\"现在可以了么\",{\"1\":{\"453\":1}}],[\"现在序号12到了\",{\"1\":{\"452\":1}}],[\"现在\",{\"1\":{\"432\":1,\"458\":1,\"549\":1}}],[\"现在将会创建好可以反映分区结构的子目录\",{\"1\":{\"21\":1}}],[\"英特尔甚至尝试使用l4缓存\",{\"1\":{\"662\":1}}],[\"英特尔和amd已经在缓存设计方面做了大量实验\",{\"1\":{\"662\":1}}],[\"英文输入法状态下\",{\"1\":{\"874\":1}}],[\"英文叫stage\",{\"1\":{\"490\":1}}],[\"英文commercial\",{\"1\":{\"186\":1}}],[\"早期\",{\"1\":{\"662\":1}}],[\"早起浏览器可能不支持gzip自解压\",{\"1\":{\"317\":1}}],[\"彼此之间知道对方存在\",{\"1\":{\"660\":1}}],[\"彼此之间不需要知道对方的存在\",{\"1\":{\"659\":1}}],[\"互运行性\",{\"1\":{\"898\":1}}],[\"互斥是通过竞争对资源的独占使用\",{\"1\":{\"659\":1}}],[\"互斥\",{\"0\":{\"659\":1},\"1\":{\"659\":2,\"664\":1}}],[\"互斥锁\",{\"0\":{\"658\":1}}],[\"互联网行业\",{\"0\":{\"608\":1}}],[\"跟踪日志文件等\",{\"1\":{\"853\":1}}],[\"跟据网上的答案大致有这两种解决方法\",{\"1\":{\"651\":1}}],[\"跟唯一标志对应的随机值\",{\"1\":{\"213\":1}}],[\"观察amountfor时\",{\"1\":{\"902\":1}}],[\"观察者模式\",{\"1\":{\"825\":1}}],[\"观察响应时间和内存使用情况\",{\"1\":{\"651\":1}}],[\"观察日志\",{\"0\":{\"245\":1}}],[\"毫秒milliseconds\",{\"1\":{\"758\":1}}],[\"毫秒\",{\"1\":{\"651\":1,\"838\":2,\"841\":4,\"843\":12,\"869\":5,\"883\":1,\"884\":1,\"885\":1,\"887\":3,\"893\":7}}],[\"毫秒内的计数\",{\"1\":{\"205\":1}}],[\"手写一个简单autowired\",{\"0\":{\"733\":1}}],[\"手撕面试题threadlocal\",{\"1\":{\"650\":1}}],[\"手动参数\",{\"1\":{\"854\":1}}],[\"手动设置maxpermsize大小修\",{\"1\":{\"651\":1}}],[\"手动设置heap\",{\"1\":{\"651\":2}}],[\"手动删除子模块残留的目录\",{\"1\":{\"502\":1}}],[\"手动或使用以下命令下载并保存\",{\"1\":{\"56\":1}}],[\"手动刷新很有用\",{\"1\":{\"4\":1}}],[\"匠心零度\",{\"1\":{\"650\":1}}],[\"学习资源来自于\",{\"1\":{\"650\":1}}],[\"学生学号\",{\"1\":{\"13\":1}}],[\"虚引用\",{\"1\":{\"650\":1}}],[\"虚拟内存池\",{\"1\":{\"855\":1}}],[\"虚拟机栈中引用的对象\",{\"1\":{\"558\":1}}],[\"虚拟机栈为虚拟机执行的\",{\"1\":{\"556\":1}}],[\"虚拟机需要数分钟启动\",{\"1\":{\"232\":1}}],[\"虚拟机需要单独分配\",{\"1\":{\"232\":1}}],[\"虚拟ip绑定在redis\",{\"1\":{\"367\":1}}],[\"虚拟ip已转移\",{\"1\":{\"367\":1}}],[\"虚拟ip自动漂移到redis\",{\"1\":{\"367\":1}}],[\"虚拟ip\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"虚拟网络\",{\"1\":{\"262\":1}}],[\"弱引用也是用来描述非必需对象的\",{\"1\":{\"650\":1}}],[\"弱引用\",{\"1\":{\"650\":1}}],[\"软\",{\"1\":{\"911\":1}}],[\"软引用\",{\"1\":{\"650\":1}}],[\"软件的构架对新的需求渐渐的失去支持能力\",{\"1\":{\"898\":1}}],[\"软件的架构就千疮百孔了\",{\"1\":{\"898\":1}}],[\"软件的动态可信性度量理论与模型\",{\"1\":{\"684\":1}}],[\"软件产品最初制造出来\",{\"1\":{\"898\":1}}],[\"软件要适应需求的变化\",{\"1\":{\"898\":1}}],[\"软件必须相应的改变\",{\"1\":{\"898\":1}}],[\"软件不同与普通的产品\",{\"1\":{\"898\":1}}],[\"软件系统环境转移到另一种配置和环境时\",{\"1\":{\"898\":1}}],[\"软件容错主要是正对软件的鲁棒性特征进行增强\",{\"1\":{\"704\":1}}],[\"软件容错以及系统容错\",{\"1\":{\"704\":1}}],[\"软件容错\",{\"0\":{\"686\":1}}],[\"软件行为学\",{\"1\":{\"684\":1}}],[\"软件理论\",{\"1\":{\"684\":1}}],[\"软件结构\",{\"1\":{\"684\":1}}],[\"软件版本阶段说明\",{\"1\":{\"605\":1}}],[\"软件版本号有四部分组成\",{\"1\":{\"605\":1}}],[\"软件安装及高可用部署\",{\"0\":{\"318\":1,\"343\":1,\"352\":1,\"368\":1}}],[\"强调行为结果的可预测性和可控制性\",{\"1\":{\"684\":1}}],[\"强引用\",{\"1\":{\"650\":1}}],[\"强制去远程更新snapshot的插件或依赖\",{\"1\":{\"566\":1}}],[\"强制转换也会造成精度丢失\",{\"1\":{\"549\":1}}],[\"强制push\",{\"1\":{\"503\":1}}],[\"强制pull\",{\"1\":{\"503\":1}}],[\"强制\",{\"1\":{\"413\":8}}],[\"强制执行终结裁定书\",{\"1\":{\"163\":1}}],[\"掉\",{\"1\":{\"650\":2}}],[\"域里\",{\"1\":{\"648\":1}}],[\"挥手协议\",{\"0\":{\"646\":1}}],[\"误码靠的是tcp的段编号以及确认号\",{\"1\":{\"644\":1}}],[\"丢包\",{\"1\":{\"641\":1}}],[\"丢弃队列里最近的一个任务\",{\"1\":{\"761\":1}}],[\"丢弃服务\",{\"1\":{\"613\":1}}],[\"丢弃当前数据\",{\"1\":{\"155\":2}}],[\"报文头就传递给应用层\",{\"1\":{\"639\":1}}],[\"报送国家融资担保基金\",{\"1\":{\"189\":1}}],[\"想办法将它们合而为一\",{\"1\":{\"909\":1}}],[\"想发数据就可以开始发送了\",{\"1\":{\"639\":1}}],[\"想啥呢\",{\"1\":{\"14\":1}}],[\"族内的协议\",{\"1\":{\"638\":1}}],[\"课本翻译\",{\"1\":{\"635\":1}}],[\"弹性分部数据集\",{\"1\":{\"627\":1}}],[\"麻烦就随之而来了\",{\"1\":{\"626\":1}}],[\"麻省理工学院的seth\",{\"1\":{\"190\":1}}],[\"枚举类\",{\"1\":{\"626\":2}}],[\"枚举字段一般用tinyint类型\",{\"1\":{\"86\":1}}],[\"惰性空间释放用于优化\",{\"1\":{\"622\":1}}],[\"惰性空间释放\",{\"0\":{\"622\":1}}],[\"额外的一字节用于保存空字符\",{\"1\":{\"621\":1}}],[\"额外的一个字符空间用于保存空字符\",{\"1\":{\"620\":1}}],[\"额外分配的未使用空间数量由以下公式决定\",{\"1\":{\"621\":1}}],[\"诸如此类\",{\"1\":{\"620\":1}}],[\"拼接操作完成之后的\",{\"1\":{\"619\":1}}],[\"拼接方法的名称\",{\"1\":{\"523\":1}}],[\"杜绝缓冲区溢出\",{\"0\":{\"619\":1}}],[\"展示的\",{\"1\":{\"618\":1}}],[\"展示了程序计算一个\",{\"1\":{\"618\":1}}],[\"展示了另一个\",{\"1\":{\"616\":1}}],[\"展示了一个\",{\"1\":{\"616\":1}}],[\"展示了一个普通状态下\",{\"1\":{\"126\":1}}],[\"展示了一个大小为\",{\"1\":{\"124\":1}}],[\"遵循按照获取写锁\",{\"1\":{\"824\":1}}],[\"遵循获取写锁\",{\"1\":{\"819\":1}}],[\"遵循空字符结尾这一惯例的好处是\",{\"1\":{\"616\":1}}],[\"遵循\",{\"1\":{\"616\":1}}],[\"遵循ieee\",{\"1\":{\"549\":1}}],[\"逐个字节读取\",{\"1\":{\"613\":1}}],[\"捕获interruptedexception并使用当前线程上的interrupt方法恢复中断状态\",{\"1\":{\"766\":1}}],[\"捕获的异常应该被记录下来并且把关联的channel给关闭掉\",{\"1\":{\"613\":2}}],[\"捕获异常与抛异常\",{\"1\":{\"413\":1}}],[\"捕获异常是为了处理它\",{\"1\":{\"413\":1}}],[\"走完channelread0\",{\"1\":{\"613\":1}}],[\"走相同的vgg16模型建立\",{\"1\":{\"58\":1}}],[\"地图服务器之间可以方便的通过\",{\"1\":{\"609\":1}}],[\"地址\",{\"1\":{\"506\":1}}],[\"地址跳转\",{\"0\":{\"312\":1},\"1\":{\"308\":1}}],[\"账号登录服务器\",{\"1\":{\"609\":1}}],[\"账户变动等情况进行对账\",{\"1\":{\"189\":1}}],[\"游戏行业\",{\"0\":{\"609\":1}}],[\"游览器再发送data\",{\"1\":{\"482\":1}}],[\"游览器先发送header\",{\"1\":{\"482\":1}}],[\"游览器会把http\",{\"1\":{\"482\":1}}],[\"认\",{\"1\":{\"887\":1}}],[\"认为服务器端已经正常关闭连接\",{\"1\":{\"649\":1}}],[\"认使用\",{\"1\":{\"608\":1}}],[\"认证中心\",{\"1\":{\"410\":1}}],[\"阿里分布式服务框架\",{\"1\":{\"608\":1}}],[\"阿里云\",{\"1\":{\"263\":1}}],[\"典型的应用有\",{\"1\":{\"608\":1}}],[\"框架二次封装实现\",{\"1\":{\"610\":1}}],[\"框架\",{\"1\":{\"610\":1}}],[\"框架使用\",{\"1\":{\"608\":2}}],[\"框架必不可少\",{\"1\":{\"608\":1}}],[\"面向对象中的多态概念可为此带来优雅的解决办法\",{\"1\":{\"916\":1}}],[\"面向对象程序的一个较明显特征是\",{\"1\":{\"916\":1}}],[\"面向字节流\",{\"1\":{\"644\":1}}],[\"面向连接\",{\"1\":{\"644\":2}}],[\"面向无连接\",{\"0\":{\"639\":1}}],[\"面向clients端的高并发应用\",{\"1\":{\"607\":1}}],[\"面板选择\",{\"1\":{\"285\":1}}],[\"修补错误时重构\",{\"1\":{\"907\":1}}],[\"修饰的int型变量\",{\"1\":{\"723\":1}}],[\"修饰在实例方法上\",{\"1\":{\"660\":1}}],[\"修饰在静态方法上\",{\"1\":{\"660\":1}}],[\"修正版本号加\",{\"1\":{\"605\":1}}],[\"修正版本号复位为\",{\"1\":{\"605\":1}}],[\"修正时\",{\"1\":{\"605\":1}}],[\"修订版本号\",{\"1\":{\"605\":1}}],[\"修改同一个类\",{\"1\":{\"911\":1}}],[\"修改或改进正在运行的系统需要的工作量的多少\",{\"1\":{\"898\":1}}],[\"修改用户密码\",{\"0\":{\"881\":1}}],[\"修改用户的默认表空间\",{\"0\":{\"880\":1}}],[\"修改系统口令策略\",{\"0\":{\"875\":1}}],[\"修改归档空间上限\",{\"1\":{\"869\":1}}],[\"修改归档的配置\",{\"1\":{\"869\":1}}],[\"修改临时表空间的初始大小\",{\"1\":{\"865\":1}}],[\"修改tmp表空间\",{\"0\":{\"865\":1}}],[\"修改tomcat\",{\"1\":{\"651\":1}}],[\"修改完成后\",{\"1\":{\"863\":1}}],[\"修改完点击更新\",{\"1\":{\"278\":1}}],[\"修改会产生\",{\"1\":{\"863\":1}}],[\"修改后立即生效\",{\"1\":{\"854\":1}}],[\"修改后重启数据库才能生效\",{\"1\":{\"847\":1}}],[\"修改后的配置id是\",{\"1\":{\"297\":2}}],[\"修改数据库参数\",{\"1\":{\"847\":1}}],[\"修改联机日志文件路径等\",{\"1\":{\"843\":1}}],[\"修改服务器权限\",{\"1\":{\"834\":1}}],[\"修改商品\",{\"1\":{\"732\":1}}],[\"修改持保守态度\",{\"1\":{\"725\":1}}],[\"修改pom为\",{\"1\":{\"707\":1}}],[\"修改pod\",{\"0\":{\"278\":1}}],[\"修改\",{\"0\":{\"870\":1},\"1\":{\"651\":1,\"663\":1,\"664\":1,\"863\":1}}],[\"修改成图\",{\"1\":{\"622\":1}}],[\"修改日期的日期等等\",{\"1\":{\"537\":1}}],[\"修改远程仓库\",{\"1\":{\"499\":1}}],[\"修改当前分支为fork\",{\"1\":{\"493\":1}}],[\"修改application\",{\"0\":{\"435\":1}}],[\"修改此处为您的应用程序名称\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"414\":1,\"415\":1,\"416\":1}}],[\"修改为\",{\"1\":{\"355\":1}}],[\"修改为要修改的主机名\",{\"1\":{\"343\":1}}],[\"修改启动文件\",{\"0\":{\"353\":1}}],[\"修改所有服务器的对应的主机名\",{\"1\":{\"343\":1}}],[\"修改从库数据库配置文件\",{\"0\":{\"325\":1}}],[\"修改root账户密码\",{\"1\":{\"322\":1}}],[\"修改如下内容\",{\"1\":{\"321\":1}}],[\"修改文件夹用户归属\",{\"1\":{\"321\":1}}],[\"修改存储属性\",{\"1\":{\"21\":1}}],[\"修改表属性\",{\"1\":{\"21\":1}}],[\"修改默数据库位置\",{\"1\":{\"21\":1}}],[\"仓库的配置\",{\"0\":{\"602\":1},\"1\":{\"601\":1}}],[\"仓库的分类\",{\"0\":{\"601\":1}}],[\"仓库的布局\",{\"0\":{\"600\":1}}],[\"仓库布局的源码\",{\"1\":{\"600\":1}}],[\"仓库\",{\"0\":{\"598\":1}}],[\"像framework定义version\",{\"1\":{\"596\":1}}],[\"像对待普通项\",{\"1\":{\"488\":1}}],[\"像对待表一样对这个查询进行操作\",{\"1\":{\"20\":1}}],[\"便于寻找实际构件\",{\"1\":{\"588\":1}}],[\"便就是广播地址\",{\"1\":{\"526\":1}}],[\"坐标详解\",{\"0\":{\"586\":1}}],[\"坐标和依赖\",{\"0\":{\"585\":1}}],[\"暂且略过\",{\"1\":{\"580\":1}}],[\"暂存区\",{\"1\":{\"490\":1}}],[\"暂存区和版本库\",{\"0\":{\"490\":1}}],[\"离线执行命令\",{\"1\":{\"566\":1}}],[\"撤销部署\",{\"1\":{\"566\":1}}],[\"清理\",{\"1\":{\"569\":1,\"863\":1}}],[\"清理eclipse配置\",{\"1\":{\"566\":1}}],[\"清理maven项目\",{\"1\":{\"566\":1}}],[\"清晰的看到产品迭代\",{\"1\":{\"489\":1}}],[\"清晰的项目管理和责任明确\",{\"1\":{\"489\":1}}],[\"浅拷贝就是对对象中的数据成员进行简单赋值\",{\"1\":{\"558\":1}}],[\"垃圾收集器是否会立即释放对象占用的内存\",{\"1\":{\"558\":1}}],[\"跳舞\",{\"1\":{\"825\":1}}],[\"跳过了多少\",{\"1\":{\"581\":1}}],[\"跳过单元测试\",{\"1\":{\"566\":1}}],[\"跳转指令是否正确等\",{\"1\":{\"558\":1,\"562\":1}}],[\"跳出location作用域\",{\"1\":{\"309\":1}}],[\"准备就绪状态的所有线程\",{\"1\":{\"926\":1}}],[\"准备阶段不分配类中的实例变量的内存\",{\"1\":{\"563\":1}}],[\"准备阶段是为类的静态变量分配内存并将其初始化为默认值\",{\"1\":{\"563\":1}}],[\"准备\",{\"1\":{\"558\":1}}],[\"准备环境\",{\"0\":{\"288\":1}}],[\"老年代\",{\"1\":{\"557\":2,\"722\":1}}],[\"老年代采用标记整理算法\",{\"1\":{\"557\":1}}],[\"朝生夕灭的对象\",{\"1\":{\"557\":1}}],[\"静态参数在数据库运行期间不能修改内存中的值\",{\"1\":{\"854\":1}}],[\"静态参数\",{\"1\":{\"854\":1}}],[\"静态域和数组元素存储在堆内存中\",{\"1\":{\"809\":1}}],[\"静态变量不在计算范围之内\",{\"1\":{\"722\":3}}],[\"静态变量等数据\",{\"1\":{\"556\":1}}],[\"静态成员变量\",{\"1\":{\"722\":1}}],[\"静态属性不算在对象大小内\",{\"1\":{\"722\":1}}],[\"静态方法引用\",{\"1\":{\"527\":1}}],[\"腾出停车场车位\",{\"1\":{\"554\":1}}],[\"驶出停车场\",{\"1\":{\"554\":1}}],[\"车位不足\",{\"1\":{\"554\":1}}],[\"布尔\",{\"1\":{\"549\":1}}],[\"浮点数值不适用于无法接受舍入误差的金融计算中\",{\"1\":{\"549\":1}}],[\"浮点型\",{\"1\":{\"549\":1}}],[\"长度的工作是由\",{\"1\":{\"618\":1}}],[\"长度的复杂度仅为\",{\"1\":{\"618\":1}}],[\"长度加限制\",{\"1\":{\"484\":1}}],[\"长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露\",{\"1\":{\"558\":1}}],[\"长整型数值有一个后缀\",{\"1\":{\"549\":1}}],[\"循环需要花很长时间\",{\"1\":{\"924\":1}}],[\"循环打印cc文件中的每行数据\",{\"1\":{\"542\":1}}],[\"循环读取字符\",{\"1\":{\"539\":1}}],[\"夜来风雨声\",{\"1\":{\"541\":1}}],[\"处于普通打开状态\",{\"1\":{\"838\":1,\"841\":2,\"843\":1,\"883\":3,\"893\":1}}],[\"处于ip协议的上一层\",{\"1\":{\"638\":1}}],[\"处处闻啼鸟\",{\"1\":{\"541\":1}}],[\"处理原则通常为\",{\"1\":{\"913\":1}}],[\"处理在第二步中cas操作失败的自旋已经实现重入性\",{\"1\":{\"822\":1}}],[\"处理器可以改变语句对应机器指令的执行顺序\",{\"1\":{\"809\":1}}],[\"处理器不做任何操作\",{\"1\":{\"442\":1}}],[\"处理的流越多\",{\"1\":{\"800\":1}}],[\"处理的实现\",{\"1\":{\"64\":1}}],[\"处理后的结果\",{\"1\":{\"652\":1}}],[\"处理函数\",{\"0\":{\"613\":1}}],[\"处理信息\",{\"1\":{\"612\":1}}],[\"处理其他事情\",{\"1\":{\"475\":1}}],[\"处理requestqueue中的请求\",{\"1\":{\"433\":1}}],[\"处理能力紧张\",{\"1\":{\"412\":1}}],[\"处理速度将提升两倍\",{\"1\":{\"431\":1}}],[\"处理速度慢\",{\"1\":{\"317\":1}}],[\"处理速度快\",{\"1\":{\"317\":1}}],[\"处理请求的性能和并发量\",{\"1\":{\"221\":1}}],[\"处理不同日期的数据的话\",{\"1\":{\"27\":1}}],[\"处理过程会涉及到多个处理步骤\",{\"1\":{\"27\":1}}],[\"春眠不觉晓\",{\"1\":{\"541\":1}}],[\"输入的数据无效或操作错误等意外环境下\",{\"1\":{\"898\":1}}],[\"输入文件\",{\"1\":{\"652\":1}}],[\"输入数据在原数据中的偏移量\",{\"1\":{\"652\":1}}],[\"输入<\",{\"1\":{\"652\":4}}],[\"输入字节流\",{\"1\":{\"538\":1}}],[\"输入输出流又分为字节流和字符流\",{\"1\":{\"538\":1}}],[\"输出详单\",{\"1\":{\"898\":1}}],[\"输出文件的路径\",{\"1\":{\"652\":1}}],[\"输出的\",{\"1\":{\"652\":1}}],[\"输出<\",{\"1\":{\"652\":4}}],[\"输出字节流\",{\"1\":{\"538\":1}}],[\"输出其格式化的货币值和百分比\",{\"1\":{\"445\":1}}],[\"输出结果\",{\"1\":{\"20\":1}}],[\"赵六\",{\"1\":{\"530\":1,\"531\":1}}],[\"王者荣耀需要10个玩家\",{\"1\":{\"552\":1}}],[\"王者晋级之路\",{\"1\":{\"82\":1}}],[\"王五\",{\"1\":{\"530\":1,\"531\":1}}],[\"李四\",{\"1\":{\"530\":1,\"531\":1,\"532\":2}}],[\"张焕国教授认为可信计算系统是能够提供系统的可靠性\",{\"1\":{\"684\":1}}],[\"张三\",{\"1\":{\"530\":1,\"531\":1,\"532\":1}}],[\"张德本\",{\"1\":{\"180\":1}}],[\"头部包含了以下几个数据\",{\"1\":{\"642\":1}}],[\"头部开销小\",{\"0\":{\"642\":1}}],[\"头标识下是\",{\"1\":{\"639\":1}}],[\"头是最先加入的\",{\"1\":{\"530\":1}}],[\"头信息\",{\"1\":{\"317\":3}}],[\"口令策略可单独应用\",{\"1\":{\"874\":1}}],[\"口令长度需大于等于\",{\"1\":{\"874\":1}}],[\"口\",{\"1\":{\"528\":1}}],[\"月以后的版本\",{\"1\":{\"883\":1}}],[\"月\",{\"1\":{\"527\":1,\"832\":2,\"833\":2,\"834\":6,\"845\":6,\"891\":1}}],[\"月底前将审核结果报送省级再担保机构\",{\"1\":{\"189\":1}}],[\"−\",{\"1\":{\"527\":1}}],[\"弦苦的博客\",{\"1\":{\"526\":1}}],[\"掩码\",{\"1\":{\"526\":1}}],[\"掩码长为24+3=27位\",{\"1\":{\"526\":1}}],[\"尾部节点\",{\"1\":{\"929\":1}}],[\"尾是最近加入的\",{\"1\":{\"530\":1}}],[\"尾ip地址必须保留\",{\"1\":{\"526\":1}}],[\"尾两块\",{\"1\":{\"526\":1}}],[\"尾节点距离起始地址的字节数\",{\"1\":{\"157\":1}}],[\"熟练的掌握ip地址可以减少项目中出错的概率与提升工作的效率\",{\"1\":{\"524\":1}}],[\"熟悉关系型数据库事务的都知道从帐号a到帐号b需要6个操作\",{\"1\":{\"66\":1}}],[\"私钥够复杂\",{\"1\":{\"522\":1}}],[\"私钥\",{\"1\":{\"522\":1}}],[\"私有数据\",{\"1\":{\"126\":1}}],[\"别忘升级版本哦~~~\",{\"1\":{\"576\":1}}],[\"别人可以用这个锁把重要的东西锁起来\",{\"1\":{\"522\":1}}],[\"别名记录\",{\"1\":{\"222\":1}}],[\"才可以进入线程的准备就绪状态\",{\"1\":{\"926\":1}}],[\"才可以继续访问\",{\"1\":{\"522\":1}}],[\"才是优秀的程序员\",{\"1\":{\"901\":1}}],[\"才开始\",{\"1\":{\"898\":1}}],[\"才往下执行\",{\"1\":{\"802\":1}}],[\"才真正开始执行类中定义的java程序代码\",{\"1\":{\"563\":1}}],[\"才真正开始执行类中的定义的java程序代码\",{\"1\":{\"558\":1}}],[\"才会在生命周期调用\",{\"1\":{\"381\":1}}],[\"才会处理其他客户端的命令\",{\"1\":{\"139\":1}}],[\"握手需要的\",{\"1\":{\"522\":1}}],[\"快\",{\"1\":{\"522\":1}}],[\"快速执行完\",{\"1\":{\"82\":1}}],[\"快速查询语音\",{\"1\":{\"55\":1}}],[\"证书管理器\",{\"1\":{\"705\":1}}],[\"证书中心用自己的私钥\",{\"1\":{\"705\":1}}],[\"证书中心\",{\"1\":{\"705\":1}}],[\"证书颁发机构如\",{\"1\":{\"522\":1}}],[\"证明选择性越高\",{\"1\":{\"82\":1}}],[\"费用\",{\"1\":{\"522\":1}}],[\"页的方式进行管理\",{\"1\":{\"864\":1}}],[\"页\",{\"1\":{\"837\":1}}],[\"页是达梦数据库的最小存储单元\",{\"1\":{\"836\":1}}],[\"页是数据存储单位\",{\"1\":{\"129\":1}}],[\"页大小\",{\"1\":{\"836\":1}}],[\"页面响应速度比\",{\"1\":{\"522\":1}}],[\"页面的方法\",{\"1\":{\"520\":1}}],[\"协作式和超媒体信息系统的应用层协议\",{\"1\":{\"520\":1}}],[\"协议栈\",{\"1\":{\"609\":1}}],[\"协议默\",{\"1\":{\"608\":1}}],[\"协议进行节点间通信\",{\"1\":{\"608\":1}}],[\"协议需要到\",{\"1\":{\"522\":1}}],[\"协议443端口\",{\"1\":{\"521\":1}}],[\"协议以明文方式发送内容\",{\"1\":{\"520\":1}}],[\"协议传输类库\",{\"1\":{\"515\":1}}],[\"协议最新的版本和建议\",{\"1\":{\"515\":1}}],[\"协议的服务器必须要有一套数字证书\",{\"1\":{\"522\":1}}],[\"协议的客户端编程工具包\",{\"1\":{\"515\":1}}],[\"协议的基本功能\",{\"1\":{\"515\":1}}],[\"协议来访问网络资源\",{\"1\":{\"515\":1}}],[\"协议可能是现在\",{\"1\":{\"515\":1}}],[\"协议中没有明确说明\",{\"1\":{\"486\":1}}],[\"协议没有\",{\"1\":{\"484\":1}}],[\"协议\",{\"1\":{\"478\":1,\"520\":1,\"522\":1,\"639\":2}}],[\"协议跳转\",{\"1\":{\"308\":1}}],[\"释放\",{\"1\":{\"924\":1}}],[\"释放带来的系统性能消耗\",{\"1\":{\"924\":1}}],[\"释放带来的性能损耗\",{\"1\":{\"924\":1}}],[\"释放了锁\",{\"1\":{\"777\":1}}],[\"释放令牌\",{\"1\":{\"554\":1}}],[\"释放资源\",{\"1\":{\"518\":4}}],[\"释放锁的逻辑\",{\"1\":{\"723\":1}}],[\"释放锁\",{\"1\":{\"214\":2}}],[\"释放锁机制\",{\"1\":{\"213\":1}}],[\"功能的变化导致设计的调整再所难免\",{\"1\":{\"898\":1}}],[\"功能的拓展\",{\"1\":{\"22\":1}}],[\"功能\",{\"1\":{\"706\":1}}],[\"功能丰富的支持\",{\"1\":{\"515\":1}}],[\"凡是和基本表发生冲突的元素\",{\"1\":{\"514\":1}}],[\"溢出表两部分\",{\"1\":{\"514\":1}}],[\"平行继承体系其实是霾弹式修改的特殊情况\",{\"1\":{\"917\":1}}],[\"平行继承体系\",{\"0\":{\"917\":1}}],[\"平白无辜多了1\",{\"1\":{\"722\":1}}],[\"平方区中法\",{\"0\":{\"510\":1}}],[\"平均数\",{\"1\":{\"527\":1}}],[\"平均占用的空间多于\",{\"1\":{\"97\":1}}],[\"平均分布io\",{\"1\":{\"91\":1}}],[\"≠\",{\"1\":{\"506\":1}}],[\"给他的记事本\",{\"1\":{\"922\":1}}],[\"给你添乱\",{\"1\":{\"919\":1}}],[\"给你一个通过公钥加密的密钥\",{\"1\":{\"682\":1}}],[\"给回收掉了\",{\"1\":{\"629\":1}}],[\"给定表m\",{\"1\":{\"506\":1}}],[\"给客户端说明我使用了gzip压缩\",{\"1\":{\"317\":1}}],[\"推送活动信息能不能造成反感\",{\"1\":{\"785\":1}}],[\"推送远程仓库\",{\"1\":{\"499\":1}}],[\"推出\",{\"1\":{\"740\":1}}],[\"推荐业界已定义\",{\"1\":{\"413\":1}}],[\"推荐\",{\"1\":{\"413\":3,\"709\":1}}],[\"推荐使用\",{\"1\":{\"475\":3}}],[\"推荐使用此方法\",{\"1\":{\"394\":1}}],[\"推荐使用自增存储效率高\",{\"1\":{\"210\":1}}],[\"推荐配置如下\",{\"1\":{\"317\":1}}],[\"推荐系统\",{\"1\":{\"55\":1}}],[\"既有代码太混乱\",{\"1\":{\"908\":1}}],[\"既有主观性又有客观性\",{\"1\":{\"684\":1}}],[\"既不需要手动修改\",{\"1\":{\"619\":1}}],[\"既可以是远程的也可以是本地的\",{\"1\":{\"499\":1}}],[\"既能够用于读性能的扩展\",{\"1\":{\"153\":1}}],[\"拉取远程仓库\",{\"1\":{\"499\":1}}],[\"拉取镜像\",{\"1\":{\"63\":1,\"263\":1}}],[\"公钥密码\",{\"1\":{\"684\":1}}],[\"公钥是非对称加密的说法\",{\"1\":{\"682\":2}}],[\"公平性选择\",{\"1\":{\"819\":1}}],[\"公平和非公平锁的队列都基于锁内部维护的一个双向链表\",{\"1\":{\"674\":1}}],[\"公平所\",{\"1\":{\"674\":1}}],[\"公平锁\",{\"0\":{\"674\":1},\"1\":{\"674\":1,\"703\":1}}],[\"公众号\",{\"1\":{\"650\":1}}],[\"公司邮箱\",{\"1\":{\"495\":1}}],[\"公共方法的提取\",{\"0\":{\"215\":1}}],[\"克隆\",{\"1\":{\"492\":1}}],[\"击鼓的人不知道最终是哪个人执行了喝酒\",{\"1\":{\"825\":1}}],[\"击鼓的人士客户端的对象\",{\"1\":{\"825\":1}}],[\"击鼓传花便是责任链模式的应用\",{\"1\":{\"825\":1}}],[\"击鼓传花游戏\",{\"1\":{\"825\":1}}],[\"击\",{\"1\":{\"488\":1}}],[\"幂等性\",{\"1\":{\"481\":1}}],[\"空间之前\",{\"1\":{\"621\":1}}],[\"空间预分配用于优化\",{\"1\":{\"621\":1}}],[\"空间预分配\",{\"0\":{\"621\":1}}],[\"空间消耗\",{\"1\":{\"522\":1}}],[\"空的散列地址总能找到\",{\"1\":{\"511\":1}}],[\"空行\",{\"1\":{\"478\":1}}],[\"空闲保持时间\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"严重影响锁的性能\",{\"1\":{\"812\":1}}],[\"严重\",{\"1\":{\"472\":1}}],[\"严格\",{\"1\":{\"21\":1}}],[\"队列最大长度\",{\"1\":{\"779\":1}}],[\"队列等限制条件\",{\"1\":{\"654\":1}}],[\"队列优先级的排序规则就是按照我们对这个接口的实现来定义的\",{\"1\":{\"533\":1}}],[\"队列类\",{\"1\":{\"472\":1}}],[\"队列长度\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"删掉众多数据中的一项\",{\"1\":{\"914\":1}}],[\"删\",{\"1\":{\"500\":1}}],[\"删减\",{\"1\":{\"472\":1}}],[\"删除备份集\",{\"1\":{\"893\":1}}],[\"删除用户\",{\"0\":{\"882\":1}}],[\"删除10天前的归档日志\",{\"1\":{\"872\":1}}],[\"删除target\",{\"1\":{\"580\":1}}],[\"删除该元素\",{\"1\":{\"530\":1}}],[\"删除文件\",{\"1\":{\"503\":1}}],[\"删除文件三部曲\",{\"1\":{\"14\":1}}],[\"删除子模块\",{\"1\":{\"502\":1}}],[\"删除版本\",{\"1\":{\"501\":1}}],[\"删除远程版本\",{\"1\":{\"501\":1}}],[\"删除远程分支\",{\"1\":{\"500\":1}}],[\"删除远程仓库\",{\"1\":{\"499\":1}}],[\"删除分支\",{\"1\":{\"500\":1}}],[\"删除所有的内容\",{\"1\":{\"343\":1}}],[\"删除租约\",{\"1\":{\"214\":1}}],[\"删除对应的key释放锁\",{\"1\":{\"214\":1}}],[\"删除key\",{\"1\":{\"213\":1}}],[\"删除散列里面的一个或多个键值对\",{\"1\":{\"136\":1}}],[\"删除值\",{\"1\":{\"134\":1}}],[\"删除单个元素\",{\"1\":{\"133\":1}}],[\"删除效率最高\",{\"1\":{\"109\":1}}],[\"删除自带mariadb\",{\"0\":{\"76\":1}}],[\"删除一个对象\",{\"1\":{\"63\":1}}],[\"删除一个桶\",{\"1\":{\"63\":1}}],[\"删除一个索引将会删除这个索引表\",{\"1\":{\"28\":1}}],[\"删除集合\",{\"1\":{\"58\":1}}],[\"删除或者替换列\",{\"1\":{\"21\":1}}],[\"删除表数据同时删除表结构\",{\"1\":{\"109\":1}}],[\"删除表\",{\"1\":{\"21\":1}}],[\"删除数据库\",{\"1\":{\"21\":1}}],[\"删除和复制等操作\",{\"1\":{\"17\":1}}],[\"删除学生95003的相关数据\",{\"1\":{\"13\":2}}],[\"删除hdfs上的\",{\"0\":{\"12\":1}}],[\"删除\",{\"1\":{\"3\":1,\"835\":2,\"893\":1}}],[\"描述\",{\"1\":{\"472\":3}}],[\"策略\",{\"1\":{\"471\":1}}],[\"试图无条件唤醒\",{\"1\":{\"467\":1,\"472\":1}}],[\"试图消除有条件的唤醒\",{\"1\":{\"466\":1}}],[\"试图或嵌套查询中选择记录\",{\"1\":{\"22\":1}}],[\"伪共享的产生\",{\"0\":{\"665\":1}}],[\"伪共享\",{\"0\":{\"662\":1},\"1\":{\"458\":1}}],[\"核\",{\"1\":{\"458\":1,\"465\":1,\"472\":1}}],[\"核心线程池大小\",{\"1\":{\"755\":1,\"779\":1}}],[\"核心线程数\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"核心类\",{\"1\":{\"450\":1}}],[\"核心概念\",{\"0\":{\"450\":1}}],[\"补充\",{\"0\":{\"503\":1},\"1\":{\"458\":1}}],[\"博客http\",{\"1\":{\"458\":1}}],[\"博客园\",{\"1\":{\"221\":1}}],[\"告诉所有人都知道\",{\"1\":{\"458\":1}}],[\"告诉你为什么要用集群部署\",{\"1\":{\"75\":1}}],[\"戳一下\",{\"1\":{\"458\":1}}],[\"醒醒\",{\"1\":{\"456\":1}}],[\"喂\",{\"1\":{\"456\":1}}],[\"申请线程只在本地变量上自旋\",{\"1\":{\"929\":1}}],[\"申请证书\",{\"1\":{\"522\":1}}],[\"申请序列\",{\"1\":{\"472\":2}}],[\"申请提交节点\",{\"1\":{\"458\":1}}],[\"申请下一个节点\",{\"0\":{\"455\":1}}],[\"申请人或担保人应予赔偿的制度\",{\"1\":{\"185\":1}}],[\"停车场同时容纳的车辆10\",{\"1\":{\"554\":1}}],[\"停下来自旋\",{\"1\":{\"454\":1}}],[\"停止web应用\",{\"1\":{\"566\":1}}],[\"停止运行keepalived和redis服务\",{\"1\":{\"367\":1}}],[\"停止redis服务\",{\"1\":{\"360\":1}}],[\"停止keepalived服务和mysql服务\",{\"1\":{\"342\":2}}],[\"停止keepalived服务\",{\"1\":{\"341\":1,\"366\":1}}],[\"停止处理后续rewrite指令集\",{\"1\":{\"309\":2}}],[\"停止\",{\"1\":{\"56\":1,\"389\":1}}],[\"明文\",{\"1\":{\"675\":3}}],[\"明文传输\",{\"1\":{\"522\":1}}],[\"明白现在不能写入\",{\"1\":{\"454\":1}}],[\"明确指定了锁对象\",{\"1\":{\"723\":1}}],[\"明确规定采用信用证方式付款\",{\"1\":{\"176\":1}}],[\"明确节点存储内容属于\",{\"1\":{\"157\":1}}],[\"占4个字节\",{\"1\":{\"672\":1}}],[\"占据的节点\",{\"1\":{\"454\":1}}],[\"占用临时表空间排序\",{\"1\":{\"855\":1}}],[\"占用cpu时间\",{\"1\":{\"813\":1}}],[\"占用了大量空间\",{\"1\":{\"662\":1}}],[\"占用线程超时\",{\"1\":{\"402\":1}}],[\"占用线程调用接口的超时时间\",{\"1\":{\"402\":1}}],[\"占用较低的空间\",{\"1\":{\"204\":1}}],[\"占用内存的字节数\",{\"1\":{\"157\":1}}],[\"粉色高亮\",{\"1\":{\"454\":1}}],[\"顺序一致性模型保证所有线程只能看到一致的操作执行顺序\",{\"1\":{\"809\":1}}],[\"顺序一致性模型保证单线程内的操作会按程序的顺序执行\",{\"1\":{\"809\":1}}],[\"顺序写\",{\"1\":{\"433\":1}}],[\"顺利的读到了最大序号\",{\"1\":{\"454\":1}}],[\"拿到了数据后\",{\"1\":{\"452\":1}}],[\"声明一个序号\",{\"1\":{\"450\":1}}],[\"声明式调用\",{\"1\":{\"394\":1,\"395\":1,\"416\":2}}],[\"序列号\",{\"1\":{\"648\":1}}],[\"序列化操作\",{\"1\":{\"544\":1}}],[\"序列化利用fileoutputstream和objectoutputstream类\",{\"0\":{\"544\":1}}],[\"序列化是把java对象存在一个硬盘\",{\"1\":{\"543\":1}}],[\"序列化与反序列化\",{\"0\":{\"543\":1}}],[\"序列化失败\",{\"1\":{\"413\":1}}],[\"序列组\",{\"1\":{\"472\":1}}],[\"序列类\",{\"1\":{\"472\":1}}],[\"序号栅栏\",{\"1\":{\"450\":1}}],[\"序号\",{\"1\":{\"450\":1,\"455\":1,\"456\":1}}],[\"赛跑结束\",{\"1\":{\"446\":1}}],[\"递减锁存器的计数\",{\"1\":{\"446\":1}}],[\"复审代码时重构\",{\"1\":{\"907\":1}}],[\"复杂的情况出现了\",{\"1\":{\"705\":1}}],[\"复杂的运算时尤为明显\",{\"1\":{\"445\":1}}],[\"复制到htmlstatement函数中\",{\"1\":{\"898\":1}}],[\"复制配置\",{\"1\":{\"853\":1}}],[\"复制所有文件到redis\",{\"1\":{\"367\":1}}],[\"复制出来修改\",{\"1\":{\"278\":1}}],[\"复制\",{\"1\":{\"155\":1}}],[\"复制值的函数\",{\"1\":{\"126\":1}}],[\"复制键的函数\",{\"1\":{\"126\":1}}],[\"除\",{\"1\":{\"874\":1}}],[\"除审计和强制访问控制之外\",{\"1\":{\"888\":1}}],[\"除审计和强制访问控制\",{\"1\":{\"873\":1}}],[\"除非有特殊的需要\",{\"1\":{\"924\":1}}],[\"除非确定需要处理utf\",{\"1\":{\"549\":1}}],[\"除非线程被中断或超出了指定的等待时间\",{\"1\":{\"446\":1}}],[\"除非线程被中断\",{\"1\":{\"446\":1}}],[\"除留余数法\",{\"0\":{\"508\":1}}],[\"除法的时候出现异常\",{\"1\":{\"445\":1}}],[\"除了计算费用还有为顾客计算积分\",{\"1\":{\"898\":1}}],[\"除了监控java方法的执行耗时\",{\"1\":{\"720\":1}}],[\"除了java类库附带的代码生成实用程序外\",{\"1\":{\"714\":1}}],[\"除了获取字符串长度的复杂度高之外\",{\"1\":{\"619\":1}}],[\"除了编写源代码\",{\"1\":{\"568\":1}}],[\"除了在加载阶段用户应用程序可以通过自定义类加载器参与之外\",{\"1\":{\"558\":1,\"563\":1}}],[\"除了缓存行的填充\",{\"1\":{\"472\":1}}],[\"除了\",{\"1\":{\"126\":1,\"161\":1}}],[\"除了链表键之外\",{\"1\":{\"118\":1}}],[\"除了防止脏读\",{\"1\":{\"71\":1}}],[\"除了文件的最后一个数据块外\",{\"1\":{\"19\":1}}],[\"￥8\",{\"1\":{\"445\":1}}],[\"￥1\",{\"1\":{\"445\":1}}],[\"贷款金额\",{\"1\":{\"445\":3}}],[\"贷款项目应符合国家信贷政策和监管要求\",{\"1\":{\"189\":1}}],[\"百行函数\",{\"1\":{\"910\":1}}],[\"百度文库\",{\"1\":{\"526\":1}}],[\"百度百科\",{\"1\":{\"176\":1,\"725\":1}}],[\"百分比小数点最多3位\",{\"1\":{\"445\":1}}],[\"百分值\",{\"1\":{\"445\":1}}],[\"故m取后五位为主机段\",{\"1\":{\"526\":1}}],[\"故一般精度的计算没必要使用bigdecimal\",{\"1\":{\"445\":1}}],[\"故我们不能使用传统的+\",{\"1\":{\"445\":1}}],[\"故障时联机日志中只有\",{\"1\":{\"868\":1}}],[\"故障诊断等机制\",{\"1\":{\"686\":1}}],[\"故障越低\",{\"1\":{\"526\":1}}],[\"故障自动转移等\",{\"1\":{\"433\":1}}],[\"故障迁移\",{\"1\":{\"153\":1,\"161\":1}}],[\"构成单独一个函数\",{\"1\":{\"909\":1}}],[\"构成了宿主机\",{\"1\":{\"689\":1}}],[\"构造一个用给定计数初始化的\",{\"1\":{\"446\":1}}],[\"构造方法\",{\"1\":{\"445\":1}}],[\"构造方法是完全可预知的\",{\"1\":{\"445\":1}}],[\"构造器是类的特殊方法\",{\"1\":{\"445\":1}}],[\"构造函数\",{\"1\":{\"444\":2}}],[\"构建开机启动的信任链\",{\"1\":{\"687\":1}}],[\"构建步骤\",{\"0\":{\"246\":1}}],[\"构建nginx\",{\"0\":{\"244\":1}}],[\"构建一个docker镜像需要写一个叫做dockerfile的文件\",{\"1\":{\"243\":1}}],[\"构建\",{\"0\":{\"568\":1},\"1\":{\"158\":1}}],[\"构建了自己的链表实现\",{\"1\":{\"118\":1}}],[\"底层设计因素\",{\"1\":{\"781\":1}}],[\"底层的文件处理或者需要控制占用存储空间量的大数组\",{\"1\":{\"549\":1}}],[\"底层通过socket\",{\"1\":{\"712\":1}}],[\"底层通过\",{\"1\":{\"443\":1}}],[\"底层使用的是unsafe的getandaddint方法\",{\"1\":{\"441\":1}}],[\"拒绝策略可自行定义\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"继之前的单例模式\",{\"1\":{\"683\":1}}],[\"继续执行下面的代码\",{\"1\":{\"673\":1}}],[\"继续进行\",{\"1\":{\"149\":1}}],[\"继承体系的实例引用另一个继承体系的实例\",{\"1\":{\"917\":1}}],[\"继承关系\",{\"0\":{\"631\":1}}],[\"继承关系如下\",{\"1\":{\"440\":1}}],[\"继承于outputstream类\",{\"1\":{\"539\":1}}],[\"继承于inputstream类\",{\"1\":{\"539\":1}}],[\"继承了sequence只重写了get方法\",{\"1\":{\"472\":1}}],[\"继承sequence\",{\"1\":{\"472\":1}}],[\"逗号隔开\",{\"1\":{\"435\":1}}],[\"叫做\",{\"1\":{\"433\":1}}],[\"叫做dock\",{\"1\":{\"234\":1}}],[\"省去了进程切换和一次数据拷贝\",{\"1\":{\"433\":1}}],[\"省级再担保机构根据上述两项合同\",{\"1\":{\"189\":1}}],[\"省级再担保机构分别向国家融资担保基金报送业务合作申请\",{\"1\":{\"189\":1}}],[\"省级再担保机构发出开展银担\",{\"1\":{\"189\":1}}],[\"省级再担保机构每月向承办担保机构反馈担保代偿补偿备付金使用情况\",{\"1\":{\"189\":1}}],[\"省级再担保机构每月前15个工作日内完成复核确认\",{\"1\":{\"189\":1}}],[\"省级再担保机构和国家融资担保基金为有关担保项目继续提供再担保\",{\"1\":{\"189\":1}}],[\"省级再担保机构收到承办担保机构报送的审核结果后\",{\"1\":{\"189\":1}}],[\"省级再担保机构按月向国家融资担保基金缴纳再担保费\",{\"1\":{\"189\":1}}],[\"省级再担保机构\",{\"1\":{\"189\":4}}],[\"省级再担保机构在各合作银行分行设立担保代偿补偿备付金账户\",{\"1\":{\"189\":1}}],[\"省级再担保机构再担保费率不得高于国家融资担保基金\",{\"1\":{\"189\":1}}],[\"省级融资担保再担保机构\",{\"1\":{\"189\":1}}],[\"又不必负担那么多的委托动作\",{\"1\":{\"922\":1}}],[\"又称重播攻击\",{\"1\":{\"897\":1}}],[\"又称cas\",{\"1\":{\"442\":1}}],[\"又因为\",{\"1\":{\"740\":1,\"745\":1}}],[\"又因为每个子网块中可分配的主机块又有首|尾两个不能用\",{\"1\":{\"526\":1}}],[\"又名比较器\",{\"1\":{\"735\":1}}],[\"又违背了单例模式的用意\",{\"1\":{\"683\":1}}],[\"又比如说\",{\"1\":{\"618\":1}}],[\"又拷贝到\",{\"1\":{\"433\":1}}],[\"又或者是一个\",{\"1\":{\"125\":1}}],[\"又或者列表中包含的元素都是比较长的字符串时\",{\"1\":{\"118\":1}}],[\"磁盘顺序写的性能极高\",{\"1\":{\"433\":1}}],[\"磁盘等资源\",{\"1\":{\"232\":1}}],[\"广播的功能\",{\"1\":{\"640\":1}}],[\"广播\",{\"0\":{\"640\":1}}],[\"广播地址为\",{\"1\":{\"526\":1}}],[\"广播消费能力\",{\"1\":{\"431\":1}}],[\"广泛用于二进制嵌入的指标包括\",{\"0\":{\"54\":1}}],[\"诉求\",{\"1\":{\"431\":1}}],[\"知道有一个流有i\",{\"1\":{\"802\":1}}],[\"知道ip和子网掩码\",{\"1\":{\"526\":1}}],[\"知道\",{\"1\":{\"457\":1}}],[\"知道这是一条从北京到广州的高速路\",{\"1\":{\"429\":1}}],[\"知乎\",{\"1\":{\"75\":1}}],[\"评论\",{\"1\":{\"428\":1}}],[\"评估和审批\",{\"1\":{\"189\":1}}],[\"活动追踪\",{\"1\":{\"428\":1}}],[\"逻辑备份是导出数据库中逻辑数据\",{\"1\":{\"889\":1}}],[\"逻辑\",{\"1\":{\"422\":3}}],[\"马上成功结束\",{\"1\":{\"421\":1}}],[\"致力于提供高性能和简单易用的分布式事务服务\",{\"1\":{\"420\":1}}],[\"订单表插入一个订单\",{\"1\":{\"427\":1}}],[\"订单失败\",{\"1\":{\"418\":1}}],[\"订单信息\",{\"1\":{\"222\":1}}],[\"种特殊字符\",{\"1\":{\"417\":1}}],[\"形式\",{\"1\":{\"417\":1}}],[\"形成一个类\",{\"1\":{\"915\":1}}],[\"形成一个依赖图\",{\"1\":{\"448\":1}}],[\"形成巨额资金\",{\"1\":{\"172\":1}}],[\"形成多层次的融资担保服务体系\",{\"1\":{\"167\":1}}],[\"形成链表\",{\"1\":{\"125\":1}}],[\"甚至是早期的futuretask\",{\"1\":{\"723\":1}}],[\"甚至是组件化\",{\"1\":{\"413\":1}}],[\"甚至同一个表的不同字段都可以指定使用不\",{\"1\":{\"99\":1}}],[\"端和移动端登录情况\",{\"1\":{\"789\":1}}],[\"端的任务是对输入数据按照单词进行切分\",{\"1\":{\"652\":1}}],[\"端执行\",{\"1\":{\"627\":1}}],[\"端解决问题的帮助不会太多\",{\"1\":{\"413\":1}}],[\"端口后需\",{\"1\":{\"839\":1}}],[\"端口分别为8080\",{\"0\":{\"405\":1}}],[\"端口协议\",{\"1\":{\"263\":1}}],[\"端口号名称\",{\"1\":{\"263\":1}}],[\"端口\",{\"1\":{\"254\":2,\"520\":1,\"522\":2}}],[\"短信息\",{\"1\":{\"413\":1}}],[\"短暂中断\",{\"1\":{\"155\":1}}],[\"错误\",{\"1\":{\"651\":1}}],[\"错误简\",{\"1\":{\"413\":1}}],[\"错误码\",{\"1\":{\"413\":2}}],[\"封装往往伴随着委托\",{\"1\":{\"922\":1}}],[\"封装请求头\",{\"1\":{\"518\":2}}],[\"封装请求参数\",{\"1\":{\"518\":3}}],[\"封装\",{\"1\":{\"413\":1,\"627\":1}}],[\"封顶数为900\",{\"1\":{\"74\":1}}],[\"跨应用间\",{\"1\":{\"413\":1}}],[\"跨页\",{\"1\":{\"129\":1}}],[\"易产生npe\",{\"1\":{\"413\":1}}],[\"易于存储\",{\"1\":{\"204\":1}}],[\"远程仓库\",{\"1\":{\"601\":1}}],[\"远程仓库相关命令\",{\"0\":{\"499\":1}}],[\"远程调用返回对象时\",{\"1\":{\"413\":1}}],[\"远端调用成功\",{\"1\":{\"402\":2}}],[\"及时\",{\"1\":{\"864\":1}}],[\"及时恢复或阻断运行\",{\"1\":{\"685\":1}}],[\"及大数据及的信息检索等\",{\"1\":{\"783\":1}}],[\"及以上\",{\"1\":{\"413\":1}}],[\"及地方融资平台\",{\"1\":{\"189\":1}}],[\"流行于中国各地\",{\"1\":{\"825\":1}}],[\"流就是指不间断的数据结构\",{\"1\":{\"642\":1}}],[\"流套接字\",{\"1\":{\"636\":1}}],[\"流量控制\",{\"1\":{\"554\":1}}],[\"流是指一连串流动的数据信号\",{\"1\":{\"538\":1}}],[\"流\",{\"1\":{\"527\":1}}],[\"流程设计\",{\"0\":{\"788\":1}}],[\"流程处理\",{\"1\":{\"612\":1}}],[\"流程\",{\"0\":{\"475\":1}}],[\"流程简图\",{\"1\":{\"458\":1}}],[\"流式处理\",{\"1\":{\"428\":1}}],[\"流式数据访问\",{\"1\":{\"15\":1}}],[\"流对象进行关闭\",{\"1\":{\"413\":1}}],[\"块来处理它\",{\"1\":{\"475\":1}}],[\"块中的\",{\"1\":{\"413\":2}}],[\"块中使用\",{\"1\":{\"413\":1}}],[\"块必须对资源对象\",{\"1\":{\"413\":1}}],[\"块放到了事务代码中\",{\"1\":{\"413\":1}}],[\"滚事务\",{\"1\":{\"413\":1}}],[\"滚动更新\",{\"1\":{\"263\":1}}],[\"反馈给子类\",{\"1\":{\"558\":1}}],[\"反序列化操作\",{\"1\":{\"545\":1}}],[\"反序列化利用fileinputstream和objectinputstream类\",{\"0\":{\"545\":1}}],[\"反之失败\",{\"1\":{\"897\":1}}],[\"反之为false\",{\"1\":{\"814\":1}}],[\"反之用flume等收集集群\",{\"1\":{\"788\":1}}],[\"反之subnet\",{\"1\":{\"526\":1}}],[\"反之速度越慢文件压缩比越大\",{\"1\":{\"317\":1}}],[\"反射\",{\"1\":{\"523\":1}}],[\"反例\",{\"1\":{\"413\":2}}],[\"异常抛出\",{\"1\":{\"518\":13}}],[\"异常处理的包装类\",{\"1\":{\"472\":1}}],[\"异常处理类\",{\"1\":{\"472\":1}}],[\"异常\",{\"1\":{\"413\":1,\"541\":1}}],[\"异常后\",{\"1\":{\"413\":1}}],[\"异常设计的初衷是解决程序运行中的各种意外情况\",{\"1\":{\"413\":1}}],[\"异常不要用来做流程控制\",{\"1\":{\"413\":1}}],[\"异常不应该通过catch\",{\"1\":{\"413\":1}}],[\"异步线程启动\",{\"1\":{\"779\":1}}],[\"异步高性能的通信框架\",{\"1\":{\"608\":1}}],[\"异步方法内当前执行线程为\",{\"1\":{\"475\":4}}],[\"异步批量清理回滚日志\",{\"1\":{\"421\":1}}],[\"异步续命\",{\"1\":{\"220\":1}}],[\"异步\",{\"1\":{\"144\":1,\"151\":1}}],[\"万变不离其宗\",{\"1\":{\"483\":1}}],[\"万条数据了\",{\"1\":{\"433\":1}}],[\"万分感谢~\",{\"1\":{\"410\":1}}],[\"万左右\",{\"1\":{\"221\":1}}],[\"均会路由到不同端口的实例上\",{\"1\":{\"406\":1}}],[\"刷新所服务列表间隔时间\",{\"1\":{\"403\":1}}],[\"刷新环境变量\",{\"1\":{\"343\":2}}],[\"覆盖\",{\"1\":{\"704\":1}}],[\"覆盖hystrix自身的默认配置\",{\"1\":{\"402\":1}}],[\"覆盖索引等\",{\"1\":{\"102\":1}}],[\"熔断器功能\",{\"0\":{\"397\":1}}],[\"熔断器\",{\"1\":{\"395\":1,\"416\":1}}],[\"科学计数法赋值\",{\"1\":{\"388\":1}}],[\"拷贝至linux安装目录\",{\"0\":{\"376\":1}}],[\"仍然可以挂载\",{\"0\":{\"373\":1}}],[\"仍然能够对外提供满足一致性和可用性的服务\",{\"1\":{\"195\":1}}],[\"格式化后的字符串会放在http\",{\"1\":{\"749\":1}}],[\"格式化后的字符串直接拼接到url的后面\",{\"1\":{\"749\":1}}],[\"格式化后失去前面的0\",{\"1\":{\"445\":1}}],[\"格式化\",{\"0\":{\"371\":1}}],[\"恢复是使用归档将数据库恢复到最新状态或指定时间点\",{\"1\":{\"889\":1}}],[\"恢复中断\",{\"1\":{\"766\":1}}],[\"恢复使用主库redis\",{\"0\":{\"367\":1}}],[\"恢复从库数据到主库\",{\"0\":{\"342\":1}}],[\"验证失败\",{\"1\":{\"897\":1}}],[\"验证账号与密码是否与数据库中的一致\",{\"1\":{\"897\":1}}],[\"验证方法解释\",{\"0\":{\"740\":1,\"745\":1}}],[\"验证数字签名\",{\"0\":{\"739\":1,\"744\":1}}],[\"验证对象头\",{\"1\":{\"722\":1}}],[\"验证对象头对齐填充\",{\"1\":{\"722\":1}}],[\"验证对象头大小\",{\"1\":{\"722\":2}}],[\"验证以及确认方法论\",{\"1\":{\"704\":1}}],[\"验证计算机部件的运行状态\",{\"1\":{\"686\":1}}],[\"验证项目是否正确\",{\"1\":{\"566\":1}}],[\"验证字节流是否符合\",{\"1\":{\"560\":1}}],[\"验证的目的是为了确保class文件的字节流的信息不会危害到虚拟机\",{\"1\":{\"559\":1}}],[\"验证的目的是为了确保class\",{\"1\":{\"558\":1}}],[\"验证\",{\"1\":{\"558\":2}}],[\"验证码处理\",{\"1\":{\"410\":1}}],[\"验证是否安装成功\",{\"0\":{\"378\":1}}],[\"验证是否正常运行\",{\"1\":{\"296\":1}}],[\"验证redis从库是否升级为主库\",{\"1\":{\"366\":1}}],[\"验证redis从库是否可以升级为主库\",{\"0\":{\"366\":1}}],[\"验证keepalived服务是否可用\",{\"0\":{\"360\":1}}],[\"`\",{\"1\":{\"357\":1,\"362\":1,\"389\":2}}],[\"`get\",{\"1\":{\"73\":2}}],[\"防火墙配置\",{\"1\":{\"352\":1}}],[\"防止恶意构造长\",{\"1\":{\"484\":1}}],[\"防止npe\",{\"1\":{\"413\":1}}],[\"防止\",{\"1\":{\"413\":1}}],[\"防止数据写入\",{\"0\":{\"324\":1},\"1\":{\"342\":1}}],[\"防止客户端崩溃\",{\"1\":{\"214\":1}}],[\"防止乱码\",{\"1\":{\"74\":1}}],[\"↓\",{\"1\":{\"332\":1}}],[\"址\",{\"1\":{\"329\":1,\"342\":1}}],[\"导入从库数据\",{\"1\":{\"342\":1}}],[\"导入数据\",{\"0\":{\"327\":1}}],[\"导出数据库\",{\"1\":{\"326\":1}}],[\"导出数据\",{\"0\":{\"326\":1},\"1\":{\"342\":1}}],[\"导致service类非常庞大且不断被修改\",{\"1\":{\"911\":1}}],[\"导致自己锁死自己\",{\"1\":{\"723\":1}}],[\"导致线程彼此牵制影响\",{\"1\":{\"663\":1}}],[\"导致数据不一致\",{\"1\":{\"626\":1}}],[\"导致\",{\"1\":{\"619\":1}}],[\"导致不必要的多次下载\",{\"1\":{\"305\":1}}],[\"导致主从的效率问题\",{\"1\":{\"87\":1}}],[\"导致查询缓慢\",{\"1\":{\"87\":1}}],[\"导致一致性维护困难\",{\"1\":{\"15\":1}}],[\"退出\",{\"1\":{\"926\":1}}],[\"退出登录\",{\"1\":{\"322\":1}}],[\"退出使用新密码登录\",{\"1\":{\"322\":1}}],[\"退而求其次使用最终一致性来保证数据的安全\",{\"1\":{\"203\":1}}],[\"退而求其次保证最终一致性\",{\"1\":{\"202\":1}}],[\"退而求其次保证了最终一致性\",{\"1\":{\"202\":1}}],[\"登录时候\",{\"1\":{\"897\":1}}],[\"登录使用时间\",{\"1\":{\"838\":1,\"841\":2,\"843\":1,\"883\":3,\"893\":1}}],[\"登录\",{\"1\":{\"780\":1}}],[\"登录nginx\",{\"1\":{\"351\":4}}],[\"登录从库数据库\",{\"1\":{\"342\":1}}],[\"登录主库mysql\",{\"1\":{\"342\":1}}],[\"登录数据库进行锁表\",{\"1\":{\"342\":1}}],[\"登录数据库进行数据导入\",{\"1\":{\"327\":1}}],[\"登录数据库\",{\"1\":{\"341\":1}}],[\"登录数据库配置同步信息\",{\"0\":{\"329\":1}}],[\"登录数据库查看主库同步信息\",{\"0\":{\"328\":1}}],[\"登录mysql\",{\"0\":{\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"328\":1,\"329\":1,\"330\":1},\"1\":{\"322\":1,\"341\":3}}],[\"登录阿里云镜像仓库\",{\"1\":{\"263\":1}}],[\"版本命名规范\",{\"1\":{\"605\":1}}],[\"版本冲突\",{\"1\":{\"569\":1}}],[\"版本不一致\",{\"1\":{\"569\":1}}],[\"版本库\",{\"1\":{\"490\":1}}],[\"版本中这里采用的是值的类型为duration\",{\"1\":{\"435\":1}}],[\"版本\",{\"0\":{\"501\":1},\"1\":{\"320\":1,\"478\":1}}],[\"版本号修改规则\",{\"1\":{\"605\":1}}],[\"版本号\",{\"1\":{\"263\":2,\"605\":1}}],[\"源码为\",{\"1\":{\"821\":1}}],[\"源码\",{\"1\":{\"820\":1}}],[\"源码此处使用object做了泛化\",{\"1\":{\"652\":1}}],[\"源码注释\",{\"0\":{\"444\":1}}],[\"源码分析\",{\"0\":{\"441\":1},\"1\":{\"427\":1}}],[\"源\",{\"1\":{\"319\":1}}],[\"卸载挂载目录\",{\"1\":{\"367\":1}}],[\"卸载\",{\"0\":{\"835\":1},\"1\":{\"318\":1,\"558\":2,\"835\":2}}],[\"卸载旧版本\",{\"0\":{\"225\":1}}],[\"标志着可信计算进入了2\",{\"1\":{\"687\":1}}],[\"标志位的值\",{\"1\":{\"673\":1}}],[\"标志位置为1的包\",{\"1\":{\"649\":1}}],[\"标志位置1的包\",{\"1\":{\"648\":1}}],[\"标志位均为1\",{\"1\":{\"648\":1}}],[\"标志位和ack\",{\"1\":{\"648\":1}}],[\"标记无用对象\",{\"1\":{\"557\":2}}],[\"标记删除的文件块释放空间\",{\"1\":{\"14\":1}}],[\"标准\",{\"1\":{\"317\":1}}],[\"改变了线程的运行状态\",{\"1\":{\"926\":1}}],[\"改变系统的实现方式\",{\"1\":{\"898\":1}}],[\"改善过长的函数\",{\"0\":{\"910\":1}}],[\"改善重复代码\",{\"0\":{\"909\":1}}],[\"改善它的内部结构\",{\"1\":{\"898\":1}}],[\"改成\",{\"1\":{\"626\":1}}],[\"改为\",{\"1\":{\"620\":1}}],[\"改选项可以让前端的缓存服务器缓存经过gzip压缩的页面\",{\"1\":{\"317\":1}}],[\"改进方法\",{\"1\":{\"27\":1}}],[\"改进后\",{\"1\":{\"20\":1}}],[\"改进前\",{\"1\":{\"20\":1}}],[\"线上配置时尽可能配置多的压缩类型\",{\"1\":{\"317\":1}}],[\"线程占用的处理器都在读写同一个变量servicenum\",{\"1\":{\"929\":1}}],[\"线程thread有如下几个状态\",{\"1\":{\"926\":1}}],[\"线程threadlocal中似乎已经有值了\",{\"1\":{\"650\":1}}],[\"线程会将脏页写入磁盘数据文件\",{\"1\":{\"863\":1}}],[\"线程从磁盘上的数据文件中读取数据页并放入到数据缓冲区\",{\"1\":{\"863\":1}}],[\"线程以及一个大型的共享内存组成\",{\"1\":{\"852\":1}}],[\"线程在自己的栈桢中创建锁记录\",{\"1\":{\"827\":1}}],[\"线程获取读锁失败返回\",{\"1\":{\"822\":1}}],[\"线程获得锁之后就不会再有解锁等操作了\",{\"1\":{\"673\":1}}],[\"线程被阻塞后便进入内核\",{\"1\":{\"812\":1}}],[\"线程之间的共享变量存储在主内存\",{\"1\":{\"809\":1}}],[\"线程之间的通信机制有两种\",{\"1\":{\"809\":1}}],[\"线程之间必须通过明确的发送消息来显示进行通信\",{\"1\":{\"809\":1}}],[\"线程之间没有公共状态\",{\"1\":{\"809\":1}}],[\"线程之间通过写\",{\"1\":{\"809\":1}}],[\"线程之间共享程序的公共状态\",{\"1\":{\"809\":1}}],[\"线程相关的知识\",{\"0\":{\"809\":1}}],[\"线程执行完1中的任务\",{\"1\":{\"771\":1}}],[\"线程执行操作阻塞\",{\"1\":{\"530\":1}}],[\"线程内有迭代逻辑时的中断处理参考代码模板\",{\"0\":{\"768\":1}}],[\"线程的中断状态不受该方法的影响\",{\"1\":{\"767\":1}}],[\"线程的中断状态\",{\"1\":{\"767\":1}}],[\"线程保持活动时间单位\",{\"1\":{\"758\":1}}],[\"线程保持活动时间\",{\"1\":{\"757\":1}}],[\"线程又处于睡眠状态\",{\"1\":{\"751\":1}}],[\"线程池对拒绝任务\",{\"1\":{\"779\":1}}],[\"线程池维护线程所允许的空闲时间\",{\"1\":{\"779\":1}}],[\"线程池配置\",{\"1\":{\"779\":1}}],[\"线程池如何配置合理\",{\"0\":{\"769\":1}}],[\"线程池的关闭\",{\"0\":{\"763\":1}}],[\"线程池的创建\",{\"0\":{\"754\":1}}],[\"线程池返回一个future类型的对象\",{\"1\":{\"762\":1}}],[\"线程池工作线程空闲后\",{\"1\":{\"757\":1}}],[\"线程池工作流程\",{\"0\":{\"753\":1}}],[\"线程池最大数\",{\"1\":{\"756\":1}}],[\"线程池会创建一个线程来执行任务\",{\"1\":{\"755\":1}}],[\"线程池会重用固定的几个线程\",{\"1\":{\"650\":1}}],[\"线程池好处\",{\"0\":{\"752\":1}}],[\"线程池\",{\"1\":{\"751\":1}}],[\"线程池技术来提升程序的性能\",{\"1\":{\"751\":1}}],[\"线程创建销毁等操作时\",{\"1\":{\"751\":1}}],[\"线程都会设计到一些系统调用\",{\"1\":{\"751\":1}}],[\"线程加锁时直接尝试获取锁\",{\"1\":{\"674\":1}}],[\"线程b在core2上修改y\",{\"1\":{\"663\":1}}],[\"线程bcd就不能同时访问这些数据\",{\"1\":{\"659\":1}}],[\"线程a在core1修改x\",{\"1\":{\"663\":1}}],[\"线程中断状态为false\",{\"1\":{\"768\":2}}],[\"线程中断异常\",{\"1\":{\"218\":2}}],[\"线程中使用完\",{\"1\":{\"650\":1}}],[\"线程基本不会销毁\",{\"1\":{\"650\":1}}],[\"线程安全的\",{\"1\":{\"650\":1}}],[\"线程安全的队列\",{\"1\":{\"529\":1}}],[\"线程安全\",{\"0\":{\"630\":1},\"1\":{\"626\":1}}],[\"线程间数据交换\",{\"1\":{\"550\":1}}],[\"线程未刷新回内存\",{\"1\":{\"440\":1}}],[\"线程隔离机制\",{\"1\":{\"626\":1}}],[\"线程隔离\",{\"1\":{\"402\":1}}],[\"线程\",{\"0\":{\"856\":1,\"859\":1},\"1\":{\"214\":1,\"651\":1,\"809\":3,\"863\":1}}],[\"节省了带宽资源\",{\"1\":{\"317\":1}}],[\"节点管理器\",{\"1\":{\"657\":1}}],[\"节点9\",{\"1\":{\"452\":1}}],[\"节点序列小的获取到锁并且可以采用watch自己的前一个节点来避免惊群现象\",{\"1\":{\"214\":1}}],[\"节点之间可能会失去联系\",{\"1\":{\"201\":1}}],[\"节点存储内容\",{\"1\":{\"157\":1}}],[\"节点编码\",{\"1\":{\"157\":1}}],[\"节点结构\",{\"1\":{\"157\":1}}],[\"节点\",{\"1\":{\"157\":1}}],[\"节点值对比函数\",{\"1\":{\"119\":1}}],[\"节点值释放函数\",{\"1\":{\"119\":1}}],[\"节点值复制函数\",{\"1\":{\"119\":1}}],[\"节点的值\",{\"1\":{\"119\":1}}],[\"级别2\",{\"1\":{\"662\":1}}],[\"级别越高\",{\"1\":{\"317\":1}}],[\"级联调用obj\",{\"1\":{\"413\":1}}],[\"级联删除数据库\",{\"1\":{\"21\":1}}],[\"压缩也不是所有的指针都会压缩\",{\"1\":{\"722\":1}}],[\"压缩文件这样的二进制数据\",{\"1\":{\"623\":1}}],[\"压缩就越小\",{\"1\":{\"317\":1}}],[\"压缩版本\",{\"1\":{\"317\":1}}],[\"压缩等操作\",{\"1\":{\"42\":1}}],[\"启用compressoops后\",{\"1\":{\"722\":1}}],[\"启用feign调用\",{\"1\":{\"409\":1}}],[\"启用keep\",{\"1\":{\"317\":2}}],[\"启用压缩\",{\"1\":{\"317\":7}}],[\"启用应答头\",{\"1\":{\"317\":1}}],[\"启动顺序\",{\"1\":{\"843\":1}}],[\"启动到\",{\"1\":{\"843\":1}}],[\"启动到mount\",{\"1\":{\"843\":1}}],[\"启动后台进程和线程\",{\"1\":{\"843\":1}}],[\"启动并对基本输入输出系统\",{\"1\":{\"689\":1}}],[\"启动并创建用户\",{\"0\":{\"78\":1}}],[\"启动web应用\",{\"1\":{\"566\":1}}],[\"启动jetty\",{\"1\":{\"566\":1}}],[\"启动tomcat\",{\"1\":{\"566\":1}}],[\"启动kafka用\",{\"1\":{\"564\":1}}],[\"启动keepalived服务\",{\"1\":{\"342\":2,\"367\":2}}],[\"启动多线程任务\",{\"1\":{\"475\":1}}],[\"启动服务消费端\",{\"0\":{\"406\":1}}],[\"启动两个服务端\",{\"0\":{\"405\":1}}],[\"启动项目中\",{\"0\":{\"384\":1}}],[\"启动nginx\",{\"1\":{\"343\":1}}],[\"启动数据库实例\",{\"1\":{\"843\":1}}],[\"启动数据库\",{\"1\":{\"342\":1}}],[\"启动类加载器\",{\"1\":{\"558\":1}}],[\"启动类\",{\"1\":{\"297\":1}}],[\"启动方式可见\",{\"1\":{\"297\":1}}],[\"启动es和kibana\",{\"0\":{\"273\":1}}],[\"启动虚拟机并指定网络模式为host\",{\"1\":{\"255\":1}}],[\"启动一个名为web01的容器\",{\"1\":{\"262\":1}}],[\"启动一个nginx容器并指定\",{\"1\":{\"251\":1}}],[\"启动一个容器\",{\"1\":{\"250\":1,\"256\":1}}],[\"启动的每个容器网络互通\",{\"1\":{\"250\":1}}],[\"启动容器\",{\"0\":{\"247\":1}}],[\"启动基于tomcat\",{\"0\":{\"241\":1}}],[\"启动更快\",{\"1\":{\"232\":1}}],[\"启动docker\",{\"0\":{\"229\":1}}],[\"启动客户端\",{\"1\":{\"214\":1}}],[\"启动定时任务续约\",{\"1\":{\"214\":1}}],[\"启动时加载\",{\"1\":{\"146\":1}}],[\"启动时的\",{\"1\":{\"141\":1}}],[\"启动时\",{\"1\":{\"140\":1}}],[\"启动时能够更快加载\",{\"1\":{\"140\":1}}],[\"启动是否成功\",{\"1\":{\"80\":1}}],[\"启动与安装镜像\",{\"1\":{\"63\":1}}],[\"启动\",{\"0\":{\"281\":1,\"844\":1},\"1\":{\"56\":1,\"229\":1,\"321\":1,\"389\":1,\"711\":1,\"834\":1}}],[\"识别http协议的版本\",{\"1\":{\"317\":1}}],[\"决定看看到底是什么\",{\"1\":{\"825\":1}}],[\"决定采用\",{\"1\":{\"705\":1}}],[\"决定一个并行度\",{\"1\":{\"627\":1}}],[\"决定从哪些partition中拉去消息\",{\"1\":{\"433\":1}}],[\"决定是否开启gzip模块\",{\"1\":{\"317\":1}}],[\"决定了不同的一致性\",{\"1\":{\"192\":1}}],[\"真的是可以锻炼自己思维和代码的编写能力\",{\"1\":{\"898\":1}}],[\"真正地释放\",{\"1\":{\"622\":1}}],[\"真实的路径是root指定的值加上location指定的值\",{\"1\":{\"316\":1}}],[\"真时\",{\"1\":{\"196\":1}}],[\"爬虫会更新自己的url数据库\",{\"1\":{\"309\":1}}],[\"爬虫不会更新自己的url数据库\",{\"1\":{\"309\":1}}],[\"精确到列\",{\"1\":{\"887\":1}}],[\"精确到纳秒\",{\"1\":{\"25\":1}}],[\"精确的阈值有很高的要求\",{\"1\":{\"704\":1}}],[\"精确匹配与模糊匹配差别\",{\"1\":{\"307\":1}}],[\"匹配到该区块\",{\"1\":{\"307\":2}}],[\"匹配到一个普通格式后\",{\"1\":{\"307\":1}}],[\"匹配到\",{\"1\":{\"306\":1}}],[\"做其它不需要同步但能很快执行完的工作\",{\"1\":{\"924\":1}}],[\"做其它不需要同步的工作\",{\"1\":{\"924\":1}}],[\"做什么\",{\"1\":{\"910\":1}}],[\"做一个对比\",{\"1\":{\"682\":1}}],[\"做了一些额外的回收工作\",{\"1\":{\"650\":1}}],[\"做这个限制目的是为了方便把\",{\"1\":{\"433\":1}}],[\"做编码\",{\"1\":{\"306\":1}}],[\"做成的一张\",{\"1\":{\"234\":1}}],[\"路径\",{\"1\":{\"306\":1}}],[\"路由也是消费方\",{\"1\":{\"396\":1}}],[\"路由信息\",{\"1\":{\"257\":1}}],[\"路由等信息\",{\"1\":{\"250\":5}}],[\"路由\",{\"1\":{\"160\":1,\"250\":1}}],[\"详细计算\",{\"1\":{\"526\":4}}],[\"详细如下\",{\"1\":{\"305\":1}}],[\"详情内容请参考\",{\"1\":{\"155\":1}}],[\"权\",{\"1\":{\"887\":1}}],[\"权限的回收\",{\"0\":{\"887\":1}}],[\"权限管理模式\",{\"1\":{\"837\":1}}],[\"权限校验\",{\"1\":{\"863\":1}}],[\"权限校验失败\",{\"1\":{\"419\":1}}],[\"权限校验异常\",{\"1\":{\"419\":1}}],[\"权重越高分配到需要处理的请求越多\",{\"1\":{\"300\":1}}],[\"权重方式\",{\"1\":{\"300\":1}}],[\"权益还是信用\",{\"1\":{\"168\":1}}],[\"缺失凌晨\",{\"1\":{\"868\":1}}],[\"缺少一个将无法正常启动\",{\"1\":{\"853\":1}}],[\"缺陷容忍技术\",{\"1\":{\"704\":1}}],[\"缺陷回避的方式\",{\"1\":{\"704\":1}}],[\"缺省配置就是轮询策略\",{\"1\":{\"299\":1}}],[\"缺点\",{\"0\":{\"207\":1,\"210\":1,\"726\":1},\"1\":{\"265\":1,\"557\":2,\"683\":1,\"727\":1,\"731\":1}}],[\"轮询的方式又会耗费无谓的\",{\"1\":{\"475\":1}}],[\"轮询分发给processor线程处理\",{\"1\":{\"433\":1}}],[\"轮询算法是把请求平均的转发给各个后端\",{\"1\":{\"302\":1}}],[\"轮询\",{\"0\":{\"299\":1}}],[\"动态视图记录在\",{\"1\":{\"888\":1}}],[\"动态缓冲区检查\",{\"1\":{\"863\":1}}],[\"动态参数在数据库运行期间可以修改内存中的值\",{\"1\":{\"854\":1}}],[\"动态\",{\"1\":{\"854\":2}}],[\"动态度量\",{\"1\":{\"684\":1}}],[\"动态链接\",{\"1\":{\"556\":1}}],[\"动态服务器组\",{\"1\":{\"298\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1}}],[\"动态读取nocas配置内容\",{\"1\":{\"297\":1}}],[\"常常是因为数据结构的层次很深\",{\"1\":{\"921\":1}}],[\"常常可以在很多地方看到相同的三四项数据\",{\"1\":{\"914\":1}}],[\"常常觉得对象程序中只有无穷无尽的委托\",{\"1\":{\"910\":1}}],[\"常见的io多路复用方式有\",{\"1\":{\"795\":1}}],[\"常见的页面提交或上传文件类型\",{\"1\":{\"748\":1}}],[\"常见的页面资源类型\",{\"0\":{\"748\":1}}],[\"常见的content\",{\"1\":{\"747\":1}}],[\"常见的数字签名算法\",{\"1\":{\"736\":1}}],[\"常见的方法有checkpoint\",{\"1\":{\"704\":1}}],[\"常见技术是通过重新配置系统来达到避免的目标\",{\"1\":{\"704\":1}}],[\"常数复杂度获取字符串长度\",{\"0\":{\"618\":1}}],[\"常量池中收到常量是否有不被支持的类型\",{\"1\":{\"560\":1}}],[\"常量池中的常量是否有不被支持的类型\",{\"1\":{\"558\":1}}],[\"常量\",{\"1\":{\"556\":1}}],[\"常量类\",{\"1\":{\"297\":1,\"626\":2}}],[\"常用方法\",{\"1\":{\"445\":1}}],[\"常用的有reentrantlock\",{\"1\":{\"723\":1}}],[\"常用的比如每个请求怎么把一串后续关联起来\",{\"1\":{\"650\":1}}],[\"常用的资源隔离配置\",{\"1\":{\"402\":1}}],[\"常用的熔断器配置\",{\"1\":{\"402\":1}}],[\"常用的方案包括\",{\"1\":{\"158\":1}}],[\"常用的2种存储引擎\",{\"0\":{\"91\":1}}],[\"官翻https\",{\"1\":{\"458\":1}}],[\"官网下载需要安装版本jdk\",{\"0\":{\"375\":1}}],[\"官网下载需要安装版本redis\",{\"1\":{\"352\":1}}],[\"官网\",{\"1\":{\"297\":1}}],[\"官方甚至建议使用synchronized\",{\"1\":{\"703\":1}}],[\"官方https\",{\"1\":{\"458\":1}}],[\"官方建议back\",{\"1\":{\"74\":1}}],[\"官方首页\",{\"1\":{\"63\":1}}],[\"官方文档\",{\"1\":{\"63\":2}}],[\"永久代\",{\"1\":{\"557\":1,\"722\":1}}],[\"永久挂载\",{\"0\":{\"373\":1},\"1\":{\"373\":1}}],[\"永久\",{\"1\":{\"288\":3}}],[\"角色禁用和启用\",{\"1\":{\"888\":1}}],[\"角色使权限管理更加方便\",{\"1\":{\"888\":1}}],[\"角色是权限的集合\",{\"1\":{\"888\":1}}],[\"角色类型\",{\"0\":{\"888\":1}}],[\"角色权限管理\",{\"1\":{\"846\":1}}],[\"角色\",{\"1\":{\"288\":1}}],[\"硬件错误通常能够够在两个物理机上进行隔离处理\",{\"1\":{\"704\":1}}],[\"硬件容错常用的方法包括使用冗余\",{\"1\":{\"704\":1}}],[\"硬件容错\",{\"1\":{\"704\":1}}],[\"硬件可信\",{\"0\":{\"687\":1}}],[\"硬件配置\",{\"1\":{\"287\":1}}],[\"硬盘和网络带宽等\",{\"1\":{\"656\":1}}],[\"硬盘30gb或更多\",{\"1\":{\"287\":1}}],[\"仪表板\",{\"1\":{\"285\":1}}],[\"绘制kibana图表\",{\"0\":{\"285\":1}}],[\"去重进行全平台\",{\"1\":{\"789\":1}}],[\"去重且根据\",{\"1\":{\"789\":3}}],[\"去重\",{\"1\":{\"789\":2}}],[\"去读取这些文件block\",{\"1\":{\"627\":1}}],[\"去读同一个ringbuffer\",{\"1\":{\"453\":1}}],[\"去掉临时变量\",{\"0\":{\"904\":1}}],[\"去掉注释\",{\"1\":{\"355\":1}}],[\"去掉stdout配置\",{\"1\":{\"282\":1}}],[\"去服务器上查询慢sql\",{\"1\":{\"74\":1}}],[\"编码时候要养成良好的习惯\",{\"1\":{\"650\":1}}],[\"编码格式\",{\"1\":{\"518\":1}}],[\"编译器在不改变单线程程序语义的前提下\",{\"1\":{\"809\":1}}],[\"编译器优化的重排序\",{\"1\":{\"809\":1}}],[\"编译器和处理器常常会对指令做重排序\",{\"1\":{\"809\":1}}],[\"编译和测试\",{\"1\":{\"593\":2}}],[\"编译依赖范围\",{\"1\":{\"593\":1}}],[\"编译classpath\",{\"1\":{\"593\":1}}],[\"编译\",{\"1\":{\"569\":1}}],[\"编译测试代码\",{\"1\":{\"566\":1}}],[\"编译源代码\",{\"1\":{\"566\":1}}],[\"编辑模式在文档中增加如下行\",{\"1\":{\"377\":1}}],[\"编辑\",{\"1\":{\"377\":1,\"502\":2}}],[\"编辑从库的redis\",{\"1\":{\"355\":1}}],[\"编辑redis\",{\"1\":{\"355\":1}}],[\"编辑yaml\",{\"1\":{\"278\":1}}],[\"编写专门的打印函数\",{\"1\":{\"616\":1}}],[\"编写完测试用例运行命令mvn\",{\"1\":{\"581\":1}}],[\"编写pom\",{\"0\":{\"578\":1}}],[\"编写连接kafka所需要的参数\",{\"1\":{\"564\":1}}],[\"编写filebeat配置文件\",{\"0\":{\"275\":1}}],[\"编写人\",{\"1\":{\"263\":1}}],[\"编写dockerfile并打包\",{\"1\":{\"263\":1}}],[\"星号匹配所有该目录下的文件\",{\"1\":{\"275\":1,\"277\":1}}],[\"访问threadfactory实例\",{\"1\":{\"472\":1}}],[\"访问地址\",{\"1\":{\"296\":1}}],[\"访问kibana\",{\"1\":{\"273\":1}}],[\"访问对应的顶级域名服务器\",{\"1\":{\"222\":1}}],[\"生命周期与线程相同\",{\"1\":{\"556\":1}}],[\"生产环境慎用\",{\"1\":{\"882\":1}}],[\"生产环境则会因为url为空\",{\"1\":{\"410\":1}}],[\"生产者是往队列里添加元素的线程\",{\"1\":{\"530\":1}}],[\"生产者可以接着往\",{\"1\":{\"455\":1}}],[\"生产者写入数据\",{\"0\":{\"454\":1}}],[\"生产者事件发布等api\",{\"1\":{\"451\":1}}],[\"生产者发送失败\",{\"1\":{\"437\":1}}],[\"生产者发送成功\",{\"1\":{\"437\":1}}],[\"生产者\",{\"1\":{\"433\":1,\"450\":1,\"458\":1}}],[\"生产者在发送消息时\",{\"1\":{\"430\":1}}],[\"生效环境变量\",{\"1\":{\"377\":1}}],[\"生效\",{\"1\":{\"288\":1}}],[\"生效配置\",{\"1\":{\"271\":1}}],[\"生成环境不要和源库数据文件放在同一磁盘上\",{\"1\":{\"890\":1}}],[\"生成确定性随机数k\",{\"1\":{\"743\":1}}],[\"生成数字签名\",{\"0\":{\"738\":1,\"743\":1}}],[\"生成信件的摘要\",{\"1\":{\"705\":1}}],[\"生成源码包\",{\"1\":{\"576\":1}}],[\"生成源码jar包\",{\"1\":{\"566\":1}}],[\"生成文档\",{\"1\":{\"568\":1}}],[\"生成idea项目\",{\"1\":{\"566\":1}}],[\"生成id的性能也是非常高的\",{\"1\":{\"206\":1}}],[\"生成eclipse项目\",{\"1\":{\"566\":1}}],[\"生成ssh公钥和私钥\",{\"1\":{\"495\":1}}],[\"生成补偿操作\",{\"1\":{\"421\":1}}],[\"生成\",{\"1\":{\"140\":1,\"705\":2}}],[\"生成一个临时文件\",{\"1\":{\"42\":1}}],[\"生成新的归档日志前删除旧的归档日志文件造成了\",{\"1\":{\"872\":1}}],[\"生成新的\",{\"1\":{\"35\":1}}],[\"^~\",{\"1\":{\"306\":4}}],[\"^\",{\"0\":{\"896\":1},\"1\":{\"270\":1,\"272\":1}}],[\"需求的变化\",{\"1\":{\"898\":1}}],[\"需求的变更\",{\"1\":{\"898\":1}}],[\"需求量比较大\",{\"1\":{\"784\":1}}],[\"需用volumes\",{\"1\":{\"263\":1}}],[\"需要做一些其它的工作\",{\"1\":{\"924\":1}}],[\"需要层层调用getter获取内层数据\",{\"1\":{\"921\":1}}],[\"需要的工作量多少\",{\"1\":{\"898\":1}}],[\"需要的参数\",{\"1\":{\"675\":2}}],[\"需要将所有脏数据块写入磁盘\",{\"1\":{\"859\":1}}],[\"需要将server\",{\"1\":{\"321\":1}}],[\"需要处理的数据块不在缓冲区中\",{\"1\":{\"859\":1}}],[\"需要开放数据库服务器防火墙对应端口\",{\"1\":{\"839\":1}}],[\"需要修复锁记录和markword\",{\"1\":{\"828\":1}}],[\"需要修改所有的副\",{\"1\":{\"413\":1}}],[\"需要修改的是gateway配置和增加openfeign参数\",{\"1\":{\"410\":1}}],[\"需要线程上下文切换\",{\"1\":{\"812\":1}}],[\"需要我们注意\",{\"1\":{\"809\":1}}],[\"需要我们了解我们选取字段的排序规则\",{\"1\":{\"73\":1}}],[\"需要实际数据作为支撑\",{\"1\":{\"785\":1}}],[\"需要把头去掉\",{\"1\":{\"749\":1}}],[\"需要把数据一行一行地从引擎里面读出来\",{\"1\":{\"116\":1}}],[\"需要一些特殊的配置\",{\"1\":{\"709\":1}}],[\"需要缩短\",{\"1\":{\"622\":1}}],[\"需要对\",{\"1\":{\"619\":1}}],[\"需要包括年份\",{\"1\":{\"605\":1}}],[\"需要指定main方法的位置\",{\"1\":{\"583\":1}}],[\"需要maven\",{\"1\":{\"581\":1}}],[\"需要设置系统环境变量maven\",{\"1\":{\"574\":1}}],[\"需要设置代理\",{\"1\":{\"573\":1}}],[\"需要注意\",{\"1\":{\"533\":1}}],[\"需要注意的是\",{\"1\":{\"220\":1}}],[\"需要遍历队列\",{\"1\":{\"529\":1}}],[\"需要检查所有的消费者们都读到了哪里\",{\"1\":{\"454\":1}}],[\"需要符合特定的格式\",{\"1\":{\"435\":1}}],[\"需要人工干预\",{\"1\":{\"412\":1}}],[\"需要重写而不是重构\",{\"1\":{\"908\":1}}],[\"需要重启数据库才能生效\",{\"1\":{\"854\":1}}],[\"需要重启或版本回滚\",{\"1\":{\"412\":1}}],[\"需要重新选主节点\",{\"1\":{\"198\":1}}],[\"需要扩容\",{\"1\":{\"412\":1}}],[\"需要类全名\",{\"1\":{\"403\":1}}],[\"需要等待几秒才会出现\",{\"1\":{\"342\":1}}],[\"需要提前下载镜像并导入节点\",{\"1\":{\"287\":1}}],[\"需要拉取镜像\",{\"1\":{\"287\":1}}],[\"需要编辑配置文件\",{\"1\":{\"282\":1}}],[\"需要制定path\",{\"1\":{\"263\":1}}],[\"需要暴露的端口库号列表\",{\"1\":{\"263\":1}}],[\"需要与jar包在容器中运行使用端口号一致\",{\"1\":{\"263\":1}}],[\"需要配置网卡\",{\"1\":{\"257\":1}}],[\"需要通过第9步\",{\"1\":{\"222\":1}}],[\"需要通过提升基础设施的稳定性来保障\",{\"1\":{\"196\":1}}],[\"需要获取还要请求name\",{\"1\":{\"222\":1}}],[\"需要在用户访问时可以马上得到返回\",{\"1\":{\"201\":1}}],[\"需要在mysql配置文件中打开\",{\"1\":{\"73\":1}}],[\"需要根据wal\",{\"1\":{\"199\":1}}],[\"需要进行担保代偿\",{\"1\":{\"189\":1}}],[\"需要结合\",{\"1\":{\"160\":1}}],[\"需要用到multi命令和exec命令\",{\"1\":{\"139\":1}}],[\"需要额外进行数据操作的路由工作\",{\"1\":{\"131\":1}}],[\"需要更长的读取时间\",{\"1\":{\"129\":1}}],[\"需要了解mysql的数据结构才能更加清楚上述效率的问题\",{\"1\":{\"117\":1}}],[\"需要扫码两遍索引树\",{\"1\":{\"104\":1}}],[\"需要快速查找引用和其他类似数据的环境下\",{\"1\":{\"93\":1}}],[\"需要同步的数据库\",{\"1\":{\"79\":1}}],[\"零拷贝\",{\"1\":{\"433\":1}}],[\"零停机不停服发布服务\",{\"1\":{\"263\":1}}],[\"零次到无数次\",{\"1\":{\"22\":1}}],[\"杀死当前pod\",{\"1\":{\"263\":1}}],[\"镜像文件\",{\"0\":{\"833\":1}}],[\"镜像\",{\"1\":{\"263\":1}}],[\"镜像版本号\",{\"1\":{\"263\":2}}],[\"打破了传统字符编码机制的限制\",{\"1\":{\"549\":1}}],[\"打头的都是标准\",{\"1\":{\"520\":1}}],[\"打印helloworld字符串时\",{\"1\":{\"580\":1}}],[\"打印log\",{\"1\":{\"410\":1,\"411\":1}}],[\"打印日志\",{\"1\":{\"399\":1}}],[\"打开状态\",{\"1\":{\"843\":1}}],[\"打开\",{\"1\":{\"838\":1}}],[\"打开连接\",{\"0\":{\"647\":1}}],[\"打开所有端点\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1}}],[\"打开nacos管理服务\",{\"1\":{\"394\":1,\"415\":1}}],[\"打开错误日志进行查看\",{\"1\":{\"74\":1}}],[\"打jar包时忽略配置文件\",{\"1\":{\"389\":1}}],[\"打包和部署等烦琐且不起眼的工作上\",{\"1\":{\"568\":1}}],[\"打包时跳过测试\",{\"1\":{\"389\":1}}],[\"打包\",{\"0\":{\"710\":1},\"1\":{\"263\":1,\"566\":1}}],[\"管理用户资源限制\",{\"1\":{\"883\":1}}],[\"管理用户\",{\"0\":{\"876\":1}}],[\"管理表空间\",{\"0\":{\"864\":1}}],[\"管理工具上会报没有查询\",{\"1\":{\"888\":1}}],[\"管理工具\",{\"0\":{\"846\":1}}],[\"管理工具图形化界面连接数据库\",{\"0\":{\"840\":1}}],[\"管理多个业务处理器的依赖关系\",{\"1\":{\"451\":1}}],[\"管理和协调生产者的游标序号和各个消费者的序号\",{\"1\":{\"450\":1}}],[\"管理\",{\"1\":{\"262\":1,\"419\":4}}],[\"管道会被关闭\",{\"1\":{\"14\":1}}],[\"暴露端口\",{\"0\":{\"260\":1}}],[\"绑定\",{\"1\":{\"254\":1}}],[\"绑定租约写入\",{\"1\":{\"214\":1}}],[\"映射\",{\"1\":{\"652\":1}}],[\"映射指定地址的任意端口\",{\"0\":{\"254\":1}}],[\"映射指定地址的指定端口\",{\"1\":{\"253\":1}}],[\"映射所有接口地址\",{\"0\":{\"252\":1}}],[\"桥接模式\",{\"0\":{\"251\":1},\"1\":{\"250\":1}}],[\"隔离技术\",{\"0\":{\"699\":1}}],[\"隔离进程组\",{\"1\":{\"250\":1}}],[\"隔离性可以防\",{\"1\":{\"105\":1}}],[\"隔离性\",{\"1\":{\"65\":2,\"66\":1,\"105\":1}}],[\"成为保证软件质量的法宝\",{\"1\":{\"898\":1}}],[\"成立则通过验证\",{\"1\":{\"739\":1,\"744\":1}}],[\"成功进入停车场\",{\"1\":{\"554\":1}}],[\"成功构建centos\",{\"1\":{\"246\":1}}],[\"成员全部为\",{\"1\":{\"158\":1}}],[\"成员数量少\",{\"1\":{\"160\":1}}],[\"成员数量不超过\",{\"1\":{\"158\":2}}],[\"成员数量的增长将引起\",{\"1\":{\"158\":1}}],[\"成员按照分值从大到小排列\",{\"1\":{\"138\":2}}],[\"成员则是用于实现多态链表所需的类型特定函数\",{\"1\":{\"119\":1}}],[\"浏览器会发出另一种警告\",{\"1\":{\"705\":1}}],[\"浏览器会发出警告\",{\"1\":{\"705\":1}}],[\"浏览器会在自己的缓存中查找url对应ip地址\",{\"1\":{\"222\":1}}],[\"浏览器\",{\"1\":{\"705\":1}}],[\"浏览器和网站服务器之间传递信息\",{\"1\":{\"520\":1}}],[\"浏览器原因就不说了\",{\"1\":{\"484\":1}}],[\"浏览器支持的压缩格式\",{\"1\":{\"477\":1}}],[\"浏览器支持的语言\",{\"1\":{\"477\":1}}],[\"浏览器支持的类型\",{\"1\":{\"477\":1}}],[\"浏览器访问服务器外网ip地址\",{\"1\":{\"343\":1}}],[\"浏览器地址栏会显示跳转后的url地址\",{\"1\":{\"309\":2}}],[\"浏览器查看nginx启动状态\",{\"0\":{\"249\":1}}],[\"浏览器查看访问容器tomcat实例http\",{\"1\":{\"241\":1}}],[\"浏览器显示\",{\"1\":{\"243\":1}}],[\"新特性的添加会更快速\",{\"1\":{\"907\":1}}],[\"新片\",{\"1\":{\"898\":1}}],[\"新版本支持\",{\"1\":{\"883\":1}}],[\"新的需求越来越难实现\",{\"1\":{\"898\":1}}],[\"新的\",{\"1\":{\"831\":1}}],[\"新的docker容器网络也会丢失\",{\"1\":{\"250\":1}}],[\"新任务将在队列中等待\",{\"1\":{\"771\":1}}],[\"新增节点\",{\"1\":{\"734\":1}}],[\"新增了一种注解\",{\"1\":{\"669\":1}}],[\"新增加了一个包含\",{\"1\":{\"475\":1}}],[\"新生代与老年代的比例\",{\"1\":{\"557\":1}}],[\"新生代\",{\"1\":{\"557\":2,\"722\":1}}],[\"新生代基本采用复制算法\",{\"1\":{\"557\":1}}],[\"新消费者\",{\"1\":{\"458\":1}}],[\"新建节点并将节点与当前线程保存起来\",{\"1\":{\"929\":1}}],[\"新建状态\",{\"1\":{\"926\":1}}],[\"新建\",{\"1\":{\"285\":1}}],[\"新创建的docker容器不会创建自己的网卡\",{\"1\":{\"250\":2}}],[\"新容器内指定一个伪终端\",{\"1\":{\"241\":1}}],[\"新顶级域名\",{\"1\":{\"222\":1}}],[\"替换为\",{\"1\":{\"236\":1}}],[\"替代\",{\"1\":{\"161\":3}}],[\"似于面向对象编程中的对象与类\",{\"1\":{\"234\":1}}],[\"听到这里\",{\"1\":{\"234\":1}}],[\"跑起来就可以提供服务了\",{\"1\":{\"234\":1}}],[\"俗称docker的容器\",{\"1\":{\"234\":1}}],[\"俗称docker的镜像\",{\"1\":{\"234\":1}}],[\"崔皓来源\",{\"1\":{\"222\":1}}],[\"作业\",{\"1\":{\"872\":1}}],[\"作业管理等功能\",{\"1\":{\"846\":1}}],[\"作业的任务\",{\"1\":{\"657\":1}}],[\"作业的初始化\",{\"1\":{\"652\":1}}],[\"作用与虚拟机栈类似\",{\"1\":{\"556\":1}}],[\"作用是将文件中的数据输入到内存中\",{\"1\":{\"539\":1}}],[\"作用\",{\"0\":{\"474\":1}}],[\"作者\",{\"1\":{\"222\":1}}],[\"作为良好开发习惯被越来越多的人所采纳\",{\"1\":{\"898\":1}}],[\"作为签名的一部分\",{\"1\":{\"743\":1}}],[\"作为自主可控的可信节点植入可信根\",{\"1\":{\"689\":1}}],[\"作为自增主键\",{\"1\":{\"84\":1}}],[\"作为数据库\",{\"1\":{\"620\":1}}],[\"作为高性能的基础通信组件\",{\"1\":{\"609\":1}}],[\"作为基础通信组件\",{\"1\":{\"608\":1}}],[\"作为该类的数据访问入口\",{\"1\":{\"558\":1,\"559\":1}}],[\"作为集群管理工具\",{\"1\":{\"161\":1}}],[\"作为任何单实例的数据服务\",{\"1\":{\"158\":1}}],[\"作为\",{\"1\":{\"150\":1,\"608\":1,\"624\":1,\"627\":1}}],[\"作为一种常用数据结构\",{\"1\":{\"118\":1}}],[\"作为专门设计用于处理对输入向量的查询的数据库\",{\"1\":{\"50\":1}}],[\"作为字段分隔符\",{\"1\":{\"25\":1}}],[\"作为副本节点\",{\"1\":{\"14\":1}}],[\"显然使用cname也要方便一些\",{\"1\":{\"222\":1}}],[\"显示一共运行了多少测试\",{\"1\":{\"581\":1}}],[\"显示maven允许的debug信息\",{\"1\":{\"566\":1}}],[\"显示maven运行出错的信息\",{\"1\":{\"566\":1}}],[\"显示maven依赖列表\",{\"1\":{\"566\":1}}],[\"显示maven依赖树\",{\"1\":{\"566\":1}}],[\"显示加载指的是通过直接调用\",{\"1\":{\"563\":1}}],[\"显示加载指的是通过直接调用class\",{\"1\":{\"558\":1}}],[\"显示所有的\",{\"1\":{\"418\":1}}],[\"显示liquibase\",{\"1\":{\"418\":1}}],[\"显示数据库迁移路径的详细信息\",{\"1\":{\"418\":1}}],[\"显示指定名称的环境信息\",{\"1\":{\"418\":1}}],[\"显示当前的环境特性\",{\"1\":{\"418\":1}}],[\"显示http足迹\",{\"1\":{\"418\":1}}],[\"显示health的明细内容\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1}}],[\"显示和修改配置的loggers\",{\"1\":{\"418\":1}}],[\"显示应用中的调度任务\",{\"1\":{\"418\":1}}],[\"显示应用指定名称的度量信息\",{\"1\":{\"418\":1}}],[\"显示应用的度量信息\",{\"1\":{\"418\":1}}],[\"显示应用的健康状态\",{\"1\":{\"418\":1}}],[\"显示应用的基本信息\",{\"1\":{\"418\":1}}],[\"显示应用暴露的审计事件\",{\"1\":{\"418\":1}}],[\"显示查询使用了何种类型\",{\"1\":{\"113\":1}}],[\"显示这一行的数据是关于哪张表的\",{\"1\":{\"113\":1}}],[\"显示这个表中的所建立的索引\",{\"1\":{\"28\":1}}],[\"显示已开启慢sql的日志\",{\"1\":{\"74\":1}}],[\"服务需要为启动状态\",{\"1\":{\"894\":1}}],[\"服务没有启动\",{\"1\":{\"891\":1}}],[\"服务是否启动\",{\"0\":{\"891\":1}}],[\"服务配置\",{\"1\":{\"853\":1}}],[\"服务查看器管理\",{\"1\":{\"844\":1}}],[\"服务方式管理\",{\"1\":{\"844\":1}}],[\"服务员点完餐后\",{\"1\":{\"791\":2}}],[\"服务\",{\"1\":{\"520\":1,\"834\":2,\"835\":1,\"837\":1}}],[\"服务端可连接队列数量\",{\"1\":{\"612\":1}}],[\"服务端\",{\"0\":{\"612\":1}}],[\"服务端用私钥解密后\",{\"1\":{\"522\":1}}],[\"服务端解密信息\",{\"1\":{\"522\":1}}],[\"服务端的配置\",{\"1\":{\"522\":1}}],[\"服务端返回\",{\"1\":{\"486\":1}}],[\"服务端口配置\",{\"1\":{\"414\":1}}],[\"服务进程那块\",{\"1\":{\"433\":1}}],[\"服务获取依赖资源失败\",{\"1\":{\"412\":1}}],[\"服务内部错误\",{\"1\":{\"412\":1}}],[\"服务正常\",{\"1\":{\"412\":1}}],[\"服务地址\",{\"1\":{\"412\":1,\"418\":1}}],[\"服务的echo方法\",{\"1\":{\"411\":1}}],[\"服务注册与发现\",{\"1\":{\"410\":1}}],[\"服务实例切换重试次数\",{\"1\":{\"403\":1}}],[\"服务提供者注册在服务注册中心的名称\",{\"1\":{\"398\":1,\"416\":1}}],[\"服务发现\",{\"1\":{\"394\":1,\"416\":1}}],[\"服务商从方便维护的角度\",{\"1\":{\"222\":1}}],[\"服务器\",{\"1\":{\"838\":1,\"841\":2,\"843\":1,\"883\":3,\"893\":1}}],[\"服务器根据编码类型使用特定的解析方式\",{\"1\":{\"747\":1}}],[\"服务器用自己的私钥加密网页以后\",{\"1\":{\"705\":1}}],[\"服务器启动时创建的处理请求的线程数应该足够处理一个小量的负载\",{\"1\":{\"651\":1}}],[\"服务器端接收到这个确认包之后\",{\"1\":{\"649\":1}}],[\"服务器端准备好关闭连接时\",{\"1\":{\"649\":1}}],[\"服务器端进入last\",{\"1\":{\"649\":1}}],[\"服务器端进入close\",{\"1\":{\"649\":1}}],[\"服务器端进入syn\",{\"1\":{\"648\":1}}],[\"服务器端确认客户端的fin包\",{\"1\":{\"649\":1}}],[\"服务器端选择自己isn\",{\"1\":{\"648\":1}}],[\"服务器发回确认包\",{\"1\":{\"648\":1}}],[\"服务器接收请求\",{\"0\":{\"634\":1}}],[\"服务器内部错误\",{\"1\":{\"626\":1}}],[\"服务器会用它来识别消息的来源\",{\"1\":{\"564\":1}}],[\"服务器从每个分区里返回给消费者的最大字节数\",{\"1\":{\"564\":1}}],[\"服务器是因为处理长\",{\"1\":{\"484\":1}}],[\"服务器响应100\",{\"1\":{\"482\":1}}],[\"服务器响应200\",{\"1\":{\"482\":2}}],[\"服务器压力顶不住\",{\"1\":{\"428\":1}}],[\"服务器状态最健康的\",{\"1\":{\"222\":1}}],[\"服务器中\",{\"1\":{\"221\":1}}],[\"服务器本身还使用链表来保存多个客户端的状态信息\",{\"1\":{\"118\":1}}],[\"根本没有进行任何计算\",{\"1\":{\"910\":1}}],[\"根本不可能在打印html报表的函数中复用目前statement的任何行为\",{\"1\":{\"898\":1}}],[\"根域名服务器就是存放顶级域名服务器地址的\",{\"1\":{\"222\":1}}],[\"根域名服务器\",{\"1\":{\"222\":1}}],[\"根据类的职责和对象之间的依赖关系\",{\"1\":{\"906\":1}}],[\"根据执行计划执行\",{\"1\":{\"863\":2}}],[\"根据控制文件中的数据文件路径和练级日志文件路径\",{\"1\":{\"843\":1}}],[\"根据exclusivecount方法的注释为独占式获取的次数即写锁被获取的次数\",{\"1\":{\"820\":1}}],[\"根据这个原则抽取方法\",{\"1\":{\"906\":1}}],[\"根据这个mask掩码给fd\",{\"1\":{\"799\":1}}],[\"根据这些日志信息统计并分析用户行为\",{\"1\":{\"780\":1}}],[\"根据不同站点统计一周内用户的登录情况\",{\"1\":{\"789\":1}}],[\"根据平台分组统计一周内的用户登录情况\",{\"1\":{\"789\":1}}],[\"根据用户id去重来统计一周内登陆总数\",{\"1\":{\"789\":1}}],[\"根据用户行为和需求推荐信息或产品\",{\"1\":{\"55\":1}}],[\"根据需要动态扩展或动态收缩系统缓冲池\",{\"1\":{\"863\":1}}],[\"根据需要创建新线程的线程池\",{\"1\":{\"773\":1}}],[\"根据需求进行比较\",{\"1\":{\"734\":1}}],[\"根据sig\",{\"1\":{\"739\":1}}],[\"根据商品信息生成订单\",{\"1\":{\"732\":1}}],[\"根据mesi协议\",{\"1\":{\"665\":1}}],[\"根据mesi\",{\"1\":{\"663\":1}}],[\"根据具体的\",{\"1\":{\"627\":1}}],[\"根据传统\",{\"1\":{\"617\":1}}],[\"根据对象存活周期的不同将内存划分为几块\",{\"1\":{\"557\":1}}],[\"根据阿里规约\",{\"1\":{\"475\":2}}],[\"根据规划设置主机名\",{\"1\":{\"288\":1}}],[\"根据hash节点选择一个客户端执行lua脚本\",{\"1\":{\"213\":1}}],[\"根据随机数\",{\"1\":{\"208\":1}}],[\"根据已连接的\",{\"1\":{\"155\":1}}],[\"根据\",{\"1\":{\"146\":1,\"214\":2,\"627\":1,\"789\":2}}],[\"根据给定的选项\",{\"1\":{\"139\":1}}],[\"根据分值范围\",{\"1\":{\"133\":1}}],[\"根据值查找或者移除元素\",{\"1\":{\"133\":1}}],[\"根据偏移量对链表进行修剪\",{\"1\":{\"133\":1}}],[\"根据情况不同\",{\"1\":{\"127\":1}}],[\"根据选定的存储引擎\",{\"1\":{\"94\":1}}],[\"根据应用特点选择合适的存储引擎\",{\"1\":{\"93\":1}}],[\"根据实际业务表再确定\",{\"1\":{\"82\":1}}],[\"根据读\",{\"1\":{\"74\":1}}],[\"根据名称设置属性值\",{\"1\":{\"64\":1}}],[\"缩写\",{\"1\":{\"222\":1}}],[\"缩短结果集大小\",{\"1\":{\"82\":1}}],[\"周二鸭\",{\"1\":{\"221\":1}}],[\"得\",{\"1\":{\"825\":1}}],[\"得出的结果为0\",{\"1\":{\"221\":1}}],[\"得出的\",{\"1\":{\"221\":1}}],[\"得到的密文与请求中的口令对比\",{\"1\":{\"897\":1}}],[\"得到的值\",{\"1\":{\"205\":1}}],[\"得到了锁\",{\"1\":{\"777\":1}}],[\"得到了客户端传过来的随机值\",{\"1\":{\"522\":1}}],[\"得到数字签名\",{\"1\":{\"743\":1}}],[\"得到消息m的数字签名为sig\",{\"1\":{\"738\":1}}],[\"得到信件的摘要\",{\"1\":{\"705\":1}}],[\"得到一个最新的值\",{\"1\":{\"443\":1}}],[\"得到一系列的\",{\"1\":{\"34\":1}}],[\"得到几天后的时间\",{\"1\":{\"63\":1}}],[\"得到新的\",{\"1\":{\"37\":1}}],[\"得到\",{\"1\":{\"36\":1,\"740\":2,\"745\":1}}],[\"思路很简单\",{\"1\":{\"220\":1}}],[\"计划缓存中失效的项\",{\"1\":{\"863\":1}}],[\"计数减一\",{\"1\":{\"814\":1,\"930\":1}}],[\"计数器+1\",{\"1\":{\"558\":1}}],[\"计数器必须大于等于0\",{\"1\":{\"551\":1}}],[\"计数器可以重置\",{\"1\":{\"446\":1,\"553\":1}}],[\"计数器只能使用一次\",{\"1\":{\"446\":1,\"553\":1}}],[\"计数器\",{\"1\":{\"446\":2,\"553\":2,\"558\":1}}],[\"计数器的值初始化为3\",{\"1\":{\"446\":1}}],[\"计数器减为0时才能释放锁\",{\"1\":{\"219\":1}}],[\"计算费用的时候需要两项数据\",{\"1\":{\"905\":1}}],[\"计算每一位顾客的消费金额并打印详单\",{\"1\":{\"898\":1}}],[\"计算模型适合处理\",{\"1\":{\"781\":1}}],[\"计算完毕后的结果又会回写磁盘中\",{\"1\":{\"781\":1}}],[\"计算签名另一部分\",{\"1\":{\"743\":1}}],[\"计算消息m的数字摘要\",{\"1\":{\"743\":1}}],[\"计算r\",{\"1\":{\"738\":1}}],[\"计算机与网络设备要相互通信\",{\"1\":{\"638\":1}}],[\"计算机网络如何计算有效ip地址个数\",{\"1\":{\"526\":1}}],[\"计算写出数据的\",{\"1\":{\"627\":1}}],[\"计算思路\",{\"1\":{\"526\":1}}],[\"计算地址\",{\"1\":{\"512\":1}}],[\"计算应存备付金并足额存入备付金账户\",{\"1\":{\"189\":1}}],[\"计算公式为\",{\"1\":{\"189\":1}}],[\"计算\",{\"1\":{\"161\":1,\"743\":1,\"783\":1}}],[\"计算分片\",{\"1\":{\"161\":1}}],[\"计算交集\",{\"1\":{\"133\":1}}],[\"计算出键\",{\"1\":{\"127\":1}}],[\"计算出索引值\",{\"1\":{\"127\":1}}],[\"计算键\",{\"1\":{\"127\":2}}],[\"计算哈希值和索引值的方法如下\",{\"1\":{\"127\":1}}],[\"计算哈希值的函数\",{\"1\":{\"126\":1}}],[\"判断哪个类拥有最多被此函数使用的数据\",{\"1\":{\"913\":1}}],[\"判断有没有就绪的fd\",{\"1\":{\"799\":1}}],[\"判断线程池里的线程是否都在工作状态\",{\"1\":{\"753\":1}}],[\"判断工作队列是否已满\",{\"1\":{\"753\":1}}],[\"判断核心线程池里的线程是否都有在执行任务\",{\"1\":{\"753\":1}}],[\"判断等式s\",{\"1\":{\"739\":1}}],[\"判断丢包\",{\"1\":{\"644\":1}}],[\"判断值是否存在\",{\"1\":{\"527\":1}}],[\"判断任务是否已完成\",{\"1\":{\"475\":1}}],[\"判断序列是否可用\",{\"1\":{\"472\":1}}],[\"判断当前线程所对应的uuid是否与redis对应的uuid相同\",{\"1\":{\"219\":1}}],[\"判断自己\",{\"1\":{\"214\":1}}],[\"尝试获取锁失败\",{\"1\":{\"219\":1}}],[\"尝试加锁\",{\"1\":{\"215\":1}}],[\"尝试水平分库\",{\"1\":{\"131\":1}}],[\"稳定代码指的是无论如何不会出错的代码\",{\"1\":{\"413\":1}}],[\"稳定的watch功能\",{\"1\":{\"214\":1}}],[\"稳定性更高\",{\"1\":{\"206\":1}}],[\"惊群效应\",{\"1\":{\"214\":1}}],[\"阻塞的线程不会占用cpu时间\",{\"1\":{\"927\":1}}],[\"阻塞的方式显然和我们的异步编程的初衷相违背\",{\"1\":{\"475\":1}}],[\"阻塞状态或包含阻塞锁的方法有\",{\"1\":{\"926\":1}}],[\"阻塞状态\",{\"1\":{\"926\":1}}],[\"阻塞锁应用\",{\"0\":{\"928\":1}}],[\"阻塞锁的简单实现\",{\"0\":{\"929\":1}}],[\"阻塞锁的性能要明显高于自旋锁\",{\"1\":{\"927\":1}}],[\"阻塞锁的优势\",{\"0\":{\"927\":1}}],[\"阻塞锁优势\",{\"0\":{\"926\":1}}],[\"阻塞锁\",{\"0\":{\"925\":1},\"1\":{\"926\":1,\"928\":1}}],[\"阻塞锁特性\",{\"1\":{\"214\":1}}],[\"阻塞与非阻塞调用对比\",{\"0\":{\"792\":1}}],[\"阻塞io\",{\"0\":{\"793\":1}}],[\"阻塞i\",{\"1\":{\"791\":1}}],[\"阻塞\",{\"1\":{\"626\":1}}],[\"阻塞队列就是生产者存放元素的容器\",{\"1\":{\"530\":1}}],[\"阻塞队列常用于生产者和消费者的场景\",{\"1\":{\"530\":1}}],[\"阻塞队列是线程安全的\",{\"1\":{\"530\":1}}],[\"阻塞队列\",{\"1\":{\"530\":1}}],[\"阻塞给定的时间\",{\"1\":{\"472\":1}}],[\"阻塞等待\",{\"1\":{\"472\":2}}],[\"阻断插件\",{\"1\":{\"64\":1}}],[\"耗时\",{\"1\":{\"214\":1}}],[\"放在日志缓冲区中\",{\"1\":{\"863\":1}}],[\"放在确定字段中发送给对方\",{\"1\":{\"648\":1}}],[\"放到seq\",{\"1\":{\"648\":1}}],[\"放到requestqueue队列\",{\"1\":{\"433\":1}}],[\"放弃\",{\"1\":{\"626\":2}}],[\"放锁\",{\"1\":{\"214\":1}}],[\"放款\",{\"1\":{\"189\":1}}],[\"续租心跳周期\",{\"1\":{\"214\":1}}],[\"续约锁租期的定时任务\",{\"1\":{\"214\":1}}],[\"心跳续约线程类\",{\"1\":{\"214\":1}}],[\"心跳停止\",{\"1\":{\"214\":1}}],[\"心跳\",{\"1\":{\"214\":2}}],[\"步升级为重量级锁\",{\"1\":{\"723\":1}}],[\"步骤\",{\"0\":{\"732\":1},\"1\":{\"214\":3}}],[\"步骤3\",{\"1\":{\"214\":1}}],[\"步骤2\",{\"1\":{\"214\":1}}],[\"步骤1将失败\",{\"1\":{\"773\":1}}],[\"步骤1\",{\"1\":{\"214\":1}}],[\"步长需设置为n\",{\"1\":{\"211\":1}}],[\"事不过三\",{\"1\":{\"907\":1}}],[\"事件类\",{\"1\":{\"472\":1}}],[\"事件处理方法\",{\"1\":{\"613\":1}}],[\"事件处理方法是当出现throwable对象才会被调用\",{\"1\":{\"613\":2}}],[\"事件处理周期中未捕获异常的回调处理程序的接口\",{\"1\":{\"472\":1}}],[\"事件处理器会等待ringbuffer中的事件变为可用\",{\"1\":{\"472\":1}}],[\"事件处理器\",{\"1\":{\"450\":1}}],[\"事件采集\",{\"1\":{\"428\":1}}],[\"事件\",{\"1\":{\"214\":1,\"448\":1,\"450\":1}}],[\"事件则说明\",{\"1\":{\"214\":1}}],[\"事务会话\",{\"1\":{\"849\":1}}],[\"事务\",{\"1\":{\"421\":1}}],[\"事务模式\",{\"1\":{\"420\":1}}],[\"事务串行执行\",{\"1\":{\"106\":1}}],[\"事务执行完成后\",{\"1\":{\"105\":1}}],[\"事务执行前后\",{\"1\":{\"105\":1}}],[\"事务是必须满足4个条件\",{\"1\":{\"105\":1}}],[\"事务4个特性\",{\"0\":{\"105\":1}}],[\"事务支持\",{\"1\":{\"93\":1}}],[\"事务隔离级别分别是\",{\"0\":{\"106\":1}}],[\"事务隔离级别\",{\"1\":{\"74\":1}}],[\"事务的第一个方面是传播行为\",{\"1\":{\"72\":1}}],[\"事务的原子性与一致性缺一不可\",{\"1\":{\"67\":1}}],[\"事务被处理为顺序执行\",{\"1\":{\"71\":1}}],[\"事务提交\",{\"1\":{\"66\":1}}],[\"事务应确保数据库的状态从一个一致状态转变为另一个一致状态\",{\"1\":{\"65\":1}}],[\"事务应该具有4个属性\",{\"1\":{\"65\":1}}],[\"事务作为一个整体被执行\",{\"1\":{\"65\":1}}],[\"某个类原本对得起自己的价值\",{\"1\":{\"918\":1}}],[\"某个函数为了计算某个值\",{\"1\":{\"913\":1}}],[\"某个固定的\",{\"1\":{\"214\":1}}],[\"某公司申请到一个c类ip地址\",{\"1\":{\"526\":1}}],[\"某些方法接收supplier作为参数\",{\"1\":{\"475\":1}}],[\"某业务实体中的各个数据项的访问频率是不一样的\",{\"1\":{\"129\":1}}],[\"羊群效应\",{\"1\":{\"214\":2}}],[\"号车\",{\"1\":{\"554\":1}}],[\"号大小依次获得锁\",{\"1\":{\"214\":1}}],[\"号\",{\"1\":{\"214\":1}}],[\"锁粗化后的代码如下\",{\"1\":{\"924\":1}}],[\"锁粗化就是告诉我们任何事情都有个度\",{\"1\":{\"924\":1}}],[\"锁粗化\",{\"0\":{\"924\":1}}],[\"锁膨胀\",{\"0\":{\"829\":1}}],[\"锁撤销的开销花费还是挺大的\",{\"1\":{\"828\":1}}],[\"锁撤销升级为轻量级锁之后\",{\"1\":{\"827\":1}}],[\"锁消除\",{\"0\":{\"828\":1}}],[\"锁降级\",{\"0\":{\"824\":1},\"1\":{\"819\":1}}],[\"锁定数据后\",{\"1\":{\"727\":1}}],[\"锁定当前数据\",{\"1\":{\"727\":1}}],[\"锁定当前操作数据\",{\"1\":{\"727\":1}}],[\"锁\",{\"1\":{\"723\":1}}],[\"锁绑定多个条件\",{\"1\":{\"703\":1}}],[\"锁就被释放了\",{\"1\":{\"703\":1,\"723\":1}}],[\"锁的创建\",{\"0\":{\"673\":1}}],[\"锁的可能误删操作会使得程序存在很严重的问题\",{\"1\":{\"217\":1}}],[\"锁的次数\",{\"1\":{\"214\":1}}],[\"锁对象和静态同步方法的锁对象一样都是当前class对象\",{\"1\":{\"661\":1}}],[\"锁对象是lock对象\",{\"1\":{\"661\":1}}],[\"锁对象是synchronized括号后面的对象成任务\",{\"1\":{\"660\":1}}],[\"锁对象是当前对象\",{\"1\":{\"661\":1}}],[\"锁对象是当前class对象\",{\"1\":{\"661\":1}}],[\"锁对象是当前实例对象\",{\"1\":{\"660\":1}}],[\"锁对象是当前类的class对象\",{\"1\":{\"660\":1}}],[\"锁对象设置\",{\"1\":{\"214\":1}}],[\"锁对象包含重入次数\",{\"1\":{\"214\":1}}],[\"锁路径\",{\"1\":{\"214\":1}}],[\"锁也会因租约到期而自动释放\",{\"1\":{\"214\":1}}],[\"锁互斥机制\",{\"1\":{\"213\":1}}],[\"租期长度和影片类型\",{\"1\":{\"905\":1}}],[\"租期的长度来自rental对象\",{\"1\":{\"905\":1}}],[\"租期多长\",{\"1\":{\"898\":1}}],[\"租约有效期\",{\"1\":{\"214\":1}}],[\"租约的长度根据业务耗时确定\",{\"1\":{\"214\":1}}],[\"租约机制\",{\"1\":{\"214\":1}}],[\"租赁物转让给承租人\",{\"1\":{\"187\":1}}],[\"租赁期满\",{\"1\":{\"187\":1}}],[\"测试和重构像黄河的护堤\",{\"1\":{\"898\":1}}],[\"测试为先\",{\"1\":{\"898\":1}}],[\"测试场景\",{\"1\":{\"893\":1}}],[\"测试删除普通表空间数据文件\",{\"1\":{\"893\":1}}],[\"测试线程是否已经中断\",{\"1\":{\"767\":1}}],[\"测试当前线程是否已经中断\",{\"1\":{\"767\":1}}],[\"测试项目启动执行的agent\",{\"1\":{\"709\":1}}],[\"测试依赖范围\",{\"1\":{\"593\":1}}],[\"测试classpath\",{\"1\":{\"593\":1}}],[\"测试范围用元素scope表示\",{\"1\":{\"593\":1}}],[\"测试到生成报告\",{\"1\":{\"569\":1}}],[\"测试接口默认方法\",{\"1\":{\"527\":1}}],[\"测试动态加载配置\",{\"1\":{\"297\":1}}],[\"测试kubernetes集群\",{\"0\":{\"296\":1}}],[\"测试镜像库\",{\"0\":{\"236\":1}}],[\"测试\",{\"0\":{\"719\":1},\"1\":{\"229\":1}}],[\"测试用例\",{\"1\":{\"213\":1}}],[\"测试类\",{\"1\":{\"3\":1}}],[\"传统密码\",{\"1\":{\"684\":1}}],[\"传统的单体应用单机部署情况下\",{\"1\":{\"212\":1}}],[\"传递interruptedexception\",{\"1\":{\"766\":1}}],[\"传递的路径越长\",{\"1\":{\"684\":1}}],[\"传递依赖同样有生命周期\",{\"1\":{\"594\":1}}],[\"传递性依赖\",{\"0\":{\"594\":1}}],[\"传递它所需要的下一个序号\",{\"1\":{\"452\":1}}],[\"传输来的准确\",{\"1\":{\"645\":1}}],[\"传输高效\",{\"0\":{\"642\":1}}],[\"传输加密后的信息\",{\"1\":{\"522\":1}}],[\"传输速度快\",{\"1\":{\"317\":1}}],[\"传输速度慢\",{\"1\":{\"317\":1}}],[\"传入的参数等于0\",{\"1\":{\"445\":1}}],[\"传入到构造方法的值不会正好等于\",{\"1\":{\"445\":1}}],[\"传给gtm的目的就是希望通过gtm的负载均衡机制\",{\"1\":{\"222\":1}}],[\"传送加密信息\",{\"1\":{\"522\":1}}],[\"传送证书\",{\"1\":{\"522\":1}}],[\"传送管道中的每个datanode节点在收到数据后都会向前面那个datanode发送一个ack\",{\"1\":{\"14\":1}}],[\"传送数据\",{\"1\":{\"14\":1}}],[\"梅丽莎病毒\",{\"1\":{\"211\":2}}],[\"美团点评分布式id生成系统\",{\"1\":{\"211\":1}}],[\"美团leaf\",{\"1\":{\"211\":1}}],[\"美国的中期票据根据415规则在证券交易委员会注册\",{\"1\":{\"178\":1}}],[\"安全操作员\",{\"1\":{\"873\":1}}],[\"安全版本才有的用户\",{\"1\":{\"873\":1}}],[\"安全计算\",{\"1\":{\"684\":1}}],[\"安全的\",{\"1\":{\"657\":1}}],[\"安全的uuid和基于时间的uuid算法相同\",{\"1\":{\"208\":1}}],[\"安全性和可管理性\",{\"1\":{\"691\":1}}],[\"安全性较好\",{\"1\":{\"522\":1}}],[\"安全性较差\",{\"1\":{\"522\":1}}],[\"安全性\",{\"1\":{\"522\":1,\"684\":1,\"704\":1}}],[\"安全\",{\"0\":{\"682\":1},\"1\":{\"442\":1,\"485\":1}}],[\"安装目录\",{\"1\":{\"837\":1}}],[\"安装目录下执行\",{\"1\":{\"835\":2}}],[\"安装时报\",{\"1\":{\"834\":1}}],[\"安装方式\",{\"0\":{\"834\":1}}],[\"安装本地jar到本地仓库\",{\"1\":{\"566\":1}}],[\"安装项目到本地仓库\",{\"1\":{\"566\":1}}],[\"安装redis\",{\"1\":{\"352\":1,\"355\":1}}],[\"安装wget工具\",{\"1\":{\"319\":1}}],[\"安装源\",{\"0\":{\"319\":1}}],[\"安装kubeadm\",{\"0\":{\"292\":1}}],[\"安装要求\",{\"0\":{\"287\":1}}],[\"安装elk\",{\"0\":{\"268\":1}}],[\"安装jdk\",{\"0\":{\"266\":1}}],[\"安装\",{\"0\":{\"379\":1},\"1\":{\"235\":1,\"319\":1,\"831\":1}}],[\"安装docker\",{\"0\":{\"228\":1,\"290\":1}}],[\"安装gcc\",{\"0\":{\"224\":1}}],[\"安装mysql\",{\"0\":{\"77\":1},\"1\":{\"321\":2,\"322\":1}}],[\"曾被用于寻找梅丽莎病毒的制作者位置\",{\"1\":{\"208\":1}}],[\"名字空间\",{\"1\":{\"208\":1}}],[\"微小\",{\"1\":{\"900\":1}}],[\"微秒\",{\"1\":{\"758\":1}}],[\"微软叫guid\",{\"1\":{\"208\":1}}],[\"微信\",{\"0\":{\"2\":1}}],[\"调试过程中\",{\"1\":{\"907\":1}}],[\"调试启动\",{\"1\":{\"282\":1}}],[\"调整consumer类\",{\"1\":{\"902\":1}}],[\"调整bit位的划分\",{\"1\":{\"206\":1}}],[\"调度线程\",{\"0\":{\"863\":1}}],[\"调度状态\",{\"1\":{\"812\":1}}],[\"调度器根据容量\",{\"1\":{\"654\":1}}],[\"调度器\",{\"1\":{\"654\":1}}],[\"调优\",{\"1\":{\"752\":1}}],[\"调用方应该依赖抽象类或接口\",{\"1\":{\"906\":1}}],[\"调用方就必须创建具体的子类对象\",{\"1\":{\"906\":1}}],[\"调用方如果没有捕获到就会产生运行时错误\",{\"1\":{\"413\":1}}],[\"调用其对应的poll方法\",{\"1\":{\"799\":1}}],[\"调用其hello方法\",{\"1\":{\"409\":1}}],[\"调用者所在的线程来运行任务\",{\"1\":{\"761\":1}}],[\"调用会阻塞当前线程\",{\"1\":{\"551\":1}}],[\"调用时\",{\"1\":{\"551\":1}}],[\"调用\",{\"1\":{\"422\":3,\"626\":1,\"652\":1}}],[\"调用优先考虑使用\",{\"1\":{\"413\":1}}],[\"调用3中的echo方法即可远程调用\",{\"1\":{\"411\":1}}],[\"调用前进行判断是否为开发环境\",{\"1\":{\"410\":1}}],[\"调用一次hash函数就可以获取到相应的键值\",{\"1\":{\"102\":1}}],[\"网上最多介绍的\",{\"1\":{\"734\":1}}],[\"网上有优化时钟回拨问题利用记录最后一次成id的时间\",{\"1\":{\"207\":1}}],[\"网址\",{\"1\":{\"522\":1}}],[\"网关\",{\"0\":{\"259\":1},\"1\":{\"250\":4}}],[\"网卡等的唯一标识码\",{\"1\":{\"205\":1}}],[\"网络配置助手实际写的是\",{\"1\":{\"842\":1}}],[\"网络配置助手\",{\"1\":{\"842\":1}}],[\"网络配置助手配置连接串\",{\"0\":{\"842\":1}}],[\"网络层将数据传递给传输层\",{\"1\":{\"639\":1}}],[\"网络协议中\",{\"1\":{\"638\":1}}],[\"网络是怎么连接的\",{\"1\":{\"635\":1}}],[\"网络连接模型\",{\"0\":{\"635\":1}}],[\"网络文件读取\",{\"1\":{\"537\":1}}],[\"网络越易管理\",{\"1\":{\"526\":1}}],[\"网络中的原则是ip地址与子网掩码越越精准\",{\"1\":{\"526\":1}}],[\"网络地址为\",{\"1\":{\"526\":1}}],[\"网络地址可以确定ip地址的范围\",{\"1\":{\"526\":1}}],[\"网络地址+主机地址\",{\"1\":{\"526\":1}}],[\"网络上都会提到浏览器地址栏输入的参数是有限的\",{\"1\":{\"484\":1}}],[\"网络\",{\"1\":{\"261\":1,\"543\":1}}],[\"网络类型\",{\"1\":{\"261\":1}}],[\"网络发生故障宁可停止服务\",{\"1\":{\"203\":1}}],[\"网络故障是常态\",{\"1\":{\"202\":1}}],[\"网络分区是一个自然的事实\",{\"1\":{\"196\":1}}],[\"网络问题\",{\"1\":{\"154\":1}}],[\"网络io和磁盘\",{\"1\":{\"130\":1}}],[\"组织\",{\"1\":{\"687\":1}}],[\"组装和不能对数据包进行排序的缺点\",{\"1\":{\"638\":1}}],[\"组合应用时\",{\"1\":{\"874\":1}}],[\"组合在一起等该方法的作用是在该计算阶段正常完成后\",{\"1\":{\"475\":1}}],[\"组合索引\",{\"1\":{\"101\":1}}],[\"组内进行集群消费\",{\"1\":{\"431\":1}}],[\"组内小伙伴经常调用到其他人的电脑\",{\"1\":{\"410\":1}}],[\"组间进行广播消费\",{\"1\":{\"431\":1}}],[\"组成了全新的通用操作系统\",{\"1\":{\"653\":1}}],[\"组成\",{\"1\":{\"205\":1}}],[\"雪花算法\",{\"0\":{\"205\":1},\"1\":{\"211\":1}}],[\"高频地请求\",{\"1\":{\"924\":1}}],[\"高中低\",{\"1\":{\"769\":1}}],[\"高速缓存是计算机系统中存在的最快内存\",{\"1\":{\"662\":1}}],[\"高可靠性的网络服务器和客户端程序\",{\"1\":{\"607\":1}}],[\"高可用的网络io程序\",{\"1\":{\"607\":1}}],[\"高负载下的稳定读写\",{\"1\":{\"214\":1}}],[\"高性能的\",{\"1\":{\"608\":1}}],[\"高性能的线程间消息传递框架\",{\"1\":{\"447\":1}}],[\"高性能\",{\"1\":{\"204\":1}}],[\"高并发\",{\"0\":{\"221\":1}}],[\"高并发的性能瓶颈\",{\"1\":{\"131\":1}}],[\"高并发场景下\",{\"1\":{\"130\":1}}],[\"往往依靠数据库提供的锁机制\",{\"1\":{\"725\":1}}],[\"往往作为基础通信组件被这些\",{\"1\":{\"608\":1}}],[\"往往需要对大量的数据和消息进行唯一标识\",{\"1\":{\"204\":1}}],[\"往往能解决单库存储量及性能的瓶颈\",{\"1\":{\"131\":1}}],[\"舍弃强一致性\",{\"1\":{\"203\":1}}],[\"舍弃p\",{\"1\":{\"203\":1}}],[\"舍弃c\",{\"1\":{\"202\":1}}],[\"孰优孰略\",{\"1\":{\"203\":1}}],[\"部门\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"414\":1,\"415\":1,\"416\":1}}],[\"部署展开的war文件\",{\"1\":{\"566\":1}}],[\"部署cni网络插件\",{\"0\":{\"295\":1}}],[\"部署kubernetes\",{\"0\":{\"293\":1}}],[\"部署kubernetes集群机器需要满足以下几个条件\",{\"1\":{\"287\":1}}],[\"部署filebeat日志收集客户端\",{\"0\":{\"274\":1}}],[\"部署\",{\"1\":{\"205\":1,\"278\":1}}],[\"部署分散\",{\"1\":{\"202\":1}}],[\"部分隐含参数写入system\",{\"1\":{\"864\":1}}],[\"部分建议是配置的业务含义\",{\"1\":{\"417\":1}}],[\"部分起始路径\",{\"1\":{\"306\":1}}],[\"部分定义的的卷名\",{\"1\":{\"263\":1}}],[\"部分命令不支持\",{\"1\":{\"161\":1}}],[\"部分数据项可能是占用存储空间比较大的\",{\"1\":{\"129\":1}}],[\"余票不足\",{\"1\":{\"202\":1}}],[\"收缩\",{\"1\":{\"865\":1}}],[\"收到指令之后\",{\"1\":{\"712\":1}}],[\"收到的消息的类型是bytebuf\",{\"1\":{\"613\":2}}],[\"收集数据\",{\"1\":{\"783\":1}}],[\"收集关于队列大小的信息会很慢\",{\"1\":{\"529\":1}}],[\"收集多线程任务结果\",{\"1\":{\"475\":1}}],[\"收集结果\",{\"1\":{\"41\":1}}],[\"收货延迟的现象\",{\"1\":{\"202\":1}}],[\"效应时间过长\",{\"1\":{\"202\":1}}],[\"效率提升\",{\"1\":{\"806\":1}}],[\"效率\",{\"1\":{\"617\":1,\"898\":1}}],[\"效率不高\",{\"1\":{\"557\":1}}],[\"效率会很低\",{\"1\":{\"202\":1}}],[\"效率很高\",{\"1\":{\"116\":1}}],[\"效率高于delete\",{\"1\":{\"109\":1}}],[\"减轻gc压力\",{\"1\":{\"452\":1}}],[\"减库存+下单的原子操作成为系统瓶颈\",{\"1\":{\"202\":1}}],[\"减少写状态int\",{\"1\":{\"821\":1}}],[\"减少了不必要的上下文切换\",{\"1\":{\"812\":1}}],[\"减少了磁盘io\",{\"1\":{\"129\":1}}],[\"减少修改字符串时带来的内存重分配次数\",{\"0\":{\"620\":1}}],[\"减少存储于\",{\"1\":{\"161\":1}}],[\"减少去重和排序的工作\",{\"1\":{\"82\":1}}],[\"减少记录日志的内容\",{\"1\":{\"74\":1}}],[\"联机备份要求数据库打开归档\",{\"1\":{\"894\":1}}],[\"联机备份与还原数据库\",{\"0\":{\"894\":1}}],[\"联机备份\",{\"1\":{\"868\":1,\"889\":1,\"894\":1}}],[\"联机日志\",{\"1\":{\"853\":1}}],[\"联机工具\",{\"1\":{\"846\":1}}],[\"联系上文提到的一致性特点\",{\"1\":{\"199\":1}}],[\"联合发文推出银担\",{\"1\":{\"189\":1}}],[\"消除这种重复性的一般策略是\",{\"1\":{\"917\":1}}],[\"消耗cpu\",{\"1\":{\"471\":1,\"472\":1}}],[\"消耗机器资源\",{\"1\":{\"234\":1}}],[\"消费消息的纽带\",{\"1\":{\"433\":1}}],[\"消费服务器\",{\"1\":{\"433\":1}}],[\"消费者从服务器获取记录的最小字节数\",{\"1\":{\"564\":1}}],[\"消费者等待时间\",{\"1\":{\"564\":1}}],[\"消费者在读取一个没有偏移量的分区或者偏移量无效的情况下的处理\",{\"1\":{\"564\":1}}],[\"消费者在被认为死亡之前可以与服务器断开连接的时间\",{\"1\":{\"564\":1}}],[\"消费者是否自动提交偏移量\",{\"1\":{\"564\":1}}],[\"消费者是从队列里拿元素的线程\",{\"1\":{\"530\":1}}],[\"消费者主要通过sequencebarrier来使用序列\",{\"1\":{\"472\":1}}],[\"消费者可以让consumerbarrier去拿这些序号节点里的数据了\",{\"1\":{\"452\":1}}],[\"消费者可以调用consumerbarrier对象的\",{\"1\":{\"452\":1}}],[\"消费者会一直原地停留\",{\"1\":{\"452\":1}}],[\"消费者处理完了ringbuffer里序号8之前\",{\"1\":{\"452\":1}}],[\"消费者也需要知道它将要处理的序号\",{\"1\":{\"452\":1}}],[\"消费者读取数据\",{\"1\":{\"452\":1}}],[\"消费者的接口定义\",{\"1\":{\"451\":1}}],[\"消费者事件注册\",{\"1\":{\"451\":1}}],[\"消费者之间既可以并行处理\",{\"1\":{\"448\":1}}],[\"消费者将从最新位置读取分区的记录\",{\"1\":{\"564\":1}}],[\"消费者将从最新的记录开始读取数据\",{\"1\":{\"435\":1}}],[\"消费者将从起始位置读取分区的记录\",{\"1\":{\"435\":1,\"564\":1}}],[\"消费者\",{\"1\":{\"433\":1,\"452\":2,\"453\":2,\"454\":1,\"456\":1}}],[\"消费者程序需要重新请求才能获得结果\",{\"1\":{\"198\":1}}],[\"消费组2只有两个消费者\",{\"1\":{\"431\":1}}],[\"消费端需要与partition结合并进行并行处理\",{\"1\":{\"431\":1}}],[\"消息发送成功\",{\"1\":{\"564\":1}}],[\"消息传输相关的功能\",{\"1\":{\"515\":1}}],[\"消息的内容\",{\"1\":{\"515\":1}}],[\"消息\",{\"1\":{\"515\":1,\"564\":1}}],[\"消息系统\",{\"1\":{\"428\":1}}],[\"消息持久化存储\",{\"1\":{\"432\":1}}],[\"消息持久化\",{\"1\":{\"428\":1,\"433\":1}}],[\"消息丢失的情况下\",{\"1\":{\"195\":1}}],[\"他把这个消息\",{\"1\":{\"922\":1}}],[\"他就应该消失\",{\"1\":{\"918\":1}}],[\"他是一种智力产品\",{\"1\":{\"898\":1}}],[\"他\",{\"1\":{\"887\":1}}],[\"他偷偷使用了苏珊的电脑\",{\"1\":{\"705\":1}}],[\"他写完后先用hash函数\",{\"1\":{\"705\":1}}],[\"他认为\",{\"1\":{\"684\":1}}],[\"他不再从事任何与具体应用程序相关的工作\",{\"1\":{\"654\":1}}],[\"他们设想几种方案\",{\"1\":{\"898\":1}}],[\"他们统称为可信计算\",{\"1\":{\"684\":1}}],[\"他们都是不安全的\",{\"1\":{\"485\":1}}],[\"他们都是设计成cp的\",{\"1\":{\"197\":1}}],[\"他们在你使用\",{\"1\":{\"475\":1}}],[\"他才有机会被选举成新的leader副本并对外提供服务\",{\"1\":{\"432\":1}}],[\"他对数据库的修改应该永久保存在数据库中\",{\"1\":{\"65\":1}}],[\"那样就会减少维护时间\",{\"1\":{\"918\":1}}],[\"那样会破坏监视器的语义\",{\"1\":{\"809\":1}}],[\"那就搬开它吧\",{\"1\":{\"919\":1}}],[\"那就值得那么做\",{\"1\":{\"919\":1}}],[\"那就应该考虑以多态来替换它\",{\"1\":{\"916\":1}}],[\"那就先重构那个程序\",{\"1\":{\"898\":1}}],[\"那就是255\",{\"1\":{\"526\":1}}],[\"那就是谷歌的广域网\",{\"1\":{\"196\":1}}],[\"那当前线程就要阻塞等待\",{\"1\":{\"723\":1}}],[\"那当前线程就要阻塞\",{\"1\":{\"703\":1}}],[\"那个已经可以用了\",{\"1\":{\"455\":1}}],[\"那最终的多副本架构将如下图所示\",{\"1\":{\"432\":1}}],[\"那也就没有必要再讨论cap理论了\",{\"1\":{\"196\":1}}],[\"那么此时也许将这个对象分成两个会更好\",{\"1\":{\"911\":1}}],[\"那么或许你可以把它们变成五个\",{\"1\":{\"910\":1}}],[\"那么为什么一个软件制造出来以后\",{\"1\":{\"898\":1}}],[\"那么为了将\",{\"1\":{\"620\":1}}],[\"那么偏向锁就会是一种累赘\",{\"1\":{\"828\":1}}],[\"那么偏向锁就失效了\",{\"1\":{\"673\":1,\"829\":1}}],[\"那么接下来就得把该锁撤销\",{\"1\":{\"828\":1}}],[\"那么责任链模式便不会有太大的意义了\",{\"1\":{\"825\":1}}],[\"那么低16位代表什么呢\",{\"1\":{\"820\":1}}],[\"那么主线程执行offer操作与空闲线程执行的poll操作配对成功\",{\"1\":{\"773\":1}}],[\"那么主机位数为5位\",{\"1\":{\"526\":1}}],[\"那么悲观锁就能起到作用\",{\"1\":{\"727\":1}}],[\"那么数组对象的大小=12+4+68+0=64\",{\"1\":{\"722\":1}}],[\"那么integer对象和long对象会占用多少内存呢\",{\"1\":{\"722\":1}}],[\"那么系统中只存在一个mysql连接实例\",{\"1\":{\"683\":1}}],[\"那么持有偏向锁的线程将永远不需要进行同步操作\",{\"1\":{\"673\":1}}],[\"那么预先设置线程数为5就足够了\",{\"1\":{\"651\":1}}],[\"那么entry里面存储的object\",{\"1\":{\"650\":1}}],[\"那么对象的markword也会进行相应的的变化\",{\"1\":{\"827\":1}}],[\"那么对应的数据\",{\"1\":{\"644\":1}}],[\"那么对于同一张表更新时建议全使用\",{\"1\":{\"427\":1}}],[\"那么对于这个表只会有一个employees目录与之对应\",{\"1\":{\"21\":1}}],[\"那么完成这次\",{\"1\":{\"622\":1}}],[\"那么这种格式就不能使用\",{\"1\":{\"623\":1}}],[\"那么这次\",{\"1\":{\"621\":1}}],[\"那么这个空闲线程将执行主线程提交的新任务\",{\"1\":{\"773\":1}}],[\"那么这个系统是可信的\",{\"1\":{\"684\":1}}],[\"那么这个大网段共同的子网掩码是多少呢\",{\"1\":{\"526\":1}}],[\"那么这个时候锁就会自动释放\",{\"1\":{\"220\":1}}],[\"那么程序也会分配\",{\"1\":{\"621\":1}}],[\"那么程序分配和\",{\"1\":{\"621\":1}}],[\"那么程序会分配\",{\"1\":{\"621\":2}}],[\"那么程序会继续使用语句\",{\"1\":{\"127\":1}}],[\"那么程序会先使用语句\",{\"1\":{\"127\":1}}],[\"那么光是执行内存重分配的时间就会占去修改字符串所用时间的一大部分\",{\"1\":{\"620\":1}}],[\"那么每次修改都执行一次内存重分配是可以接受的\",{\"1\":{\"620\":1}}],[\"那么我们就可以把这些工作代码放入锁内\",{\"1\":{\"924\":1}}],[\"那么我们就可以重用\",{\"1\":{\"624\":1}}],[\"那么我们就按照这个思路来实现一个可重入的分布式锁\",{\"1\":{\"218\":1}}],[\"那么我们可以直接使用\",{\"1\":{\"616\":1}}],[\"那么gc也是可以回收它们的\",{\"1\":{\"558\":1}}],[\"那么get\",{\"1\":{\"475\":1}}],[\"那么问题来了\",{\"1\":{\"526\":1}}],[\"那么超过了254台主机的话怎么办呢\",{\"1\":{\"526\":1}}],[\"那么广播地址是多少呢\",{\"1\":{\"526\":1}}],[\"那么以后你想查看该版本时\",{\"1\":{\"501\":1}}],[\"那么只能保存到变量\",{\"1\":{\"475\":1}}],[\"那么怎么保证\",{\"1\":{\"443\":1}}],[\"那么处理器会自动将该位置值更新为新值\",{\"1\":{\"442\":1}}],[\"那么需要先关闭mysql8\",{\"1\":{\"320\":1}}],[\"那么需要显式\",{\"1\":{\"25\":1}}],[\"那么用户请求http\",{\"1\":{\"307\":2}}],[\"那么如何来算出网络地址呢\",{\"1\":{\"526\":1}}],[\"那么如何解决这个问题呢\",{\"1\":{\"220\":1}}],[\"那么如果这\",{\"1\":{\"221\":1}}],[\"那么该线程将循环等待\",{\"1\":{\"811\":1}}],[\"那么该用户尝试获取锁之后失败\",{\"1\":{\"219\":1}}],[\"那么该过程可以符合原子性\",{\"1\":{\"67\":1}}],[\"那么hbase就降低一致性来提高可用性了\",{\"1\":{\"199\":1}}],[\"那么可用性提高了\",{\"1\":{\"199\":1}}],[\"那么可以将他们表示成\",{\"1\":{\"526\":1}}],[\"那么可以将sort命令看作是sql语言里的order\",{\"1\":{\"139\":1}}],[\"那么可以保证数据的正确性\",{\"1\":{\"427\":1}}],[\"那么可以看出他们有以下的不同\",{\"1\":{\"102\":1}}],[\"那么可以在最大的表通过\",{\"1\":{\"23\":1}}],[\"那么命令会将成员的分值也一并返回\",{\"1\":{\"137\":1}}],[\"那么命令返回1\",{\"1\":{\"135\":1}}],[\"那么从集合source\",{\"1\":{\"135\":1}}],[\"那么在执行\",{\"1\":{\"620\":1}}],[\"那么在执行这个操作之后\",{\"1\":{\"620\":1}}],[\"那么在执行这个操作之前\",{\"1\":{\"620\":1}}],[\"那么在\",{\"1\":{\"619\":1}}],[\"那么在服务器里面对应的真正的资源\",{\"1\":{\"316\":1}}],[\"那么在timeout秒之内阻塞并等待可弹出的元素出现\",{\"1\":{\"135\":1}}],[\"那么在第一个事务中的两次读取数据之间\",{\"1\":{\"72\":1}}],[\"那么它究竟该被置于何处呢\",{\"1\":{\"913\":1}}],[\"那么它的网络地址是多少\",{\"1\":{\"526\":1}}],[\"那么它的值为\",{\"1\":{\"126\":1}}],[\"那么它期待访问的下一个序号是9\",{\"1\":{\"452\":1}}],[\"那么它就开始解析\",{\"1\":{\"381\":1}}],[\"那么它们就可能会相互影响对方的结果数据\",{\"1\":{\"27\":1}}],[\"那么当进行\",{\"1\":{\"103\":1}}],[\"那么当两个事务都结束的时候\",{\"1\":{\"66\":1}}],[\"那么会不必要地减缓表的修改速度\",{\"1\":{\"100\":1}}],[\"那么就将参数移走\",{\"1\":{\"919\":1}}],[\"那么就需要通过抽取方法将相似部分和差异部分分开\",{\"1\":{\"909\":1}}],[\"那么就可以肯定\",{\"1\":{\"909\":1}}],[\"那么就可以直接访问网站的ip了\",{\"1\":{\"222\":1}}],[\"那么就会被回收\",{\"1\":{\"650\":1}}],[\"那么就会直接返回失败\",{\"1\":{\"219\":1}}],[\"那么就应该使用strictmath类\",{\"1\":{\"549\":1}}],[\"那么就生成一个随机值\",{\"1\":{\"522\":1}}],[\"那么就直接访问ip地址\",{\"1\":{\"222\":1}}],[\"那么就继续更新锁的占有时长\",{\"1\":{\"220\":1}}],[\"那么就从上往下依次执行\",{\"1\":{\"113\":1}}],[\"那么就不必再进行回表查询\",{\"1\":{\"103\":1}}],[\"那么就不要对整个列\",{\"1\":{\"100\":1}}],[\"那么就使用\",{\"1\":{\"23\":1}}],[\"那么之前的所有操作都应该回滚到执行事务之前的状态\",{\"1\":{\"66\":1}}],[\"那么将会对所有分区进行重建索引\",{\"1\":{\"28\":1}}],[\"那么新索引将呈现空白状态\",{\"1\":{\"28\":1}}],[\"那么\",{\"1\":{\"25\":1,\"214\":1,\"619\":1,\"621\":1,\"709\":1,\"711\":1,\"717\":1,\"721\":1}}],[\"那么右表响应的列的值是null\",{\"1\":{\"23\":1}}],[\"那么网表中装载数据的唯一途径就是使用一种\",{\"1\":{\"22\":1}}],[\"那么一个1gb大小的文件将占用163=48个文件块\",{\"1\":{\"17\":1}}],[\"意味着只能由计算机生成\",{\"1\":{\"208\":1}}],[\"意味着要舍弃分布式系统\",{\"1\":{\"196\":1}}],[\"意思就是说他的可用水平是99\",{\"1\":{\"194\":1}}],[\"好的代码应该清楚表达出自己的功能\",{\"1\":{\"901\":1}}],[\"好的测试是重构的根本\",{\"1\":{\"899\":1}}],[\"好的分区容错性要求能够使应用虽然是一个分布式系统\",{\"1\":{\"195\":1}}],[\"好的可用性主要是指系统能够很好的为用户服务\",{\"1\":{\"194\":1}}],[\"借鉴淘宝的标准如下\",{\"1\":{\"194\":1}}],[\"借鉴于\",{\"1\":{\"67\":1,\"222\":1}}],[\"说笑话\",{\"1\":{\"825\":1}}],[\"说是无边界\",{\"1\":{\"532\":1}}],[\"说的就是数据一致性\",{\"1\":{\"192\":1}}],[\"说明权限可以转授\",{\"1\":{\"888\":1}}],[\"说明没有任何线程占有共享资源的锁\",{\"1\":{\"723\":1}}],[\"说明加解锁对象为该对象\",{\"1\":{\"723\":1}}],[\"说明对象的偏向锁生效了\",{\"1\":{\"673\":1}}],[\"说明什么情况下会返回\",{\"1\":{\"413\":1}}],[\"说明信息\",{\"1\":{\"412\":1}}],[\"说明两个容器共享了一个网络空间\",{\"1\":{\"256\":1}}],[\"说明\",{\"1\":{\"141\":1,\"146\":1,\"413\":9,\"627\":1,\"837\":1}}],[\"签订合作协议\",{\"1\":{\"189\":1}}],[\"落实国家融资担保基金对合作银行考评要求\",{\"1\":{\"189\":1}}],[\"落地选项\",{\"1\":{\"141\":1}}],[\"落地\",{\"1\":{\"140\":1}}],[\"返还担保代偿资金\",{\"1\":{\"189\":1}}],[\"返回值和null指针不会被压缩\",{\"1\":{\"722\":1}}],[\"返回它\",{\"1\":{\"527\":1}}],[\"返回实体\",{\"0\":{\"517\":1}}],[\"返回数据\",{\"1\":{\"482\":2,\"613\":1}}],[\"返回一个值\",{\"1\":{\"475\":1}}],[\"返回一个gzip压缩的jvm堆dump\",{\"1\":{\"418\":1}}],[\"返回给生产者\",{\"1\":{\"455\":1}}],[\"返回给local\",{\"1\":{\"222\":1}}],[\"返回标识此锁存器及其状态的字符串\",{\"1\":{\"446\":1}}],[\"返回当前获取读锁的次数\",{\"1\":{\"822\":1}}],[\"返回当前计数\",{\"1\":{\"446\":1}}],[\"返回当前值\",{\"1\":{\"444\":1}}],[\"返回bigdecimal对象\",{\"1\":{\"445\":4}}],[\"返回更新后的值\",{\"1\":{\"444\":1}}],[\"返回先前的值\",{\"1\":{\"444\":1}}],[\"返回旧值\",{\"1\":{\"444\":1}}],[\"返回log\",{\"1\":{\"418\":1}}],[\"返回类型为基本数据类型\",{\"1\":{\"413\":1}}],[\"返回后方法结束执行\",{\"1\":{\"413\":1}}],[\"返回timeout\",{\"1\":{\"396\":1}}],[\"返回日志信息实例\",{\"0\":{\"315\":1}}],[\"返回内置变量\",{\"0\":{\"314\":1}}],[\"返回自定义变量\",{\"0\":{\"313\":1}}],[\"返回字符串\",{\"0\":{\"311\":1}}],[\"返回状态码\",{\"0\":{\"310\":1}}],[\"返回301永久重定向\",{\"1\":{\"309\":1}}],[\"返回302临时重定向\",{\"1\":{\"309\":1}}],[\"返回顶级域名服务器的地址以后\",{\"1\":{\"222\":1}}],[\"返回包含两个\",{\"1\":{\"214\":1}}],[\"返回\",{\"1\":{\"155\":1,\"218\":1}}],[\"返回有序集合中\",{\"1\":{\"138\":1}}],[\"返回有序集合中排名介于start和\",{\"1\":{\"137\":1}}],[\"返回有序集合给定排名范围内的成员\",{\"1\":{\"138\":1}}],[\"返回有序集合里成员member的排名\",{\"1\":{\"138\":1}}],[\"返回有序集合包含的成员数量\",{\"1\":{\"137\":1}}],[\"返回成员member的分值\",{\"1\":{\"137\":1}}],[\"返回成员member在有序集合中的排名\",{\"1\":{\"137\":1}}],[\"返回成功找到并删除的键值对数量\",{\"1\":{\"136\":1}}],[\"返回分值介于min和max之间的成员数量\",{\"1\":{\"137\":1}}],[\"返回散列包含的键值对数量\",{\"1\":{\"136\":1}}],[\"返回那些至少存在于一个集合中的元素\",{\"1\":{\"136\":1}}],[\"返回那些同时存在于所有集合中的元素\",{\"1\":{\"136\":1}}],[\"返回那些存在于第一个集合\",{\"1\":{\"136\":1}}],[\"返回集合包含的所有元素\",{\"1\":{\"135\":1}}],[\"返回集合包含的元素的数量\",{\"1\":{\"135\":1}}],[\"返回列表从start偏移量到end偏移量范围内的所有元素\",{\"1\":{\"135\":1}}],[\"返回列表中偏移量为offset的元素\",{\"1\":{\"135\":1}}],[\"返回的url最大支持7天\",{\"1\":{\"63\":1}}],[\"返回结果集\",{\"1\":{\"518\":1,\"863\":1}}],[\"返回结果分析\",{\"1\":{\"445\":1}}],[\"返回结果\",{\"1\":{\"22\":1,\"518\":11}}],[\"返回searchhit\",{\"1\":{\"3\":1}}],[\"返回单例的client\",{\"1\":{\"3\":1}}],[\"十行函数\",{\"1\":{\"910\":1}}],[\"十数人或数十人围成一个圆圈席地而坐\",{\"1\":{\"825\":1}}],[\"十六进制数值有一个前缀\",{\"1\":{\"549\":1}}],[\"十进制计算基数\",{\"1\":{\"526\":1}}],[\"十秒\",{\"1\":{\"402\":1}}],[\"十\",{\"1\":{\"189\":1}}],[\"九\",{\"1\":{\"189\":1}}],[\"八进制有一个前缀\",{\"1\":{\"549\":1}}],[\"八\",{\"1\":{\"189\":1}}],[\"七\",{\"1\":{\"189\":1,\"684\":1}}],[\"备份集相关函数\",{\"1\":{\"894\":1}}],[\"备份集管理\",{\"1\":{\"894\":1}}],[\"备份数据库\",{\"1\":{\"894\":2}}],[\"备份数量是3\",{\"1\":{\"17\":1}}],[\"备份时\",{\"1\":{\"894\":1}}],[\"备份还原策略\",{\"1\":{\"890\":1}}],[\"备份还原两个重要参数\",{\"1\":{\"890\":1}}],[\"备份还原基本概念\",{\"0\":{\"889\":1}}],[\"备份\",{\"0\":{\"890\":1}}],[\"备份级别\",{\"1\":{\"889\":1}}],[\"备份包含物理备份和逻辑备份\",{\"1\":{\"889\":1}}],[\"备份文件\",{\"1\":{\"853\":1}}],[\"备付金账户资金及产生的利息收益归出资方所有\",{\"1\":{\"189\":1}}],[\"业务中断\",{\"1\":{\"843\":1}}],[\"业务代码\",{\"1\":{\"768\":2}}],[\"业务处理已经在多线程中开始\",{\"1\":{\"475\":1}}],[\"业务处理器分组\",{\"1\":{\"451\":1}}],[\"业务处理器\",{\"1\":{\"450\":1}}],[\"业务流程中每个参与者都提交本地事务\",{\"1\":{\"423\":1}}],[\"业务异常\",{\"1\":{\"419\":1}}],[\"业务规模增长快\",{\"1\":{\"189\":1}}],[\"业务风险缓释\",{\"1\":{\"189\":1}}],[\"业务合规性审核\",{\"1\":{\"189\":1}}],[\"业务汇总表报送国家融资担保基金\",{\"1\":{\"189\":1}}],[\"业务汇总表报汇总后报送总行和省级再担保机构\",{\"1\":{\"189\":1}}],[\"业务汇总表向承办担保机构备案\",{\"1\":{\"189\":1}}],[\"业务清晰\",{\"1\":{\"130\":1}}],[\"六\",{\"1\":{\"189\":2,\"684\":1}}],[\"押担保和反担保措施\",{\"1\":{\"189\":1}}],[\"质\",{\"1\":{\"189\":1}}],[\"五个表空间\",{\"1\":{\"864\":1}}],[\"五个字符\",{\"1\":{\"616\":1}}],[\"五个队列所提供的各有不同\",{\"1\":{\"530\":1}}],[\"五\",{\"1\":{\"189\":3,\"684\":1,\"825\":1}}],[\"禁用后角色权限将不在生效\",{\"1\":{\"888\":1}}],[\"禁用mysql的缓存查询结果集功能\",{\"1\":{\"74\":1}}],[\"禁止\",{\"1\":{\"898\":1}}],[\"禁止与用户名相同\",{\"1\":{\"874\":1}}],[\"禁止使用timer\",{\"1\":{\"774\":1}}],[\"禁止swap分区\",{\"1\":{\"287\":1}}],[\"禁止将存量担保费率低于1\",{\"1\":{\"189\":1}}],[\"规划安装目录\",{\"0\":{\"832\":1}}],[\"规划安装用户和用户组\",{\"0\":{\"831\":1}}],[\"规划单独的用户安装\",{\"1\":{\"831\":1}}],[\"规定了一个分区内的\",{\"1\":{\"433\":1}}],[\"规定的担保支持对象\",{\"1\":{\"189\":1}}],[\"规则\",{\"0\":{\"307\":1}}],[\"规范定义了包括网卡mac地址\",{\"1\":{\"208\":1}}],[\"规范化有助于创造一个公平竞争的环境\",{\"1\":{\"166\":1}}],[\"规范指的是建立和维护一套标准和规则\",{\"1\":{\"166\":1}}],[\"规范\",{\"1\":{\"166\":2}}],[\"切换\",{\"1\":{\"834\":1}}],[\"切换到轻量级锁实现\",{\"1\":{\"723\":1}}],[\"切换分支\",{\"1\":{\"500\":1}}],[\"切换工作数据库\",{\"1\":{\"21\":1}}],[\"切实支持小微企业和\",{\"1\":{\"189\":1}}],[\"国产oracle系数据库学习笔记\",{\"1\":{\"830\":1}}],[\"国产密码算法\",{\"1\":{\"692\":1}}],[\"国际顶级域名\",{\"1\":{\"222\":1}}],[\"国办发\",{\"1\":{\"189\":1}}],[\"国务院办公厅关于有效发挥政府性融资担保基金作用\",{\"1\":{\"189\":1}}],[\"国家和地区顶级域名\",{\"1\":{\"222\":1}}],[\"国家融资担保基金统筹确定与各合作银行的合作业务规模\",{\"1\":{\"189\":1}}],[\"国家融资担保基金综合评估后\",{\"1\":{\"189\":1}}],[\"国家融资担保基金发文\",{\"1\":{\"189\":1}}],[\"国家融资担保基金根据上一年各银行批量担保业务开展情况\",{\"1\":{\"189\":1}}],[\"国家融资担保基金可暂停或终止与其合作\",{\"1\":{\"189\":1}}],[\"国家融资担保基金可组织对上一年代偿项目进行抽查\",{\"1\":{\"189\":1}}],[\"国家融资担保基金可能会承担一定比例的损失\",{\"1\":{\"167\":1}}],[\"国家融资担保基金按照贷款金额的0\",{\"1\":{\"189\":1}}],[\"国家融资担保基金与省级再担保机构签订\",{\"1\":{\"189\":1}}],[\"国家融资担保基金与银行总行签订\",{\"1\":{\"189\":1}}],[\"国家融资担保基金与地方融资担保再担保机构分别按担保贷款本息30\",{\"1\":{\"189\":1}}],[\"国家融资担保基金与担保公司之间的关系是一种互补和协同的伙伴关系\",{\"1\":{\"167\":1}}],[\"国家融资担保基金与担保公司建立业务合作关系\",{\"1\":{\"167\":1}}],[\"国家融资担保基金与担保公司共同承担因贷款违约带来的损失\",{\"1\":{\"167\":1}}],[\"国家融资担保基金的设立和运作体现了政府对小微企业和\",{\"1\":{\"167\":1}}],[\"国家融资担保基金将进一步为其提供担保\",{\"1\":{\"167\":1}}],[\"国家融资担保基金提供再担保服务\",{\"1\":{\"167\":1}}],[\"国家融资担保基金作为一个国家级的融资担保机构\",{\"1\":{\"167\":1}}],[\"国家融资担保基金\",{\"0\":{\"167\":1},\"1\":{\"167\":1,\"189\":3}}],[\"国家融资担保基金和省级担保\",{\"1\":{\"165\":1}}],[\"国家\",{\"1\":{\"21\":1}}],[\"战略性新兴产业企业等符合\",{\"1\":{\"189\":1}}],[\"创业创新市场主体\",{\"1\":{\"189\":1}}],[\"创建子类继承price\",{\"1\":{\"906\":1}}],[\"创建子进程\",{\"1\":{\"144\":1}}],[\"创建price接口\",{\"1\":{\"906\":1}}],[\"创建接口price作为movie的属性\",{\"1\":{\"906\":1}}],[\"创建用户\",{\"0\":{\"878\":1}}],[\"创建表\",{\"1\":{\"888\":1}}],[\"创建表空间\",{\"0\":{\"866\":1}}],[\"创建表test\",{\"1\":{\"13\":1}}],[\"创建服务\",{\"1\":{\"834\":1,\"838\":1}}],[\"创建服务代理类\",{\"0\":{\"398\":1}}],[\"创建并执行一个在给定初始延迟后首次启用的定期操作\",{\"1\":{\"774\":2}}],[\"创建并执行在给定延迟后启用的一次性操作\",{\"1\":{\"721\":1,\"774\":1}}],[\"创建定时任务\",{\"0\":{\"774\":1}}],[\"创建定时任务作为租约的\",{\"1\":{\"214\":1}}],[\"创建新线程执行任务\",{\"1\":{\"771\":1}}],[\"创建新分支并立即切换到新分支\",{\"1\":{\"500\":1}}],[\"创建进程\",{\"1\":{\"751\":1}}],[\"创建要写入文件的目录\",{\"1\":{\"627\":1}}],[\"创建多个\",{\"1\":{\"627\":1}}],[\"创建多余的索引给查询优化带来了更多的工作\",{\"1\":{\"100\":1}}],[\"创建web项目\",{\"1\":{\"566\":1}}],[\"创建maven项目\",{\"1\":{\"566\":2}}],[\"创建mysql运行目录\",{\"1\":{\"321\":1}}],[\"创建字符流写入对象\",{\"1\":{\"541\":1}}],[\"创建文件写入对象\",{\"1\":{\"541\":1}}],[\"创建对象\",{\"1\":{\"523\":1}}],[\"创建访问的地址\",{\"1\":{\"518\":1}}],[\"创建httpresponse对象\",{\"1\":{\"518\":2}}],[\"创建http对象\",{\"1\":{\"518\":2}}],[\"创建httpclient对象\",{\"1\":{\"518\":2}}],[\"创建hystrix的断路器工厂类\",{\"0\":{\"399\":1}}],[\"创建带注释的tag\",{\"1\":{\"501\":1}}],[\"创建版本\",{\"1\":{\"501\":1}}],[\"创建空的分支\",{\"1\":{\"500\":1}}],[\"创建远程版本\",{\"1\":{\"501\":1}}],[\"创建远程分支\",{\"1\":{\"500\":1}}],[\"创建远程操作账户\",{\"1\":{\"322\":1}}],[\"创建本地分支\",{\"1\":{\"500\":1}}],[\"创建仓库\",{\"0\":{\"497\":1}}],[\"创建的守护线程\",{\"1\":{\"472\":1}}],[\"创建三个线程\",{\"1\":{\"446\":1}}],[\"创建countdownlatch实例\",{\"1\":{\"446\":1}}],[\"创建bigdecimal对象\",{\"1\":{\"445\":1}}],[\"创建线程池\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"创建线程工厂实例\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"创建配置文件\",{\"1\":{\"401\":1}}],[\"创建data和logs目录\",{\"1\":{\"321\":1}}],[\"创建安装目录\",{\"1\":{\"319\":1,\"832\":1}}],[\"创建成功\",{\"1\":{\"283\":1}}],[\"创建索引模式\",{\"1\":{\"283\":1}}],[\"创建日志查看\",{\"1\":{\"263\":1}}],[\"创建yaml文件\",{\"1\":{\"263\":1}}],[\"创建网络\",{\"0\":{\"261\":1}}],[\"创建租约\",{\"1\":{\"214\":1}}],[\"创建数据快照\",{\"1\":{\"155\":1}}],[\"创建数据库\",{\"1\":{\"21\":1,\"836\":1}}],[\"创建\",{\"0\":{\"278\":1},\"1\":{\"143\":1,\"144\":1,\"285\":1,\"627\":1,\"834\":1,\"837\":1}}],[\"创建时间\",{\"1\":{\"64\":1}}],[\"创建者\",{\"1\":{\"64\":1}}],[\"创建连接的参数为\",{\"1\":{\"63\":1}}],[\"创建一个名为cc\",{\"1\":{\"541\":1}}],[\"创建一个具有参数所指定以字符串表示的数值的对象\",{\"1\":{\"445\":1}}],[\"创建一个具有参数所指定长整数值的对象\",{\"1\":{\"445\":1}}],[\"创建一个具有参数所指定双精度值的对象\",{\"1\":{\"445\":1}}],[\"创建一个具有参数所指定整数值的对象\",{\"1\":{\"445\":1}}],[\"创建一个配置类\",{\"1\":{\"408\":1}}],[\"创建一个桶\",{\"1\":{\"63\":1}}],[\"创建一个hdfs目录\",{\"0\":{\"6\":1}}],[\"创建s3client时出错\",{\"1\":{\"63\":1}}],[\"创建集合\",{\"1\":{\"58\":1}}],[\"创建于\",{\"1\":{\"50\":1}}],[\"创建学生成绩表\",{\"1\":{\"13\":2}}],[\"创建es连接失败\",{\"1\":{\"3\":1}}],[\"追索获得的资金\",{\"1\":{\"189\":1}}],[\"追加新的功能\",{\"1\":{\"898\":1}}],[\"追加数据是追加到末尾\",{\"1\":{\"433\":1}}],[\"追加\",{\"1\":{\"140\":1}}],[\"资料\",{\"1\":{\"458\":1}}],[\"资源管理器负责协调集群上计算资源的分配\",{\"1\":{\"657\":1}}],[\"资源作为工作目录\",{\"1\":{\"492\":1}}],[\"资源\",{\"1\":{\"475\":1}}],[\"资源请求的设置\",{\"1\":{\"263\":1}}],[\"资源限制的设置\",{\"1\":{\"263\":1}}],[\"资源限制和请求的设置\",{\"1\":{\"263\":1}}],[\"资源共享和业务协同\",{\"1\":{\"167\":1}}],[\"资产处置权益共享\",{\"1\":{\"189\":1}}],[\"四次挥手\",{\"0\":{\"649\":1},\"1\":{\"643\":1}}],[\"四种方案\",{\"0\":{\"309\":1}}],[\"四\",{\"0\":{\"352\":1},\"1\":{\"189\":4,\"684\":1,\"825\":1,\"834\":1}}],[\"政府性融资担保体系内部风险分担比例\",{\"1\":{\"189\":1}}],[\"政府性融资担保机构\",{\"1\":{\"189\":1}}],[\"政府采购信用担保作为分散风险和增强信用的市场运行的有效手段\",{\"1\":{\"188\":1}}],[\"政府采购担保作为一种政策工具被引入政府采购领域\",{\"1\":{\"188\":1}}],[\"政府采购担保\",{\"0\":{\"188\":1},\"1\":{\"180\":1}}],[\"风险\",{\"1\":{\"898\":1}}],[\"风险共担共管\",{\"1\":{\"189\":1}}],[\"风险控制和技术能力\",{\"1\":{\"189\":1}}],[\"风险分担的比例可能根据具体协议而定\",{\"1\":{\"167\":1}}],[\"优缺点\",{\"0\":{\"731\":1}}],[\"优雅的解决null问题\",{\"1\":{\"527\":1}}],[\"优先在内存中排序\",{\"1\":{\"855\":1}}],[\"优先级\",{\"1\":{\"306\":1}}],[\"优先保证数据的强一致性\",{\"1\":{\"197\":1}}],[\"优点\",{\"0\":{\"206\":1,\"209\":1},\"1\":{\"265\":1,\"527\":1,\"683\":1,\"727\":1,\"731\":1,\"806\":1}}],[\"优势互补\",{\"1\":{\"189\":1}}],[\"优化发展环境\",{\"1\":{\"188\":1}}],[\"优化机制\",{\"0\":{\"157\":1,\"158\":1}}],[\"优化单一表数据量过大而产生的性能问题\",{\"1\":{\"132\":1}}],[\"银担分险比例\",{\"1\":{\"189\":1}}],[\"银担双方可分别对客户进行债权追索或由一方委托对方负责对客户进行债权追索\",{\"1\":{\"189\":1}}],[\"银担双方共同负责对担保代偿项目进行债权追索\",{\"1\":{\"189\":1}}],[\"银担双方按比例分担合作业务风险责任并事先锁定合作业务总体担保代偿率上限\",{\"1\":{\"189\":1}}],[\"银担\",{\"0\":{\"189\":1},\"1\":{\"189\":2}}],[\"银行交易系统\",{\"1\":{\"781\":1}}],[\"银行\",{\"1\":{\"189\":1}}],[\"银行免除担保代偿责任\",{\"1\":{\"189\":2}}],[\"银行分行签订业务合同\",{\"1\":{\"189\":1}}],[\"银行分行每月与省级再担保机构就担保代偿补偿备付金使用\",{\"1\":{\"189\":1}}],[\"银行分行每月前8个工作日内将备案担保贷款业务清单\",{\"1\":{\"189\":1}}],[\"银行分行将审核结果反馈给承办银行\",{\"1\":{\"189\":1}}],[\"银行分行将业务合规性审核结果反馈给承办银行并报送总行\",{\"1\":{\"189\":1}}],[\"银行分行审核通过后\",{\"1\":{\"189\":1}}],[\"银行总行每月前15个工作日内分别将备案担保贷款业务清单\",{\"1\":{\"189\":1}}],[\"银行受理\",{\"1\":{\"189\":1}}],[\"银行和政府性融资担保体系分别承担担保贷款本息20\",{\"1\":{\"189\":1}}],[\"银行授权出口人在符合信用证所规定的条件下\",{\"1\":{\"176\":1}}],[\"银行承兑票据指由在承兑银行开立存款账户的存款人签发\",{\"1\":{\"175\":1}}],[\"银行承兑汇票\",{\"1\":{\"175\":1}}],[\"银行汇票是签发人为银行\",{\"1\":{\"175\":1}}],[\"银行汇票\",{\"1\":{\"175\":1}}],[\"银行等金融机构网点多\",{\"1\":{\"172\":1}}],[\"响应式协议\",{\"1\":{\"613\":1}}],[\"响应速度\",{\"1\":{\"522\":1}}],[\"响应数据\",{\"1\":{\"517\":1}}],[\"响应状态码\",{\"1\":{\"517\":1}}],[\"响应正文\",{\"1\":{\"478\":1}}],[\"响应头\",{\"1\":{\"478\":1}}],[\"响应行\",{\"1\":{\"478\":1}}],[\"响应时间短的优先分配\",{\"1\":{\"304\":1}}],[\"响应\",{\"1\":{\"188\":1,\"518\":2}}],[\"符号引用验证\",{\"0\":{\"563\":1}}],[\"符号引用验证∶这个动作在后面的解析过程中发生\",{\"1\":{\"558\":1}}],[\"符合资格条件的中小企业数量不足3家的\",{\"1\":{\"188\":1}}],[\"符作为索引值\",{\"1\":{\"100\":1}}],[\"预定义表空间不支持重命名\",{\"1\":{\"867\":1}}],[\"预先分配内存空间\",{\"1\":{\"448\":1}}],[\"预期原值及新值\",{\"1\":{\"442\":1}}],[\"预留份额的采购项目或者采购包\",{\"1\":{\"188\":1}}],[\"预付款保函是指由保证人为被保证人向业主提供的\",{\"1\":{\"182\":1}}],[\"预付款保函\",{\"0\":{\"182\":1},\"1\":{\"180\":1}}],[\"采取上述措施图示\",{\"1\":{\"669\":1}}],[\"采集日志客户端采用filebeat来进行采集日志\",{\"1\":{\"273\":1}}],[\"采购人应当严格按照本办法规定和主管预算单位制定的预留采购份额具体方案开展采购活动\",{\"1\":{\"188\":1}}],[\"采用hdfs将收集的数据按照业务进行分类存储\",{\"1\":{\"783\":1}}],[\"采用lock加锁在finally块中释放锁\",{\"0\":{\"777\":1}}],[\"采用这种方法一方面可以加快加载速度\",{\"1\":{\"563\":1}}],[\"采用类似\",{\"1\":{\"417\":1}}],[\"采用configmap来保存filebeat的配置文件\",{\"1\":{\"275\":1}}],[\"采用configmap形式部署filebeat\",{\"1\":{\"273\":1}}],[\"采用临时性顺序节点的原因\",{\"1\":{\"214\":1}}],[\"采用\",{\"1\":{\"82\":1,\"522\":1}}],[\"采用vgg16模型\",{\"0\":{\"59\":1}}],[\"采用基于排序的策略\",{\"1\":{\"47\":1}}],[\"工具可以脱机备份\",{\"1\":{\"892\":1}}],[\"工具类\",{\"0\":{\"518\":1},\"1\":{\"472\":1}}],[\"工具\",{\"1\":{\"319\":1}}],[\"工作线程\",{\"0\":{\"858\":1}}],[\"工作流程\",{\"1\":{\"771\":1,\"773\":1}}],[\"工作区有一个隐藏目录\",{\"1\":{\"490\":1}}],[\"工作区\",{\"0\":{\"490\":1},\"1\":{\"490\":1}}],[\"工作负载\",{\"1\":{\"278\":1}}],[\"工作调度\",{\"1\":{\"33\":1}}],[\"工业和信息化部关于印发<政府采购促进中小企业发展暂行办法>的通知\",{\"1\":{\"188\":1}}],[\"财政部\",{\"1\":{\"188\":1}}],[\"财产保全担保就是申请人在申请财产保全时向人民法院提供的担保\",{\"1\":{\"185\":1}}],[\"财产保全\",{\"0\":{\"185\":1}}],[\"拓宽中小企业融资渠道\",{\"1\":{\"188\":1}}],[\"履约保证等方面提供专业化服务\",{\"1\":{\"188\":1}}],[\"履约保函是指由保证人为被保证人\",{\"1\":{\"181\":1}}],[\"履约保函\",{\"0\":{\"181\":1}}],[\"履约担保和融资担保\",{\"1\":{\"188\":1}}],[\"专门处理字符串和文本\",{\"1\":{\"538\":1}}],[\"专门用于文件读写的一个操作的类\",{\"1\":{\"537\":1}}],[\"专门用于组合搜索\",{\"1\":{\"101\":1}}],[\"专门用来创建对象\",{\"1\":{\"445\":1}}],[\"专门提供数据卷给其他容器挂载使用\",{\"1\":{\"262\":1}}],[\"专业担保机构向采购商\",{\"1\":{\"188\":1}}],[\"承办银行进行业务合作考核评价\",{\"1\":{\"189\":1}}],[\"承办银行每月前5个工作日内将上月已担保代偿项目汇总提交承办担保机构\",{\"1\":{\"189\":1}}],[\"承办银行每月前5个工作日内将上月担保贷款业务清单\",{\"1\":{\"189\":1}}],[\"承办银行对需要进行展期\",{\"1\":{\"189\":1}}],[\"承办银行指导企业将担保费汇入承办担保机构在银行设立的账户\",{\"1\":{\"189\":1}}],[\"承办银行与企业\",{\"1\":{\"189\":1}}],[\"承办担保机构负责对银行分行\",{\"1\":{\"189\":1}}],[\"承办担保机构每月前10个工作日内完成对上月代偿项目审核\",{\"1\":{\"189\":1}}],[\"承办担保机构每月收到备案业务清单后\",{\"1\":{\"189\":1}}],[\"承办担保机构按月向省级再担保机构缴纳再担保费\",{\"1\":{\"189\":1}}],[\"承办担保机构完成担保收费后向企业开具发票\",{\"1\":{\"189\":1}}],[\"承办担保机构签订贷款合同\",{\"1\":{\"189\":1}}],[\"承办担保机构根据当月登记备案业务规模\",{\"1\":{\"189\":1}}],[\"承办担保机构根据每月新增业务规模和担保代偿率上限\",{\"1\":{\"189\":1}}],[\"承办担保机构根据合作业务规模\",{\"1\":{\"189\":1}}],[\"承办融资担保机构按照贷款金额的1\",{\"1\":{\"189\":1}}],[\"承租人支付事先约定的名义货价\",{\"1\":{\"187\":1}}],[\"承诺在一定期限内支付农民工的工资\",{\"1\":{\"184\":1}}],[\"承诺自己在见票时无条件支付确定的金额给收款人或者持票人的票据\",{\"1\":{\"175\":1}}],[\"利息\",{\"1\":{\"445\":2}}],[\"利率\",{\"1\":{\"445\":3}}],[\"利率高于同期银行存款利率\",{\"1\":{\"186\":1}}],[\"利用归档可以做完全恢复和不完全恢复\",{\"1\":{\"868\":1}}],[\"利用归档将数据库恢复到最新的状态\",{\"1\":{\"868\":1}}],[\"利用mmap\",{\"1\":{\"806\":1}}],[\"利用mycat等中间件\",{\"1\":{\"132\":1}}],[\"利用公钥p验证其签名\",{\"1\":{\"744\":1}}],[\"利用反射\",{\"1\":{\"733\":1}}],[\"利用外加资源的冗余技术掩蔽故障带来的影响\",{\"1\":{\"704\":1}}],[\"利用单例模式来管理connection\",{\"1\":{\"683\":1}}],[\"利用对称加密的速度快\",{\"1\":{\"682\":1}}],[\"利用码点解决\",{\"1\":{\"549\":1}}],[\"利用锁和等待机制的waitstrategycpu消耗少但是延迟比较高\",{\"1\":{\"458\":1}}],[\"利用的是compareandswapint\",{\"1\":{\"442\":1}}],[\"利用atomicinteger定义变量a\",{\"1\":{\"440\":1}}],[\"利用了\",{\"1\":{\"433\":1}}],[\"利用feign调用其他服务\",{\"1\":{\"427\":1}}],[\"利用filebeat采集k8s的集群日志\",{\"1\":{\"273\":1}}],[\"利用nacos的特性\",{\"1\":{\"410\":1}}],[\"利用\",{\"1\":{\"221\":1}}],[\"利用stringredistemplate\",{\"1\":{\"213\":1}}],[\"利用数据库连接池\",{\"1\":{\"683\":1}}],[\"利用数据库\",{\"0\":{\"211\":1}}],[\"利用最左前缀\",{\"1\":{\"100\":1}}],[\"利用哈希分发到不同的桶中\",{\"1\":{\"27\":1}}],[\"利用视图进行查询\",{\"1\":{\"20\":1}}],[\"电费担保\",{\"1\":{\"180\":1}}],[\"投入精力不用来满足客户关心的需求\",{\"1\":{\"898\":1}}],[\"投递时需要指定消息所属的topic\",{\"1\":{\"433\":1}}],[\"投标保函是指由保证人为投标人向招标人提供的\",{\"1\":{\"183\":1}}],[\"投标保函\",{\"0\":{\"183\":1},\"1\":{\"180\":1}}],[\"投资者可以从若干个到期期限中选择\",{\"1\":{\"178\":1}}],[\"适当的修改点越来越难找\",{\"1\":{\"898\":1}}],[\"适合使用自旋锁\",{\"1\":{\"813\":1}}],[\"适合离线计算\",{\"1\":{\"783\":1}}],[\"适合的才是最好的\",{\"1\":{\"203\":1}}],[\"适用于只有一个线程访问同步块的场景\",{\"1\":{\"673\":1}}],[\"适用于服务器通讯相关的多种场景\",{\"1\":{\"607\":1}}],[\"适用于多线程的消费者\",{\"1\":{\"472\":1}}],[\"适用于排重后值较少的列\",{\"1\":{\"28\":1}}],[\"适应直接融资占比上升而贷款相对规模萎缩的形势\",{\"1\":{\"178\":1}}],[\"寻求风险和收益匹配的新型客户和新型业务\",{\"1\":{\"178\":1}}],[\"依恋情节\",{\"0\":{\"913\":1}}],[\"依然使用独占锁的话\",{\"1\":{\"818\":1}}],[\"依然可以通过\",{\"1\":{\"475\":1}}],[\"依此类推\",{\"1\":{\"774\":1}}],[\"依此类推直到10年\",{\"1\":{\"178\":1}}],[\"依赖倒置原则\",{\"1\":{\"906\":1}}],[\"依赖数据库的锁机制实现\",{\"1\":{\"725\":1}}],[\"依赖优化\",{\"0\":{\"597\":1}}],[\"依赖范围就是用来控制依赖于这三种classpath\",{\"1\":{\"593\":1}}],[\"依赖范围\",{\"0\":{\"593\":1}}],[\"依赖\",{\"0\":{\"592\":1}}],[\"依赖臃肿等问题\",{\"1\":{\"569\":1}}],[\"依赖增加\",{\"1\":{\"569\":1}}],[\"依赖包填入溢出表\",{\"1\":{\"514\":1}}],[\"依赖包输出目录\",{\"1\":{\"389\":1}}],[\"依赖于pcre库\",{\"1\":{\"317\":1}}],[\"依赖机器的时钟\",{\"1\":{\"207\":1}}],[\"依托银行服务网络\",{\"1\":{\"189\":1}}],[\"依据脏数据所做的操作肯能是不正确的\",{\"1\":{\"72\":1}}],[\"议付行议付货款后即在信用证背面注明议付金额\",{\"1\":{\"176\":1}}],[\"议付货款\",{\"1\":{\"176\":1}}],[\"取r的横坐标\",{\"1\":{\"743\":1}}],[\"取其横坐标r作为数字签名的一部分\",{\"1\":{\"738\":1}}],[\"取下数字签名\",{\"1\":{\"705\":1}}],[\"取出元素时\",{\"1\":{\"533\":1}}],[\"取出的数据元素也可能为null\",{\"1\":{\"413\":1}}],[\"取关键字平方后中间几位作为哈希地址\",{\"1\":{\"510\":1}}],[\"取关键字的若干位进行或者组合进行hash计算\",{\"1\":{\"509\":1}}],[\"取\",{\"1\":{\"507\":1}}],[\"取消当前任务\",{\"1\":{\"475\":1}}],[\"取消注释\",{\"1\":{\"352\":1}}],[\"取消保护模式\",{\"1\":{\"352\":1}}],[\"取得信用证所要求的装运单据后\",{\"1\":{\"176\":1}}],[\"取决于它是否采用阻塞模式\",{\"1\":{\"456\":1}}],[\"取决于\",{\"1\":{\"147\":1}}],[\"出错信息为\",{\"1\":{\"626\":1}}],[\"出错了多少\",{\"1\":{\"581\":1}}],[\"出现磁盘\",{\"1\":{\"872\":1}}],[\"出现脏读\",{\"1\":{\"818\":1}}],[\"出现无限循环小数时\",{\"1\":{\"445\":1}}],[\"出现网络分区的情况下\",{\"1\":{\"198\":1}}],[\"出租人根据承租人的请求\",{\"1\":{\"187\":1}}],[\"出口人在发运货物\",{\"1\":{\"176\":1}}],[\"出票人签发的\",{\"1\":{\"175\":3}}],[\"统称通知行\",{\"1\":{\"176\":1}}],[\"统计指标设计\",{\"0\":{\"789\":1}}],[\"统计指标\",{\"0\":{\"786\":1,\"787\":1}}],[\"统计数据后的结果\",{\"1\":{\"784\":1}}],[\"统计结果\",{\"0\":{\"784\":1}}],[\"统计计数时\",{\"1\":{\"82\":1}}],[\"统计所有文件中每一个单词出现的次数\",{\"1\":{\"33\":1}}],[\"填具开证申请书\",{\"1\":{\"176\":1}}],[\"卖方\",{\"1\":{\"176\":1}}],[\"买方\",{\"1\":{\"176\":1}}],[\"信任传递的损失度量\",{\"1\":{\"684\":1}}],[\"信任的传递理论\",{\"1\":{\"684\":1}}],[\"信任的度量\",{\"1\":{\"684\":1}}],[\"信任的属性\",{\"1\":{\"684\":1}}],[\"信任链理论\",{\"1\":{\"684\":1}}],[\"信任链技术\",{\"1\":{\"684\":1}}],[\"信任链\",{\"1\":{\"684\":1}}],[\"信任具有动态性\",{\"1\":{\"684\":1}}],[\"信任具有二重性\",{\"1\":{\"684\":1}}],[\"信任可传递\",{\"1\":{\"684\":1}}],[\"信任可度量\",{\"1\":{\"684\":1}}],[\"信任不一定具有对称性\",{\"1\":{\"684\":1}}],[\"信任是一种二元关系\",{\"1\":{\"684\":1}}],[\"信任计算源自早起的安全硬件设计\",{\"1\":{\"684\":1}}],[\"信任计算\",{\"1\":{\"684\":1}}],[\"信用卡号\",{\"1\":{\"520\":1}}],[\"信用证支付的一般程序是\",{\"1\":{\"176\":1}}],[\"信用证\",{\"0\":{\"176\":1},\"1\":{\"176\":1}}],[\"信号量隔离下才有效\",{\"1\":{\"402\":1}}],[\"信号量隔离\",{\"1\":{\"402\":1}}],[\"信息将数据库恢复至一致性状态\",{\"1\":{\"889\":1}}],[\"信息保存在归档日志文件中\",{\"1\":{\"868\":1}}],[\"信息写入联机日志文件\",{\"1\":{\"864\":1}}],[\"信息放入\",{\"1\":{\"864\":1}}],[\"信息的安全性和行为的安全性\",{\"1\":{\"684\":1}}],[\"信息\",{\"1\":{\"627\":1,\"868\":1}}],[\"信息会存储到redis\",{\"1\":{\"367\":1}}],[\"信息不安全\",{\"1\":{\"210\":1}}],[\"信托是指委托人基于对受托人的信任\",{\"1\":{\"179\":1}}],[\"信托计划\",{\"0\":{\"179\":1},\"1\":{\"179\":1}}],[\"信托计划担保等\",{\"1\":{\"169\":1}}],[\"信托\",{\"1\":{\"171\":1}}],[\"委托关系\",{\"1\":{\"921\":1,\"923\":1}}],[\"委托\",{\"1\":{\"717\":1,\"922\":1}}],[\"委托人交付的资金进行集中管理\",{\"1\":{\"179\":1}}],[\"委托办理支票存款业务的银行或者其他金融机构在见票时无条件支付确定的金额给收款人或者持票人的票据\",{\"1\":{\"175\":1}}],[\"委托付款人在见票时或者在指定的日期无条件支付确定的金额给收款人或者持票人的票据\",{\"1\":{\"175\":1}}],[\"支付宝就在可用性和数据一致性之间选择了数据一致性\",{\"1\":{\"203\":1}}],[\"支付保函\",{\"1\":{\"180\":1}}],[\"支小支农担保贷款金额占全部担保贷款金额的比例不得低于80\",{\"1\":{\"189\":1}}],[\"支小支农业务占比\",{\"1\":{\"189\":1}}],[\"支票\",{\"1\":{\"175\":1}}],[\"支持使用\",{\"1\":{\"883\":1}}],[\"支持手工切换归档\",{\"1\":{\"871\":1}}],[\"支持可重复加锁\",{\"1\":{\"820\":1}}],[\"支持重入\",{\"1\":{\"819\":1}}],[\"支持非公平性\",{\"1\":{\"819\":1}}],[\"支持统计用户点击量\",{\"1\":{\"783\":1}}],[\"支持数据并行加载到hadoop中\",{\"1\":{\"428\":1}}],[\"支持本地\",{\"1\":{\"421\":1}}],[\"支持正则\",{\"1\":{\"317\":1}}],[\"支持tcp和udp\",{\"1\":{\"263\":1}}],[\"支持go\",{\"1\":{\"214\":1}}],[\"支持回滚\",{\"1\":{\"109\":1}}],[\"支持条件过滤\",{\"1\":{\"109\":1}}],[\"支持的大多数向量指数类型都使用近似最近邻搜索\",{\"1\":{\"52\":1}}],[\"支持\",{\"1\":{\"20\":1,\"153\":1,\"161\":1}}],[\"支持近实时的存储\",{\"1\":{\"4\":1}}],[\"②商业汇票一般按承兑人的不同\",{\"1\":{\"175\":1}}],[\"付款人为其它商号\",{\"1\":{\"175\":1}}],[\"付款人为其他银行的汇票\",{\"1\":{\"175\":1}}],[\"商业票据是筹措流动资金的工具\",{\"1\":{\"186\":1}}],[\"商业票据是一种可转让的金融工具\",{\"1\":{\"186\":1}}],[\"商业票据是一种无担保的短期期票\",{\"1\":{\"186\":1}}],[\"商业票据有时也以折扣的方式发售\",{\"1\":{\"186\":1}}],[\"商业票据可以由企业直接发售\",{\"1\":{\"186\":1}}],[\"商业票据的期限在一年以下\",{\"1\":{\"186\":1}}],[\"商业票据的可靠程度依赖于发行企业的信用程度\",{\"1\":{\"186\":1}}],[\"商业票据\",{\"0\":{\"186\":1},\"1\":{\"186\":1}}],[\"商业票据担保\",{\"1\":{\"180\":1}}],[\"商业银行就面临传统资产业务利润受到侵蚀的威胁\",{\"1\":{\"178\":1}}],[\"商业承兑票据是指收款人开出\",{\"1\":{\"175\":1}}],[\"商业承兑汇票\",{\"1\":{\"175\":1}}],[\"商业汇票是签发人为商号或者个人\",{\"1\":{\"175\":1}}],[\"商业汇票\",{\"1\":{\"175\":1}}],[\"商品数量得往1500w+上预估\",{\"1\":{\"131\":1}}],[\"商品库单库存储数据已经超出预估\",{\"1\":{\"131\":1}}],[\"商品信息的操作的高效率不会被商品描述的低效率拖累\",{\"1\":{\"129\":1}}],[\"①汇票按付款人的不同\",{\"1\":{\"175\":1}}],[\"汇票\",{\"1\":{\"175\":1}}],[\"票据\",{\"0\":{\"175\":1}}],[\"票据分类\",{\"0\":{\"174\":1}}],[\"票据和信用证\",{\"0\":{\"173\":1},\"1\":{\"169\":1}}],[\"降级\",{\"1\":{\"723\":1}}],[\"降级回调方法允许的最大调用\",{\"1\":{\"402\":1}}],[\"降低了系统的资源开销\",{\"1\":{\"808\":1}}],[\"降低了并发性\",{\"1\":{\"663\":1}}],[\"降低系统消耗\",{\"1\":{\"752\":1}}],[\"降低到了\",{\"1\":{\"618\":1}}],[\"降低产品和运营不匹配的问题\",{\"1\":{\"489\":1}}],[\"降低担保贷款门槛\",{\"1\":{\"189\":1}}],[\"降低融资成本\",{\"1\":{\"172\":1}}],[\"降序desc\",{\"1\":{\"23\":1}}],[\"吸收存款的起点低\",{\"1\":{\"172\":1}}],[\"贴现等形式\",{\"1\":{\"171\":1}}],[\"间接融资的优点\",{\"0\":{\"172\":1}}],[\"间接融资是指资金盈余单位与资金短缺单位之间不发生直接关系\",{\"1\":{\"171\":1}}],[\"间接融资担保的银行贷款担保\",{\"0\":{\"170\":1},\"1\":{\"169\":1}}],[\"贸易融资\",{\"0\":{\"173\":1},\"1\":{\"169\":1}}],[\"产生原因\",{\"0\":{\"663\":1}}],[\"产生应用需要的任何额外的源代码\",{\"1\":{\"566\":1}}],[\"产生的场景\",{\"1\":{\"413\":1}}],[\"产生的日志\",{\"1\":{\"74\":1}}],[\"产生4096个id序号\",{\"1\":{\"205\":1}}],[\"产品品种主要有\",{\"1\":{\"169\":1}}],[\"债务人或第三方会提供某种形式的担保\",{\"1\":{\"168\":1}}],[\"担保收费\",{\"1\":{\"189\":1}}],[\"担保代偿项目抽查\",{\"1\":{\"189\":1}}],[\"担保代偿项目债权追索处置\",{\"1\":{\"189\":1}}],[\"担保代偿补偿备付金账户管理\",{\"1\":{\"189\":1}}],[\"担保代偿补偿责任履行\",{\"1\":{\"189\":1}}],[\"担保代偿率上限为3\",{\"1\":{\"189\":1}}],[\"担保代偿率上限\",{\"1\":{\"189\":1}}],[\"担保费\",{\"1\":{\"189\":1}}],[\"担保贷款项目发生风险\",{\"1\":{\"189\":1}}],[\"担保贷款项目登记备案\",{\"1\":{\"189\":1}}],[\"担保贷款条件\",{\"1\":{\"189\":1}}],[\"担保贷款额度\",{\"1\":{\"189\":1}}],[\"担保贷款对象\",{\"1\":{\"189\":1}}],[\"担保规律探索\",{\"1\":{\"180\":1}}],[\"担保品种主要有\",{\"1\":{\"180\":1}}],[\"担保条款可能要求担保者保证利息的支付或本金的支付\",{\"1\":{\"177\":1}}],[\"担保债券的安全性取决于担保者履行担保条款的财务能力\",{\"1\":{\"177\":1}}],[\"担保债券是由另一实体担保债务责任的债券\",{\"1\":{\"177\":1}}],[\"担保人或担保机构将承担相应的经济责任\",{\"1\":{\"168\":1}}],[\"担保便起到了一个保障作用\",{\"1\":{\"168\":1}}],[\"担保\",{\"0\":{\"173\":1},\"1\":{\"168\":1,\"169\":1,\"189\":1}}],[\"担保机构\",{\"1\":{\"189\":1}}],[\"担保机构也不至于遭受过大的财务打击\",{\"1\":{\"166\":1}}],[\"担保机构全部履行完毕对债权人代偿责任后\",{\"1\":{\"165\":1}}],[\"担保机构向债权人全额代偿后\",{\"1\":{\"164\":1}}],[\"总可以叫一个对象给你\",{\"1\":{\"910\":1}}],[\"总用量\",{\"1\":{\"833\":1,\"834\":2}}],[\"总线会禁止其它所有的处理器和\",{\"1\":{\"809\":1}}],[\"总线会同步试图并发使用总线的事务\",{\"1\":{\"809\":1}}],[\"总线事务包括读事务\",{\"1\":{\"809\":1}}],[\"总的来说\",{\"1\":{\"659\":1}}],[\"总的主机有8\",{\"1\":{\"526\":1}}],[\"总会将\",{\"1\":{\"624\":1}}],[\"总结一下\",{\"1\":{\"688\":1}}],[\"总结\",{\"0\":{\"472\":1,\"625\":1,\"800\":1,\"803\":1,\"806\":1,\"807\":1,\"819\":1},\"1\":{\"475\":1}}],[\"总对总\",{\"0\":{\"189\":1},\"1\":{\"189\":5}}],[\"总之这个服务器在物理位置上离发起请求的计算机比较近\",{\"1\":{\"222\":1}}],[\"总之etcd的灵感来源于zookeeper\",{\"1\":{\"214\":1}}],[\"总之\",{\"1\":{\"167\":1}}],[\"总是等于\",{\"1\":{\"124\":1}}],[\"融资租赁指向承租人转移了与资产所有权有关的全部风险和报酬的租赁形式\",{\"1\":{\"187\":1}}],[\"融资租赁担保\",{\"0\":{\"187\":1},\"1\":{\"180\":1}}],[\"融资风险便可由多样化的资产和负债结构分散承担\",{\"1\":{\"172\":1}}],[\"融资的风险由债权人独自承担\",{\"1\":{\"172\":1}}],[\"融资的政策支持\",{\"1\":{\"167\":1}}],[\"融资担保是担保业务中最主要的业务产品\",{\"1\":{\"169\":1}}],[\"融资担保和非融资担保\",{\"0\":{\"168\":1}}],[\"融资类担保产品\",{\"0\":{\"169\":1}}],[\"融资贵问题\",{\"1\":{\"167\":1}}],[\"技术构建一个独立于应用程序的代理程序\",{\"1\":{\"706\":1}}],[\"技术\",{\"1\":{\"433\":1}}],[\"技术实现\",{\"1\":{\"250\":1}}],[\"技术支持和风险管理等方面的协作\",{\"1\":{\"167\":1}}],[\"技术应用\",{\"1\":{\"166\":1}}],[\"促进双方的信息交流\",{\"1\":{\"167\":1}}],[\"促进地方经济发展和维护金融稳定所扮演的关键角色\",{\"1\":{\"166\":1}}],[\"缓解拥塞\",{\"1\":{\"644\":1}}],[\"缓解这些领域的融资难\",{\"1\":{\"167\":1}}],[\"缓存行的填充\",{\"0\":{\"667\":1},\"1\":{\"664\":1}}],[\"缓存是最大的缓存单元\",{\"1\":{\"662\":1}}],[\"缓存比l1缓存慢\",{\"1\":{\"662\":1}}],[\"缓存设计总是在不断发展\",{\"1\":{\"662\":1}}],[\"缓存设计过去常常在cpu外部安装l2和l3缓存\",{\"1\":{\"662\":1}}],[\"缓存系统\",{\"1\":{\"558\":1}}],[\"缓存对象\",{\"1\":{\"557\":1}}],[\"缓存那块\",{\"1\":{\"433\":1}}],[\"缓存\",{\"1\":{\"305\":1,\"662\":1,\"863\":1}}],[\"缓存命中率不高\",{\"1\":{\"305\":1}}],[\"缓存的并发能力是关键\",{\"1\":{\"221\":1}}],[\"缓存数据\",{\"1\":{\"221\":1}}],[\"缓冲区\",{\"1\":{\"863\":2}}],[\"缓冲区中没有找到对应\",{\"1\":{\"863\":1}}],[\"缓冲区中查找是否有对应的\",{\"1\":{\"863\":1}}],[\"缓冲区满或系统关闭时\",{\"1\":{\"859\":1}}],[\"缓冲区更大能提高性能\",{\"1\":{\"74\":1}}],[\"缓冲区的内容已经被写入一个可被搜索的段中\",{\"1\":{\"4\":1}}],[\"农民工工资保函是指由银行或其他金融机构为农民工出具的一种书面文件\",{\"1\":{\"184\":1}}],[\"农民工工资\",{\"0\":{\"184\":1}}],[\"农民工工资支付保函等\",{\"1\":{\"180\":1}}],[\"农民\",{\"1\":{\"167\":1}}],[\"农村\",{\"1\":{\"167\":1}}],[\"农业\",{\"1\":{\"167\":1}}],[\"尤其是在大促以及微博火热爆点的时候\",{\"1\":{\"720\":1}}],[\"尤其是在融资担保和再担保业务中\",{\"1\":{\"166\":1}}],[\"尤其是便携式pc的标准配置\",{\"1\":{\"687\":1}}],[\"尤其是融资担保行业\",{\"1\":{\"166\":1}}],[\"机器重启后历史数据不被丢失\",{\"1\":{\"432\":1}}],[\"机构\",{\"1\":{\"165\":1}}],[\"机制返回的\",{\"1\":{\"214\":1}}],[\"机制支持\",{\"1\":{\"214\":1}}],[\"机制可以保证分布式锁的安全性\",{\"1\":{\"214\":1}}],[\"机制\",{\"1\":{\"152\":1,\"214\":1,\"530\":1}}],[\"确认注册成功\",{\"0\":{\"394\":1}}],[\"确认链接到了服务器\",{\"1\":{\"214\":1}}],[\"确认的再担保责任比例\",{\"1\":{\"165\":1}}],[\"确定程序语义是否正确\",{\"1\":{\"558\":1,\"562\":1}}],[\"确定下单的话\",{\"1\":{\"202\":1}}],[\"确定意向合作业务规模\",{\"1\":{\"189\":1}}],[\"确定合作业务规模\",{\"1\":{\"189\":1}}],[\"确定合作银行\",{\"1\":{\"189\":1}}],[\"确定首批合作银行\",{\"1\":{\"189\":1}}],[\"确定如何选择合适的数据类型下面的选择方法按存储引擎分类\",{\"1\":{\"94\":1}}],[\"确保存在依赖的消费者之间能够按照正确的顺序处理\",{\"1\":{\"450\":1}}],[\"确保生产者不会覆盖消费者未来得及处理的消息\",{\"1\":{\"450\":1}}],[\"确保两个\",{\"1\":{\"214\":1}}],[\"确保债权人的权益不受损害\",{\"1\":{\"168\":1}}],[\"确保即使有借款人违约\",{\"1\":{\"166\":1}}],[\"约定\",{\"1\":{\"164\":1}}],[\"约束\",{\"1\":{\"82\":1,\"846\":1}}],[\"经常被用于速度要求严苛\",{\"1\":{\"620\":1}}],[\"经典的\",{\"1\":{\"610\":1}}],[\"经由\",{\"1\":{\"521\":1}}],[\"经审核如果代码没问题则会合并模块\",{\"1\":{\"488\":1}}],[\"经过一段时间以后\",{\"1\":{\"898\":1}}],[\"经过上述配置\",{\"1\":{\"410\":1}}],[\"经过水平切分的优化\",{\"1\":{\"131\":1}}],[\"经付款人承兑或由付款人开出并承兑的汇票\",{\"1\":{\"175\":1}}],[\"经人民法院裁定终结担保机构破产程序且担保机构完成注销登记\",{\"1\":{\"163\":1}}],[\"享有相应权利\",{\"1\":{\"162\":1}}],[\"双行函数\",{\"1\":{\"910\":1}}],[\"双方就必须基于相同的方法和规则\",{\"1\":{\"638\":1}}],[\"双方按约承担相应责任\",{\"1\":{\"162\":1}}],[\"双精度浮点型变量double可以处理16位有效数\",{\"1\":{\"445\":1}}],[\"双端\",{\"1\":{\"119\":1}}],[\"层的高可用\",{\"1\":{\"161\":1}}],[\"针对搬移后的代码\",{\"1\":{\"902\":1}}],[\"针对业务繁忙期间\",{\"1\":{\"872\":1}}],[\"针对这种读多写少的情况\",{\"1\":{\"818\":1}}],[\"针对开发者\",{\"1\":{\"784\":1}}],[\"针对运营\",{\"1\":{\"784\":1}}],[\"针对不同的场景\",{\"1\":{\"450\":1}}],[\"针对极高的性能目标而实现的极度优化和无锁的设计\",{\"1\":{\"448\":1}}],[\"针对此问题我们可以采用的方案\",{\"1\":{\"410\":1}}],[\"针对单个服务配置路由规则\",{\"1\":{\"403\":1}}],[\"针对单个方法的配置\",{\"1\":{\"402\":1}}],[\"针对\",{\"1\":{\"161\":1}}],[\"针对一个\",{\"1\":{\"150\":1}}],[\"架构模式\",{\"1\":{\"234\":1}}],[\"架构中引入了\",{\"1\":{\"161\":1}}],[\"架构\",{\"1\":{\"161\":1}}],[\"运用参数对象为它减肥\",{\"1\":{\"914\":1}}],[\"运用重构\",{\"1\":{\"907\":1}}],[\"运用多态取代与价格相关的条件逻辑\",{\"0\":{\"905\":1,\"906\":1}}],[\"运用extract\",{\"0\":{\"903\":1}}],[\"运用replace\",{\"1\":{\"902\":1,\"904\":1}}],[\"运用比较多\",{\"1\":{\"508\":1}}],[\"运用或处分的资金信托业务活动\",{\"1\":{\"179\":1}}],[\"运营指标\",{\"1\":{\"428\":1}}],[\"运行状态\",{\"1\":{\"926\":1}}],[\"运行任务\",{\"1\":{\"776\":1}}],[\"运行中的fixedthreadpool\",{\"1\":{\"771\":1}}],[\"运行甚至替换其他\",{\"1\":{\"706\":1}}],[\"运行环境\",{\"0\":{\"697\":1}}],[\"运行速度\",{\"0\":{\"629\":1}}],[\"运行作业任务的节点\",{\"1\":{\"627\":1}}],[\"运行时的内存池\",{\"0\":{\"855\":1}}],[\"运行时依赖规范\",{\"1\":{\"593\":1}}],[\"运行时异常等场景返回\",{\"1\":{\"413\":1}}],[\"运行classpath\",{\"1\":{\"593\":1}}],[\"运行单元测试\",{\"1\":{\"568\":1}}],[\"运行打包部署\",{\"1\":{\"566\":1}}],[\"运行检查\",{\"1\":{\"566\":1}}],[\"运行测试\",{\"1\":{\"566\":1}}],[\"运行结果\",{\"1\":{\"532\":1}}],[\"运行完成的异步任务的结果\",{\"1\":{\"475\":1}}],[\"运行nacos\",{\"1\":{\"415\":1}}],[\"运行程序\",{\"1\":{\"394\":1}}],[\"运行\",{\"0\":{\"271\":1},\"1\":{\"836\":1}}],[\"运行于多核机器能够获得更好的应用\",{\"1\":{\"161\":1}}],[\"运算规则\",{\"1\":{\"896\":1}}],[\"运算符\",{\"0\":{\"895\":1}}],[\"运算时\",{\"1\":{\"221\":1}}],[\"运算\",{\"1\":{\"100\":2,\"526\":2}}],[\"豌豆荚\",{\"1\":{\"161\":1}}],[\"集成测试\",{\"1\":{\"704\":1}}],[\"集群资源管理服务\",{\"1\":{\"627\":1}}],[\"集群的设置\",{\"1\":{\"564\":1}}],[\"集群配多个\",{\"1\":{\"435\":1}}],[\"集群消费能力\",{\"1\":{\"431\":1}}],[\"集群部署等就必须要把p也考虑进来\",{\"1\":{\"196\":1}}],[\"集群\",{\"1\":{\"158\":1}}],[\"集合里的元素即使isnotempty\",{\"1\":{\"413\":1}}],[\"集合或者有序集合进行排序\",{\"1\":{\"139\":1}}],[\"集合以及有序集合进行排序\",{\"1\":{\"139\":1}}],[\"集合\",{\"1\":{\"139\":1,\"158\":4}}],[\"集合数据类型\",{\"1\":{\"25\":1}}],[\"读数据\",{\"1\":{\"863\":1}}],[\"读锁释放\",{\"1\":{\"823\":1}}],[\"读锁的释放\",{\"0\":{\"823\":1}}],[\"读锁的获取\",{\"0\":{\"822\":1}}],[\"读锁获取失败\",{\"1\":{\"822\":1}}],[\"读锁获取后能再次获取\",{\"1\":{\"819\":1}}],[\"读锁不是独占式锁\",{\"1\":{\"822\":1}}],[\"读锁\",{\"1\":{\"820\":1}}],[\"读能共存\",{\"1\":{\"818\":1}}],[\"读\",{\"1\":{\"818\":2}}],[\"读写所允许同一时刻被多个读线程访问\",{\"1\":{\"818\":1}}],[\"读写锁支持锁降级\",{\"1\":{\"824\":1}}],[\"读写锁是否能够提高性能取决于读写数据的频率\",{\"1\":{\"818\":1}}],[\"读写锁比互斥锁允许对于共享数据更大程度的并发\",{\"1\":{\"818\":1}}],[\"读写锁介绍\",{\"0\":{\"818\":1}}],[\"读写锁\",{\"0\":{\"817\":1},\"1\":{\"818\":1}}],[\"读事务从内存传送数据到处理器\",{\"1\":{\"809\":1}}],[\"读内存中的公共状态来隐式进行通信\",{\"1\":{\"809\":1}}],[\"读隔离\",{\"1\":{\"427\":1}}],[\"读性能的方案\",{\"1\":{\"158\":1}}],[\"读取数据\",{\"1\":{\"843\":1}}],[\"读取配置参数文件\",{\"1\":{\"843\":1}}],[\"读取配置超时时间\",{\"1\":{\"297\":1}}],[\"读取和写入操作的持续时间\",{\"1\":{\"818\":1}}],[\"读取出数据时\",{\"1\":{\"730\":1}}],[\"读取文件的详细步骤\",{\"1\":{\"627\":1}}],[\"读取文件为流\",{\"0\":{\"546\":1}}],[\"读取1个字节转成10进制int表示\",{\"1\":{\"613\":1}}],[\"读取上面写入文件的数据\",{\"1\":{\"542\":1}}],[\"读取流\",{\"1\":{\"538\":1}}],[\"读取当前序列值\",{\"1\":{\"472\":1}}],[\"读取超时\",{\"1\":{\"403\":1}}],[\"读取属性文件的值\",{\"0\":{\"387\":1}}],[\"读取\",{\"1\":{\"214\":1}}],[\"读取单个或者多个元素\",{\"1\":{\"133\":1}}],[\"读取完成关闭连接\",{\"1\":{\"14\":1}}],[\"位异或运算\",{\"0\":{\"896\":1}}],[\"位于\",{\"1\":{\"837\":1}}],[\"位于容器中\",{\"1\":{\"262\":1}}],[\"位变量的写将不具有原子性\",{\"1\":{\"809\":1}}],[\"位\",{\"1\":{\"809\":1}}],[\"位数据的写操作具有原子性\",{\"1\":{\"809\":1}}],[\"位字符集的程序设计语言有很大的改进\",{\"1\":{\"549\":1}}],[\"位的写操作可能会被分配到不同的总线事务中执行\",{\"1\":{\"809\":1}}],[\"位的写操作来执行\",{\"1\":{\"809\":1}}],[\"位的处理器上\",{\"1\":{\"809\":1}}],[\"位的\",{\"1\":{\"549\":2,\"809\":2}}],[\"位有符号整数\",{\"1\":{\"158\":1}}],[\"位置即为\",{\"1\":{\"155\":1}}],[\"位置上\",{\"1\":{\"127\":1}}],[\"任性不提\",{\"1\":{\"897\":1}}],[\"任何不会被修改的变量都可以被当成参数传入新的函数\",{\"1\":{\"900\":1}}],[\"任何的jar\",{\"1\":{\"578\":1}}],[\"任何未匹配到其它location的请求都会匹配到\",{\"1\":{\"306\":1}}],[\"任何一个傻瓜都能写出计算机可以理解的代码\",{\"1\":{\"901\":1}}],[\"任何一个依赖\",{\"1\":{\"599\":1}}],[\"任何一个构件都必须明确定义自己的坐标\",{\"1\":{\"586\":1}}],[\"任何一个工程项目都是由许多类组成的\",{\"1\":{\"563\":1}}],[\"任何一个线程完成之前\",{\"1\":{\"446\":1,\"553\":1}}],[\"任何一个节点的不稳定都可以影响可用性\",{\"1\":{\"194\":1}}],[\"任何一方追索获得的资金\",{\"1\":{\"189\":1}}],[\"任意条件不满足\",{\"1\":{\"158\":1}}],[\"任务依赖性\",{\"1\":{\"769\":1}}],[\"任务时间执行长短\",{\"1\":{\"769\":1}}],[\"任务优先级\",{\"1\":{\"769\":1}}],[\"任务是cpu密集型\",{\"1\":{\"769\":1}}],[\"任务队列\",{\"1\":{\"759\":1}}],[\"任务不需要等到线程创建就可以立即执行\",{\"1\":{\"752\":1}}],[\"任务在容器中运行\",{\"1\":{\"657\":1}}],[\"任务完成之后退出程序\",{\"1\":{\"652\":1}}],[\"任务完成后调用countdownlatch的countdown\",{\"1\":{\"446\":1}}],[\"任务\",{\"1\":{\"21\":1,\"23\":1}}],[\"受信任的根证书颁发机构\",{\"1\":{\"705\":1}}],[\"受定义的前后顺序影响\",{\"1\":{\"307\":1}}],[\"受理企业提出的担保贷款申请\",{\"1\":{\"189\":1}}],[\"受限于\",{\"1\":{\"157\":1}}],[\"受益于其\",{\"1\":{\"157\":1}}],[\"然而这个方法的处理方式会在遇到不同异常的情况下有不同的实现\",{\"1\":{\"613\":2}}],[\"然而\",{\"1\":{\"157\":1,\"485\":1}}],[\"然后移除原类\",{\"1\":{\"918\":1}}],[\"然后让这两个地点都调用被提炼出的那一段代码\",{\"1\":{\"909\":1}}],[\"然后二进制转为十进制\",{\"1\":{\"896\":1}}],[\"然后从高位开始比较\",{\"1\":{\"896\":1}}],[\"然后删除表空间数据文件\",{\"1\":{\"893\":1}}],[\"然后不断的判断锁是否能够被成功获取\",{\"1\":{\"811\":1}}],[\"然后查询每个fd对应的设备状态\",{\"1\":{\"803\":1}}],[\"然后中断所有没有正在执行任务的线程\",{\"1\":{\"764\":1}}],[\"然后尝试停止所有的正在执行或者暂停的线程\",{\"1\":{\"764\":1}}],[\"然后逐个调用线程的interrupt来中断线程\",{\"1\":{\"764\":1}}],[\"然后计算s\",{\"1\":{\"738\":1}}],[\"然后根据返回的不同结果做相应的操作\",{\"1\":{\"731\":1}}],[\"然后根据查询判断是否需要回表查询数据\",{\"1\":{\"102\":1}}],[\"然后只有amount\",{\"1\":{\"728\":1}}],[\"然后需要的时候提供一个\",{\"1\":{\"683\":1}}],[\"然后才能回答你\",{\"1\":{\"922\":1}}],[\"然后才能解开消息\",{\"1\":{\"682\":1}}],[\"然后才执行拼接\",{\"1\":{\"619\":1}}],[\"然后才执行拼接操作\",{\"1\":{\"619\":1}}],[\"然后才执行实际的修改操作\",{\"1\":{\"619\":1}}],[\"然后告知其他的cpu核\",{\"1\":{\"663\":1}}],[\"然后它继续在l2中找到它\",{\"1\":{\"662\":1}}],[\"然后是l2\",{\"1\":{\"662\":1}}],[\"然后接收端实体对已成功收到的字节发回一个相应的确认\",{\"1\":{\"644\":1}}],[\"然后就把这个函数和那些数据摆在一起\",{\"1\":{\"913\":1}}],[\"然后就能证明\",{\"1\":{\"705\":1}}],[\"然后就传递给网络层了\",{\"1\":{\"639\":1}}],[\"然后就会把\",{\"1\":{\"381\":1}}],[\"然后看某个对象是否被使用过\",{\"1\":{\"558\":1}}],[\"然后一直不再使用它\",{\"1\":{\"558\":1}}],[\"然后一个个消费掉\",{\"1\":{\"428\":1}}],[\"然后直接清除掉端边界以外的内存\",{\"1\":{\"557\":1}}],[\"然后进行清除回收\",{\"1\":{\"557\":1}}],[\"然后进入安装目录\",{\"1\":{\"319\":1}}],[\"然后进入循环一直尝试加锁\",{\"1\":{\"213\":1}}],[\"然后当前线程被阻塞\",{\"1\":{\"552\":1}}],[\"然后实现下边的代码进行写操作\",{\"1\":{\"539\":1}}],[\"然后得到\",{\"1\":{\"526\":2}}],[\"然后用证书对该随机值进行加密\",{\"1\":{\"522\":1}}],[\"然后发给你\",{\"1\":{\"522\":1}}],[\"然后连接到\",{\"1\":{\"522\":1}}],[\"然后开发人员可以根据自己的项目分工\",{\"1\":{\"488\":1}}],[\"然后返回结果\",{\"1\":{\"475\":1}}],[\"然后返回或者存储排序的结果\",{\"1\":{\"139\":1}}],[\"然后处理可用的事件\",{\"1\":{\"472\":1}}],[\"然后把所有和这个变量相关的代码都放进这个新家\",{\"1\":{\"920\":1}}],[\"然后把网络地址的主机位全换成1\",{\"1\":{\"526\":1}}],[\"然后把内容通过该值进行对称加密\",{\"1\":{\"522\":1}}],[\"然后把\",{\"1\":{\"455\":1}}],[\"然后\",{\"1\":{\"454\":1,\"456\":1,\"475\":1,\"705\":1,\"809\":1}}],[\"然后使用该配置\",{\"1\":{\"779\":1}}],[\"然后使用bigdecimal\",{\"1\":{\"445\":1}}],[\"然后使用了docker\",{\"1\":{\"234\":1}}],[\"然后使用了这个数据\",{\"1\":{\"72\":1}}],[\"然后+1\",{\"1\":{\"443\":1}}],[\"然后手动提交偏移量\",{\"1\":{\"435\":1}}],[\"然后投递到kafka集群中\",{\"1\":{\"433\":1}}],[\"然后在用hive进行数据建模\",{\"1\":{\"788\":1}}],[\"然后在l3中找到它\",{\"1\":{\"662\":1}}],[\"然后在启动类上加注解\",{\"1\":{\"403\":1}}],[\"然后在application\",{\"1\":{\"402\":1}}],[\"然后在数据的一致性方面做了些牺牲\",{\"1\":{\"202\":1}}],[\"然后启动pod时挂载到pod里的容器里\",{\"1\":{\"275\":1}}],[\"然后linux防火墙开启2375端口\",{\"1\":{\"230\":1}}],[\"然后将注意力转移到函数签名上\",{\"1\":{\"914\":1}}],[\"然后将提炼出的代码推入到超类中\",{\"1\":{\"909\":1}}],[\"然后将对称密钥通过非对称加密的方式用公钥进行加密\",{\"1\":{\"679\":1}}],[\"然后将两者相\",{\"1\":{\"526\":2}}],[\"然后将配置文件和日志挂载到filebeat的pod中\",{\"1\":{\"273\":1}}],[\"然后将其传给gtm\",{\"1\":{\"222\":1}}],[\"然后将这个元素推入dest\",{\"1\":{\"135\":2}}],[\"然后将结果输入\",{\"1\":{\"55\":1}}],[\"然后分布不同的数据库\",{\"1\":{\"130\":1}}],[\"然后再将这个函数推入消息链\",{\"1\":{\"921\":1}}],[\"然后再将数据拷贝到该目录下\",{\"1\":{\"22\":1}}],[\"然后再请求另一个对象\",{\"1\":{\"921\":1}}],[\"然后再向后者请求另一个对象\",{\"1\":{\"921\":1}}],[\"然后再用md5算法加密\",{\"1\":{\"897\":1}}],[\"然后再用此密钥解密消息\",{\"1\":{\"680\":1}}],[\"然后再生成新的包\",{\"1\":{\"576\":1}}],[\"然后再把使用的空间一次清理掉\",{\"1\":{\"557\":1}}],[\"然后再由这些金融机构以贷款\",{\"1\":{\"171\":1}}],[\"然后再根据索引值\",{\"1\":{\"127\":1}}],[\"然后累积计\",{\"1\":{\"116\":1}}],[\"然后扫描最后那个表进行计算\",{\"1\":{\"23\":1}}],[\"然后对每个组执行聚合操作\",{\"1\":{\"22\":1}}],[\"然后客户端会向namenode发送一个确认\",{\"1\":{\"14\":1}}],[\"固定盐值+密码\",{\"1\":{\"897\":1}}],[\"固定\",{\"1\":{\"157\":1}}],[\"末端标记\",{\"1\":{\"157\":1}}],[\"紧凑\",{\"1\":{\"157\":3}}],[\"合作银行分行与所在区域省级再担保机构组织做好业务沟通\",{\"1\":{\"189\":1}}],[\"合作业务开展较好的银行进行政策倾斜\",{\"1\":{\"189\":1}}],[\"合作期担保代偿率=累计担保代偿金额\",{\"1\":{\"189\":1}}],[\"合作担保机构符合再担保要求的担保项目提供一定责任比例风险分担\",{\"1\":{\"165\":1}}],[\"合理地关联起来\",{\"1\":{\"785\":1}}],[\"合理地选择\",{\"1\":{\"161\":1}}],[\"合理使用会给我们带来以下好处\",{\"1\":{\"752\":1}}],[\"合理的制定和可配置的制定可以更加方便后续工作\",{\"1\":{\"786\":1}}],[\"合理的\",{\"1\":{\"156\":1}}],[\"合并后的代码如下\",{\"1\":{\"924\":1}}],[\"合并远程仓库的tag到本地\",{\"1\":{\"501\":1}}],[\"合并分支\",{\"1\":{\"500\":1}}],[\"合并连接\",{\"1\":{\"23\":1}}],[\"合并之前告知namenode把所有的操作写到新的edites文件并将其命名为edits\",{\"1\":{\"19\":1}}],[\"合并本地多个小文件上传到hdfs\",{\"0\":{\"10\":1}}],[\"树状\",{\"1\":{\"155\":1}}],[\"链的拓扑结构可以是单连通的或多连通的\",{\"1\":{\"825\":1}}],[\"链地址法\",{\"0\":{\"513\":1}}],[\"链中的每个任务都是独立的\",{\"1\":{\"475\":1}}],[\"链接超时\",{\"1\":{\"403\":1}}],[\"链\",{\"1\":{\"155\":1}}],[\"链表上的每个节点都包含了\",{\"1\":{\"133\":1}}],[\"链表被广泛用于实现\",{\"1\":{\"121\":1}}],[\"链表和链表节点\",{\"1\":{\"120\":1}}],[\"链表和链表节点的\",{\"0\":{\"120\":1}}],[\"链表和链表节点的实现\",{\"0\":{\"119\":1}}],[\"链表节点使用\",{\"1\":{\"119\":1}}],[\"链表节点带有\",{\"1\":{\"119\":1}}],[\"链表所包含的节点数量\",{\"1\":{\"119\":1}}],[\"链表中的每个节点都保存了一个整数值\",{\"1\":{\"118\":1}}],[\"链表在\",{\"1\":{\"118\":1}}],[\"链表内置在很多高级的编程语言里面\",{\"1\":{\"118\":1}}],[\"链表提供了高效的节点重排能力\",{\"1\":{\"118\":1}}],[\"链表\",{\"0\":{\"118\":1},\"1\":{\"157\":2,\"158\":1}}],[\"终止匹配\",{\"1\":{\"309\":1}}],[\"终止\",{\"1\":{\"155\":1}}],[\"未选定行\",{\"1\":{\"869\":1}}],[\"未被任何线程获取\",{\"1\":{\"820\":1}}],[\"未执行shundown或shundownnow\",{\"1\":{\"771\":1}}],[\"未加密的消息m\",{\"1\":{\"675\":1}}],[\"未定义项目资源\",{\"1\":{\"580\":1}}],[\"未处理\",{\"1\":{\"518\":13}}],[\"未提交的内容全部会回滚\",{\"1\":{\"500\":1}}],[\"未输入应用名\",{\"1\":{\"389\":1}}],[\"未输入操作名\",{\"1\":{\"389\":1}}],[\"未修改配置文件\",{\"0\":{\"322\":1}}],[\"未能列出\",{\"1\":{\"155\":1}}],[\"未指定新表的存储引擎时\",{\"1\":{\"91\":1}}],[\"始终接收\",{\"1\":{\"155\":1}}],[\"情况\",{\"1\":{\"155\":1}}],[\"涉及时间戳转换时\",{\"1\":{\"626\":1}}],[\"涉及\",{\"1\":{\"155\":1}}],[\"涉及的向量6个数\",{\"1\":{\"62\":1}}],[\"涉及的分桶表具有相同的分桶数\",{\"1\":{\"23\":1}}],[\"开归档就可以将凌晨\",{\"1\":{\"868\":1}}],[\"开销很大\",{\"1\":{\"781\":1}}],[\"开放\",{\"1\":{\"839\":1}}],[\"开放定址法\",{\"0\":{\"511\":1}}],[\"开放接口必须使用\",{\"1\":{\"413\":1}}],[\"开发的主要目的\",{\"1\":{\"521\":1}}],[\"开发人员往往容易把全部逻辑都放在service层\",{\"1\":{\"911\":1}}],[\"开发人员的请求\",{\"1\":{\"488\":1}}],[\"开发人员在负责人的gitlab项目页面上点\",{\"1\":{\"488\":1}}],[\"开发环境使用localhost\",{\"1\":{\"410\":1}}],[\"开机启动\",{\"1\":{\"321\":1}}],[\"开头的角色是安全相关角色\",{\"1\":{\"888\":1}}],[\"开头的角色是审计相关角色\",{\"1\":{\"888\":1}}],[\"开头系统表的权限\",{\"1\":{\"888\":1}}],[\"开头表示不区分大小写的正则匹配\",{\"1\":{\"306\":1}}],[\"开头表示区分大小写的正则匹配\",{\"1\":{\"306\":1}}],[\"开头对url路径进行前缀匹配\",{\"1\":{\"306\":1}}],[\"开启后可正常赋予权限\",{\"1\":{\"887\":1}}],[\"开启归档\",{\"0\":{\"869\":1}}],[\"开启长连接\",{\"1\":{\"612\":1}}],[\"开启超时限制\",{\"1\":{\"402\":1}}],[\"开启熔断器后过10s再尝试访问\",{\"1\":{\"402\":1}}],[\"开启熔断器后过10秒再尝试访问\",{\"1\":{\"402\":1}}],[\"开启熔断器\",{\"1\":{\"402\":3}}],[\"开启feign客户端\",{\"1\":{\"397\":1,\"416\":1}}],[\"开启服务发现\",{\"0\":{\"397\":1},\"1\":{\"397\":1,\"416\":1}}],[\"开启服务注册发现功能\",{\"1\":{\"393\":1,\"397\":1,\"415\":1,\"416\":1}}],[\"开启gzip压缩功能\",{\"1\":{\"317\":1}}],[\"开启多个网络连接序列化等\",{\"1\":{\"305\":1}}],[\"开启2375端口\",{\"0\":{\"230\":1}}],[\"开启mysql5\",{\"1\":{\"320\":1}}],[\"开启mysql\",{\"1\":{\"74\":1}}],[\"开展合规性审核\",{\"1\":{\"189\":1}}],[\"开证银行按申请书的内容开立以出口人为受益人的信用证\",{\"1\":{\"176\":1}}],[\"开证银行\",{\"1\":{\"176\":1}}],[\"开具不得超过规定金额的汇票\",{\"1\":{\"176\":1}}],[\"开给出口人\",{\"1\":{\"176\":1}}],[\"开始传花\",{\"1\":{\"825\":1}}],[\"开始建立\",{\"1\":{\"689\":1}}],[\"开始\",{\"1\":{\"475\":1,\"549\":2}}],[\"开始熔断功能\",{\"1\":{\"397\":1,\"416\":1}}],[\"开始熔断器功能\",{\"1\":{\"397\":1,\"416\":1}}],[\"开始时间截\",{\"1\":{\"205\":1}}],[\"开始执行\",{\"1\":{\"155\":1}}],[\"开始将\",{\"1\":{\"155\":1}}],[\"半\",{\"0\":{\"155\":1},\"1\":{\"154\":2,\"155\":1}}],[\"已用时间\",{\"1\":{\"838\":2,\"841\":4,\"843\":12,\"869\":5,\"883\":1,\"884\":1,\"885\":1,\"887\":3,\"893\":7}}],[\"已被读线程获取\",{\"1\":{\"820\":1}}],[\"已提供依赖范围\",{\"1\":{\"593\":1}}],[\"已知某主机的ip地址是192\",{\"1\":{\"526\":1}}],[\"已知一个ip地址是192\",{\"1\":{\"526\":1}}],[\"已写入\",{\"1\":{\"452\":1}}],[\"已完成短信发送业务\",{\"1\":{\"438\":1}}],[\"已修改镜像下载数据源\",{\"1\":{\"295\":1}}],[\"已建立的\",{\"1\":{\"154\":1}}],[\"已经形成了自主创新的体系\",{\"1\":{\"688\":1}}],[\"已经为\",{\"1\":{\"619\":1}}],[\"已经完成第一个nginx的镜像构建以及容器启动\",{\"1\":{\"249\":1}}],[\"已经释放\",{\"1\":{\"214\":1}}],[\"已经包含了age信息\",{\"1\":{\"103\":1}}],[\"已经介绍\",{\"1\":{\"100\":1}}],[\"已经存在则\",{\"1\":{\"21\":1}}],[\"限\",{\"1\":{\"887\":1}}],[\"限流等\",{\"1\":{\"554\":1}}],[\"限定了每个日志段文件的大小\",{\"1\":{\"433\":1}}],[\"限于篇幅\",{\"1\":{\"153\":1,\"155\":1}}],[\"限制的大多是浏览器和服务器的原因\",{\"1\":{\"484\":1}}],[\"限制3秒内必须请求到服务\",{\"1\":{\"396\":1}}],[\"限制innodb能打开的表的数据\",{\"1\":{\"74\":1}}],[\"限制笛卡尔基的查询\",{\"1\":{\"29\":1}}],[\"亦限制了\",{\"1\":{\"161\":1}}],[\"亦执行\",{\"1\":{\"154\":1}}],[\"亦能够作为数据备份的一种手段\",{\"1\":{\"153\":1}}],[\"亦允许同时使用或同时不使用\",{\"1\":{\"140\":1}}],[\"\\tcodis\",{\"1\":{\"161\":1}}],[\"\\t允许多个\",{\"1\":{\"161\":1}}],[\"\\t提供了\",{\"1\":{\"161\":1}}],[\"\\t超过\",{\"1\":{\"152\":1}}],[\"\\t增长百分比超过\",{\"1\":{\"152\":1}}],[\"\\t\\t对给定的有序集合执行类似于集合的并集运算\",{\"1\":{\"138\":1}}],[\"正确性\",{\"1\":{\"898\":1}}],[\"正确地传递数据的并发算法\",{\"1\":{\"450\":1}}],[\"正如其名\",{\"1\":{\"725\":1}}],[\"正如前两个小节所说\",{\"1\":{\"620\":1}}],[\"正逐渐成为pc\",{\"1\":{\"687\":1}}],[\"正在等待的线程可以选择放弃等待\",{\"1\":{\"703\":1}}],[\"正在被写入的那个日志段文件\",{\"1\":{\"433\":1}}],[\"正在进行初始化同步\",{\"1\":{\"155\":1}}],[\"正在进行\",{\"1\":{\"151\":1}}],[\"正在进行创建\",{\"1\":{\"151\":1}}],[\"正例\",{\"1\":{\"413\":4}}],[\"正则顺序\",{\"1\":{\"306\":1}}],[\"正则表达式参考手册\",{\"1\":{\"22\":2}}],[\"正是它比虚拟机更节省内存\",{\"1\":{\"232\":1}}],[\"正常访问表\",{\"1\":{\"843\":1}}],[\"正常关闭\",{\"0\":{\"764\":1}}],[\"正常情况\",{\"1\":{\"427\":1}}],[\"正常执行过程中\",{\"1\":{\"214\":1}}],[\"正常利息\",{\"1\":{\"189\":1}}],[\"正数是0\",{\"1\":{\"205\":1}}],[\"次方\",{\"1\":{\"866\":1}}],[\"次\",{\"0\":{\"877\":1},\"1\":{\"621\":1}}],[\"次降低为最多\",{\"1\":{\"621\":1}}],[\"次字符串所需的内存重分配次数从必定\",{\"1\":{\"621\":1}}],[\"次版本号的升级对应的只是局部的变动\",{\"1\":{\"605\":1}}],[\"次版本号\",{\"1\":{\"605\":1}}],[\"次的\",{\"1\":{\"150\":1}}],[\"次写入\",{\"1\":{\"141\":1}}],[\"完整性\",{\"1\":{\"898\":1}}],[\"完整路径\",{\"1\":{\"306\":1}}],[\"完\",{\"1\":{\"868\":1}}],[\"完善每个任务的状态处理\",{\"1\":{\"475\":1}}],[\"完善的冗余备份机制\",{\"1\":{\"15\":1}}],[\"完全备份是指一个备份包含指定数据库或表空间的所有数据\",{\"1\":{\"889\":1}}],[\"完全够600个点位用的\",{\"1\":{\"526\":1}}],[\"完全符合一个子网内容纳26个ip地址\",{\"1\":{\"526\":1}}],[\"完全克隆到本地demo目录下\",{\"1\":{\"497\":1}}],[\"完全可以自定义这个函数来决定分区规则\",{\"1\":{\"430\":1}}],[\"完全由操作系统控制\",{\"1\":{\"148\":1}}],[\"完成\",{\"1\":{\"782\":1,\"834\":1,\"838\":1,\"861\":1}}],[\"完成具体的业务逻辑实现\",{\"1\":{\"450\":1}}],[\"完成数据回滚\",{\"1\":{\"421\":1}}],[\"完成业务流程后\",{\"1\":{\"214\":1}}],[\"完成时的\",{\"1\":{\"152\":1}}],[\"进\",{\"1\":{\"723\":1}}],[\"进过编译\",{\"1\":{\"703\":1}}],[\"进程池\",{\"1\":{\"751\":2}}],[\"进程\",{\"1\":{\"751\":1}}],[\"进程之间的的沟通桥梁\",{\"1\":{\"712\":1}}],[\"进程列表等还是相互隔离的\",{\"1\":{\"250\":2}}],[\"进程退出\",{\"1\":{\"146\":1}}],[\"进去伪终端查看\",{\"0\":{\"242\":1}}],[\"进入运行状态\",{\"1\":{\"926\":1}}],[\"进入睡眠\",{\"1\":{\"799\":1}}],[\"进入method2方法时当前线程获得锁\",{\"1\":{\"723\":1}}],[\"进入closed状态\",{\"1\":{\"649\":1}}],[\"进入closed\",{\"1\":{\"649\":1}}],[\"进入fin\",{\"1\":{\"649\":1}}],[\"进入目录\",{\"1\":{\"376\":1}}],[\"进入\",{\"1\":{\"372\":1}}],[\"进入第4步\",{\"1\":{\"222\":1}}],[\"进入第3步\",{\"1\":{\"222\":1}}],[\"进入到第2步\",{\"1\":{\"222\":1}}],[\"进一步提升\",{\"1\":{\"221\":1}}],[\"进口人向其所在地银行提出开证申请\",{\"1\":{\"176\":1}}],[\"进出口双方当事人应在买卖合同中\",{\"1\":{\"176\":1}}],[\"进而重新遍历fd\",{\"1\":{\"799\":1}}],[\"进而升级成轻量级锁了\",{\"1\":{\"673\":1}}],[\"进而对一个方法进行加锁来实现同步\",{\"1\":{\"671\":1}}],[\"进而帮助更多小微企业获得融资\",{\"1\":{\"167\":1}}],[\"进而有效分散担保机构业务风险\",{\"1\":{\"162\":1}}],[\"进而路由到特定的\",{\"1\":{\"161\":1}}],[\"进行锁粗化\",{\"1\":{\"924\":1}}],[\"进行锁表\",{\"0\":{\"324\":1}}],[\"进行重构时\",{\"1\":{\"899\":1}}],[\"进行验证\",{\"1\":{\"689\":1}}],[\"进行网络消息传输时响应及时\",{\"1\":{\"682\":1}}],[\"进行性能控制的的参数是创建的处理请求的线程数\",{\"1\":{\"651\":1}}],[\"进行父子线程中的数据传递\",{\"1\":{\"650\":1}}],[\"进行垃圾回收时\",{\"1\":{\"650\":1}}],[\"进行增长操作的话\",{\"1\":{\"622\":1}}],[\"进行空间扩展的时候\",{\"1\":{\"621\":1}}],[\"进行修改之后\",{\"1\":{\"621\":2}}],[\"进行修改\",{\"1\":{\"621\":1}}],[\"进行修改时\",{\"1\":{\"619\":1}}],[\"进行了拼接操作\",{\"1\":{\"619\":1}}],[\"进行跨界点通信\",{\"1\":{\"610\":1}}],[\"进行高性能的通信\",{\"1\":{\"609\":1}}],[\"进行文件读操作的最基本的类\",{\"1\":{\"539\":1}}],[\"进行通信\",{\"1\":{\"521\":1,\"712\":1}}],[\"进行bigdecimal的算术运算后\",{\"1\":{\"445\":1}}],[\"进行减库存操作\",{\"1\":{\"427\":1}}],[\"进行区分namespace或者group\",{\"1\":{\"410\":1}}],[\"进行数据导入\",{\"1\":{\"342\":1}}],[\"进行远程访问的授权\",{\"1\":{\"322\":1}}],[\"进行续约\",{\"1\":{\"214\":1}}],[\"进行监听\",{\"1\":{\"214\":1}}],[\"进行担保风险总量控制\",{\"1\":{\"189\":1}}],[\"进行管理或者处分的行为\",{\"1\":{\"179\":1}}],[\"进行\",{\"1\":{\"149\":2,\"151\":1,\"221\":1,\"475\":1}}],[\"进行查找时\",{\"1\":{\"102\":1}}],[\"进行搜索\",{\"1\":{\"101\":1}}],[\"进行索引\",{\"1\":{\"100\":1}}],[\"进行大小写转换\",{\"1\":{\"98\":1}}],[\"进行组合\",{\"1\":{\"93\":1}}],[\"进行聚集的一组数据\",{\"1\":{\"47\":1}}],[\"进行处理的过程\",{\"1\":{\"23\":1}}],[\"进行同步\",{\"1\":{\"19\":1}}],[\"忽略一些文件\",{\"0\":{\"504\":1}}],[\"忽略\",{\"1\":{\"146\":1}}],[\"触发\",{\"1\":{\"144\":1}}],[\"由一个起始值和一个结束值组成的range类\",{\"1\":{\"915\":1}}],[\"由该方法清除\",{\"1\":{\"767\":1}}],[\"由r\",{\"1\":{\"745\":1}}],[\"由ringbuffer调用\",{\"1\":{\"472\":1}}],[\"由椭圆公式\",{\"1\":{\"740\":1}}],[\"由附加插件帮助生成\",{\"0\":{\"591\":1}}],[\"由子类去完成类的加载\",{\"1\":{\"558\":1}}],[\"由子进程生成并落地\",{\"1\":{\"144\":1}}],[\"由父类去加载\",{\"1\":{\"558\":1}}],[\"由不想太浪费cpu资源的场景\",{\"1\":{\"469\":1,\"472\":1}}],[\"由消费者负责通知它们处理到了哪个序列号\",{\"1\":{\"454\":1}}],[\"由上方两张图可见\",{\"1\":{\"406\":1}}],[\"由我们程序来指定的\",{\"1\":{\"205\":1}}],[\"由省级再担保机构直接或委托其他承办担保机构开展业务\",{\"1\":{\"189\":1}}],[\"由省级再担保机构会同银行分行审核确认\",{\"1\":{\"189\":1}}],[\"由承办银行在合作业务规模担保代偿限额内向银行分行提出代偿申请\",{\"1\":{\"189\":1}}],[\"由承办银行免除担保代偿责任\",{\"1\":{\"189\":1}}],[\"由承办担保机构继续提供担保\",{\"1\":{\"189\":1}}],[\"由银行按照规定的业务条件对担保贷款项目进行风险识别\",{\"1\":{\"189\":1}}],[\"由担保机构依法承担合同约定的担保责任的行为\",{\"1\":{\"180\":1}}],[\"由受托人按委托人的意愿以自己的名义\",{\"1\":{\"179\":1}}],[\"由再担保机构按照合同约定代担保机构直接向债权人代偿\",{\"1\":{\"163\":1}}],[\"由\",{\"1\":{\"161\":1,\"642\":1,\"887\":1}}],[\"由此证明\",{\"1\":{\"705\":1}}],[\"由此\",{\"1\":{\"160\":1}}],[\"由此降低单实例的内存使用\",{\"1\":{\"159\":1}}],[\"由此能够显著降低内存使用\",{\"1\":{\"158\":1}}],[\"由此构建级联结构的\",{\"1\":{\"155\":1}}],[\"由操作系统故障引起\",{\"1\":{\"146\":1}}],[\"由于类中的任何函数都可以调用上述查询函数\",{\"1\":{\"904\":1}}],[\"由于偏向锁失效了\",{\"1\":{\"828\":1}}],[\"由于不满足cas\",{\"1\":{\"815\":1}}],[\"由于自旋锁只是将当前线程不停地执行循环体\",{\"1\":{\"813\":1}}],[\"由于处理器使用缓存和读\",{\"1\":{\"809\":1}}],[\"由于空闲60秒的空闲线程会被终止\",{\"1\":{\"773\":1}}],[\"由于任务可以不停的加到队列\",{\"1\":{\"771\":1}}],[\"由于乐观锁机制是在我们的系统中实现\",{\"1\":{\"731\":1}}],[\"由于是串行执行\",{\"1\":{\"728\":1}}],[\"由于java层面的线程与操作系统的原生线程有映射关系\",{\"1\":{\"723\":1}}],[\"由于java使用有向图的方式进行垃圾回收管理\",{\"1\":{\"558\":1}}],[\"由于long类型的大小为8字节\",{\"1\":{\"722\":1}}],[\"由于long基本类型在java中是带符号的\",{\"1\":{\"205\":1}}],[\"由于threadlocal的特性\",{\"1\":{\"650\":1}}],[\"由于mvn命令实际是使用java命令\",{\"1\":{\"574\":1}}],[\"由于字节流的缘故\",{\"1\":{\"539\":1}}],[\"由于numberformat类的format\",{\"1\":{\"445\":1}}],[\"由于使用nacos进行负载的原因\",{\"1\":{\"410\":1}}],[\"由于默认拉取镜像地址k8s\",{\"1\":{\"293\":1}}],[\"由于版本更新频繁\",{\"1\":{\"292\":1}}],[\"由于它的性能较好\",{\"1\":{\"222\":1}}],[\"由于在算法中使用了mac地址\",{\"1\":{\"208\":1}}],[\"由于金融机构的资产\",{\"1\":{\"172\":1}}],[\"由于商品信息与商品描述业务耦合度较高\",{\"1\":{\"130\":1}}],[\"由于数据量本身大\",{\"1\":{\"129\":1}}],[\"由于\",{\"1\":{\"97\":1,\"781\":1}}],[\"由于第二个事务的修改第一个事务两次读到的数据可能是不一样的\",{\"1\":{\"72\":1}}],[\"由于查询或原始数据处理的某个步骤出现问题而导致需要对好几天的输入数据重跑\",{\"1\":{\"27\":1}}],[\"父进程继续提供服务\",{\"1\":{\"144\":1}}],[\"共20byte\",{\"1\":{\"722\":1}}],[\"共24\",{\"1\":{\"722\":1}}],[\"共32byte\",{\"1\":{\"722\":1}}],[\"共12个字节\",{\"1\":{\"207\":1}}],[\"共同促进小微企业和\",{\"1\":{\"167\":1}}],[\"共同承担部分潜在的信贷风险\",{\"1\":{\"166\":1}}],[\"共享变量\",{\"1\":{\"809\":1}}],[\"共享内存和消息传递\",{\"1\":{\"809\":1}}],[\"共享的数据和硬件资源\",{\"1\":{\"659\":1}}],[\"共享存储卷名称\",{\"1\":{\"263\":1}}],[\"共享一个网络环境\",{\"1\":{\"250\":1}}],[\"共享\",{\"1\":{\"141\":1,\"146\":1,\"663\":1,\"664\":1}}],[\"共一千零二十四个整数\",{\"1\":{\"118\":1}}],[\"满足任意配置即开始新的\",{\"1\":{\"141\":1}}],[\"配置状态\",{\"1\":{\"843\":1}}],[\"配置线程池的类型与参数\",{\"1\":{\"779\":1}}],[\"配置线程池可以从以下几个方面考虑\",{\"1\":{\"769\":1}}],[\"配置方式主要有两种\",{\"1\":{\"709\":1}}],[\"配置成功后\",{\"1\":{\"604\":1}}],[\"配置maven\",{\"1\":{\"603\":1}}],[\"配置mybatis\",{\"1\":{\"64\":1}}],[\"配置个人的用户名称和电子邮件地址\",{\"1\":{\"495\":1}}],[\"配置用户信息\",{\"0\":{\"495\":1}}],[\"配置内容\",{\"1\":{\"417\":1}}],[\"配置分组\",{\"1\":{\"417\":1}}],[\"配置分组是\",{\"1\":{\"297\":2}}],[\"配置openfeign接口\",{\"1\":{\"410\":1}}],[\"配置dev的gateway\",{\"1\":{\"410\":1}}],[\"配置对应的规则\",{\"1\":{\"403\":1}}],[\"配置作用于指定的commandkey\",{\"1\":{\"402\":1}}],[\"配置作为\",{\"1\":{\"155\":1}}],[\"配置组id\",{\"1\":{\"401\":1}}],[\"配置格式\",{\"1\":{\"401\":1,\"417\":2}}],[\"配置项的值\",{\"1\":{\"417\":1}}],[\"配置项\",{\"1\":{\"401\":1}}],[\"配置中心地址\",{\"1\":{\"401\":1}}],[\"配置中心url\",{\"1\":{\"297\":1}}],[\"配置application\",{\"0\":{\"392\":1}}],[\"配置的内容\",{\"1\":{\"417\":1}}],[\"配置的值\",{\"1\":{\"403\":1}}],[\"配置的值记为\",{\"1\":{\"385\":1}}],[\"配置的\",{\"1\":{\"384\":1}}],[\"配置后\",{\"1\":{\"384\":1}}],[\"配置后的图\",{\"1\":{\"297\":1}}],[\"配置自启\",{\"1\":{\"380\":1}}],[\"配置环境变量\",{\"0\":{\"377\":1}}],[\"配置系统服务\",{\"1\":{\"321\":1}}],[\"配置加密套件\",{\"1\":{\"317\":1}}],[\"配置禁用gzip条件\",{\"1\":{\"317\":1}}],[\"配置如下\",{\"1\":{\"317\":1,\"410\":1}}],[\"配置请求的路由\",{\"1\":{\"305\":1}}],[\"配置虚拟主机的相关参数\",{\"1\":{\"305\":1}}],[\"配置代理\",{\"1\":{\"305\":1}}],[\"配置影响nginx服务器或与用户的网络连接\",{\"1\":{\"305\":1}}],[\"配置影响nginx全局的指令\",{\"1\":{\"305\":1}}],[\"配置文件开启归档\",{\"0\":{\"870\":1}}],[\"配置文件包括\",{\"1\":{\"853\":1}}],[\"配置文件配置\",{\"0\":{\"396\":1}}],[\"配置文件路径\",{\"1\":{\"352\":6}}],[\"配置文件引入\",{\"1\":{\"305\":1}}],[\"配置文件\",{\"1\":{\"297\":1,\"853\":1}}],[\"配置id\",{\"1\":{\"297\":1}}],[\"配置ip\",{\"1\":{\"250\":1}}],[\"配置logstash配置文件\",{\"0\":{\"280\":1}}],[\"配置logstash接收日志\",{\"0\":{\"279\":1}}],[\"配置kibana展示日志\",{\"0\":{\"283\":1}}],[\"配置kibana\",{\"0\":{\"272\":1}}],[\"配置es\",{\"0\":{\"270\":1}}],[\"配置yum源\",{\"0\":{\"267\":1}}],[\"配置yum源参考\",{\"1\":{\"265\":1}}],[\"配置租约\",{\"1\":{\"214\":1}}],[\"配置条件满足时\",{\"1\":{\"144\":1}}],[\"配置与存储修改配置文件\",{\"1\":{\"277\":1}}],[\"配置与\",{\"1\":{\"141\":1,\"146\":1}}],[\"配置\",{\"0\":{\"380\":1},\"1\":{\"141\":2,\"146\":1,\"155\":6,\"417\":1,\"566\":1,\"872\":1}}],[\"配置选项\",{\"0\":{\"141\":1,\"146\":1,\"148\":1,\"149\":1,\"152\":1}}],[\"毕竟软件再怎么说本来就该是\",{\"1\":{\"911\":1}}],[\"毕竟epoll的通知机制需要很多函数回调\",{\"1\":{\"807\":1}}],[\"毕竟\",{\"1\":{\"140\":2}}],[\"增量\",{\"1\":{\"893\":3}}],[\"增量备份包含差异增量备份和累积增量备份\",{\"1\":{\"889\":1}}],[\"增量备份是指在一次全备份或上一次增量备份后\",{\"1\":{\"889\":1}}],[\"增量备份\",{\"1\":{\"889\":1,\"894\":1}}],[\"增量追加\",{\"1\":{\"140\":1}}],[\"增大\",{\"1\":{\"864\":1}}],[\"增大了数据访问的开销\",{\"1\":{\"665\":1}}],[\"增信可以帮助债务人更容易地获取贷款或债券发行\",{\"1\":{\"166\":1}}],[\"增信指的是通过某种方式提高债务人\",{\"1\":{\"166\":1}}],[\"增信\",{\"1\":{\"166\":2}}],[\"增信型再担保是指再担保机构为担保机构的担保项目提供一般再担保\",{\"1\":{\"163\":1}}],[\"增信型再担保\",{\"0\":{\"163\":1}}],[\"增加可读性\",{\"1\":{\"906\":1}}],[\"增加写状态\",{\"1\":{\"820\":1}}],[\"增加系统的预警能力和稳定性\",{\"1\":{\"769\":1}}],[\"增加内存\",{\"1\":{\"704\":1}}],[\"增加了线程切换次数\",{\"1\":{\"674\":1}}],[\"增加了一个可供选择的方式\",{\"1\":{\"23\":1}}],[\"增加测试类sendmessagetest\",{\"0\":{\"439\":1}}],[\"增加消费者messagelistener\",{\"0\":{\"438\":1}}],[\"增加生产者messageservicekafkaimpl\",{\"0\":{\"437\":1}}],[\"增加constant\",{\"0\":{\"436\":1}}],[\"增加url参数\",{\"1\":{\"410\":1}}],[\"增加feignclient注解\",{\"1\":{\"408\":1,\"409\":1}}],[\"增加密码\",{\"1\":{\"352\":1}}],[\"增加资源消耗\",{\"1\":{\"265\":1}}],[\"增加参与政府采购的机会\",{\"1\":{\"188\":1}}],[\"增加的索引是否是现有多列索引的最左索引\",{\"1\":{\"100\":1}}],[\"增加列\",{\"1\":{\"21\":1}}],[\"特点\",{\"0\":{\"644\":1},\"1\":{\"855\":1}}],[\"特点如下\",{\"1\":{\"638\":1}}],[\"特定对象的方法引用\",{\"1\":{\"527\":1}}],[\"特定类的任意对象的方法引用\",{\"1\":{\"527\":1}}],[\"特别是对长事务而言\",{\"1\":{\"726\":1}}],[\"特别是随着内存变得更便宜\",{\"1\":{\"662\":1}}],[\"特别是公共资源有限的应用场景\",{\"1\":{\"554\":1}}],[\"特别是在completablefuture\",{\"1\":{\"475\":1}}],[\"特别是带有参数的对象\",{\"1\":{\"445\":1}}],[\"特别说明\",{\"1\":{\"147\":1,\"155\":1}}],[\"特性\",{\"1\":{\"150\":1}}],[\"特性来让一个键在给定的时限\",{\"1\":{\"139\":1}}],[\"特殊表情符占用4个字节\",{\"1\":{\"74\":1}}],[\"直到链上的某一个对象决定处理此请求\",{\"1\":{\"825\":1}}],[\"直到获取到锁才会退出循环\",{\"1\":{\"811\":1}}],[\"直到整个作业\",{\"1\":{\"782\":1}}],[\"直到对象锁被另外一个线程释放为止\",{\"1\":{\"723\":1}}],[\"直到对象锁被另一个线程释放为止\",{\"1\":{\"703\":1}}],[\"直到a停止访问了\",{\"1\":{\"659\":1}}],[\"直到遇到代表字符串结尾的空字符为止\",{\"1\":{\"618\":1}}],[\"直到最后一个线程到达屏障时\",{\"1\":{\"552\":1}}],[\"直到n变成0\",{\"1\":{\"551\":1}}],[\"直到有空间或者元素可用\",{\"1\":{\"530\":1}}],[\"直到无冲突\",{\"1\":{\"512\":1}}],[\"直到任务完成后才返回结果\",{\"1\":{\"475\":1}}],[\"直到业务处理完成\",{\"1\":{\"475\":1}}],[\"直到那个消费者离开\",{\"1\":{\"454\":1}}],[\"直到新的数据覆盖他们\",{\"1\":{\"452\":1}}],[\"直到该序号对应的事件已经准备好\",{\"1\":{\"450\":1}}],[\"直到其他线程执行完后再执行\",{\"1\":{\"446\":1}}],[\"直到\",{\"1\":{\"143\":1}}],[\"直到所有命令都执行完毕为止\",{\"1\":{\"139\":1}}],[\"直接和真正的负责人打交道\",{\"1\":{\"922\":1}}],[\"直接调用threadpooltaskexecutor\",{\"0\":{\"779\":1}}],[\"直接丢掉\",{\"1\":{\"761\":1}}],[\"直接抛出异常\",{\"1\":{\"761\":1}}],[\"直接创建一个文件\",{\"1\":{\"544\":1}}],[\"直接定址法\",{\"0\":{\"507\":1}}],[\"直接git网页操作\",{\"1\":{\"493\":1}}],[\"直接格式化返回字符串\",{\"1\":{\"445\":1}}],[\"直接赋值\",{\"1\":{\"388\":1}}],[\"直接办理担保贷款的银行机构\",{\"1\":{\"189\":1}}],[\"直接融资担保的债券\",{\"0\":{\"177\":1}}],[\"直接融资担保的债券担保\",{\"1\":{\"169\":1}}],[\"直接选择b+树索引可以获得稳定且较好的查询速度\",{\"1\":{\"102\":1}}],[\"直接拷贝文件夹\",{\"1\":{\"22\":1}}],[\"被访问的数据是不能被修改的\",{\"1\":{\"782\":1}}],[\"被synchronized修饰过的程序块\",{\"1\":{\"723\":1}}],[\"被操作的每一组属性占的字节数\",{\"1\":{\"667\":1}}],[\"被设计成可以允许应用程序\",{\"1\":{\"657\":1}}],[\"被用于在\",{\"1\":{\"520\":1}}],[\"被用来发送和接受\",{\"1\":{\"515\":1}}],[\"被分配到同一个索引上的多个节点可以用这个单向链表连接起来\",{\"1\":{\"513\":1}}],[\"被分配到同一个索引上的多个节点可以用\",{\"1\":{\"513\":1}}],[\"被除数为质数在一定程度上可以缓解数据堆积的问题\",{\"1\":{\"508\":1}}],[\"被这些注解所标记的\",{\"1\":{\"419\":1}}],[\"被multi命令和exec命令包围的所有命令会一个接\",{\"1\":{\"139\":1}}],[\"被忽略的数据\",{\"1\":{\"79\":1}}],[\"虽然单次同步操作的时间可能很短\",{\"1\":{\"924\":1}}],[\"虽然\",{\"1\":{\"624\":1,\"645\":1}}],[\"虽然数据库一般用于保存文本数据\",{\"1\":{\"623\":1}}],[\"虽然在\",{\"1\":{\"515\":1}}],[\"虽然表面上等于该值\",{\"1\":{\"445\":1}}],[\"虽然某些地方会影响客户体验\",{\"1\":{\"202\":1}}],[\"虽然下单的瞬间\",{\"1\":{\"202\":1}}],[\"虽然可以使用zunionstore命令将元素从一个集合复制到一个有序集合\",{\"1\":{\"139\":1}}],[\"虽然仅仅使用多个\",{\"1\":{\"119\":1}}],[\"尽管短生命周期对象已经不再需要\",{\"1\":{\"558\":1}}],[\"尽管redis有几个可以在两个键之间复制或者移动元素的命令\",{\"1\":{\"139\":1}}],[\"尽量减少方法中的临时变量\",{\"1\":{\"906\":1}}],[\"尽量使用参数类型为string的构造函数\",{\"1\":{\"445\":1}}],[\"尽量采用union\",{\"1\":{\"82\":1}}],[\"尽可能进行区分异常类型\",{\"1\":{\"413\":1}}],[\"尽可能短的\",{\"1\":{\"161\":1}}],[\"散列函数\",{\"1\":{\"506\":1}}],[\"散列表\",{\"1\":{\"157\":2,\"158\":1,\"160\":5,\"161\":2,\"506\":1}}],[\"散列这5种键里面存储着的数据\",{\"1\":{\"139\":1}}],[\"散列的更高级特性\",{\"0\":{\"137\":1}}],[\"随后\",{\"1\":{\"774\":1}}],[\"随便创建一个对象\",{\"1\":{\"673\":1}}],[\"随时用随时取\",{\"1\":{\"626\":1}}],[\"随意复制和粘贴代码\",{\"1\":{\"413\":1}}],[\"随机数产生\",{\"1\":{\"684\":1}}],[\"随机数和机器mac地址得到\",{\"1\":{\"208\":1}}],[\"随机写的话是在文件的某个位置修改数据\",{\"1\":{\"433\":1}}],[\"随机策略\",{\"1\":{\"403\":1}}],[\"随机uuid\",{\"1\":{\"208\":1}}],[\"随机或伪随机数\",{\"1\":{\"208\":1}}],[\"随机地移除集合中的一个元素\",{\"1\":{\"135\":1}}],[\"随着对程序的理解逐渐加深\",{\"1\":{\"901\":1}}],[\"随着各种规则变得愈来愈复杂\",{\"1\":{\"898\":1}}],[\"随着节点数量增长和节点大小膨胀\",{\"1\":{\"157\":1}}],[\"随着业务的增长\",{\"1\":{\"131\":1}}],[\"随着互联网的发展和发展\",{\"1\":{\"50\":1}}],[\"里对应的\",{\"1\":{\"650\":1}}],[\"里只有一个jar包\",{\"1\":{\"572\":1}}],[\"里写入数据\",{\"1\":{\"455\":1}}],[\"里的下一个节点\",{\"1\":{\"454\":1}}],[\"里面的未使用空间\",{\"1\":{\"622\":1}}],[\"里面预留的\",{\"1\":{\"622\":1}}],[\"里面\",{\"1\":{\"622\":1}}],[\"里面也有一个用于执行拼接操作的\",{\"1\":{\"619\":1}}],[\"里面定义了多个工作线程\",{\"1\":{\"433\":1}}],[\"里面有操作系统的程序\",{\"1\":{\"234\":1}}],[\"里\",{\"1\":{\"135\":1}}],[\"元数据验证\",{\"0\":{\"561\":1}}],[\"元数据验证∶对字节码描述的信息进行语义分析\",{\"1\":{\"558\":1}}],[\"元数据\",{\"1\":{\"263\":1}}],[\"元素的排列顺序由分值的大小决定\",{\"1\":{\"133\":1}}],[\"元信息的持久化\",{\"0\":{\"18\":1}}],[\"元信息会保存各个块的名称及文件由哪些块组成\",{\"1\":{\"16\":1}}],[\"移到它该去的地方\",{\"1\":{\"913\":1}}],[\"移除\",{\"1\":{\"622\":1}}],[\"移除当前线程资源\",{\"1\":{\"214\":1}}],[\"移除键的过期时间\",{\"1\":{\"139\":1}}],[\"移除有序集合中分值介于min和\",{\"1\":{\"138\":1}}],[\"移除有序集合中排名介于start和stop之间的所有成员\",{\"1\":{\"138\":1}}],[\"移除并返回列表最左端的元素\",{\"1\":{\"135\":1}}],[\"移除并返回列表最右端的元素\",{\"1\":{\"135\":1}}],[\"移除单个键值对\",{\"1\":{\"133\":1}}],[\"移除单个元素\",{\"1\":{\"133\":1}}],[\"移动字段\",{\"1\":{\"923\":1}}],[\"移动方法\",{\"1\":{\"923\":1}}],[\"移动游标到\",{\"1\":{\"458\":2}}],[\"移动\",{\"1\":{\"16\":1,\"834\":1}}],[\"移动计算优于移动数据\",{\"1\":{\"15\":1}}],[\"各类统计指标\",{\"1\":{\"785\":1}}],[\"各种lock包中的锁\",{\"1\":{\"723\":1}}],[\"各种线上诊断工具\",{\"1\":{\"706\":1}}],[\"各自消费两个分区的消息\",{\"1\":{\"431\":1}}],[\"各个节点之间需要远程服务调用\",{\"1\":{\"608\":1}}],[\"各个部分还能维持分布式系统的运作\",{\"1\":{\"195\":1}}],[\"各个map\",{\"1\":{\"47\":1}}],[\"各省级再担保机构\",{\"1\":{\"189\":1}}],[\"各方签订合同\",{\"1\":{\"189\":1}}],[\"各部门在采购活动中允许中小企业引入信用担保手段\",{\"1\":{\"188\":1}}],[\"各不相同的\",{\"1\":{\"133\":1}}],[\"操作原子性的由来\",{\"1\":{\"929\":1}}],[\"操作者告诉程序\",{\"1\":{\"898\":1}}],[\"操作者一系列过程贯穿于\",{\"1\":{\"627\":1}}],[\"操作对应都会生成\",{\"1\":{\"864\":1}}],[\"操作已执行\",{\"1\":{\"843\":4,\"869\":4,\"883\":1,\"884\":1,\"885\":1,\"887\":3,\"893\":2}}],[\"操作一旦\",{\"1\":{\"843\":1}}],[\"操作速度变慢\",{\"1\":{\"727\":1}}],[\"操作或过程在任意条件下是可预测的\",{\"1\":{\"684\":1}}],[\"操作将不需要执行内存重分配\",{\"1\":{\"622\":1}}],[\"操作数栈\",{\"1\":{\"556\":1}}],[\"操作相关命令\",{\"0\":{\"500\":1,\"501\":1}}],[\"操作之类的\",{\"1\":{\"454\":1}}],[\"操作如下\",{\"1\":{\"294\":1}}],[\"操作系统或虚拟机组合的情况下可能会不同\",{\"1\":{\"651\":1}}],[\"操作系统\",{\"1\":{\"287\":1}}],[\"操作共享资源\",{\"1\":{\"214\":1}}],[\"操作返回的\",{\"1\":{\"214\":1}}],[\"操作\",{\"1\":{\"133\":1,\"214\":1,\"262\":1,\"443\":1,\"673\":1}}],[\"操作起来会更方便\",{\"1\":{\"119\":1}}],[\"初始值为null\",{\"1\":{\"217\":1}}],[\"初始化数据库存放的路径\",{\"1\":{\"837\":1}}],[\"初始化数据库的命令行工具\",{\"1\":{\"837\":1}}],[\"初始化文件dm\",{\"1\":{\"837\":1}}],[\"初始化时类加载的最后一步\",{\"1\":{\"558\":1,\"563\":1}}],[\"初始化3个队列\",{\"1\":{\"531\":1}}],[\"初始化子模块\",{\"1\":{\"502\":1}}],[\"初始化项目版本\",{\"1\":{\"497\":1}}],[\"初始化一个readme\",{\"1\":{\"497\":1}}],[\"初始化\",{\"1\":{\"321\":1,\"532\":1,\"558\":2}}],[\"初始化s3client时出错\",{\"1\":{\"63\":1}}],[\"初始化resthighlevelclient时出错\",{\"1\":{\"3\":1}}],[\"初次启动延迟\",{\"1\":{\"214\":1}}],[\"初识redis\",{\"0\":{\"133\":1,\"139\":1,\"140\":1,\"153\":1,\"156\":1}}],[\"参\",{\"1\":{\"887\":1}}],[\"参与游戏的人士具体处理者的对象\",{\"1\":{\"825\":1}}],[\"参与计算的组件\",{\"1\":{\"684\":1}}],[\"参照\",{\"1\":{\"433\":1}}],[\"参照tony\",{\"1\":{\"22\":1}}],[\"参数等\",{\"1\":{\"902\":1}}],[\"参数设置\",{\"0\":{\"575\":1}}],[\"参数集合\",{\"1\":{\"518\":3}}],[\"参数类型为double的构造方法的结果有一定的不可预知性\",{\"1\":{\"445\":1}}],[\"参数\",{\"1\":{\"441\":1,\"518\":1,\"711\":1,\"712\":1,\"854\":2,\"874\":1}}],[\"参数分别为实例名\",{\"1\":{\"410\":1,\"411\":1}}],[\"参数可根据实际环境进行配置\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"参数可以让外部可以访问容器内部的网络程序\",{\"1\":{\"251\":1}}],[\"参数指定系统的口令策略\",{\"1\":{\"874\":1}}],[\"参数指定\",{\"1\":{\"261\":1}}],[\"参数来指定\",{\"1\":{\"254\":1}}],[\"参考抽取计算金额\",{\"0\":{\"903\":1}}],[\"参考文献\",{\"1\":{\"527\":1}}],[\"参考文档\",{\"1\":{\"285\":1}}],[\"参考于\",{\"1\":{\"526\":2}}],[\"参考资料\",{\"1\":{\"472\":1}}],[\"参考docker官网\",{\"1\":{\"235\":1}}],[\"参考\",{\"1\":{\"132\":1,\"221\":1,\"413\":2,\"475\":1,\"485\":1,\"631\":1,\"650\":1,\"924\":1}}],[\"介绍\",{\"0\":{\"448\":1,\"714\":1}}],[\"介绍详细见下节\",{\"1\":{\"132\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"水平分表就是在同一个数据库内\",{\"1\":{\"132\":1}}],[\"水平分表\",{\"0\":{\"132\":1}}],[\"水平分库的优势是\",{\"1\":{\"131\":1}}],[\"水平分库就是把同一个表的数据按一定规则拆到不同的数据库中\",{\"1\":{\"131\":1}}],[\"水平分库\",{\"0\":{\"131\":1},\"1\":{\"131\":1}}],[\"水平分库和水平分表四种\",{\"1\":{\"128\":1}}],[\"存\",{\"1\":{\"834\":1}}],[\"存活得比较久\",{\"1\":{\"557\":1}}],[\"存放临时表数据\",{\"1\":{\"864\":1}}],[\"存放回滚页\",{\"1\":{\"864\":1}}],[\"存放数据字典等信息\",{\"1\":{\"864\":1}}],[\"存放在\",{\"1\":{\"623\":1}}],[\"存放对象实例\",{\"1\":{\"556\":1}}],[\"存放记录的数组叫做散列表\",{\"1\":{\"506\":1}}],[\"存在的问题\",{\"1\":{\"898\":1}}],[\"存在简单md5暴力破解的时候\",{\"1\":{\"897\":1}}],[\"存在函数f\",{\"1\":{\"506\":1}}],[\"存在单库读写\",{\"1\":{\"131\":1}}],[\"存入担保代偿补偿备付金\",{\"1\":{\"189\":1}}],[\"存入省级再担保机构在银行分支机构设立的备付金账户\",{\"1\":{\"189\":1}}],[\"存储结构\",{\"0\":{\"853\":1}}],[\"存储数组长度的空间大小4字节\",{\"1\":{\"722\":1}}],[\"存储数据\",{\"1\":{\"91\":1}}],[\"存储和报告机制\",{\"1\":{\"684\":1}}],[\"存储局部变量表\",{\"1\":{\"556\":1}}],[\"存储元素的线程会等待队列可用\",{\"1\":{\"530\":1}}],[\"存储消息\",{\"1\":{\"433\":1}}],[\"存储卷在容器内mount的绝对路径\",{\"1\":{\"263\":1}}],[\"存储的是一些一级域名的权威dns服务器地址\",{\"1\":{\"222\":1}}],[\"存储的数值更加准确\",{\"1\":{\"82\":1}}],[\"存储260个顶级域名服务器的ip地址\",{\"1\":{\"222\":1}}],[\"存储商品库存的\",{\"1\":{\"221\":1}}],[\"存储来提升\",{\"1\":{\"221\":1}}],[\"存储于\",{\"1\":{\"155\":1}}],[\"存储到dest\",{\"1\":{\"136\":3}}],[\"存储性能瓶颈\",{\"1\":{\"131\":1}}],[\"存储引擎和数据列\",{\"0\":{\"97\":1}}],[\"存储引擎提供了具有提交\",{\"1\":{\"91\":1}}],[\"存储索引\",{\"1\":{\"91\":1}}],[\"存储表定义\",{\"1\":{\"91\":1}}],[\"存储效率也是最高的\",{\"1\":{\"82\":1}}],[\"存储位置\",{\"1\":{\"63\":1}}],[\"存储vgg16对每张图进行模型建立\",{\"1\":{\"58\":1}}],[\"存储并索引这些向量\",{\"1\":{\"50\":1}}],[\"存储\",{\"1\":{\"50\":1}}],[\"存储日志\",{\"1\":{\"26\":1}}],[\"存储同等大小文件所需要的元信息就越多\",{\"1\":{\"17\":1}}],[\"存储大文件\",{\"1\":{\"15\":1}}],[\"粗略估计\",{\"1\":{\"131\":1}}],[\"监听线程创建一个会话线程\",{\"1\":{\"863\":1}}],[\"监听线程被唤醒并生成一个会话线程\",{\"1\":{\"857\":1}}],[\"监听线程\",{\"0\":{\"857\":1}}],[\"监听端口号\",{\"1\":{\"837\":1}}],[\"监听ringbuffer的事件\",{\"1\":{\"450\":1}}],[\"监听消息加入队列结果返回\",{\"1\":{\"437\":1}}],[\"监测数据\",{\"1\":{\"428\":1}}],[\"监测周期切分为10个buckets\",{\"1\":{\"402\":1}}],[\"监测周期时长\",{\"1\":{\"402\":1}}],[\"监控jvm内存与gc信息是非常重要的\",{\"1\":{\"720\":1}}],[\"监控技术\",{\"0\":{\"698\":1}}],[\"监控container的资源使用\",{\"1\":{\"656\":1}}],[\"监控两大主要职能拆分为两个独立的进程\",{\"1\":{\"653\":1}}],[\"监控其他客户端的状态\",{\"1\":{\"214\":1}}],[\"监控\",{\"1\":{\"153\":1,\"752\":1}}],[\"监控和扩展等\",{\"1\":{\"130\":1}}],[\"监视器\",{\"1\":{\"121\":1}}],[\"监视器等功能也用到了链表\",{\"1\":{\"118\":1}}],[\"维护它\",{\"1\":{\"918\":1}}],[\"维护成本相对来说比较高\",{\"1\":{\"214\":1}}],[\"维护\",{\"1\":{\"130\":1}}],[\"能\",{\"1\":{\"887\":1}}],[\"能打开的fd的上限远大于1024\",{\"1\":{\"806\":1}}],[\"能不能实现当数据可读了以后给程序一个通知呢\",{\"1\":{\"795\":1}}],[\"能源系统冗余等\",{\"1\":{\"704\":1}}],[\"能提高搜索引擎抓取\",{\"1\":{\"308\":1}}],[\"能够进入\",{\"1\":{\"926\":1}}],[\"能够通知程序进行相应的读写操作\",{\"1\":{\"795\":1}}],[\"能够通过计算两个向量的相似距离来分析它们之间的相关性\",{\"1\":{\"50\":1}}],[\"能够独立运行的代码段\",{\"1\":{\"651\":1}}],[\"能够形成项目管理课程\",{\"1\":{\"489\":1}}],[\"能够广泛筹集社会各方面闲散资金\",{\"1\":{\"172\":1}}],[\"能够以\",{\"1\":{\"160\":1}}],[\"能够有效减少内存占用\",{\"1\":{\"157\":1}}],[\"能够与多个\",{\"1\":{\"155\":1}}],[\"能够作为其他\",{\"1\":{\"155\":1}}],[\"能够移除\",{\"1\":{\"150\":1}}],[\"能够最大化\",{\"1\":{\"140\":1}}],[\"能对不同业务的数据进行分级管理\",{\"1\":{\"130\":1}}],[\"库级\",{\"1\":{\"894\":1}}],[\"库备份\",{\"1\":{\"892\":1}}],[\"库代码中断异常处理主要有两种方式\",{\"1\":{\"766\":1}}],[\"库代码中断异常处理\",{\"0\":{\"766\":1}}],[\"库定义的函数\",{\"1\":{\"624\":1}}],[\"库本身提供的功能还不够丰富和灵活\",{\"1\":{\"515\":1}}],[\"库存为1000件\",{\"1\":{\"221\":1}}],[\"库内的水平分表\",{\"1\":{\"132\":1}}],[\"库内垂直分表直接就了单一表数据量过大的问题\",{\"1\":{\"130\":1}}],[\"库名\",{\"1\":{\"82\":1}}],[\"命名为sm\",{\"1\":{\"692\":1}}],[\"命名空间\",{\"1\":{\"297\":1}}],[\"命名空间选择qixiao\",{\"1\":{\"278\":1}}],[\"命名空间选择\",{\"1\":{\"277\":1}}],[\"命中率高\",{\"1\":{\"129\":1}}],[\"命令或系统函数修改\",{\"1\":{\"854\":1}}],[\"命令或函数修改\",{\"1\":{\"854\":3}}],[\"命令行方式连接数据库\",{\"0\":{\"841\":1}}],[\"命令行方式卸载\",{\"1\":{\"835\":1}}],[\"命令行创建数据库实例\",{\"0\":{\"837\":1}}],[\"命令只可以被传给一个下家\",{\"1\":{\"825\":1}}],[\"命令来增加一个远程服务器端\",{\"1\":{\"497\":1}}],[\"命令进行初始化\",{\"1\":{\"497\":1}}],[\"命令除外\",{\"1\":{\"155\":1}}],[\"命令将不会开始新的\",{\"1\":{\"151\":1}}],[\"命令即可\",{\"1\":{\"150\":1}}],[\"命令的复杂度仅为\",{\"1\":{\"618\":1}}],[\"命令的格式为\",{\"1\":{\"566\":1}}],[\"命令的\",{\"1\":{\"150\":1}}],[\"命令以及优缺点\",{\"1\":{\"140\":1}}],[\"命令返回的随机元素可能会出现重复\",{\"1\":{\"135\":1}}],[\"命令返回的随机元素不会重复\",{\"1\":{\"135\":1}}],[\"命令\",{\"0\":{\"151\":1},\"1\":{\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"144\":1,\"243\":1,\"618\":1,\"844\":1}}],[\"很容易发现它\",{\"1\":{\"900\":1}}],[\"很容易混淆\",{\"1\":{\"549\":1}}],[\"很耗处理器时间\",{\"1\":{\"723\":1}}],[\"很显然这将是出现性能瓶颈的地方\",{\"1\":{\"818\":1}}],[\"很显然\",{\"1\":{\"432\":1,\"433\":1}}],[\"很多的对象由每一个对象对其下家的引用而联接起来形成一条链\",{\"1\":{\"825\":1}}],[\"很多都是基于这种机制实现的\",{\"1\":{\"712\":1}}],[\"很多安全芯片都是符合这个规范的\",{\"1\":{\"687\":1}}],[\"很多情况下\",{\"1\":{\"549\":1}}],[\"很多场景不适用\",{\"1\":{\"210\":1}}],[\"很多系统在可用性方面会做很多事情来保证系统的全年可用性可以达到n个9\",{\"1\":{\"201\":1}}],[\"很多查找及定位操作都是以页为单位\",{\"1\":{\"129\":1}}],[\"很长的字符串可以考虑创建前缀索引\",{\"1\":{\"82\":1}}],[\"垂直分表\",{\"0\":{\"129\":1},\"1\":{\"128\":1}}],[\"垂直分库是不同表拆到不同数据库中\",{\"1\":{\"131\":1}}],[\"垂直分库是指按照业务将表进行分类\",{\"1\":{\"130\":1}}],[\"垂直分库通过将表按业务分类\",{\"1\":{\"130\":1}}],[\"垂直分库一定程度上提升io\",{\"1\":{\"130\":1}}],[\"垂直分库\",{\"0\":{\"130\":1},\"1\":{\"128\":1,\"130\":1}}],[\"于是自己也关闭连接\",{\"1\":{\"649\":1}}],[\"于是有人使用使用软件只需简单的一条命令\",{\"1\":{\"568\":1}}],[\"于是获取了解密后的内容\",{\"1\":{\"522\":1}}],[\"于定位问题\",{\"1\":{\"413\":1}}],[\"于\",{\"1\":{\"127\":1}}],[\"算法\",{\"1\":{\"208\":1}}],[\"算法的更多信息可以参考该算法的主页\",{\"1\":{\"127\":1}}],[\"算法目前的最新版本为\",{\"1\":{\"127\":1}}],[\"算法仍能给出一个很好的随机分布性\",{\"1\":{\"127\":1}}],[\"算法最初由\",{\"1\":{\"127\":1}}],[\"算法来计算键的哈希值\",{\"1\":{\"127\":1}}],[\"算是面试题吧\",{\"0\":{\"83\":1}}],[\"添加特性会简单的多\",{\"1\":{\"907\":1}}],[\"添加功能时重构\",{\"1\":{\"907\":1}}],[\"添加通道设置非阻塞\",{\"1\":{\"612\":1}}],[\"添加分组\",{\"1\":{\"612\":1}}],[\"添加阻塞队列\",{\"1\":{\"531\":1}}],[\"添加子模块\",{\"1\":{\"502\":1}}],[\"添加远程仓库\",{\"1\":{\"499\":1}}],[\"添加成功钉邮中会收到ssh\",{\"1\":{\"495\":1}}],[\"添加spring\",{\"1\":{\"414\":1}}],[\"添加下一行内容\",{\"1\":{\"373\":1}}],[\"添加键值\",{\"1\":{\"355\":1}}],[\"添加以下内容↓\",{\"1\":{\"357\":1,\"362\":1}}],[\"添加以下内容\",{\"1\":{\"353\":1}}],[\"添加以下配置内容\",{\"1\":{\"332\":1}}],[\"添加以下配置内容↓\",{\"1\":{\"321\":1,\"331\":1,\"336\":1,\"337\":1,\"339\":1,\"344\":1,\"345\":1,\"348\":1,\"349\":1,\"356\":1,\"361\":1,\"364\":1}}],[\"添加自启\",{\"0\":{\"355\":1},\"1\":{\"352\":1}}],[\"添加注释\",{\"1\":{\"352\":2}}],[\"添加注解\",{\"1\":{\"64\":1}}],[\"添加mysql到服务中\",{\"1\":{\"321\":1}}],[\"添加阿里云yum软件源\",{\"0\":{\"291\":1}}],[\"添加国内镜像\",{\"1\":{\"236\":1}}],[\"添加\",{\"1\":{\"133\":3,\"319\":1,\"397\":1,\"408\":1,\"416\":1,\"479\":1}}],[\"添加到字典里面\",{\"1\":{\"127\":1}}],[\"哈希函数\",{\"1\":{\"684\":1}}],[\"哈希算法\",{\"0\":{\"127\":1},\"1\":{\"127\":2}}],[\"哈希表进行\",{\"1\":{\"126\":1}}],[\"哈希表只会在对\",{\"1\":{\"126\":1}}],[\"哈希表大小掩码\",{\"1\":{\"124\":1}}],[\"哈希表大小\",{\"1\":{\"124\":1}}],[\"哈希表数组\",{\"1\":{\"124\":1}}],[\"哈希表\",{\"0\":{\"124\":1},\"1\":{\"126\":3,\"514\":1}}],[\"哈希表节点使用\",{\"1\":{\"125\":1}}],[\"哈希表节点\",{\"0\":{\"125\":1},\"1\":{\"123\":1}}],[\"目的是让maven构建是速度增加\",{\"1\":{\"574\":1}}],[\"目的就是让服务端得到这个随机值\",{\"1\":{\"522\":1}}],[\"目一样做clone\",{\"1\":{\"488\":1}}],[\"目标服务提供名称\",{\"1\":{\"403\":1}}],[\"目前的腾讯电脑管家\",{\"1\":{\"897\":1}}],[\"目前的空间不足以拼接\",{\"1\":{\"619\":1}}],[\"目前的进度\",{\"1\":{\"126\":1}}],[\"目前5停止维护\",{\"1\":{\"611\":1}}],[\"目前我们打成的jar不能识别main方法\",{\"1\":{\"583\":1}}],[\"目前只支持\",{\"1\":{\"417\":1}}],[\"目前有两个容器实例\",{\"1\":{\"396\":1}}],[\"目前有8w个店铺\",{\"1\":{\"131\":1}}],[\"目前是8\",{\"1\":{\"320\":1}}],[\"目前nginx服务器的upstream模块支持6种方式的分配\",{\"1\":{\"298\":1}}],[\"目前主流日志收集系统为\",{\"1\":{\"265\":1}}],[\"目录中\",{\"1\":{\"580\":1}}],[\"目录下创建\",{\"1\":{\"708\":1}}],[\"目录下\",{\"1\":{\"376\":1}}],[\"目录赋权\",{\"1\":{\"321\":1}}],[\"目录还是相互独立的\",{\"1\":{\"250\":2}}],[\"目录\",{\"1\":{\"14\":1,\"497\":1,\"537\":1,\"580\":1,\"834\":1}}],[\"另有三种常见的形式\",{\"0\":{\"816\":1}}],[\"另一种需要锁粗化的极端的情况是\",{\"1\":{\"924\":1}}],[\"另一种常见情况就是\",{\"1\":{\"909\":1}}],[\"另一把是私钥\",{\"1\":{\"705\":1}}],[\"另一个线程向threadlocal里取值并打印\",{\"1\":{\"650\":1}}],[\"另一个操作数将会转换为\",{\"1\":{\"549\":2}}],[\"另一个操作数就会转换为\",{\"1\":{\"549\":1}}],[\"另一个自然是输出流\",{\"1\":{\"539\":1}}],[\"另一个功能是还原代码的作用\",{\"1\":{\"500\":1}}],[\"另一个好处是你可以用多个消费者\",{\"1\":{\"453\":1}}],[\"另一个和\",{\"1\":{\"126\":1}}],[\"另一方面可以节约程序运行时对内存的开销\",{\"1\":{\"563\":1}}],[\"另一方面\",{\"1\":{\"214\":1}}],[\"另外一个人背对着人圈以槌击鼓\",{\"1\":{\"825\":1}}],[\"另外一个事务也访问该同一数据\",{\"1\":{\"72\":1}}],[\"另外一个事务也访问这个数据\",{\"1\":{\"72\":1}}],[\"另外一个事务不能读取该事物未提交的数据\",{\"1\":{\"69\":1}}],[\"另外一些\",{\"1\":{\"549\":1}}],[\"另外\",{\"1\":{\"14\":1,\"533\":1,\"684\":1}}],[\"之前已更新过的共享变量\",{\"1\":{\"809\":1}}],[\"之前\",{\"1\":{\"620\":2}}],[\"之前为\",{\"1\":{\"619\":1}}],[\"之前要跑完整个ringbuffer一圈的距离\",{\"1\":{\"454\":1}}],[\"之间不能相互转换\",{\"1\":{\"843\":1}}],[\"之间如要通信的话\",{\"1\":{\"809\":1}}],[\"之间的语义距离\",{\"1\":{\"910\":1}}],[\"之间的区别进行了总结\",{\"1\":{\"625\":1}}],[\"之间的区别\",{\"1\":{\"617\":1,\"625\":1}}],[\"之间的有序映射\",{\"1\":{\"133\":1}}],[\"之间\",{\"1\":{\"526\":1,\"923\":1}}],[\"之上的\",{\"1\":{\"522\":1}}],[\"之类的数字\",{\"1\":{\"433\":1}}],[\"之外\",{\"1\":{\"126\":1}}],[\"之后再把它重新发给认证服务器\",{\"1\":{\"897\":1}}],[\"之后更新时\",{\"1\":{\"730\":1}}],[\"之后看到阿里巴巴开发规范中也有提到\",{\"1\":{\"650\":1}}],[\"之后的\",{\"1\":{\"621\":1,\"622\":1}}],[\"之后就会释放ctx和msg\",{\"1\":{\"613\":1}}],[\"之后加上\",{\"1\":{\"230\":1}}],[\"之后提供的内存级锁很多都支持可重入型\",{\"1\":{\"218\":1}}],[\"之后\",{\"0\":{\"373\":1},\"1\":{\"190\":1,\"619\":1,\"620\":1,\"649\":1,\"709\":1}}],[\"之后自动被删除\",{\"1\":{\"139\":1}}],[\"之后进行回表查询获得实际数据\",{\"1\":{\"102\":1}}],[\"之后采取和另一张表中每个分桶进行匹配连接\",{\"1\":{\"23\":1}}],[\"销毁值的函数\",{\"1\":{\"126\":1}}],[\"销毁键的函数\",{\"1\":{\"126\":1}}],[\"整合成一次锁请求\",{\"1\":{\"924\":1}}],[\"整型的范围与运行\",{\"1\":{\"549\":1}}],[\"整型\",{\"1\":{\"549\":1}}],[\"整个通信过程对程序员完全透明\",{\"1\":{\"809\":1}}],[\"整个数据报文的检验和\",{\"1\":{\"642\":1}}],[\"整个数据报文的长度\",{\"1\":{\"642\":1}}],[\"整个过程第三方即使监听到了数据\",{\"1\":{\"522\":1}}],[\"整个过程耗费的时间比较高\",{\"1\":{\"433\":1}}],[\"整个id是趋势递增的\",{\"1\":{\"206\":1}}],[\"整个\",{\"1\":{\"157\":1}}],[\"整体结构\",{\"1\":{\"157\":1}}],[\"整体性能上的消耗并不算太大\",{\"1\":{\"82\":1}}],[\"整数或者浮点数\",{\"1\":{\"133\":1}}],[\"整数\",{\"1\":{\"125\":2}}],[\"没有具体的物理形态\",{\"1\":{\"898\":1}}],[\"没有最大并发连接的限制\",{\"1\":{\"806\":1}}],[\"没有抽象层\",{\"1\":{\"683\":1}}],[\"没有其他线程来竞争该锁\",{\"1\":{\"673\":1}}],[\"没有收到服务器端的ack\",{\"1\":{\"649\":1}}],[\"没有分配任何未使用空间\",{\"1\":{\"616\":1}}],[\"没有后缀\",{\"1\":{\"549\":1}}],[\"没有实现的阻塞接口的linkedlist\",{\"1\":{\"529\":1}}],[\"没有实现的阻塞接口队列\",{\"0\":{\"529\":1}}],[\"没有权限\",{\"1\":{\"419\":1}}],[\"没有网络消耗\",{\"1\":{\"209\":1}}],[\"没有定论\",{\"1\":{\"203\":1}}],[\"没有绝对意义上的公理\",{\"1\":{\"190\":1}}],[\"没有进行\",{\"1\":{\"126\":1}}],[\"没有包含任何键值对\",{\"1\":{\"124\":1}}],[\"没有行级别的数据插入\",{\"1\":{\"22\":1}}],[\"接着在\",{\"1\":{\"774\":1}}],[\"接着执行resources\",{\"1\":{\"580\":1}}],[\"接入技术\",{\"0\":{\"700\":1}}],[\"接下来的小节将对这一策略进行说明\",{\"1\":{\"619\":1}}],[\"接下来的一节将详细地说明未使用空间在\",{\"1\":{\"616\":1}}],[\"接下来的三个小节将分别介绍\",{\"1\":{\"123\":1}}],[\"接下来使用container模式\",{\"1\":{\"256\":1}}],[\"接下来就开始编写dockerfile文件了\",{\"1\":{\"243\":1}}],[\"接下来我们就来考虑一下这个问题\",{\"1\":{\"221\":1}}],[\"接下来\",{\"1\":{\"216\":1,\"255\":1,\"262\":1,\"452\":1,\"456\":1}}],[\"接口的简单聚集\",{\"1\":{\"530\":1}}],[\"接口的容器\",{\"1\":{\"381\":2}}],[\"接口和五个阻塞队列类\",{\"1\":{\"530\":1}}],[\"接口方法getcharge\",{\"1\":{\"906\":1}}],[\"接口方法\",{\"1\":{\"475\":1}}],[\"接口方式支持\",{\"1\":{\"475\":1}}],[\"接口上定义了以各种姿势发布事件的方法\",{\"1\":{\"472\":1}}],[\"接口\",{\"1\":{\"215\":1,\"381\":2}}],[\"接收连接\",{\"1\":{\"612\":1}}],[\"接收到连接\",{\"1\":{\"612\":1}}],[\"接收到命令以\",{\"1\":{\"140\":1}}],[\"接收和发送数据包的缓冲区大小\",{\"1\":{\"564\":1}}],[\"接收的数据进行排序\",{\"1\":{\"37\":1}}],[\"接收站发给发送站的一种传输类控制字符\",{\"1\":{\"14\":1}}],[\"回放攻击\",{\"1\":{\"897\":1}}],[\"回收权限\",{\"1\":{\"888\":1}}],[\"回收时要增加\",{\"1\":{\"888\":1}}],[\"回滚段的保留时长\",{\"1\":{\"864\":1}}],[\"回滚段数据包含\",{\"1\":{\"864\":1}}],[\"回滚表空间\",{\"1\":{\"864\":1}}],[\"回滚和崩溃恢复能力的事务安全\",{\"1\":{\"91\":1}}],[\"回归测试\",{\"1\":{\"704\":1}}],[\"回调接口\",{\"1\":{\"472\":1}}],[\"回顾\",{\"0\":{\"121\":1}}],[\"持续重构\",{\"1\":{\"898\":1}}],[\"持续性等得影响\",{\"1\":{\"704\":1}}],[\"持有锁的线程\",{\"1\":{\"814\":1}}],[\"持有锁的线程长期不释放的时候\",{\"1\":{\"703\":1}}],[\"持有的链表节点进行计数\",{\"1\":{\"119\":1}}],[\"持久化同时启用\",{\"1\":{\"140\":1}}],[\"持久化和\",{\"1\":{\"140\":1}}],[\"持久化即可\",{\"1\":{\"140\":1}}],[\"持久化\",{\"0\":{\"140\":1},\"1\":{\"140\":3}}],[\"持久性顺序节点3\",{\"1\":{\"214\":1}}],[\"持久性节点2\",{\"1\":{\"214\":1}}],[\"持久性\",{\"1\":{\"65\":2,\"66\":1,\"105\":1}}],[\"属性称为字节数组的原因\",{\"1\":{\"623\":1}}],[\"属性将这些字节的数量记录起来\",{\"1\":{\"622\":1}}],[\"属性同样大小的未使用空间\",{\"1\":{\"621\":1}}],[\"属性记录\",{\"1\":{\"620\":1}}],[\"属性记录了哈希表的大小\",{\"1\":{\"124\":1}}],[\"属性\",{\"1\":{\"618\":2}}],[\"属性中记录了\",{\"1\":{\"618\":1}}],[\"属性里面\",{\"1\":{\"616\":1}}],[\"属性的值而不是空字符来判断字符串是否结束\",{\"1\":{\"623\":1}}],[\"属性的值相同\",{\"1\":{\"621\":1}}],[\"属性的值将和\",{\"1\":{\"621\":1}}],[\"属性的值\",{\"1\":{\"621\":1}}],[\"属性的值为\",{\"1\":{\"616\":3}}],[\"属性的值总是等于\",{\"1\":{\"124\":1}}],[\"属性和哈希值\",{\"1\":{\"127\":1}}],[\"属性和\",{\"1\":{\"126\":1}}],[\"属性是一个\",{\"1\":{\"616\":1}}],[\"属性是一个包含两个项的数组\",{\"1\":{\"126\":1}}],[\"属性是一个指向\",{\"1\":{\"126\":1}}],[\"属性是一个数组\",{\"1\":{\"124\":1}}],[\"属性是针对不同类型的键值对\",{\"1\":{\"126\":1}}],[\"属性是指向另一个哈希表节点的指针\",{\"1\":{\"125\":1}}],[\"属性则保存了需要传给那些类型特定函数的可选参数\",{\"1\":{\"126\":1}}],[\"属性则保存着键值对中的值\",{\"1\":{\"125\":1}}],[\"属性则记录了哈希表目前已有节点\",{\"1\":{\"124\":1}}],[\"属性保存着键值对中的键\",{\"1\":{\"125\":1}}],[\"属性来对\",{\"1\":{\"119\":1}}],[\"属于处理器重排序\",{\"1\":{\"809\":1}}],[\"属于编译器重排序\",{\"1\":{\"809\":1}}],[\"属于同一个topic\",{\"1\":{\"430\":1}}],[\"属于\",{\"1\":{\"34\":1}}],[\"属于小表的属性\",{\"1\":{\"23\":1}}],[\"程序员都喜欢简短的函数\",{\"1\":{\"910\":1}}],[\"程序会根据租赁时间和影片类型计算费用\",{\"1\":{\"898\":1}}],[\"程序启动之后\",{\"1\":{\"712\":1}}],[\"程序启动的时候\",{\"1\":{\"711\":1}}],[\"程序也有区别\",{\"1\":{\"710\":1}}],[\"程序分为两种\",{\"1\":{\"710\":1}}],[\"程序写好了\",{\"1\":{\"710\":1}}],[\"程序运行在tomcat中\",{\"1\":{\"650\":1}}],[\"程序不得不对statement做出修改\",{\"1\":{\"898\":1}}],[\"程序不停止\",{\"1\":{\"650\":1}}],[\"程序不会对其中的数据做任何限制\",{\"1\":{\"623\":1}}],[\"程序不仅会为\",{\"1\":{\"621\":1}}],[\"程序并不立即使用内存重分配来回收缩短后多出来的字节\",{\"1\":{\"622\":1}}],[\"程序需要通过内存重分配来释放字符串不再使用的那部分空间\",{\"1\":{\"620\":1}}],[\"程序需要先通过内存重分配来扩展底层数组的空间大小\",{\"1\":{\"620\":1}}],[\"程序需要先根据键值对的键计算出哈希值和索引值\",{\"1\":{\"127\":1}}],[\"程序都总要对保存这个\",{\"1\":{\"620\":1}}],[\"程序只要访问\",{\"1\":{\"618\":2}}],[\"程序必须遍历整个字符串\",{\"1\":{\"618\":1}}],[\"程序最终会执行到这里\",{\"1\":{\"541\":1}}],[\"程序目录\",{\"1\":{\"263\":1}}],[\"程序获取链表中节点数量的复杂度为\",{\"1\":{\"119\":1}}],[\"程序获取链表的表头节点和表尾节点的复杂度为\",{\"1\":{\"119\":1}}],[\"程序使用\",{\"1\":{\"119\":1}}],[\"带请求头和请求参数\",{\"1\":{\"518\":2}}],[\"带请求参数\",{\"1\":{\"518\":4}}],[\"带有一个\",{\"1\":{\"214\":1}}],[\"带有生存时间\",{\"1\":{\"139\":1}}],[\"带来的提升是\",{\"1\":{\"129\":1}}],[\"带链表长度计数器\",{\"1\":{\"119\":1}}],[\"带表头指针和表尾指针\",{\"1\":{\"119\":1}}],[\"无策略\",{\"1\":{\"874\":1}}],[\"无差别遍历的事件就越长\",{\"1\":{\"800\":1}}],[\"无线程可用\",{\"1\":{\"779\":1}}],[\"无返回值\",{\"1\":{\"762\":1}}],[\"无侵入式\",{\"1\":{\"711\":1}}],[\"无侵入式的收集\",{\"1\":{\"706\":1}}],[\"无效\",{\"1\":{\"663\":1,\"664\":1}}],[\"无须进行任何手动修改长度的工作\",{\"1\":{\"618\":1}}],[\"无须任何配置类和代码\",{\"1\":{\"403\":1}}],[\"无论内存是否充足\",{\"1\":{\"650\":1}}],[\"无论开发人员如何修改代码都不会影响负责人那master分支上的代码\",{\"1\":{\"488\":1}}],[\"无论是在单机还是分布式中\",{\"1\":{\"727\":1}}],[\"无论是对一个对象进行加锁还是对一个方法进行加锁\",{\"1\":{\"671\":1}}],[\"无论是像redis\",{\"1\":{\"197\":1}}],[\"无论是财产\",{\"1\":{\"168\":1}}],[\"无副作用的功能\",{\"1\":{\"444\":2}}],[\"无状态且短平快的服务使用\",{\"1\":{\"299\":1}}],[\"无中断平滑发布\",{\"1\":{\"263\":1}}],[\"无网络模式\",{\"0\":{\"257\":1},\"1\":{\"250\":2}}],[\"无还本续贷的担保贷款项目\",{\"1\":{\"189\":1}}],[\"无法被java程序直接引用\",{\"1\":{\"558\":1}}],[\"无法解决循环引用问题\",{\"1\":{\"558\":1}}],[\"无法清除垃圾碎片\",{\"1\":{\"557\":1}}],[\"无法将值插入ringbuffer\",{\"1\":{\"472\":1}}],[\"无法保证原子性\",{\"1\":{\"440\":1}}],[\"无法通过预检查的异常除外\",{\"1\":{\"413\":1}}],[\"无法通过降低ca来提升p\",{\"1\":{\"196\":1}}],[\"无法支持\",{\"1\":{\"161\":1}}],[\"无法实现动态水平扩展\",{\"1\":{\"161\":1}}],[\"无环\",{\"1\":{\"119\":1}}],[\"无需每个人进行特别的配置\",{\"1\":{\"410\":1}}],[\"无需手工添加\",{\"1\":{\"250\":1}}],[\"无需回表\",{\"1\":{\"104\":1}}],[\"无需使用\",{\"1\":{\"25\":1}}],[\"无需处理\",{\"1\":{\"3\":1}}],[\"结合两个\",{\"1\":{\"475\":1}}],[\"结合上面的参数就是10秒监测周期\",{\"1\":{\"402\":1}}],[\"结束\",{\"1\":{\"317\":1}}],[\"结尾\",{\"1\":{\"307\":2}}],[\"结构总是会带来一定的额外开销\",{\"1\":{\"915\":1}}],[\"结构类型允许你将数据组织成有意义的形式\",{\"1\":{\"915\":1}}],[\"结构进行存储\",{\"1\":{\"158\":1}}],[\"结构\",{\"1\":{\"155\":1}}],[\"结构保存了一簇用于操作特定类型键值对的函数\",{\"1\":{\"126\":1}}],[\"结构保存着一个键值对\",{\"1\":{\"124\":1}}],[\"结构都保存着一个键值对\",{\"1\":{\"125\":1}}],[\"结构表示一个\",{\"1\":{\"616\":1}}],[\"结构表示\",{\"1\":{\"125\":1,\"126\":1}}],[\"结构定义\",{\"1\":{\"124\":1}}],[\"结构的指针\",{\"1\":{\"124\":1,\"126\":1}}],[\"结构的\",{\"1\":{\"119\":3}}],[\"结构组成的链表\",{\"1\":{\"119\":1}}],[\"结构和三个\",{\"1\":{\"119\":1}}],[\"结构为链表提供了表头指针\",{\"1\":{\"119\":1}}],[\"结构就可以组成链表\",{\"1\":{\"119\":1}}],[\"结构来表示\",{\"1\":{\"119\":1,\"121\":2}}],[\"结果可以看到\",{\"1\":{\"650\":1}}],[\"结果是不同的\",{\"1\":{\"221\":1}}],[\"结果\",{\"1\":{\"62\":1,\"73\":1,\"440\":2,\"719\":1}}],[\"结果如下\",{\"1\":{\"13\":1}}],[\"发散式变化就出现了\",{\"1\":{\"911\":1}}],[\"发散式变化\",{\"0\":{\"911\":1}}],[\"发出请求与处理请求的对象之间耦合度降低\",{\"1\":{\"825\":1}}],[\"发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求\",{\"1\":{\"825\":1}}],[\"发出的绿色箭头代表这个请求\",{\"1\":{\"458\":1}}],[\"发版当天的日期\",{\"1\":{\"605\":1}}],[\"发现这个函数没有使用来自consumer类的信息\",{\"1\":{\"902\":1}}],[\"发现自己无法确定公钥是否真的属于鲍勃\",{\"1\":{\"705\":1}}],[\"发现\",{\"1\":{\"486\":1}}],[\"发现有不合规的项目\",{\"1\":{\"189\":1}}],[\"发短信\",{\"1\":{\"428\":1}}],[\"发生系统异常\",{\"1\":{\"419\":1}}],[\"发生未知异常\",{\"1\":{\"419\":1}}],[\"发生hash碰撞\",{\"1\":{\"102\":1}}],[\"发布订阅模式\",{\"1\":{\"825\":1}}],[\"发布项目到远程仓库\",{\"1\":{\"566\":1}}],[\"发布序列的\",{\"1\":{\"472\":1}}],[\"发布序列\",{\"1\":{\"472\":2}}],[\"发布系统通知\",{\"1\":{\"428\":1}}],[\"发布到其他环境的yaml则需要配置为\",{\"1\":{\"410\":1}}],[\"发布与订阅\",{\"1\":{\"118\":1,\"121\":1}}],[\"发展的指导意见\",{\"1\":{\"189\":1}}],[\"发行商业票据与存款单应没有什么区别\",{\"1\":{\"186\":1}}],[\"发送一个确认包\",{\"1\":{\"649\":2}}],[\"发送完毕后\",{\"1\":{\"648\":2,\"649\":3}}],[\"发送delete请求\",{\"1\":{\"518\":2}}],[\"发送put请求\",{\"1\":{\"518\":2}}],[\"发送post请求\",{\"1\":{\"518\":3}}],[\"发送get请求\",{\"1\":{\"518\":3}}],[\"发送编码格式统一用utf\",{\"1\":{\"518\":1}}],[\"发送消息\",{\"1\":{\"437\":1}}],[\"发送的命令\",{\"1\":{\"155\":1}}],[\"发送多个命令\",{\"1\":{\"139\":1}}],[\"语言规范鼓励但不强求\",{\"1\":{\"809\":1}}],[\"语言使用的这种简单的字符串表示方式\",{\"1\":{\"617\":1}}],[\"语言使用长度为\",{\"1\":{\"617\":1}}],[\"语言中\",{\"1\":{\"473\":1,\"563\":1}}],[\"语言并没有内置这种数据结构\",{\"1\":{\"118\":1}}],[\"语法语义校验\",{\"1\":{\"863\":1}}],[\"语法语义权限解析\",{\"1\":{\"863\":1}}],[\"语法\",{\"0\":{\"306\":1}}],[\"语句1\",{\"1\":{\"891\":1}}],[\"语句修改\",{\"1\":{\"874\":1}}],[\"语句创建表空间\",{\"1\":{\"866\":1}}],[\"语句加入\",{\"1\":{\"863\":1}}],[\"语句执行\",{\"1\":{\"728\":1}}],[\"语句上的优化\",{\"1\":{\"82\":1}}],[\"语句会出现不同的结果\",{\"1\":{\"72\":1}}],[\"语句覆盖掉\",{\"1\":{\"27\":1}}],[\"语句必须加\",{\"1\":{\"23\":1}}],[\"语句和其他的\",{\"1\":{\"23\":1}}],[\"语句中的键进行分桶的\",{\"1\":{\"23\":1}}],[\"语句中的判定条件\",{\"1\":{\"23\":1}}],[\"语句中不能引用到右边表中的字段\",{\"1\":{\"23\":1}}],[\"语句条件的所有记录\",{\"1\":{\"23\":1}}],[\"语句\",{\"1\":{\"22\":1,\"23\":2,\"413\":1,\"863\":3}}],[\"请看下面属性\",{\"1\":{\"651\":1}}],[\"请看数据结构篇~~\",{\"1\":{\"117\":1}}],[\"请耐心等待\",{\"1\":{\"554\":1}}],[\"请使用static\",{\"1\":{\"445\":1}}],[\"请注意\",{\"1\":{\"445\":1}}],[\"请联系管理员授权\",{\"1\":{\"419\":1}}],[\"请\",{\"1\":{\"413\":1}}],[\"请按照以下协议配置\",{\"1\":{\"317\":1}}],[\"请按照以下套件配置\",{\"1\":{\"317\":1}}],[\"请填写私钥文件的相对路径或绝对路径\",{\"1\":{\"317\":1}}],[\"请填写证书文件的相对路径或绝对路径\",{\"1\":{\"317\":1}}],[\"请填写绑定证书的域名\",{\"1\":{\"317\":1}}],[\"请求提交至后端\",{\"1\":{\"897\":1}}],[\"请求提交之前\",{\"1\":{\"897\":1}}],[\"请求在这个链上传递\",{\"1\":{\"825\":1}}],[\"请求体被分割成多部分\",{\"1\":{\"749\":1}}],[\"请求类型为post时\",{\"1\":{\"749\":1}}],[\"请求类型为get时\",{\"1\":{\"749\":1}}],[\"请求方式\",{\"1\":{\"518\":3}}],[\"请求方式不支持\",{\"1\":{\"419\":1}}],[\"请求头集合\",{\"1\":{\"518\":2}}],[\"请求参数集合\",{\"1\":{\"518\":3}}],[\"请求获取数据的超时时间\",{\"1\":{\"518\":3}}],[\"请求的主机\",{\"1\":{\"477\":1}}],[\"请求地址\",{\"1\":{\"419\":4,\"518\":10}}],[\"请求错误超过50\",{\"1\":{\"402\":1}}],[\"请求失败率超过50\",{\"1\":{\"402\":1}}],[\"请求失败降级回调方法\",{\"1\":{\"402\":2}}],[\"请求失败\",{\"1\":{\"399\":2,\"404\":1}}],[\"请求处理的超时时间\",{\"1\":{\"396\":1}}],[\"请求\",{\"1\":{\"307\":1,\"316\":1,\"419\":1,\"522\":1}}],[\"请求local\",{\"1\":{\"222\":1}}],[\"请银行\",{\"1\":{\"176\":1}}],[\"请增加这个\",{\"1\":{\"74\":1}}],[\"派生表可以是一个结果集\",{\"1\":{\"113\":1}}],[\"含两个\",{\"1\":{\"179\":1}}],[\"含义\",{\"0\":{\"113\":1}}],[\"含表\",{\"1\":{\"21\":1}}],[\"前端web页面用户输入账号\",{\"1\":{\"897\":1}}],[\"前台启动方式\",{\"1\":{\"845\":2}}],[\"前三位为子网段\",{\"1\":{\"526\":1}}],[\"前者是\",{\"1\":{\"522\":1}}],[\"前者是外围访问端口\",{\"1\":{\"241\":1}}],[\"前一个是精确匹配\",{\"1\":{\"307\":1}}],[\"前一个节点占用内存的字节数\",{\"1\":{\"157\":1}}],[\"前缀\",{\"1\":{\"401\":1}}],[\"前缀匹配时\",{\"1\":{\"306\":1}}],[\"前缀机制与watch功能配合使用解决了死锁问题\",{\"1\":{\"214\":1}}],[\"前缀机制\",{\"1\":{\"214\":2}}],[\"前面还是为了实现getreadholdcount等新功能\",{\"1\":{\"823\":1}}],[\"前面讲的非阻塞仍然需要进程不断的轮询重试\",{\"1\":{\"795\":1}}],[\"前面的类加载过程\",{\"1\":{\"558\":1,\"563\":1}}],[\"前面我们fileinputstream时\",{\"1\":{\"541\":1}}],[\"前面我们介绍可用性的时候说到过\",{\"1\":{\"201\":1}}],[\"前面有一级\",{\"1\":{\"418\":1}}],[\"前面一个条件为范围查询\",{\"1\":{\"112\":1}}],[\"前文阐述的\",{\"1\":{\"158\":1}}],[\"前置节点\",{\"1\":{\"119\":1}}],[\"前提\",{\"1\":{\"94\":1}}],[\"前提是其记录对于右表满足\",{\"1\":{\"23\":1}}],[\"幻读问题\",{\"1\":{\"106\":1}}],[\"幻读\",{\"1\":{\"106\":2}}],[\"幻象读\",{\"1\":{\"72\":1}}],[\"幻象\",{\"0\":{\"72\":1}}],[\"解密过程\",{\"0\":{\"680\":1}}],[\"解密密钥\",{\"1\":{\"675\":1,\"676\":1,\"677\":1}}],[\"解析动作并不一定在初始化动作完成之前\",{\"1\":{\"558\":1,\"563\":1}}],[\"解析字符串\",{\"1\":{\"527\":1}}],[\"解析\",{\"1\":{\"515\":1,\"558\":2,\"897\":1}}],[\"解析后你提交的信息就会被破解\",{\"1\":{\"485\":1}}],[\"解析报文的过程是通过获取\",{\"1\":{\"483\":1}}],[\"解压新的maven到一个目录\",{\"1\":{\"571\":1}}],[\"解压\",{\"1\":{\"352\":1,\"376\":1}}],[\"解除锁表\",{\"0\":{\"330\":1}}],[\"解释\",{\"1\":{\"297\":1,\"381\":2,\"788\":1}}],[\"解锁的归一化\",{\"0\":{\"217\":1},\"1\":{\"217\":1}}],[\"解锁操作\",{\"1\":{\"215\":1}}],[\"解锁失败\",{\"1\":{\"214\":1}}],[\"解锁出现异常\",{\"1\":{\"213\":1}}],[\"解锁\",{\"1\":{\"213\":1}}],[\"解决开放云环境所带来的一系列安全问题\",{\"1\":{\"700\":1}}],[\"解决云服务不可信问题\",{\"1\":{\"698\":1}}],[\"解决方案\",{\"1\":{\"872\":1}}],[\"解决方案只需要在每次请求结束之后将threadlocal清空或者在请求之前将其清空即可\",{\"1\":{\"650\":1}}],[\"解决方法\",{\"0\":{\"664\":1,\"666\":1,\"668\":1},\"1\":{\"445\":1,\"651\":3,\"864\":1}}],[\"解决容易引起maven导包或插件时卡顿\",{\"1\":{\"575\":1}}],[\"解决世界上文字编码不一致的问题\",{\"1\":{\"549\":1}}],[\"解决冲突\",{\"0\":{\"505\":1}}],[\"解决这个问题的关键思想就是\",{\"1\":{\"221\":1}}],[\"解决了单一表数据量过大的问题\",{\"1\":{\"132\":1}}],[\"解决了单库大数据\",{\"1\":{\"131\":1}}],[\"解决了脏读\",{\"1\":{\"106\":1}}],[\"解决业务层面的耦合\",{\"1\":{\"130\":1}}],[\"解决第一类丢失更新\",{\"1\":{\"106\":1}}],[\"解决第一类丢失更新和脏读的问题\",{\"1\":{\"106\":1}}],[\"解决第一类丢失更新的问题\",{\"1\":{\"106\":1}}],[\"解答上述疑问\",{\"1\":{\"14\":1}}],[\"止多个事务并发执行时由于交叉执行而导致数据的不一致\",{\"1\":{\"105\":1}}],[\"再看看能否通过抽取方法把使用该对象的代码提炼到一个独立函数中\",{\"1\":{\"921\":1}}],[\"再将它搬移到需要多态性的那个类里\",{\"1\":{\"916\":1}}],[\"再将验证码加在后面\",{\"1\":{\"897\":1}}],[\"再创建三个实现类\",{\"1\":{\"906\":1}}],[\"再查找对应的执行计划\",{\"1\":{\"863\":1}}],[\"再查找普通匹配\",{\"1\":{\"307\":1}}],[\"再继续进行下一步工作\",{\"0\":{\"776\":1}}],[\"再附上数字证书就行了\",{\"1\":{\"705\":1}}],[\"再建立一条信任链\",{\"1\":{\"684\":1}}],[\"再转成2个16进制字符串\",{\"1\":{\"613\":1}}],[\"再到打包和部署\",{\"1\":{\"569\":1}}],[\"再哈希法又叫双哈希法\",{\"1\":{\"512\":1}}],[\"再哈希法\",{\"0\":{\"512\":1}}],[\"再做对应的异常处理\",{\"1\":{\"413\":1}}],[\"再去查找\",{\"1\":{\"384\":1}}],[\"再执行\",{\"1\":{\"319\":1}}],[\"再执行删除锁操作\",{\"1\":{\"219\":1}}],[\"再次访问时返回了对应fallback中的返回值\",{\"1\":{\"407\":1}}],[\"再次查看\",{\"1\":{\"318\":1}}],[\"再次启动一个同样的容器\",{\"1\":{\"256\":1}}],[\"再此收到请求\",{\"1\":{\"305\":1}}],[\"再加上你的项目代码\",{\"1\":{\"234\":1}}],[\"再在前面拼接上商品id就可以得出真正的库存缓存的key\",{\"1\":{\"221\":1}}],[\"再进行释放锁的操作\",{\"1\":{\"217\":1}}],[\"再开始第三步判定\",{\"1\":{\"214\":1}}],[\"再来一个客户端执行同样的lua脚本会提示已经存在锁\",{\"1\":{\"213\":1}}],[\"再减库存\",{\"1\":{\"202\":1}}],[\"再担保费\",{\"1\":{\"189\":1}}],[\"再担保费为一次性收取\",{\"1\":{\"189\":1}}],[\"再担保收费\",{\"1\":{\"189\":1}}],[\"再担保公司通过与原始担保机构合作\",{\"1\":{\"166\":1}}],[\"再担保公司按照\",{\"1\":{\"165\":1}}],[\"再担保公司按合同约定向原保机构提供一定比例的代偿补偿\",{\"1\":{\"162\":1}}],[\"再担保基金\",{\"1\":{\"165\":1}}],[\"再担保函\",{\"1\":{\"165\":1}}],[\"再担保责任比例原则上不超过原保项目担保责任的50\",{\"1\":{\"164\":1}}],[\"再担保业务设置若干个专项产品\",{\"1\":{\"164\":1}}],[\"再担保机构的作用和价值\",{\"0\":{\"166\":1}}],[\"再担保机构注资\",{\"1\":{\"165\":1}}],[\"再担保机构按合同约定为其提供一定比例的代偿补偿\",{\"1\":{\"164\":1}}],[\"再担保机构是以经营再担保业务为主业\",{\"1\":{\"162\":1}}],[\"再担保合同\",{\"1\":{\"164\":1}}],[\"再担保人将按再担保合同约定比例向担保人提供比例再担保\",{\"1\":{\"162\":1}}],[\"再担保\",{\"0\":{\"162\":1}}],[\"再算上增长\",{\"1\":{\"131\":1}}],[\"再定位行记录\",{\"1\":{\"104\":1}}],[\"再交由用户自定义的\",{\"1\":{\"37\":1}}],[\"举个例子\",{\"1\":{\"118\":1,\"125\":1,\"127\":1,\"616\":1,\"618\":2,\"619\":3,\"620\":1,\"621\":3,\"622\":2,\"623\":1,\"624\":1}}],[\"举个简单的例子\",{\"1\":{\"103\":1}}],[\"举例\",{\"0\":{\"66\":1}}],[\"且在jdk内部会对这类代码锁的请求做一些优化\",{\"1\":{\"924\":1}}],[\"且不能正常工作\",{\"1\":{\"908\":1}}],[\"且不能使用制表符tab\",{\"1\":{\"414\":1}}],[\"且可以只针对当前会话生效\",{\"1\":{\"854\":1}}],[\"且可缓存\",{\"1\":{\"481\":1}}],[\"且预期在短时间内能执行完毕的线程任务\",{\"1\":{\"764\":1}}],[\"且最大一个子网的ip地址为26个\",{\"1\":{\"526\":1}}],[\"且最后结果不是5\",{\"1\":{\"440\":1}}],[\"且每个partition各有两个副本\",{\"1\":{\"432\":1}}],[\"且异常的处理效率比条件判断方式要低很多\",{\"1\":{\"413\":1}}],[\"且单户或单笔500万元及以下担保贷款金额占比不得低于50\",{\"1\":{\"189\":1}}],[\"且法院已出具\",{\"1\":{\"163\":1}}],[\"且延迟小于等于\",{\"1\":{\"155\":1}}],[\"且树的高度较低\",{\"1\":{\"102\":1}}],[\"且很小\",{\"1\":{\"34\":1}}],[\"原始数据不一定是有效数据\",{\"1\":{\"788\":1}}],[\"原有函数执行\",{\"1\":{\"716\":1}}],[\"原有的卖家表\",{\"1\":{\"130\":1}}],[\"原来的string被jvm的垃圾回收机制\",{\"1\":{\"629\":1}}],[\"原来的商品的\",{\"1\":{\"221\":1}}],[\"原因是它是基于链表来存储的\",{\"1\":{\"803\":1}}],[\"原因大概大家已经知道了\",{\"1\":{\"650\":1}}],[\"原因当问我们使用parse方法时\",{\"1\":{\"626\":1}}],[\"原因分析\",{\"1\":{\"445\":2}}],[\"原子操作\",{\"1\":{\"929\":1}}],[\"原子递减当前值\",{\"1\":{\"444\":1}}],[\"原子将该值设置为newvalue\",{\"1\":{\"444\":2}}],[\"原子性地将值设置为newvalue\",{\"1\":{\"444\":1}}],[\"原子性操作是指\",{\"1\":{\"199\":1}}],[\"原子性的破坏可能导致数据库的不一致\",{\"1\":{\"67\":1}}],[\"原子性与隔离行\",{\"0\":{\"67\":1}}],[\"原子性\",{\"1\":{\"65\":2,\"66\":1,\"105\":1,\"440\":1}}],[\"原生注解\",{\"1\":{\"393\":1,\"397\":1,\"401\":1,\"415\":1,\"416\":1}}],[\"原则上他们是全球唯一的\",{\"1\":{\"205\":1}}],[\"原保机构向债权人代偿后\",{\"1\":{\"162\":1}}],[\"原理解释\",{\"0\":{\"741\":1}}],[\"原理区别\",{\"1\":{\"703\":1}}],[\"原理\",{\"1\":{\"217\":1,\"674\":1}}],[\"原理也是因为hash函数的不可预测\",{\"1\":{\"102\":1}}],[\"原理同上\",{\"1\":{\"102\":1}}],[\"聚合操作\",{\"1\":{\"527\":1}}],[\"聚合过秤\",{\"1\":{\"22\":1}}],[\"聚簇索引\",{\"1\":{\"102\":1,\"110\":1}}],[\"聚集索引\",{\"1\":{\"101\":1}}],[\"考虑这个字段是否应该移到较外层的类\",{\"1\":{\"921\":1}}],[\"考虑到成本和时间等因素\",{\"1\":{\"898\":1}}],[\"考虑\",{\"1\":{\"484\":1}}],[\"考虑在列上进行的比较类型\",{\"1\":{\"100\":1}}],[\"考虑某列中值的分布\",{\"1\":{\"100\":1}}],[\"应减少物理读\",{\"1\":{\"863\":1}}],[\"应同时加大这两个参数\",{\"1\":{\"651\":1}}],[\"应防止流量不可控制\",{\"1\":{\"651\":1}}],[\"应答\",{\"1\":{\"648\":1}}],[\"应使用有业务含义的自定义异常\",{\"1\":{\"413\":1}}],[\"应少于512字符\",{\"1\":{\"263\":1}}],[\"应用广泛\",{\"1\":{\"897\":1}}],[\"应用\",{\"0\":{\"783\":1}}],[\"应用层将数据传递给传输层的\",{\"1\":{\"639\":1}}],[\"应用程序运行\",{\"1\":{\"706\":1}}],[\"应用程序的\",{\"1\":{\"657\":1}}],[\"应用程序通过它来发送和接收数据\",{\"1\":{\"636\":1}}],[\"应用程序\",{\"1\":{\"563\":1}}],[\"应用程序需要直接通过\",{\"1\":{\"515\":1}}],[\"应用场景\",{\"1\":{\"448\":1,\"554\":1}}],[\"应用定制信息\",{\"1\":{\"414\":1}}],[\"应用基本信息配置\",{\"1\":{\"414\":1,\"415\":1,\"416\":1}}],[\"应用举例\",{\"1\":{\"207\":1}}],[\"应用代码\",{\"1\":{\"194\":1}}],[\"应当在扣除追偿费用后按风险分担比例进行分配\",{\"1\":{\"189\":1}}],[\"应当中止采购活动\",{\"1\":{\"188\":1}}],[\"应当结合业务的实际\",{\"1\":{\"141\":1}}],[\"应\",{\"1\":{\"100\":1}}],[\"应该为它们产生一个新对象\",{\"1\":{\"914\":1}}],[\"应该分解成更小的类\",{\"1\":{\"911\":1}}],[\"应该积极地分解函数\",{\"1\":{\"910\":1}}],[\"应该避免重构\",{\"1\":{\"908\":1}}],[\"应该调用对象的接口方法\",{\"1\":{\"906\":1}}],[\"应该予以清理及优化\",{\"1\":{\"156\":1}}],[\"应该指定一个前缀长度\",{\"1\":{\"100\":1}}],[\"应该是文件系统中块的若干倍\",{\"1\":{\"26\":1}}],[\"果有一个\",{\"1\":{\"100\":1}}],[\"重构可以帮助我们复审代码\",{\"1\":{\"907\":1}}],[\"重构技术就是以\",{\"1\":{\"900\":1}}],[\"重构第八步\",{\"0\":{\"906\":1}}],[\"重构第七步\",{\"0\":{\"905\":1}}],[\"重构第六步\",{\"0\":{\"904\":1}}],[\"重构第五步\",{\"0\":{\"903\":1}}],[\"重构第四步\",{\"0\":{\"902\":1}}],[\"重构第三步\",{\"0\":{\"901\":1}}],[\"重构第二步\",{\"0\":{\"900\":1}}],[\"重构第一步\",{\"0\":{\"899\":1}}],[\"重构就能够最大限度的避免这样一种现象\",{\"1\":{\"898\":1}}],[\"重构的前提是要有一个可靠的测试\",{\"1\":{\"899\":1}}],[\"重构的重要性要从软件的生命周期说起\",{\"1\":{\"898\":1}}],[\"重构的目的就是为了保证软件满足以上特性\",{\"1\":{\"898\":1}}],[\"重构\",{\"0\":{\"898\":1},\"1\":{\"898\":1}}],[\"重放攻击可以是登录认证\",{\"1\":{\"897\":1}}],[\"重放攻击可以由发起者\",{\"1\":{\"897\":1}}],[\"重放攻击在任何网络通过程中都可能发生\",{\"1\":{\"897\":1}}],[\"重放攻击\",{\"0\":{\"897\":1},\"1\":{\"897\":1}}],[\"重做日志文件\",{\"1\":{\"853\":1}}],[\"重入性\",{\"1\":{\"819\":1}}],[\"重入次数加1\",{\"1\":{\"219\":1}}],[\"重入次数的最大限制为int的最大值\",{\"1\":{\"214\":1}}],[\"重排序分三种类型\",{\"1\":{\"809\":1}}],[\"重复的代码就接踵而来\",{\"1\":{\"910\":1}}],[\"重复的代码是坏味道中出现频率最高的情形非其莫属\",{\"1\":{\"909\":1}}],[\"重复利用已经创建的线程降低线程创建和销毁造成的资源消耗\",{\"1\":{\"752\":1}}],[\"重复值的\",{\"1\":{\"100\":1}}],[\"重量级锁\",{\"1\":{\"723\":1}}],[\"重定向\",{\"1\":{\"515\":1}}],[\"重叠\",{\"1\":{\"454\":1}}],[\"重试当前实例的次数\",{\"1\":{\"403\":1}}],[\"重载系统服务\",{\"0\":{\"354\":1},\"1\":{\"352\":1}}],[\"重新输入新的\",{\"1\":{\"831\":1}}],[\"重新部署\",{\"1\":{\"566\":1}}],[\"重新设置数据同步\",{\"1\":{\"342\":1}}],[\"重新登录\",{\"1\":{\"322\":1}}],[\"重新同步\",{\"0\":{\"155\":2},\"1\":{\"154\":4,\"155\":3}}],[\"重启数据库\",{\"1\":{\"865\":1}}],[\"重启\",{\"1\":{\"389\":1}}],[\"重启查看\",{\"1\":{\"380\":1}}],[\"重启服务器\",{\"1\":{\"343\":1}}],[\"重启从库mysql服务\",{\"1\":{\"325\":1}}],[\"重启主库mysql服务\",{\"1\":{\"323\":1}}],[\"重启logstash\",{\"0\":{\"281\":1}}],[\"重启docker\",{\"0\":{\"237\":1}}],[\"重命名等操作\",{\"1\":{\"16\":1}}],[\"句中指定的列\",{\"1\":{\"100\":1}}],[\"量和磁盘i\",{\"1\":{\"97\":1}}],[\"系\",{\"1\":{\"96\":1}}],[\"系统发展到一定阶段后\",{\"1\":{\"898\":1}}],[\"系统在完成预定应该完成的功能时令人满意的程度\",{\"1\":{\"898\":1}}],[\"系统需要的计算资源的多少\",{\"1\":{\"898\":1}}],[\"系统能够控制\",{\"1\":{\"898\":1}}],[\"系统能够对缺陷进行侦测\",{\"1\":{\"704\":1}}],[\"系统能做出适当响应的程度\",{\"1\":{\"898\":1}}],[\"系统满足规格说明和用户目标的程度\",{\"1\":{\"898\":1}}],[\"系统设计人员毕竟不是先知先觉的神仙\",{\"1\":{\"898\":1}}],[\"系统设计人员对即将着手的项目往往只能从大方向予以把控\",{\"1\":{\"898\":1}}],[\"系统权限\",{\"0\":{\"884\":1}}],[\"系统下可以使用单引号\",{\"1\":{\"883\":1}}],[\"系统支持的口令策略有\",{\"1\":{\"874\":1}}],[\"系统口令策略\",{\"0\":{\"874\":1}}],[\"系统安全管理员\",{\"1\":{\"873\":1}}],[\"系统审计管理员\",{\"1\":{\"873\":1}}],[\"系统管理员\",{\"1\":{\"873\":1}}],[\"系统内置用户\",{\"1\":{\"873\":1}}],[\"系统内核缓冲i\",{\"1\":{\"795\":1}}],[\"系统表空间\",{\"1\":{\"864\":1}}],[\"系统级\",{\"1\":{\"854\":1}}],[\"系统处于\",{\"1\":{\"843\":2}}],[\"系统缓存大小\",{\"1\":{\"837\":1}}],[\"系统已经有一个由处理者对象组成的链\",{\"1\":{\"825\":1}}],[\"系统仍能执行规定的一组程序\",{\"1\":{\"704\":1}}],[\"系统结构\",{\"1\":{\"684\":1}}],[\"系统依赖范围\",{\"1\":{\"593\":1}}],[\"系统类加载器\",{\"1\":{\"558\":1}}],[\"系统异常\",{\"1\":{\"419\":1}}],[\"系统如果还能正常工作\",{\"1\":{\"195\":1}}],[\"系统调用需要导致程序从用户态切换到内核态\",{\"1\":{\"751\":1}}],[\"系统调用暂停\",{\"1\":{\"149\":1}}],[\"系统调用\",{\"1\":{\"148\":3,\"149\":1}}],[\"系统io压力增大\",{\"1\":{\"74\":1}}],[\"系统得到map方法输出的\",{\"1\":{\"36\":1}}],[\"系统只分配一个split\",{\"1\":{\"34\":1}}],[\"系统会认为是垃圾而被回收\",{\"1\":{\"683\":1}}],[\"系统会将分割好的\",{\"1\":{\"35\":1}}],[\"系统会逐行读取文件的数据\",{\"1\":{\"34\":1}}],[\"系统会退出安全模式\",{\"1\":{\"19\":1}}],[\"环真正的序列\",{\"1\":{\"472\":1}}],[\"环境变量的值\",{\"1\":{\"263\":1}}],[\"环境变量名称\",{\"1\":{\"263\":1}}],[\"环境\",{\"0\":{\"259\":1}}],[\"环境十分适合\",{\"1\":{\"93\":1}}],[\"环形缓冲区填满后\",{\"1\":{\"42\":1}}],[\"具体的数据数据\",{\"1\":{\"652\":1}}],[\"具体的实现稍微复杂些\",{\"1\":{\"220\":1}}],[\"具体原因\",{\"1\":{\"626\":1}}],[\"具体来说就是\",{\"1\":{\"639\":1}}],[\"具体来说\",{\"1\":{\"558\":1,\"563\":1}}],[\"具体操作步骤如下\",{\"1\":{\"372\":1}}],[\"具体操作为\",{\"1\":{\"230\":1}}],[\"具体命令如下\",{\"1\":{\"251\":1}}],[\"具体以各方签订的合作协议内容为准\",{\"1\":{\"189\":1}}],[\"具体比例会根据政策和市场情况调整\",{\"1\":{\"167\":1}}],[\"具体而言\",{\"1\":{\"167\":1}}],[\"具体业务模式\",{\"0\":{\"165\":1}}],[\"具体过程\",{\"1\":{\"14\":1}}],[\"具有良好架构的\",{\"1\":{\"898\":1}}],[\"具有查询\",{\"1\":{\"888\":2}}],[\"具有在当前模式下对象定义权限\",{\"1\":{\"888\":1}}],[\"具有对当前模式下对象的\",{\"1\":{\"888\":1}}],[\"具有对应关系\",{\"1\":{\"426\":1}}],[\"具有几乎所有权限\",{\"1\":{\"888\":1}}],[\"具有强制访问控制等权限\",{\"1\":{\"873\":1,\"888\":1}}],[\"具有强烈的独占和排他性\",{\"1\":{\"725\":1}}],[\"具有审计相关权限\",{\"1\":{\"873\":1,\"888\":1}}],[\"具有更佳的\",{\"1\":{\"140\":2}}],[\"具有众多特性\",{\"1\":{\"93\":1}}],[\"插件\",{\"1\":{\"709\":1}}],[\"插件或者项目构建的输出\",{\"1\":{\"599\":1}}],[\"插件式存储引擎\",{\"1\":{\"93\":1}}],[\"插入数据时不会引发页分裂\",{\"1\":{\"85\":1}}],[\"插入数据\",{\"1\":{\"13\":4}}],[\"获得响应结果\",{\"1\":{\"518\":1}}],[\"获得锁后\",{\"1\":{\"214\":1}}],[\"获得值\",{\"1\":{\"134\":1}}],[\"获得更快的速度\",{\"1\":{\"91\":1}}],[\"获取成功并支持重入\",{\"1\":{\"820\":1}}],[\"获取写锁\",{\"1\":{\"820\":1}}],[\"获取的次数\",{\"1\":{\"820\":1}}],[\"获取的配置信息是user\",{\"1\":{\"297\":1}}],[\"获取的配置信息是\",{\"1\":{\"297\":1}}],[\"获取读锁再释放写锁的次序\",{\"1\":{\"819\":1,\"824\":1}}],[\"获取数据流中的数据\",{\"1\":{\"747\":1}}],[\"获取消息m的数字摘要hm\",{\"1\":{\"738\":1}}],[\"获取属性的类型\",{\"1\":{\"733\":1}}],[\"获取不到就自动到队尾等待\",{\"1\":{\"674\":1}}],[\"获取令牌尝试进入停车场\",{\"1\":{\"554\":1}}],[\"获取元素的线程会等待队列变为非空\",{\"1\":{\"530\":1}}],[\"获取总长度\",{\"1\":{\"530\":1}}],[\"获取值\",{\"1\":{\"527\":1}}],[\"获取当前线程对应的节点\",{\"1\":{\"929\":1}}],[\"获取当前时间日期\",{\"1\":{\"527\":1}}],[\"获取当前的用户\",{\"1\":{\"64\":2}}],[\"获取服务器某月某天\",{\"1\":{\"527\":1}}],[\"获取服务器当前日期\",{\"1\":{\"527\":1}}],[\"获取服务器当前的日期时间\",{\"1\":{\"527\":1}}],[\"获取服务实例列表\",{\"1\":{\"410\":1,\"411\":1}}],[\"获取空字符串的数量\",{\"1\":{\"527\":1}}],[\"获取对应的平方数\",{\"1\":{\"527\":1}}],[\"获取所有的属性值\",{\"1\":{\"733\":1}}],[\"获取所有的属性\",{\"1\":{\"523\":1}}],[\"获取所有键值对\",{\"1\":{\"133\":1}}],[\"获取返回结果\",{\"1\":{\"518\":1}}],[\"获取connection\",{\"1\":{\"518\":2}}],[\"获取异步线程执行结果\",{\"1\":{\"475\":1}}],[\"获取结果\",{\"1\":{\"475\":2}}],[\"获取时业务还未处理完\",{\"1\":{\"475\":1}}],[\"获取这个event对象用于消费\",{\"1\":{\"472\":1}}],[\"获取内部序列组中最小的序列值\",{\"1\":{\"472\":1}}],[\"获取密码\",{\"1\":{\"321\":1}}],[\"获取配置中心配置内容\",{\"1\":{\"297\":1}}],[\"获取配置文件内容\",{\"1\":{\"297\":1}}],[\"获取镜像的策略\",{\"1\":{\"263\":1}}],[\"获取锁的线程一直处于活跃状态\",{\"1\":{\"811\":1}}],[\"获取锁后的业务代码也可能十分复杂\",{\"1\":{\"220\":1}}],[\"获取锁失败\",{\"1\":{\"214\":1}}],[\"获取锁成功\",{\"1\":{\"214\":2}}],[\"获取最后一次成功落地\",{\"1\":{\"145\":1}}],[\"获取有序集合中分值介于min和max之间的所有成员\",{\"1\":{\"138\":1}}],[\"获取散列包含的所有值\",{\"1\":{\"137\":1}}],[\"获取散列包含的所有键值对\",{\"1\":{\"137\":1}}],[\"获取散列包含的所有键\",{\"1\":{\"137\":2}}],[\"获取\",{\"1\":{\"133\":3,\"317\":2,\"820\":2}}],[\"获取某个节点的前置节点和后置节点的复杂度都是\",{\"1\":{\"119\":1}}],[\"获取指定路径前缀的bucket内所有文件名\",{\"1\":{\"63\":1}}],[\"获取指定bucket内所有文件名\",{\"1\":{\"63\":1}}],[\"获取文件的url\",{\"1\":{\"63\":1}}],[\"获取带签名认证文件的url\",{\"1\":{\"63\":1}}],[\"看起来貌似没什么问题\",{\"1\":{\"924\":1}}],[\"看是有ip地址的缓存\",{\"1\":{\"222\":1}}],[\"看建表语法\",{\"0\":{\"89\":1}}],[\"看看文件是否存在\",{\"1\":{\"14\":1}}],[\"引发了其他的问题\",{\"1\":{\"651\":1}}],[\"引发页分裂\",{\"1\":{\"86\":1}}],[\"引言\",{\"1\":{\"650\":1}}],[\"引用对象头大小12字节\",{\"1\":{\"722\":1}}],[\"引用对象时\",{\"1\":{\"558\":1}}],[\"引用同一地址的cache\",{\"1\":{\"663\":1}}],[\"引用链法\",{\"1\":{\"558\":1}}],[\"引用失效时\",{\"1\":{\"558\":1}}],[\"引用计数法\",{\"1\":{\"558\":1}}],[\"引用pod定义的共享存储卷的名称\",{\"1\":{\"263\":1}}],[\"引用id为n的子查询结果物化得到的表\",{\"1\":{\"113\":1}}],[\"引用id为n的结果派生出的表\",{\"1\":{\"113\":1}}],[\"引用id为m和n\",{\"1\":{\"113\":1}}],[\"引自\",{\"1\":{\"180\":1}}],[\"引领构成了再担保公司为支持中小微企业融资\",{\"1\":{\"166\":1}}],[\"引领还体现在通过示范项目或最佳实践\",{\"1\":{\"166\":1}}],[\"引领指的是再担保公司在推动行业发展和创新方面的作用\",{\"1\":{\"166\":1}}],[\"引领\",{\"1\":{\"166\":1}}],[\"引入state模式\",{\"1\":{\"906\":1}}],[\"引入bytebuddy并打入到agent包中\",{\"1\":{\"715\":1}}],[\"引入\",{\"1\":{\"161\":1}}],[\"引入依赖\",{\"0\":{\"391\":1,\"395\":1,\"434\":1,\"516\":1,\"611\":1},\"1\":{\"63\":1}}],[\"倘若主键变更会引发很多麻烦\",{\"1\":{\"86\":1}}],[\"性能监视工具\",{\"0\":{\"849\":1}}],[\"性能下降明显\",{\"1\":{\"813\":1}}],[\"性能区别\",{\"1\":{\"703\":1}}],[\"性能会较低\",{\"1\":{\"433\":1}}],[\"性能最好\",{\"1\":{\"222\":1}}],[\"性能上不如redis方式\",{\"1\":{\"214\":1}}],[\"性能非常高\",{\"1\":{\"209\":1}}],[\"性能的下降\",{\"1\":{\"158\":1}}],[\"性能将显著下降\",{\"1\":{\"157\":1}}],[\"性能\",{\"1\":{\"140\":1,\"898\":1}}],[\"性能不可预测\",{\"1\":{\"102\":1}}],[\"性能更高\",{\"1\":{\"85\":1}}],[\"性能也会下降\",{\"1\":{\"82\":1}}],[\"自旋锁应用\",{\"0\":{\"813\":1}}],[\"自旋锁不会使线程状态发生切换\",{\"1\":{\"812\":1}}],[\"自旋锁的优点\",{\"0\":{\"812\":1}}],[\"自旋锁概念\",{\"0\":{\"811\":1}}],[\"自旋锁\",{\"0\":{\"810\":1},\"1\":{\"703\":1}}],[\"自旋等待\",{\"1\":{\"472\":1}}],[\"自动执行检查点\",{\"1\":{\"863\":1}}],[\"自动化构建过程\",{\"1\":{\"569\":1}}],[\"自动提交的时间间隔\",{\"1\":{\"435\":1}}],[\"自动\",{\"1\":{\"421\":2}}],[\"自动解箱抛\",{\"1\":{\"413\":1}}],[\"自动拆箱有可能产生\",{\"1\":{\"413\":1}}],[\"自动识别数据库类型\",{\"1\":{\"64\":1}}],[\"自定义表空间支持重命名\",{\"1\":{\"867\":1}}],[\"自定义manifest\",{\"1\":{\"707\":1,\"715\":1}}],[\"自定义\",{\"1\":{\"422\":4}}],[\"自定义验证异常\",{\"1\":{\"419\":2}}],[\"自定义了一个标记注解\",{\"1\":{\"408\":1}}],[\"自定义注释列表\",{\"1\":{\"263\":1}}],[\"自定义标签名字\",{\"1\":{\"263\":1}}],[\"自定义标签\",{\"1\":{\"263\":1}}],[\"自定义端口\",{\"1\":{\"260\":1}}],[\"自定义sql语句等\",{\"1\":{\"132\":1}}],[\"自己的理解\",{\"1\":{\"683\":1}}],[\"自己已经持有锁\",{\"1\":{\"214\":1}}],[\"自己才能获得锁\",{\"1\":{\"214\":1}}],[\"自由\",{\"1\":{\"155\":1}}],[\"自\",{\"1\":{\"155\":1}}],[\"自增序列在低位\",{\"1\":{\"206\":1}}],[\"自增\",{\"1\":{\"85\":1}}],[\"项目中经常会出现这样的情况\",{\"1\":{\"918\":1}}],[\"项目中java类的包都应该基于项目的group和artifactid\",{\"1\":{\"580\":1}}],[\"项目接近最后期限时\",{\"1\":{\"908\":1}}],[\"项目打包过程\",{\"0\":{\"579\":1}}],[\"项目负责人在gitlab上新建一个项目\",{\"1\":{\"488\":1}}],[\"项目\",{\"1\":{\"417\":1}}],[\"项目完整地址\",{\"1\":{\"58\":1}}],[\"项看到\",{\"1\":{\"82\":1}}],[\"都应该让这个类庄严赴义吧\",{\"1\":{\"918\":1}}],[\"都得有人去理解它\",{\"1\":{\"918\":1}}],[\"都必须在许多不同的类内做出许多小修改\",{\"1\":{\"912\":1}}],[\"都能够看到\",{\"1\":{\"913\":1}}],[\"都能够命中就是索引覆盖\",{\"1\":{\"104\":1}}],[\"都能保存十个中文\",{\"1\":{\"836\":1}}],[\"都需要内核拷贝动作\",{\"1\":{\"800\":1,\"803\":1}}],[\"都需要进行数行相同的参数校验操作\",{\"1\":{\"413\":1}}],[\"都运行完了\",{\"1\":{\"776\":1}}],[\"都会是同一个线程进入同一块同步代码块的\",{\"1\":{\"673\":1}}],[\"都会以处理二进制的方式来处理\",{\"1\":{\"623\":1}}],[\"都会产生一个新的对象\",{\"1\":{\"445\":1}}],[\"都保存了字符串值\",{\"1\":{\"616\":1}}],[\"都9102年了\",{\"1\":{\"527\":1}}],[\"都不会影响kafka的可用性\",{\"1\":{\"432\":1}}],[\"都被该\",{\"1\":{\"419\":2}}],[\"都是linux\",{\"1\":{\"795\":1}}],[\"都是基于aqs来构建\",{\"1\":{\"723\":1}}],[\"都是通过用一个volitile\",{\"1\":{\"723\":1}}],[\"都是通过停机时间来计算的\",{\"1\":{\"194\":1}}],[\"都是试图在用户态就把加锁问题解决\",{\"1\":{\"703\":1}}],[\"都是可重入锁\",{\"1\":{\"702\":1}}],[\"都是对对象进行加锁\",{\"1\":{\"671\":1}}],[\"都是二进制安全的\",{\"1\":{\"623\":1,\"624\":1}}],[\"都是继承了collection接口\",{\"1\":{\"528\":1}}],[\"都是在可用性和一致性之间舍弃了一致性而选择可用性\",{\"1\":{\"201\":1}}],[\"都进行一次\",{\"1\":{\"148\":1}}],[\"都可以将数据库启动到\",{\"1\":{\"845\":1}}],[\"都可以称为构件\",{\"1\":{\"599\":1}}],[\"都可以根据某种比较规则对一系列元素进行有序的排列\",{\"1\":{\"139\":1}}],[\"都可以建立联合主键或联合唯一索引\",{\"1\":{\"110\":2}}],[\"都可以进行第一次索引创建或者使用\",{\"1\":{\"28\":1}}],[\"都处于一致性状态\",{\"1\":{\"105\":1}}],[\"都使用指向数\",{\"1\":{\"97\":1}}],[\"都要好\",{\"1\":{\"82\":1}}],[\"必将影响其他操作\",{\"1\":{\"727\":1}}],[\"必然行为\",{\"1\":{\"486\":1}}],[\"必然会导致代码的重复\",{\"1\":{\"413\":1}}],[\"必填\",{\"1\":{\"414\":3}}],[\"必要时执行数据更新页刷盘\",{\"1\":{\"863\":1}}],[\"必要时抽取共性方法\",{\"1\":{\"413\":1}}],[\"必要时可申请使用\",{\"1\":{\"82\":1}}],[\"必选\",{\"1\":{\"263\":9}}],[\"必须也为另一个类增加一个子类\",{\"1\":{\"917\":1}}],[\"必须不断的修改原有的功能\",{\"1\":{\"898\":1}}],[\"必须要经历下面\",{\"1\":{\"809\":1}}],[\"必须指定bean名字不然就默认加载到其他的配置\",{\"1\":{\"779\":1}}],[\"必须指定事务应该如何传播\",{\"1\":{\"72\":1}}],[\"必须依附在一个\",{\"1\":{\"706\":1}}],[\"必须按照申请锁的时间顺序获得锁\",{\"1\":{\"703\":1}}],[\"必须保持同一时间只能有一个连接的存在等这种单线程操作\",{\"1\":{\"683\":1}}],[\"必须保证代理服务器的通畅\",{\"1\":{\"573\":1}}],[\"必须从内存中重新拉取数据\",{\"1\":{\"665\":1}}],[\"必须显示的依赖文件的路径\",{\"1\":{\"593\":1}}],[\"必须提供一个具体的git版本号\",{\"1\":{\"503\":1}}],[\"必须考虑到远程调用失败\",{\"1\":{\"413\":1}}],[\"必须添加注释充分\",{\"1\":{\"413\":1}}],[\"必须是完全匹配\",{\"1\":{\"413\":1}}],[\"必须是当前代理类的实现类\",{\"1\":{\"398\":1,\"416\":1}}],[\"必须处理异常\",{\"1\":{\"413\":1}}],[\"必须为0\",{\"1\":{\"402\":1}}],[\"必须手动down掉\",{\"1\":{\"301\":1}}],[\"必须说明的是\",{\"1\":{\"161\":1}}],[\"必须使用\",{\"1\":{\"161\":1}}],[\"必须使用磁盘的临时表\",{\"1\":{\"87\":1}}],[\"必须有where\",{\"1\":{\"29\":1}}],[\"记得处理\",{\"1\":{\"82\":1}}],[\"记录机制实现\",{\"1\":{\"730\":1}}],[\"记录一个bean初始化事件\",{\"0\":{\"388\":1}}],[\"记录\",{\"1\":{\"250\":1,\"616\":2}}],[\"记录是用来指定主机名\",{\"1\":{\"222\":1}}],[\"记录租约\",{\"1\":{\"214\":1}}],[\"记录日志\",{\"1\":{\"109\":1}}],[\"记录被操作的每一行\",{\"1\":{\"74\":1}}],[\"记录到cache中\",{\"1\":{\"74\":1}}],[\"记录分享学习平时学习\",{\"1\":{\"1\":1}}],[\"越来越难维护\",{\"1\":{\"898\":1}}],[\"越来越多的\",{\"1\":{\"515\":1}}],[\"越看越容易不明白了\",{\"1\":{\"683\":1}}],[\"越适合创建索引\",{\"1\":{\"82\":1}}],[\"越接近\",{\"1\":{\"82\":1}}],[\"设备执行内存的读\",{\"1\":{\"809\":1}}],[\"设想一下\",{\"1\":{\"199\":1}}],[\"设立担保代偿补偿备付金账户\",{\"1\":{\"189\":1}}],[\"设计一个独立与目标系统的子系统\",{\"1\":{\"704\":1}}],[\"设计成cp的系统其实也不少\",{\"1\":{\"197\":1}}],[\"设计之初\",{\"1\":{\"155\":1}}],[\"设计sum等统计数据时候\",{\"1\":{\"82\":1}}],[\"设置的值\",{\"1\":{\"874\":1}}],[\"设置主备模式\",{\"1\":{\"843\":1}}],[\"设置时区\",{\"1\":{\"837\":1}}],[\"设置sysauditor密码\",{\"1\":{\"837\":1}}],[\"设置sysdba密码\",{\"1\":{\"837\":1}}],[\"设置stable镜像仓库\",{\"0\":{\"226\":1}}],[\"设置文件打开数\",{\"1\":{\"834\":1}}],[\"设置参考如下\",{\"1\":{\"834\":1}}],[\"设置创建线程的工厂\",{\"1\":{\"760\":1}}],[\"设置根节点\",{\"1\":{\"734\":1}}],[\"设置输入路径\",{\"1\":{\"652\":1}}],[\"设置程序的输出的value值的类型\",{\"1\":{\"652\":1}}],[\"设置\",{\"1\":{\"652\":3,\"834\":1}}],[\"设置环境变量\",{\"1\":{\"651\":1}}],[\"设置java\",{\"1\":{\"651\":1}}],[\"设置为0表示永不超时\",{\"1\":{\"651\":1}}],[\"设置为1\",{\"1\":{\"650\":1}}],[\"设置为客户的isn\",{\"1\":{\"648\":1}}],[\"设置为只读\",{\"1\":{\"79\":1}}],[\"设置和更新\",{\"1\":{\"618\":1}}],[\"设置maven\",{\"0\":{\"574\":1}}],[\"设置http代理\",{\"0\":{\"573\":1}}],[\"设置hive\",{\"1\":{\"22\":1}}],[\"设置最大等待时间\",{\"1\":{\"555\":1}}],[\"设置最大单页限制数量\",{\"1\":{\"64\":1}}],[\"设置成一个大网段就有一个难点\",{\"1\":{\"526\":1}}],[\"设置成128m\",{\"1\":{\"74\":1}}],[\"设置到请求的http对象中\",{\"1\":{\"518\":1}}],[\"设置到请求头到httprequestbase对象中\",{\"1\":{\"518\":1}}],[\"设置请求头\",{\"1\":{\"518\":2}}],[\"设置从connect\",{\"1\":{\"518\":2}}],[\"设置连接超时时间\",{\"1\":{\"518\":3}}],[\"设置git端上的用户名和用户邮箱\",{\"1\":{\"495\":1}}],[\"设置gzip压缩等级\",{\"1\":{\"317\":1}}],[\"设置gzip申请内存的大小\",{\"1\":{\"317\":1}}],[\"设置并发数\",{\"1\":{\"435\":1}}],[\"设置生产者内存缓冲区的大小\",{\"1\":{\"435\":1}}],[\"设置属性值\",{\"1\":{\"401\":1}}],[\"设置可以自动挂载\",{\"0\":{\"373\":1}}],[\"设置同步信息\",{\"1\":{\"342\":1}}],[\"设置安装目录和data目录\",{\"1\":{\"321\":1}}],[\"设置压缩比率\",{\"1\":{\"317\":1}}],[\"设置压缩缓冲区大小\",{\"1\":{\"317\":1}}],[\"设置需要压缩的mime类型\",{\"1\":{\"317\":1}}],[\"设置允许压缩的页面最小字节数\",{\"1\":{\"317\":1}}],[\"设置允许压缩的页面最小字节\",{\"1\":{\"317\":1}}],[\"设置nodeselector表示将该pod调度到包含这个label的node上\",{\"1\":{\"263\":1}}],[\"设置开机自启动\",{\"1\":{\"229\":1}}],[\"设置30秒的锁\",{\"1\":{\"213\":1}}],[\"设置值\",{\"1\":{\"134\":1}}],[\"设置引擎\",{\"1\":{\"92\":1}}],[\"设置client连接mysql时的字符集\",{\"1\":{\"74\":1}}],[\"设置数据库类型为mysql\",{\"1\":{\"64\":1}}],[\"设置分区的方式\",{\"1\":{\"22\":1}}],[\"设置键\",{\"1\":{\"21\":1}}],[\"基础架构图\",{\"0\":{\"695\":1}}],[\"基础使用方式为给resttemplate增加\",{\"1\":{\"408\":1}}],[\"基金的存在也可能吸引更多的社会资本参与到担保行业中\",{\"1\":{\"167\":1}}],[\"基本类型则是构成结构类型的积木块\",{\"1\":{\"915\":1}}],[\"基本类型偏执\",{\"0\":{\"915\":1}}],[\"基本思想是\",{\"1\":{\"684\":1}}],[\"基本表\",{\"1\":{\"514\":1}}],[\"基本操作\",{\"0\":{\"498\":1}}],[\"基本和内存速度一致\",{\"1\":{\"433\":1}}],[\"基本上\",{\"1\":{\"528\":1}}],[\"基本上的作用就是管理追踪序列和关联当前序列\",{\"1\":{\"472\":1}}],[\"基本上就跑了一个后台程序docker\",{\"1\":{\"234\":1}}],[\"基本上选择tinyint就可以\",{\"1\":{\"82\":1}}],[\"基本不消耗额外的系统资源\",{\"1\":{\"232\":1}}],[\"基本特性\",{\"0\":{\"139\":1}}],[\"基于其增量的备份也将无法正常使用\",{\"1\":{\"893\":1}}],[\"基于链表的阻塞队列\",{\"1\":{\"759\":1}}],[\"基于数组的有界阻塞队列\",{\"1\":{\"759\":1}}],[\"基于javaagent的全链路监控\",{\"0\":{\"706\":1,\"713\":1,\"720\":1},\"1\":{\"720\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"642\":1}}],[\"基于不同绑定地址\",{\"1\":{\"612\":1}}],[\"基于事件驱动的网络应用框架\",{\"1\":{\"607\":1}}],[\"基于时间的调度队列\",{\"1\":{\"530\":1}}],[\"基于时间的uuid通过计算当前时间戳\",{\"1\":{\"208\":1}}],[\"基于时间的uuid\",{\"1\":{\"208\":1}}],[\"基于spring\",{\"1\":{\"412\":1}}],[\"基于alibaba\",{\"1\":{\"394\":1,\"416\":1}}],[\"基于docker\",{\"1\":{\"250\":1}}],[\"基于网宿智能dns\",{\"1\":{\"222\":1}}],[\"基于这个想法\",{\"1\":{\"219\":1}}],[\"基于zookeeper分布式锁\",{\"1\":{\"214\":2}}],[\"基于etcd分布式锁\",{\"1\":{\"214\":1}}],[\"基于etcd实现分布式锁分析\",{\"0\":{\"214\":1},\"1\":{\"214\":1}}],[\"基于mac地址生成uuid的算法可能会造成mac地址泄露\",{\"1\":{\"210\":1}}],[\"基于名字的uuid通过计算名字和名字空间的md5散列值得到\",{\"1\":{\"208\":1}}],[\"基于名字的uuid\",{\"1\":{\"208\":2}}],[\"基于业务\",{\"1\":{\"161\":1}}],[\"基于业务进行优化\",{\"0\":{\"161\":1}}],[\"基于\",{\"1\":{\"140\":1,\"157\":1,\"161\":1,\"421\":1,\"610\":1}}],[\"基于特定的时间间隔将数据\",{\"1\":{\"140\":1}}],[\"基于一个\",{\"1\":{\"20\":1}}],[\"基于restful\",{\"1\":{\"4\":1}}],[\"状态数据库不能对外提供服务\",{\"1\":{\"843\":1}}],[\"状态下不能读写数据\",{\"1\":{\"843\":1}}],[\"状态下\",{\"1\":{\"843\":1}}],[\"状态是\",{\"1\":{\"673\":1}}],[\"状态变成m\",{\"1\":{\"663\":1}}],[\"状态码再发送\",{\"1\":{\"486\":1}}],[\"状态码解析\",{\"1\":{\"478\":1}}],[\"状态码\",{\"1\":{\"478\":1}}],[\"状态\",{\"1\":{\"389\":1,\"648\":4,\"649\":5,\"663\":1,\"843\":4,\"845\":1}}],[\"状态status字段\",{\"1\":{\"82\":1}}],[\"状态为\",{\"1\":{\"3\":1}}],[\"物理还原是备份的逆过程\",{\"1\":{\"889\":1}}],[\"物理备份分为完全备份\",{\"1\":{\"889\":1}}],[\"物理备份是拷贝有效的数据页\",{\"1\":{\"889\":1}}],[\"物理读\",{\"1\":{\"859\":1}}],[\"物理文件包含\",{\"1\":{\"853\":1}}],[\"物理机或虚机\",{\"1\":{\"234\":1}}],[\"物理上的距离又比较近\",{\"1\":{\"222\":1}}],[\"物理存储角度\",{\"1\":{\"101\":1}}],[\"物理存储上仅比timestamp\",{\"1\":{\"82\":1}}],[\"物联网传感器数据\",{\"1\":{\"50\":1}}],[\"让另一个类来为它们传递相思情\",{\"1\":{\"923\":1}}],[\"让一个\",{\"1\":{\"917\":1}}],[\"让一组线程到达一个屏障\",{\"1\":{\"552\":1}}],[\"让函数能从中获得自己的东西就行\",{\"1\":{\"910\":1}}],[\"让它们共同使用新类\",{\"1\":{\"923\":1}}],[\"让它们坦荡地使用这个新类\",{\"1\":{\"923\":1}}],[\"让它现实一些\",{\"1\":{\"919\":1}}],[\"让它告诉我们是否引入bug\",{\"1\":{\"899\":1}}],[\"让它去做具体工作\",{\"1\":{\"751\":1}}],[\"让单个进程可以监视多个文件描述符\",{\"1\":{\"795\":1}}],[\"让读者能够将数据源和\",{\"1\":{\"785\":1}}],[\"让苏珊用假的鲍勃公钥进行解密\",{\"1\":{\"705\":1}}],[\"让线程不在并发\",{\"1\":{\"626\":1}}],[\"让我们可以在有需要时\",{\"1\":{\"622\":1}}],[\"让我们放一些代码到discardserverhandler类的channelread\",{\"1\":{\"613\":1}}],[\"让我们定义一个只执行一个异步任务的方法\",{\"1\":{\"475\":1}}],[\"让所有存活的对象都向一端移动\",{\"1\":{\"557\":1}}],[\"让出cpu资源这个策略会100\",{\"1\":{\"472\":1}}],[\"让出cpu资源\",{\"1\":{\"471\":1}}],[\"让生产者通过它来写入\",{\"1\":{\"454\":1}}],[\"让性能变得更好\",{\"1\":{\"433\":1}}],[\"让你逐步关闭应用\",{\"1\":{\"418\":1}}],[\"让日志收集程序能够读取到\",{\"1\":{\"265\":1}}],[\"让给定键在指定的毫秒数之后过期\",{\"1\":{\"139\":1}}],[\"让给定键在指定的秒数之后过期\",{\"1\":{\"139\":1}}],[\"让\",{\"1\":{\"82\":1,\"458\":3}}],[\"日\",{\"1\":{\"527\":1}}],[\"日本是\",{\"1\":{\"222\":1}}],[\"日期版本号\",{\"1\":{\"605\":1}}],[\"日期可以选择使用datetime\",{\"1\":{\"82\":1}}],[\"日期时间\",{\"1\":{\"82\":1}}],[\"日志进行并行的故障恢复\",{\"1\":{\"862\":1}}],[\"日志重做线程根据\",{\"1\":{\"862\":1}}],[\"日志重做线程\",{\"0\":{\"862\":1}}],[\"日志的归档\",{\"1\":{\"861\":1,\"868\":1}}],[\"日志的刷盘\",{\"1\":{\"860\":1}}],[\"日志归档线程\",{\"0\":{\"861\":1}}],[\"日志写入到日志文\",{\"1\":{\"860\":1}}],[\"日志刷新线程将日志缓冲区中的数据写入联机日志文件\",{\"1\":{\"863\":1}}],[\"日志刷新线程\",{\"0\":{\"860\":1}}],[\"日志分段存储\",{\"1\":{\"433\":1}}],[\"日志收集\",{\"1\":{\"428\":1}}],[\"日志收集方案设计图\",{\"1\":{\"265\":1}}],[\"日志自定义\",{\"1\":{\"305\":1}}],[\"日志定义等绝大多数功能和第三方模块的配置\",{\"1\":{\"305\":1}}],[\"日志存放路径\",{\"1\":{\"305\":1}}],[\"日志设置\",{\"1\":{\"74\":1}}],[\"日志文件路径\",{\"1\":{\"837\":1}}],[\"日志文件\",{\"1\":{\"21\":1}}],[\"金钱\",{\"1\":{\"82\":1}}],[\"排队希望教给mysql引擎去解决\",{\"1\":{\"683\":1}}],[\"排队现象\",{\"1\":{\"82\":1}}],[\"排除依赖\",{\"0\":{\"595\":1}}],[\"排序区和\",{\"1\":{\"855\":1}}],[\"排序区\",{\"1\":{\"855\":2}}],[\"排序之比较器comparator<t>\",{\"0\":{\"735\":1}}],[\"排序之比较器comparable<t>\",{\"0\":{\"734\":1}}],[\"排序方便\",{\"1\":{\"206\":1}}],[\"排序不能使用内存临时表\",{\"1\":{\"87\":1}}],[\"排序\",{\"1\":{\"82\":1,\"735\":2}}],[\"排序与合并处理\",{\"0\":{\"36\":1}}],[\"够用的原则\",{\"1\":{\"82\":1}}],[\"代入函数后若能得到包含改关键字的记录在表中的地址\",{\"1\":{\"506\":1}}],[\"代价就是舍弃系统的可用性\",{\"1\":{\"197\":1}}],[\"代理机构和金融机构提供供应商担保\",{\"1\":{\"188\":1}}],[\"代表可以在文件后面追加内容\",{\"1\":{\"539\":1}}],[\"代表着消费者\",{\"1\":{\"450\":1}}],[\"代表的含义就是对象的地址的偏移量\",{\"1\":{\"443\":1}}],[\"代表的是引入类\",{\"1\":{\"388\":1}}],[\"代表启用\",{\"1\":{\"388\":1}}],[\"代表占位符\",{\"1\":{\"387\":1}}],[\"代表什么含义\",{\"0\":{\"115\":1}}],[\"代表大小写不敏感\",{\"1\":{\"82\":1}}],[\"代表大小写敏感\",{\"1\":{\"82\":1}}],[\"代码会变得更好\",{\"1\":{\"909\":1}}],[\"代码应该表现自己的目的\",{\"1\":{\"901\":1}}],[\"代码重构目标\",{\"1\":{\"900\":1}}],[\"代码块越小\",{\"1\":{\"900\":1}}],[\"代码检查\",{\"1\":{\"704\":1}}],[\"代码量减少了\",{\"1\":{\"626\":1}}],[\"代码的设计无法帮助我轻松的添加我所需要的特性\",{\"1\":{\"907\":1}}],[\"代码的处理和移动也越轻松\",{\"1\":{\"900\":1}}],[\"代码的功能越好管理\",{\"1\":{\"900\":1}}],[\"代码的执行结果\",{\"1\":{\"650\":1}}],[\"代码的机器无关\",{\"1\":{\"549\":1}}],[\"代码的修改\",{\"1\":{\"493\":1}}],[\"代码如下\",{\"1\":{\"217\":1}}],[\"代码如下所示\",{\"1\":{\"215\":1}}],[\"代码如果所示\",{\"1\":{\"216\":1}}],[\"代码示例\",{\"1\":{\"92\":1}}],[\"代码\",{\"0\":{\"32\":1},\"1\":{\"671\":2,\"673\":1}}],[\"掘金\",{\"1\":{\"75\":2}}],[\"你也许会看到某个类接口中有一半的函数都委托给其它类\",{\"1\":{\"922\":1}}],[\"你也正常的去输入验证码\",{\"1\":{\"202\":1}}],[\"你没有必要知道boss到底使用传统记事本或电子记事本亦或秘书来记录自己的约会\",{\"1\":{\"922\":1}}],[\"你所创建的每一个类\",{\"1\":{\"918\":1}}],[\"你所面临的坏味道就是霾弹式修改\",{\"1\":{\"912\":1}}],[\"你要的是\",{\"1\":{\"916\":1}}],[\"你常会发现同样的switch语句散布于不同的地方\",{\"1\":{\"916\":1}}],[\"你就会嗅出两种紧密相关的刺鼻味道中的一种\",{\"1\":{\"911\":1}}],[\"你就不必要把函数所需的所有东西都以参数传递给它\",{\"1\":{\"910\":1}}],[\"你才会知道这些小小函数的价值\",{\"1\":{\"910\":1}}],[\"你发现自己需要为程序添加一个特性\",{\"1\":{\"898\":1}}],[\"你心里牢牢记着那句古老的工程谚语\",{\"1\":{\"898\":1}}],[\"你先拿私钥解开加密的密钥\",{\"1\":{\"682\":1}}],[\"你想等待n个点完成\",{\"1\":{\"551\":1}}],[\"你可以在消息链的不同位置进行这种重构手法\",{\"1\":{\"921\":1}}],[\"你可以把锁头给别人\",{\"1\":{\"522\":1}}],[\"你可以进入这个目录\",{\"1\":{\"497\":1}}],[\"你可以更新资源\",{\"1\":{\"492\":1}}],[\"你可以认为docker\",{\"1\":{\"234\":1}}],[\"你的态度也行倾向于尽量少修改程序\",{\"1\":{\"898\":1}}],[\"你的生产者需要申请\",{\"1\":{\"454\":1}}],[\"你的应用需要意识到\",{\"1\":{\"4\":1}}],[\"你暂时可以认为这个就像我们要给电脑装系统用的系统cd盘\",{\"1\":{\"234\":1}}],[\"你指望它发财是不可能的\",{\"1\":{\"208\":1}}],[\"你在12306买票的时候肯定遇到过这种场景\",{\"1\":{\"202\":1}}],[\"你在xx电商双十一购物的时候\",{\"1\":{\"202\":1}}],[\"你在存取表里面数据时所需要的磁盘i\",{\"1\":{\"74\":1}}],[\"过分狎昵的类必须拆散\",{\"1\":{\"923\":1}}],[\"过度耦合的消息链\",{\"0\":{\"921\":1}}],[\"过长的参数列\",{\"0\":{\"910\":1}}],[\"过大的类\",{\"0\":{\"910\":1}}],[\"过了一会饭也做好了\",{\"1\":{\"791\":1}}],[\"过了一会服务员端上饭菜后\",{\"1\":{\"791\":1}}],[\"过滤\",{\"1\":{\"623\":1}}],[\"过期时间等等\",{\"1\":{\"522\":2}}],[\"过期后自动删除\",{\"1\":{\"74\":1}}],[\"过的自定义异常\",{\"1\":{\"413\":1}}],[\"过\",{\"1\":{\"100\":1}}],[\"过程的执行步骤\",{\"1\":{\"23\":1}}],[\"过程\",{\"0\":{\"799\":1,\"802\":1,\"805\":1},\"1\":{\"23\":2,\"27\":1,\"36\":1,\"846\":1}}],[\"检出仓库\",{\"1\":{\"499\":1}}],[\"检测配置的日志目录是否有挂载到pod中\",{\"1\":{\"277\":1}}],[\"检查备份集\",{\"1\":{\"893\":1}}],[\"检查系统级的时间触发器\",{\"1\":{\"863\":1}}],[\"检查点到来时\",{\"1\":{\"859\":1}}],[\"检查中断状态\",{\"0\":{\"767\":1}}],[\"检查java中的内存泄露\",{\"1\":{\"558\":1}}],[\"检查方法有exec\",{\"1\":{\"263\":1}}],[\"检查重入性\",{\"1\":{\"214\":1}}],[\"检查给定键是否存在于散列中hkeys\",{\"1\":{\"137\":1}}],[\"检查元素item是否存在于集合key\",{\"1\":{\"135\":1}}],[\"检查一个元素是否存在于集合中\",{\"1\":{\"133\":1}}],[\"检查未使用到索引的sql\",{\"1\":{\"74\":1}}],[\"检索的行数必须达到此值才可被记为慢查询\",{\"1\":{\"74\":1}}],[\"慢查询\",{\"1\":{\"118\":1,\"121\":1}}],[\"慢查询日志文件\",{\"1\":{\"74\":1}}],[\"慢查询时间\",{\"1\":{\"74\":1}}],[\"慢查询sql日志设置\",{\"1\":{\"74\":1}}],[\"超文本传输安全协议是一种透过计算机网络进行安全通信的传输协议\",{\"1\":{\"521\":1}}],[\"超文本传输协议\",{\"1\":{\"520\":1}}],[\"超出时间消费方\",{\"1\":{\"396\":1}}],[\"超出可重入次数限制\",{\"1\":{\"214\":1}}],[\"超15s则熔断\",{\"1\":{\"396\":1}}],[\"超时时间不可大于断路器的超时时间\",{\"1\":{\"396\":1}}],[\"超时问题\",{\"0\":{\"220\":1}}],[\"超时设置\",{\"1\":{\"3\":1}}],[\"超卖的那部分用户的收货时候就会出现库存不足\",{\"1\":{\"202\":1}}],[\"超过这个时间后多余的线程将被终止\",{\"1\":{\"771\":1}}],[\"超过这个数的请求将不予处理\",{\"1\":{\"651\":1}}],[\"超过时间的话会抛出超时异常\",{\"1\":{\"470\":1,\"472\":1}}],[\"超过10个请求才进行进行容错率判断\",{\"1\":{\"402\":1}}],[\"超过1秒则为慢查询\",{\"1\":{\"74\":1}}],[\"超过了这个过期时间\",{\"1\":{\"222\":1}}],[\"超过了这个值将写入磁盘\",{\"1\":{\"74\":1}}],[\"秒内有\",{\"1\":{\"141\":1}}],[\"秒\",{\"1\":{\"74\":1,\"155\":1,\"527\":1}}],[\"单例优势与劣势\",{\"1\":{\"683\":1}}],[\"单例模式只有真正的单一实例的需求时才可以使用\",{\"1\":{\"683\":1}}],[\"单例模式与数据库连接\",{\"1\":{\"683\":1}}],[\"单例模式\",{\"0\":{\"683\":1},\"1\":{\"825\":1}}],[\"单例对象等\",{\"1\":{\"557\":1}}],[\"单词和它的数目\",{\"1\":{\"652\":1}}],[\"单播\",{\"0\":{\"640\":1}}],[\"单个任务\",{\"1\":{\"475\":1}}],[\"单个请求超时5s\",{\"1\":{\"396\":1}}],[\"单一职责原则\",{\"1\":{\"683\":1}}],[\"单一抽象方法\",{\"1\":{\"475\":1}}],[\"单一数据表的数据量变小\",{\"1\":{\"128\":1}}],[\"单连接请求数等\",{\"1\":{\"305\":1}}],[\"单户或单笔贷款金额不超过人民币1000万元\",{\"1\":{\"189\":1}}],[\"单实例\",{\"0\":{\"160\":1},\"1\":{\"160\":1}}],[\"单台服务器已经无法支撑\",{\"1\":{\"131\":1}}],[\"单页内存储行数少\",{\"1\":{\"129\":1}}],[\"单页内的数据行越来越多数据库整体性能越好\",{\"1\":{\"129\":1}}],[\"单\",{\"1\":{\"97\":1}}],[\"单表索引数量不要太多\",{\"1\":{\"82\":1}}],[\"单位m\",{\"1\":{\"837\":1}}],[\"单位毫秒\",{\"1\":{\"518\":6}}],[\"单位秒\",{\"1\":{\"263\":2}}],[\"单位可以为mib\",{\"1\":{\"263\":1}}],[\"单位为秒\",{\"1\":{\"263\":1}}],[\"单位为core数\",{\"1\":{\"263\":1}}],[\"单位为分\",{\"1\":{\"82\":1}}],[\"单位默认为\",{\"1\":{\"214\":1}}],[\"单位\",{\"1\":{\"74\":1,\"214\":1,\"297\":1,\"402\":1,\"651\":1,\"837\":2}}],[\"单机\",{\"1\":{\"213\":1}}],[\"单机版安装\",{\"1\":{\"63\":1}}],[\"单机版下载安装\",{\"0\":{\"56\":1}}],[\"单机或单线程执行时间比较短\",{\"1\":{\"29\":1}}],[\"主备等模式\",{\"1\":{\"843\":1}}],[\"主线程执行步骤1\",{\"1\":{\"773\":1}}],[\"主线程把任务交给空闲线程执行\",{\"1\":{\"773\":1}}],[\"主线程调用await\",{\"1\":{\"446\":1}}],[\"主程序运行后加载\",{\"0\":{\"712\":1}}],[\"主程序运行前\",{\"0\":{\"711\":1}}],[\"主动免疫可信架构信任链传递示意图\",{\"0\":{\"693\":1}}],[\"主动防御体系\",{\"0\":{\"688\":1}}],[\"主动调整客户结构和业务结构\",{\"1\":{\"178\":1}}],[\"主版本号和子版本号都不变\",{\"1\":{\"605\":1}}],[\"主版本号不变\",{\"1\":{\"605\":1}}],[\"主版本号\",{\"1\":{\"605\":1}}],[\"主次版本号是否在当前虚拟机范围内\",{\"1\":{\"560\":1}}],[\"主题a和主题b都有两个partition\",{\"1\":{\"432\":1}}],[\"主库使用客户端\",{\"1\":{\"355\":1}}],[\"主库ip\",{\"1\":{\"355\":1}}],[\"主库ip地\",{\"1\":{\"329\":1,\"342\":1}}],[\"主库修改配置文件\",{\"0\":{\"323\":1}}],[\"主机地址可取下面的任意五个\",{\"1\":{\"526\":1}}],[\"主机和容器各自拥有主机的回环网卡l0\",{\"1\":{\"255\":1}}],[\"主机和docker容器将共享一个网络环境\",{\"1\":{\"255\":1}}],[\"主机模式也可以叫宿主机模式\",{\"1\":{\"250\":1}}],[\"主机模式\",{\"0\":{\"255\":1},\"1\":{\"250\":1}}],[\"主机众多\",{\"1\":{\"202\":1}}],[\"主\",{\"0\":{\"154\":1},\"1\":{\"153\":3,\"154\":3,\"155\":16,\"158\":1,\"161\":2}}],[\"主从数据异步\",{\"1\":{\"214\":1}}],[\"主从方式\",{\"1\":{\"214\":1}}],[\"主从架构\",{\"0\":{\"153\":1}}],[\"主从复制设置\",{\"1\":{\"74\":1}}],[\"主键\",{\"1\":{\"110\":2}}],[\"主键可以是其他表的外键\",{\"1\":{\"110\":2}}],[\"主键不能有空值\",{\"1\":{\"110\":2}}],[\"主键是一种约束\",{\"1\":{\"110\":2}}],[\"主键是自增还是uuid\",{\"0\":{\"85\":1}}],[\"主键和唯一索引区别\",{\"0\":{\"110\":1},\"1\":{\"110\":1}}],[\"主键索引\",{\"1\":{\"101\":1}}],[\"主键为什么不推荐有业务含义\",{\"0\":{\"86\":1}}],[\"主配置\",{\"1\":{\"79\":1}}],[\"主服务器进行写操作\",{\"1\":{\"75\":1}}],[\"主流字符集支持一些特殊表情符号\",{\"1\":{\"74\":1}}],[\"主要用于身份认证过程\",{\"1\":{\"897\":1}}],[\"主要用于系统故障恢复\",{\"1\":{\"862\":1}}],[\"主要用于事务提交或检查点时将日志缓冲区中的\",{\"1\":{\"860\":1}}],[\"主要用于计算的工具类\",{\"1\":{\"472\":1}}],[\"主要参考\",{\"1\":{\"722\":1}}],[\"主要有以下3项\",{\"1\":{\"703\":1}}],[\"主要有一下四种类加载器\",{\"1\":{\"558\":1}}],[\"主要的socket类型为\",{\"1\":{\"636\":1}}],[\"主要的性能因素是数据行使用的存储总量\",{\"1\":{\"97\":1}}],[\"主要针对方法体的验证\",{\"1\":{\"558\":1,\"562\":1}}],[\"主要是为了确保解析动作能正确执行\",{\"1\":{\"558\":1,\"563\":1}}],[\"主要是为担保人提供风险分担\",{\"1\":{\"164\":1}}],[\"主要是为担保人提供连带责任保证或一般保证\",{\"1\":{\"163\":1}}],[\"主要是因为\",{\"1\":{\"522\":1}}],[\"主要是通过usafe的方式来完成的\",{\"1\":{\"443\":1}}],[\"主要包括投标担保\",{\"1\":{\"188\":1}}],[\"主要业务表切忌出现这样大类型的字段\",{\"1\":{\"82\":1}}],[\"主要三个组件\",{\"1\":{\"15\":1}}],[\"主要限制因素时节点之间的带宽\",{\"1\":{\"14\":1}}],[\"~\",{\"1\":{\"74\":2,\"229\":1,\"230\":2,\"267\":1,\"282\":1,\"298\":1,\"306\":2,\"544\":1,\"576\":1,\"626\":8,\"833\":1,\"834\":4,\"836\":1,\"838\":3,\"839\":3,\"840\":1,\"841\":1,\"843\":1,\"845\":1,\"883\":3,\"893\":2}}],[\"kylindca04\",{\"1\":{\"838\":1,\"842\":1,\"844\":1,\"891\":1,\"893\":3}}],[\"kylindca03\",{\"1\":{\"831\":3,\"832\":4,\"833\":5,\"834\":8,\"835\":3,\"836\":5,\"837\":2,\"838\":4,\"840\":2,\"841\":3,\"842\":1,\"845\":8,\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"870\":2,\"883\":1}}],[\"kr\",{\"1\":{\"837\":1}}],[\"kpi\",{\"0\":{\"786\":1,\"787\":1},\"1\":{\"785\":2}}],[\"k2\",{\"1\":{\"513\":1}}],[\"khtml\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"kb\",{\"1\":{\"417\":2}}],[\"kafkaproducer<>\",{\"1\":{\"564\":1}}],[\"kafkaproducer<string\",{\"1\":{\"564\":2}}],[\"kafkaproducerconnection\",{\"1\":{\"564\":3}}],[\"kafkaproperties\",{\"1\":{\"564\":5}}],[\"kafkaconsumer<>\",{\"1\":{\"564\":1}}],[\"kafkaconsumer<string\",{\"1\":{\"564\":2}}],[\"kafkaconsumerconnection\",{\"1\":{\"564\":3}}],[\"kafka的简单使用\",{\"0\":{\"564\":1}}],[\"kafkaheaders\",{\"1\":{\"438\":2}}],[\"kafkalistener\",{\"1\":{\"438\":2}}],[\"kafkatemplate<string\",{\"1\":{\"437\":1}}],[\"kafkatemplate\",{\"1\":{\"437\":4}}],[\"kafka<\",{\"1\":{\"434\":3}}],[\"kafkarequesthandlerpool\",{\"1\":{\"433\":1}}],[\"kafkarequesthandlerpool分配工作线程\",{\"1\":{\"433\":1}}],[\"kafkarequesthandler线程处理完请求后\",{\"1\":{\"433\":1}}],[\"kafka整体架构\",{\"0\":{\"433\":1}}],[\"kafka怎么保证高可用\",{\"0\":{\"432\":1}}],[\"kafka将以partition为单位重新做负载均衡\",{\"1\":{\"431\":1}}],[\"kafka还限定了\",{\"1\":{\"431\":1}}],[\"kafka引出消费组的概念\",{\"1\":{\"431\":1}}],[\"kafka中的消费组\",{\"0\":{\"431\":1}}],[\"kafka中的分区\",{\"0\":{\"430\":1}}],[\"kafka中的主题\",{\"0\":{\"429\":1}}],[\"kafka流程及概念\",{\"1\":{\"428\":1}}],[\"kafka支持这种非常大的存储日志数据的场景\",{\"1\":{\"428\":1}}],[\"kafka架构设计\",{\"0\":{\"428\":1}}],[\"kafka\",{\"1\":{\"401\":1,\"433\":5,\"434\":1,\"435\":6,\"437\":5,\"438\":5,\"564\":9}}],[\"kill\",{\"1\":{\"353\":2,\"389\":1}}],[\"kibana\",{\"1\":{\"268\":1,\"272\":5,\"273\":2,\"283\":1,\"284\":1,\"285\":1}}],[\"kind\",{\"1\":{\"263\":2,\"275\":2}}],[\"k8snode2\",{\"1\":{\"288\":1}}],[\"k8snode1\",{\"1\":{\"288\":1}}],[\"k8smaster\",{\"1\":{\"288\":1}}],[\"k8s集群搭建\",{\"0\":{\"286\":1}}],[\"k8s构建elk日志平台\",{\"0\":{\"264\":1},\"1\":{\"285\":1}}],[\"k8s\",{\"1\":{\"263\":1,\"275\":10,\"276\":12,\"277\":5,\"280\":2,\"282\":4,\"288\":1}}],[\"kubelet和kubectl\",{\"0\":{\"292\":1}}],[\"kubelet\",{\"0\":{\"289\":1},\"1\":{\"292\":2}}],[\"kubelet都将重启\",{\"1\":{\"263\":1}}],[\"kubeadm\",{\"0\":{\"289\":1},\"1\":{\"292\":1,\"293\":1,\"294\":2}}],[\"kube\",{\"1\":{\"275\":2,\"276\":2,\"277\":1,\"293\":3,\"295\":4}}],[\"kubernetes默认cri\",{\"1\":{\"289\":1}}],[\"kubernetes系列之\",{\"1\":{\"285\":1}}],[\"kubernetes滚动更新\",{\"1\":{\"263\":1}}],[\"kubernetes\",{\"1\":{\"263\":1,\"275\":3,\"277\":3,\"291\":6,\"293\":2}}],[\"kubectl\",{\"1\":{\"263\":6,\"276\":3,\"277\":1,\"278\":2,\"292\":1,\"293\":1,\"295\":2,\"296\":3}}],[\"k0\",{\"1\":{\"125\":1,\"127\":5}}],[\"k1所在的节点连接起来\",{\"1\":{\"513\":1}}],[\"k1\",{\"1\":{\"125\":1}}],[\"k\",{\"1\":{\"73\":1,\"132\":1,\"317\":1,\"738\":2,\"740\":3,\"743\":2,\"745\":2,\"837\":1}}],[\"keep\",{\"1\":{\"477\":2,\"479\":1,\"480\":1,\"837\":1,\"845\":1,\"892\":1,\"893\":5}}],[\"keepaliveseconds\",{\"1\":{\"779\":2}}],[\"keepalivetime为60秒\",{\"1\":{\"773\":1}}],[\"keepalivetime为多余的空闲线程等待新任务的最长时间\",{\"1\":{\"771\":1}}],[\"keepalivetime等于说也是一个无效参数\",{\"1\":{\"771\":1}}],[\"keepalivetime\",{\"0\":{\"757\":1},\"1\":{\"773\":3}}],[\"keepalived安装\",{\"1\":{\"368\":1}}],[\"keepalived\",{\"1\":{\"331\":4,\"332\":3,\"333\":1,\"334\":4,\"336\":5,\"337\":2,\"338\":1,\"339\":1,\"340\":1,\"341\":5,\"342\":5,\"344\":4,\"345\":2,\"346\":1,\"347\":4,\"348\":4,\"349\":2,\"350\":1,\"351\":6,\"356\":4,\"357\":4,\"358\":1,\"359\":4,\"361\":5,\"362\":3,\"363\":1,\"364\":1,\"365\":1,\"366\":5,\"367\":3,\"379\":3,\"380\":15}}],[\"keepalive\",{\"1\":{\"317\":1,\"612\":1}}],[\"keepaliveonce\",{\"1\":{\"214\":1}}],[\"keepaliverunnable\",{\"1\":{\"214\":3}}],[\"keras\",{\"1\":{\"59\":5}}],[\"keygen\",{\"1\":{\"495\":1}}],[\"keys\",{\"1\":{\"355\":1,\"495\":1}}],[\"keyvalue\",{\"1\":{\"214\":3}}],[\"key3\",{\"1\":{\"213\":1}}],[\"key键里面\",{\"1\":{\"136\":3}}],[\"key中\",{\"1\":{\"135\":1}}],[\"key里面移除元素item\",{\"1\":{\"135\":1}}],[\"key包含元素item\",{\"1\":{\"135\":1}}],[\"key为空\",{\"1\":{\"135\":1}}],[\"key列表的最左端\",{\"1\":{\"135\":2}}],[\"key列表中弹出位于最右端的元素\",{\"1\":{\"135\":2}}],[\"keydestructor\",{\"1\":{\"126\":1}}],[\"keydup\",{\"1\":{\"126\":1}}],[\"key2=value2的形式\",{\"1\":{\"749\":1}}],[\"key2=\",{\"1\":{\"214\":1}}],[\"key2\",{\"1\":{\"126\":1,\"213\":1,\"506\":2}}],[\"key1=\",{\"1\":{\"214\":1}}],[\"key1\",{\"1\":{\"126\":1,\"213\":1,\"506\":2}}],[\"keycompare\",{\"1\":{\"126\":1}}],[\"key=\",{\"1\":{\"214\":2}}],[\"key=密码\",{\"1\":{\"63\":1}}],[\"key=账号\",{\"1\":{\"63\":1}}],[\"key\",{\"1\":{\"32\":3,\"34\":1,\"35\":2,\"36\":3,\"37\":1,\"39\":1,\"40\":2,\"41\":1,\"47\":1,\"63\":6,\"92\":1,\"104\":1,\"119\":1,\"125\":2,\"126\":3,\"127\":2,\"134\":8,\"135\":24,\"136\":25,\"137\":18,\"138\":14,\"139\":9,\"150\":1,\"161\":2,\"213\":10,\"214\":24,\"215\":2,\"216\":4,\"217\":5,\"218\":5,\"219\":6,\"221\":6,\"263\":2,\"267\":1,\"291\":2,\"317\":2,\"435\":2,\"478\":1,\"495\":1,\"506\":4,\"507\":2,\"508\":1,\"511\":2,\"564\":2,\"650\":10,\"652\":16,\"665\":1,\"837\":1,\"845\":1,\"892\":1,\"893\":1}}],[\"我想总有一天需要做这事\",{\"1\":{\"919\":1}}],[\"我想\",{\"1\":{\"914\":1}}],[\"我希望尽量控制它造成的影响\",{\"1\":{\"905\":1}}],[\"我也就不断的把这些理解嵌入到代码中\",{\"1\":{\"901\":1}}],[\"我的理解就是当我们不实用\",{\"1\":{\"650\":1}}],[\"我得关闭链接了\",{\"1\":{\"648\":1}}],[\"我有事先忙了\",{\"1\":{\"648\":1}}],[\"我平时好像都是类似于\",{\"1\":{\"527\":1}}],[\"我可以拿下一个数据吗\",{\"1\":{\"453\":1}}],[\"我国著名的信息安全专家沈昌祥院士对上述定义进行了综合和拓展\",{\"1\":{\"684\":1}}],[\"我国的再担保一般有两种形式\",{\"1\":{\"162\":1}}],[\"我国在法律层面上并未对再担保有一个明确的界定\",{\"1\":{\"162\":1}}],[\"我们无比做卫道士\",{\"1\":{\"923\":1}}],[\"我们都知道对象的基本特征之一就是封装\",{\"1\":{\"922\":1}}],[\"我们都是用在线程池的场景\",{\"1\":{\"650\":1}}],[\"我们经常会说\",{\"1\":{\"919\":1}}],[\"我们希望能够跳到系统某一点\",{\"1\":{\"911\":1}}],[\"我们希望软件能够容易被修改\",{\"1\":{\"911\":1}}],[\"我们编写出了以下代码\",{\"1\":{\"898\":1}}],[\"我们考虑加入盐值\",{\"1\":{\"897\":1}}],[\"我们只能无差别轮询所有的流\",{\"1\":{\"800\":1}}],[\"我们只需要如下配置就能启动profile机制\",{\"0\":{\"384\":1}}],[\"我们应该充分考虑到这些情况出现的可能性\",{\"1\":{\"731\":1}}],[\"我们知道\",{\"1\":{\"723\":1}}],[\"我们知道在java中基本数据类型的大小\",{\"1\":{\"722\":1}}],[\"我们看一个应用\",{\"1\":{\"705\":1}}],[\"我们一般是在属性间增加长整型变量来分隔每一组属性\",{\"1\":{\"667\":1}}],[\"我们就希望它们严守清规\",{\"1\":{\"923\":1}}],[\"我们就把它们放到了一个常量类里\",{\"1\":{\"626\":1}}],[\"我们就直接获得结果\",{\"1\":{\"475\":1}}],[\"我们再次对\",{\"1\":{\"621\":1}}],[\"我们再来验证下\",{\"1\":{\"526\":1}}],[\"我们加载了一个对象放在缓存中\",{\"1\":{\"558\":1}}],[\"我们必须在其初始化的时候指定它的容量大小\",{\"1\":{\"531\":1}}],[\"我们来分析下\",{\"1\":{\"526\":1}}],[\"我们现在也不想把它划分vlan\",{\"1\":{\"526\":1}}],[\"我们网络中只要不超过254台主机的的话\",{\"1\":{\"526\":1}}],[\"我们先按aa\",{\"1\":{\"539\":1}}],[\"我们先需要了解下\",{\"1\":{\"526\":1}}],[\"我们先来继续分析上面代码\",{\"1\":{\"217\":1}}],[\"我们为异步操作定义了一个模板\",{\"1\":{\"475\":1}}],[\"我们还需要获取应用实例的jvm内存与gc信息\",{\"1\":{\"720\":1}}],[\"我们还需要在\",{\"1\":{\"221\":1}}],[\"我们还可以将一个保存文本数据的\",{\"1\":{\"624\":1}}],[\"我们还可以在supplier接口和completablefuture的支持下开发一系列任务\",{\"1\":{\"475\":1}}],[\"我们还可以在异步计算上下文中使用它\",{\"1\":{\"475\":1}}],[\"我们会同时获得一个future对象\",{\"1\":{\"475\":1}}],[\"我们提交的任务只需要实现runnable接口\",{\"1\":{\"475\":1}}],[\"我们已经知道游标到了\",{\"1\":{\"456\":1}}],[\"我们假设只有一个生产者写入\",{\"1\":{\"454\":1}}],[\"我们登入web01\",{\"1\":{\"262\":1}}],[\"我们使用exec命令分别登入两个容器\",{\"1\":{\"256\":1}}],[\"我们发现\",{\"1\":{\"255\":1}}],[\"我们创建启动一个容器\",{\"1\":{\"255\":1}}],[\"我们可以尝试\",{\"1\":{\"918\":1}}],[\"我们可以一开始就把偏向锁这个默认功能给关闭\",{\"1\":{\"828\":1}}],[\"我们可以使用\",{\"1\":{\"706\":1}}],[\"我们可以使用ping命令来检测是否已完成互联\",{\"1\":{\"262\":1}}],[\"我们可以用它来读文件操作\",{\"1\":{\"539\":1}}],[\"我们可以利用该对象来对文件或者目录进行书属性修改\",{\"1\":{\"537\":1}}],[\"我们可以从priorityblockingqueue获得一个迭代器iterator\",{\"1\":{\"533\":1}}],[\"我们可以自己约定参数的写法\",{\"1\":{\"483\":1}}],[\"我们可以设计一个异步任务模板\",{\"1\":{\"475\":1}}],[\"我们可以通过exceptionally\",{\"1\":{\"475\":1}}],[\"我们可以通过配置\",{\"1\":{\"419\":1}}],[\"我们可以叠加功能\",{\"1\":{\"475\":1}}],[\"我们可以直接使用float和double处理\",{\"1\":{\"445\":1}}],[\"我们可以保证进入gateway的请求\",{\"1\":{\"410\":1}}],[\"我们可以将分隔的不同的库存数据分别存储到不同的\",{\"1\":{\"221\":1}}],[\"我们可以先从\",{\"1\":{\"221\":1}}],[\"我们将\",{\"1\":{\"650\":1}}],[\"我们将库存进行分割后\",{\"1\":{\"221\":1}}],[\"我们将原有的库存分割为5份\",{\"1\":{\"221\":1}}],[\"我们在该类的位置创建一个新文件\",{\"1\":{\"541\":1}}],[\"我们在输入流中使用\",{\"1\":{\"539\":1}}],[\"我们在主线程某个时刻调用future对象的get\",{\"1\":{\"475\":1}}],[\"我们在redis\",{\"1\":{\"221\":1}}],[\"我们在\",{\"1\":{\"221\":1}}],[\"我们需要依赖测试\",{\"1\":{\"899\":1}}],[\"我们需要增强密码强度\",{\"1\":{\"897\":1}}],[\"我们需要引入一个计数器\",{\"1\":{\"815\":1}}],[\"我们需要根据监控信息进行扩容\",{\"1\":{\"720\":1}}],[\"我们需要再次使用内存重分配扩展\",{\"1\":{\"620\":1}}],[\"我们需要先使用内存重分配操作\",{\"1\":{\"620\":1}}],[\"我们需要实现serializable接口\",{\"1\":{\"545\":1}}],[\"我们需要手动来处理每一个并行异步任务的结果\",{\"1\":{\"475\":1}}],[\"我们需要停止更新锁超时时间的线程\",{\"1\":{\"220\":1}}],[\"我们需要向redis\",{\"1\":{\"139\":1}}],[\"我们基于上面已经实现的分布式锁的思路\",{\"1\":{\"216\":1}}],[\"我们这里先定义一个\",{\"1\":{\"215\":1}}],[\"我们说很多网站牺牲了一致性\",{\"1\":{\"202\":1}}],[\"我们说淘宝的系统可用性可以达到5个9\",{\"1\":{\"194\":1}}],[\"我们以系统满足p为前提论述了无法同时满足c和a\",{\"1\":{\"196\":1}}],[\"我们指的是redis会在这个键的过期时间到达时自动删除该键\",{\"1\":{\"139\":1}}],[\"我们sql用引入了一个函数get\",{\"1\":{\"73\":1}}],[\"我们称之为幻象读\",{\"1\":{\"72\":1}}],[\"我认为可以自已在mysql编译前放进自己的排序规则\",{\"1\":{\"73\":1}}],[\"选中需要合并的远程分支\",{\"1\":{\"505\":1}}],[\"选手7到达终点\",{\"1\":{\"446\":1}}],[\"选手6到达终点\",{\"1\":{\"446\":1}}],[\"选手5到达终点\",{\"1\":{\"446\":1}}],[\"选手4到达终点\",{\"1\":{\"446\":1}}],[\"选手3到达终点\",{\"1\":{\"446\":1}}],[\"选手2到达终点\",{\"1\":{\"446\":1}}],[\"选手1到达终点\",{\"1\":{\"446\":1}}],[\"选填\",{\"1\":{\"414\":1}}],[\"选取哪种事件驱动模型处理连接请求\",{\"1\":{\"305\":1}}],[\"选取合适的方式将\",{\"1\":{\"159\":1}}],[\"选项\",{\"1\":{\"141\":1,\"146\":1}}],[\"选择支持vary\",{\"1\":{\"317\":1}}],[\"选择了可用性\",{\"1\":{\"202\":1}}],[\"选择\",{\"1\":{\"161\":3,\"838\":1}}],[\"选择原则\",{\"1\":{\"94\":1}}],[\"选择合适的\",{\"1\":{\"161\":1}}],[\"选择合适的数据类型\",{\"0\":{\"94\":1}}],[\"选择合适的存储引擎\",{\"0\":{\"93\":1}}],[\"选择标准\",{\"1\":{\"93\":1}}],[\"选择的不是gbk\",{\"1\":{\"73\":1}}],[\"选做\",{\"1\":{\"13\":1}}],[\"两种启动方式\",{\"1\":{\"845\":1}}],[\"两种方式注册数据库服务\",{\"0\":{\"838\":1}}],[\"两种方式提交任务\",{\"1\":{\"762\":1}}],[\"两种持久化的方法\",{\"1\":{\"140\":1}}],[\"两年后\",{\"1\":{\"190\":1}}],[\"两者的性能就差不多了\",{\"1\":{\"703\":1}}],[\"两者的区别\",{\"1\":{\"674\":1}}],[\"两者的区别就是\",{\"1\":{\"659\":1}}],[\"两者相与得网络地址\",{\"1\":{\"526\":1}}],[\"两者必须同时具备\",{\"1\":{\"158\":1}}],[\"两者都是作为char类型处理的\",{\"1\":{\"96\":1}}],[\"两次执行同一条\",{\"1\":{\"72\":1}}],[\"两个类中相同的字段\",{\"1\":{\"914\":1}}],[\"两个互为兄弟的子类内含相同的表达式\",{\"1\":{\"909\":1}}],[\"两个数转为二进制\",{\"1\":{\"896\":1}}],[\"两个最大段生命周期\",{\"1\":{\"649\":1}}],[\"两个十六位的端口号\",{\"1\":{\"642\":1}}],[\"两个线程可以交换彼此的数据\",{\"1\":{\"555\":1}}],[\"两个重要的方法\",{\"1\":{\"551\":1}}],[\"两个操作数都将被转换为\",{\"1\":{\"549\":1}}],[\"两个字节为基本单位\",{\"1\":{\"538\":1}}],[\"两个容器使用的是同一个ip地址\",{\"1\":{\"256\":1}}],[\"两个容器除了网络方面相同之外\",{\"1\":{\"250\":2}}],[\"两个争抢它的客户端进行写操作\",{\"1\":{\"214\":1}}],[\"两个概念\",{\"1\":{\"99\":1}}],[\"两个账户的里面的钱就会真的发生变化\",{\"1\":{\"66\":1}}],[\"两个账户里面的钱的数量都不会有变化\",{\"1\":{\"66\":1}}],[\"两个节点的距离等于他们到最近共同祖先距离的综合\",{\"1\":{\"14\":1}}],[\"指数据库关闭状态下的备份\",{\"1\":{\"889\":1}}],[\"指数据库启动状态下的备份\",{\"1\":{\"889\":1}}],[\"指令级并行的重排序\",{\"1\":{\"809\":1}}],[\"指令高速缓存处理有关cpu必须执行的操作的信息\",{\"1\":{\"662\":1}}],[\"指标\",{\"1\":{\"786\":1}}],[\"指明包含\",{\"1\":{\"707\":1,\"715\":1}}],[\"指明客户端打算连接的服务器的端口\",{\"1\":{\"648\":1}}],[\"指的是同一线程\",{\"1\":{\"702\":1}}],[\"指的是会忽略所有接收的数据的一种协议\",{\"1\":{\"613\":1}}],[\"指向\",{\"1\":{\"650\":1}}],[\"指向下个哈希表节点\",{\"1\":{\"125\":1}}],[\"指可分配子网块中要剔除首\",{\"1\":{\"526\":1}}],[\"指在某一子网掩码下的子网的块数\",{\"1\":{\"526\":1}}],[\"指在一个事务内\",{\"1\":{\"72\":1}}],[\"指将\",{\"1\":{\"513\":1}}],[\"指针压缩\",{\"1\":{\"722\":1}}],[\"指针构成一个单向链表\",{\"1\":{\"513\":1}}],[\"指针采用往上计数自增的方式\",{\"1\":{\"452\":1}}],[\"指针来保存节点值\",{\"1\":{\"119\":1}}],[\"指针和\",{\"1\":{\"119\":1}}],[\"指针和表尾节点的\",{\"1\":{\"119\":1}}],[\"指针都指向\",{\"1\":{\"119\":1}}],[\"指针\",{\"1\":{\"119\":2,\"125\":1,\"452\":1}}],[\"指针组成双端链表\",{\"1\":{\"119\":1}}],[\"指当一个事务正字访问数据\",{\"1\":{\"72\":1}}],[\"指定到别的路径下\",{\"1\":{\"834\":1}}],[\"指定需要拦截的类\",{\"1\":{\"717\":1}}],[\"指定为参数maxprocessors的值\",{\"1\":{\"651\":1}}],[\"指定为网桥模式\",{\"1\":{\"251\":1}}],[\"指定参数\",{\"1\":{\"566\":1}}],[\"指定\",{\"1\":{\"566\":3,\"864\":1,\"887\":1}}],[\"指定了\",{\"1\":{\"564\":1}}],[\"指定了要保存的列以输出函数需要调用的一个或多个列\",{\"1\":{\"22\":1}}],[\"指定的期望值\",{\"1\":{\"444\":2}}],[\"指定的新值\",{\"1\":{\"444\":5}}],[\"指定的data目录\",{\"1\":{\"63\":1}}],[\"指定kafka\",{\"1\":{\"435\":1}}],[\"指定k8s集群的采集日志目录\",{\"1\":{\"275\":1,\"277\":1}}],[\"指定一个或多个注解\",{\"1\":{\"419\":1}}],[\"指定一个或多个\",{\"1\":{\"419\":2}}],[\"指定一个或多个包\",{\"1\":{\"419\":1}}],[\"指定配置文件启动\",{\"1\":{\"343\":1}}],[\"指定网卡\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"指定哪些不需要gzip压缩的浏览器\",{\"1\":{\"317\":1}}],[\"指定负载均衡器按照基于客户端ip的分配方式\",{\"1\":{\"301\":1}}],[\"指定configmap挂载到pod容器里\",{\"1\":{\"275\":1}}],[\"指定运行命名空间\",{\"1\":{\"275\":1}}],[\"指定相关ip和端口等\",{\"1\":{\"269\":1}}],[\"指定不同的名称\",{\"1\":{\"256\":1}}],[\"指定宿主机的ip地址和随机端口映射到容器的端口\",{\"1\":{\"254\":1}}],[\"指定宿主机的ip地址和端口映射到容器的端口\",{\"1\":{\"253\":1,\"254\":1}}],[\"指定索引处理器\",{\"1\":{\"28\":1}}],[\"比赛开始\",{\"1\":{\"552\":1}}],[\"比\",{\"1\":{\"485\":1,\"522\":1,\"617\":1}}],[\"比链表快\",{\"1\":{\"452\":1}}],[\"比对已经获得锁的线程是否与当前线程相同\",{\"1\":{\"218\":1}}],[\"比自己小的\",{\"1\":{\"214\":1}}],[\"比自己小且相差最小的\",{\"1\":{\"214\":1}}],[\"比较长\",{\"1\":{\"910\":1}}],[\"比较功能\",{\"1\":{\"735\":1}}],[\"比较容易产生冲突\",{\"1\":{\"508\":1}}],[\"比较大小\",{\"1\":{\"445\":1}}],[\"比较而言\",{\"1\":{\"445\":1}}],[\"比较等\",{\"1\":{\"388\":1}}],[\"比较普遍的做法是选择可用性和分区容错性\",{\"1\":{\"203\":1}}],[\"比较麻烦\",{\"1\":{\"116\":1,\"410\":1}}],[\"比例再担保是依据与合作担保机构签署的\",{\"1\":{\"164\":1}}],[\"比如你对boss说是否有时间参加一个会议\",{\"1\":{\"922\":1}}],[\"比如你可能想在关闭连接之前发送一个错误码的响应消息\",{\"1\":{\"613\":2}}],[\"比如getreadholdcount\",{\"1\":{\"822\":1}}],[\"比如上面正确同步的多线程程序在临界区内的重排序\",{\"1\":{\"809\":1}}],[\"比如n+1个线程\",{\"1\":{\"769\":1}}],[\"比如下面的伪代码\",{\"1\":{\"723\":1}}],[\"比如下拦截器中的使用\",{\"1\":{\"650\":1}}],[\"比如在命令行中经常使用的\",{\"1\":{\"712\":1}}],[\"比如轻量级锁的标记位\",{\"1\":{\"672\":1}}],[\"比如d要执行\",{\"1\":{\"659\":1}}],[\"比如对于图\",{\"1\":{\"622\":1}}],[\"比如截断操作\",{\"1\":{\"620\":1}}],[\"比如拼接操作\",{\"1\":{\"620\":1}}],[\"比如说\",{\"1\":{\"617\":1,\"618\":1,\"619\":1,\"623\":1}}],[\"比如客户端和服务端的协议\",{\"1\":{\"607\":1}}],[\"比如第一个线程执行exchange\",{\"1\":{\"555\":1}}],[\"比如数据链接\",{\"1\":{\"554\":1}}],[\"比如颁发机构\",{\"1\":{\"522\":1}}],[\"比如header请求头中添加token\",{\"1\":{\"483\":1}}],[\"比如认证进入\",{\"1\":{\"418\":1}}],[\"比如session\",{\"1\":{\"301\":1}}],[\"比如sex\",{\"1\":{\"82\":1}}],[\"比如tomcat\",{\"1\":{\"300\":1}}],[\"比如windows下是通过c\",{\"1\":{\"222\":1}}],[\"比如做db主键的场景下\",{\"1\":{\"210\":1}}],[\"比如前几年支付宝光缆被挖断的事件\",{\"1\":{\"203\":1}}],[\"比如淘宝的购物\",{\"1\":{\"201\":1}}],[\"比如我们熟知的关系型数据库\",{\"1\":{\"196\":1}}],[\"比如现在的分布式系统中有某一个或者几个机器宕掉了\",{\"1\":{\"195\":1}}],[\"比如使用再担保服务\",{\"1\":{\"166\":1}}],[\"比如列表键\",{\"1\":{\"121\":1}}],[\"比如列表键的底层实现之一就是链表\",{\"1\":{\"118\":1}}],[\"比如\",{\"1\":{\"112\":1,\"128\":1,\"130\":1,\"218\":1,\"413\":2,\"456\":1,\"520\":1,\"527\":1,\"623\":1,\"638\":1,\"722\":1,\"723\":1,\"843\":1,\"896\":1}}],[\"比如base64加密文件等\",{\"1\":{\"87\":1}}],[\"比如大数据量的group\",{\"1\":{\"74\":1}}],[\"比如load\",{\"1\":{\"74\":1}}],[\"比如刚刚的例子\",{\"1\":{\"67\":1}}],[\"比如被注销\",{\"1\":{\"66\":1}}],[\"比通常的\",{\"1\":{\"23\":1}}],[\"假定真实性可以用于计算机系统中首先建立一个信任根\",{\"1\":{\"684\":1}}],[\"假定用户在执行这个函数时\",{\"1\":{\"619\":1}}],[\"假如\",{\"1\":{\"893\":1}}],[\"假如现网每天凌晨\",{\"1\":{\"868\":1}}],[\"假如坚持责任链不纯便不是责任链模式\",{\"1\":{\"825\":1}}],[\"假如花束在某人手中\",{\"1\":{\"825\":1}}],[\"假如synchronized\",{\"1\":{\"723\":1}}],[\"假如有两个线程来竞争该锁话\",{\"1\":{\"673\":1}}],[\"假如该锁没有被其他线程所获取\",{\"1\":{\"673\":1}}],[\"假如业务场景中\",{\"1\":{\"665\":1}}],[\"假如系统要使用mysql5\",{\"1\":{\"320\":1}}],[\"假如执行到第五步的时候\",{\"1\":{\"66\":1}}],[\"假设不会发生并发冲突\",{\"1\":{\"730\":1}}],[\"假设会发生并发冲突\",{\"1\":{\"725\":1}}],[\"假设是core1是第一个发起操作的cpu核\",{\"1\":{\"663\":1}}],[\"假设客户端想要关闭连接\",{\"1\":{\"649\":1}}],[\"假设丢失了\",{\"1\":{\"644\":1}}],[\"假设程序里有两个在内存中紧邻着的\",{\"1\":{\"619\":1}}],[\"假设只想用一个大网段把这600个点位分配ip地址\",{\"1\":{\"526\":1}}],[\"假设监控网络中有600个点位\",{\"1\":{\"526\":1}}],[\"假设数组长度为l\",{\"1\":{\"508\":1}}],[\"假设kafka集群中有4台服务器\",{\"1\":{\"432\":1}}],[\"假设主题a共有4个分区\",{\"1\":{\"431\":1}}],[\"假设有系统b\",{\"1\":{\"428\":1}}],[\"假设存在dev\",{\"0\":{\"383\":1}}],[\"假设现在一个秒杀业务需要支持的并发量超过百万级别\",{\"1\":{\"221\":1}}],[\"假设用户此时下单\",{\"1\":{\"219\":1}}],[\"假设两个客户端\",{\"1\":{\"214\":1}}],[\"假设第一个客户端对应的\",{\"1\":{\"214\":1}}],[\"假设计算得出的哈希值为\",{\"1\":{\"127\":1}}],[\"假设我们在员工表的年龄上建立了索引\",{\"1\":{\"103\":1}}],[\"假设\",{\"1\":{\"24\":1}}],[\"假设块大小为64mb\",{\"1\":{\"17\":1}}],[\"把这个函数移至另一个地点\",{\"1\":{\"913\":1}}],[\"把函数所需的所有东西都以参数传递进去\",{\"1\":{\"910\":1}}],[\"把方法移至对应的类\",{\"1\":{\"906\":1}}],[\"把switch分支的逻辑移至具体的实现类\",{\"1\":{\"906\":1}}],[\"把string中的字符写入文件\",{\"1\":{\"541\":1}}],[\"把较小的块移动到更合适的类中\",{\"1\":{\"900\":1}}],[\"把该系统和另一个系统结合起来需要的工作量的多少\",{\"1\":{\"898\":1}}],[\"把程序从一种硬件配置和\",{\"1\":{\"898\":1}}],[\"把本地内存\",{\"1\":{\"809\":1}}],[\"把fd\",{\"1\":{\"799\":1}}],[\"把\",{\"1\":{\"799\":1}}],[\"把自己阻塞\",{\"1\":{\"723\":1}}],[\"把锁的计数器+1\",{\"1\":{\"723\":1}}],[\"把锁的计算器加1\",{\"1\":{\"703\":1}}],[\"把信任关系扩大到整个计算机系统\",{\"1\":{\"684\":1}}],[\"把信用证通知出口人\",{\"1\":{\"176\":1}}],[\"把明文变成密文\",{\"1\":{\"675\":1}}],[\"把工作线程池最大线程数设置为1\",{\"1\":{\"650\":1}}],[\"把数据读写到磁盘上一样\",{\"1\":{\"636\":1}}],[\"把maven\",{\"1\":{\"576\":1}}],[\"把字节数组的内容写进去文件\",{\"1\":{\"539\":1}}],[\"把网络地址的后面三个零全换成1\",{\"1\":{\"526\":1}}],[\"把随机值用锁头锁起来\",{\"1\":{\"522\":1}}],[\"把多个\",{\"1\":{\"475\":1}}],[\"把下一个序号\",{\"1\":{\"455\":1}}],[\"把a重新刷新回内存\",{\"1\":{\"440\":1}}],[\"把http的域名请求转成https\",{\"1\":{\"317\":1}}],[\"把请求转发给连接数较少的后端服务器\",{\"1\":{\"302\":2}}],[\"把资金提供给这些单位使用\",{\"1\":{\"171\":1}}],[\"把同一个表的数据按一定规则拆到多个表中\",{\"1\":{\"132\":1}}],[\"把一个表的总行数存在了磁盘上\",{\"1\":{\"116\":1}}],[\"把结果写回b账号中\",{\"1\":{\"66\":1}}],[\"把结果写回a账号中\",{\"1\":{\"66\":1}}],[\"把处理过程高度抽象为两个函数\",{\"1\":{\"33\":1}}],[\"要给它们执行的机会\",{\"1\":{\"924\":1}}],[\"要减少硬解析\",{\"1\":{\"863\":1}}],[\"要计算数组占用的大小\",{\"1\":{\"722\":1}}],[\"要求主线程等待所有任务全部准备好才一起并行执行\",{\"1\":{\"814\":1,\"930\":1}}],[\"要求鲍勃去找\",{\"1\":{\"705\":1}}],[\"要求更新过的数据能被后续的访问都能看到\",{\"1\":{\"193\":1}}],[\"要做到一个实体在实现给定目标对其行为总是同预期的结果一样\",{\"1\":{\"684\":1}}],[\"要记得及时\",{\"1\":{\"650\":1}}],[\"要得到广播\",{\"1\":{\"526\":1}}],[\"要更耗费服务器资源\",{\"1\":{\"522\":1}}],[\"要更加高效\",{\"1\":{\"23\":1}}],[\"要比较\",{\"1\":{\"522\":1}}],[\"要合并的代码文件也会以列表的形式同时发送给负责人\",{\"1\":{\"488\":1}}],[\"要想安全传输\",{\"1\":{\"485\":1}}],[\"要想提升系统的分区容错性\",{\"1\":{\"196\":1}}],[\"要消耗比较多的资源\",{\"1\":{\"484\":1}}],[\"要获取该结果\",{\"1\":{\"445\":1}}],[\"要添加的值\",{\"1\":{\"444\":1}}],[\"要加的值\",{\"1\":{\"444\":1}}],[\"要配合缓存命中来使用\",{\"1\":{\"305\":1}}],[\"要让指定的访问反向代理到服务器列表\",{\"1\":{\"298\":1}}],[\"要高可用并允许分区\",{\"1\":{\"201\":1}}],[\"要积极为符合条件的融资担保业务提供再担保\",{\"1\":{\"165\":1}}],[\"要么完全失败\",{\"1\":{\"199\":1}}],[\"要么完全不执行\",{\"1\":{\"199\":1}}],[\"要么全部不完成\",{\"1\":{\"105\":1}}],[\"要么全部完成\",{\"1\":{\"105\":1}}],[\"要么都不执行\",{\"1\":{\"65\":1,\"66\":1}}],[\"要考虑各个索引\",{\"1\":{\"100\":1}}],[\"要显式地为表创建一个使用自增列\",{\"1\":{\"82\":1}}],[\"要保证sql语句查询的高效性\",{\"1\":{\"82\":1}}],[\"要秉承着简单\",{\"1\":{\"82\":1}}],[\"要同步的数据库\",{\"1\":{\"79\":1}}],[\"条件语句统计多指标任务\",{\"1\":{\"789\":1}}],[\"条件\",{\"1\":{\"703\":1}}],[\"条件控制\",{\"1\":{\"413\":1}}],[\"条\",{\"1\":{\"64\":1}}],[\"桶名\",{\"1\":{\"63\":1}}],[\"桶的键进行排序的\",{\"1\":{\"23\":1}}],[\"低于\",{\"1\":{\"866\":1}}],[\"低耦合\",{\"1\":{\"265\":1,\"825\":1}}],[\"低延迟\",{\"1\":{\"204\":1}}],[\"低延迟数据访问\",{\"1\":{\"15\":1}}],[\"低版本okhttp3会报错\",{\"1\":{\"63\":1}}],[\"三则重构\",{\"1\":{\"907\":1}}],[\"三次法则\",{\"1\":{\"907\":1}}],[\"三次握手\",{\"1\":{\"643\":1,\"644\":1}}],[\"三次握手建立连接\",{\"1\":{\"522\":1}}],[\"三层三元对等的可信连接框架\",{\"0\":{\"691\":1}}],[\"三种状态\",{\"1\":{\"864\":1}}],[\"三种classpath都有效\",{\"1\":{\"593\":1}}],[\"三种一致性策略\",{\"0\":{\"193\":1}}],[\"三元运算\",{\"1\":{\"388\":1}}],[\"三农\",{\"1\":{\"167\":3,\"189\":2}}],[\"三个类\",{\"1\":{\"898\":1}}],[\"三个常量值\",{\"1\":{\"549\":1}}],[\"三个ip段的二进制前面22位的是不变的\",{\"1\":{\"526\":1}}],[\"三个容器启动完成之后\",{\"1\":{\"262\":1}}],[\"三个属性为节点值设置类型特定函数\",{\"1\":{\"119\":1}}],[\"三个字段作为key\",{\"1\":{\"20\":1}}],[\"三\",{\"0\":{\"117\":1,\"122\":1,\"318\":1},\"1\":{\"63\":1,\"64\":1,\"189\":5,\"627\":1,\"684\":1}}],[\"容易产生java\",{\"1\":{\"574\":1}}],[\"容易遗漏\",{\"1\":{\"413\":1}}],[\"容量大小一旦指定就不可改变\",{\"1\":{\"531\":1}}],[\"容器中\",{\"1\":{\"381\":1}}],[\"容器中数据主要有两种方式\",{\"1\":{\"262\":1}}],[\"容器运行时\",{\"1\":{\"289\":1}}],[\"容器运行前需设置的环境变量列表\",{\"1\":{\"263\":1}}],[\"容器启动完成后首次探测的时间\",{\"1\":{\"263\":1}}],[\"容器启动的初始可用数量\",{\"1\":{\"263\":2}}],[\"容器启动之后执行的命令\",{\"1\":{\"263\":1}}],[\"容器所在主机需要监听的端口号\",{\"1\":{\"263\":1}}],[\"容器需要监听的端口号\",{\"1\":{\"263\":1}}],[\"容器的最低要求是实现\",{\"1\":{\"381\":1}}],[\"容器的工作目录\",{\"1\":{\"263\":1}}],[\"容器的启动命令参数列表\",{\"1\":{\"263\":1}}],[\"容器的启动命令列表\",{\"1\":{\"263\":1}}],[\"容器的镜像名称\",{\"1\":{\"263\":1}}],[\"容器名称\",{\"1\":{\"263\":1}}],[\"容器暴露的端口号\",{\"1\":{\"263\":1}}],[\"容器\",{\"1\":{\"262\":1,\"533\":2}}],[\"容器绑定网络\",{\"0\":{\"262\":1}}],[\"容器内端口\",{\"1\":{\"260\":1}}],[\"容器id\",{\"1\":{\"259\":1}}],[\"容器和宿主机ip地址一模一样\",{\"1\":{\"255\":1}}],[\"容器模式里\",{\"1\":{\"250\":1}}],[\"容器模式\",{\"0\":{\"256\":1},\"1\":{\"250\":1}}],[\"容器跟其他容器的network\",{\"1\":{\"250\":1}}],[\"容器与镜像的关系类\",{\"1\":{\"234\":1}}],[\"容器除了运行其中的应用之外\",{\"1\":{\"232\":1}}],[\"容器到主机的映射\",{\"1\":{\"63\":1}}],[\"容错按系统级别划分\",{\"1\":{\"704\":1}}],[\"容错的目标是降低或者最小化故障对系统可用性\",{\"1\":{\"704\":1}}],[\"容错的思想是在系统体系结构上精心设计\",{\"1\":{\"704\":1}}],[\"容错是指当出现某些指定的硬件故障或软件故障时\",{\"1\":{\"704\":1}}],[\"容错技术\",{\"1\":{\"704\":1}}],[\"容错及网络通信等复杂工作\",{\"1\":{\"33\":1}}],[\"容错性\",{\"1\":{\"15\":1}}],[\"卷挂载\",{\"1\":{\"63\":1}}],[\"兼容部分\",{\"0\":{\"624\":1}}],[\"兼容\",{\"1\":{\"63\":1}}],[\"兼容各种硬件和软件平台\",{\"1\":{\"15\":1}}],[\"云存储服务\",{\"1\":{\"63\":1}}],[\"搜索replicaof\",{\"1\":{\"355\":1}}],[\"搜索并未结束\",{\"1\":{\"307\":1}}],[\"搜索的索引列\",{\"1\":{\"100\":1}}],[\"搜索镜像\",{\"1\":{\"63\":1}}],[\"搜索相似图片\",{\"0\":{\"62\":1}}],[\"搜索数据\",{\"1\":{\"4\":1}}],[\"该属性是发送到服务器之前应该如何对表单数据进行编码\",{\"0\":{\"749\":1}}],[\"该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理\",{\"1\":{\"435\":1}}],[\"该接口有且只有一个方法int\",{\"1\":{\"735\":1}}],[\"该空间大小为4字节\",{\"1\":{\"722\":1}}],[\"该对象被创建出来的那一刻\",{\"1\":{\"673\":1}}],[\"该对象的部分markword关键数据如下\",{\"1\":{\"673\":1}}],[\"该对象仅仅被弱引用关联\",{\"1\":{\"650\":1}}],[\"该调度器是一个\",{\"1\":{\"654\":1}}],[\"该字段用于发现头部信息和数据中的错误\",{\"1\":{\"642\":1}}],[\"该groupid与域名nexus\",{\"1\":{\"587\":1}}],[\"该仓库的地址是setting\",{\"1\":{\"584\":1}}],[\"该代码的\",{\"1\":{\"580\":1}}],[\"该操作会清空当前目录的target文件夹\",{\"1\":{\"566\":1}}],[\"该参数可以是任意的字符串\",{\"1\":{\"564\":1}}],[\"该参数为默认参数\",{\"1\":{\"251\":1}}],[\"该类加载器在此目录里面查找并加载java类\",{\"1\":{\"558\":1}}],[\"该类打算使用varhandles实现\",{\"1\":{\"444\":1}}],[\"该算法的思想是\",{\"1\":{\"558\":1}}],[\"该阶段主要完成符号引用到直接引用的转换动作\",{\"1\":{\"558\":1,\"563\":1}}],[\"该队列不允许null元素\",{\"1\":{\"530\":1}}],[\"该队列的元素遵循先进先出的原则\",{\"1\":{\"530\":1}}],[\"该命令执行完后会在当前目录生成一个\",{\"1\":{\"497\":1}}],[\"该策略在高性能与cpu资源之间取舍的折中方案\",{\"1\":{\"472\":1}}],[\"该函数应该没有副作用\",{\"1\":{\"444\":2}}],[\"该信息可由actuator\",{\"1\":{\"414\":1}}],[\"该处写死\",{\"1\":{\"410\":2}}],[\"该处配置自动填充createtime\",{\"1\":{\"64\":1}}],[\"该方法是获取读锁被获取的次数\",{\"1\":{\"820\":1}}],[\"该方法相当于tx2\",{\"1\":{\"427\":1}}],[\"该方法相当于tx1\",{\"1\":{\"427\":1}}],[\"该方案我目前采用的\",{\"1\":{\"410\":1}}],[\"该方式需要每个开发人员改yml文件且不能提交\",{\"1\":{\"410\":1}}],[\"该注解会扫描\",{\"1\":{\"409\":1}}],[\"该token就不可用了\",{\"1\":{\"294\":1}}],[\"该模式可以实现多宿主机的容器互联\",{\"1\":{\"261\":1}}],[\"该模式表示没有配置网络模式\",{\"1\":{\"257\":1}}],[\"该模式比bridge模式更快\",{\"1\":{\"255\":1}}],[\"该模式将禁用docker容器的网络隔离\",{\"1\":{\"255\":1}}],[\"该模式会为每个容器分配network\",{\"1\":{\"250\":1}}],[\"该网络模式中\",{\"1\":{\"255\":1}}],[\"该值为thread类中的成员变量\",{\"1\":{\"217\":1}}],[\"该值默认为0\",{\"1\":{\"74\":1}}],[\"该规则给连续发行证券的公司提供了最大的便利\",{\"1\":{\"178\":1}}],[\"该哈希表已有节点的数量\",{\"1\":{\"124\":1}}],[\"该考虑所要\",{\"1\":{\"100\":1}}],[\"该循环程序运行时间\",{\"1\":{\"61\":1}}],[\"该指标通常用于自然语言处理\",{\"1\":{\"53\":1}}],[\"该指标通常用于计算机视觉\",{\"1\":{\"53\":1}}],[\"训练数据\",{\"0\":{\"61\":1}}],[\"训练集用来训练\",{\"1\":{\"58\":1}}],[\"按预定的成本和进度把系统开发出来\",{\"1\":{\"898\":1}}],[\"按纸条规定行事等\",{\"1\":{\"825\":1}}],[\"按钮\",{\"1\":{\"488\":2}}],[\"按访问url的hash结果来分配请求\",{\"1\":{\"305\":1}}],[\"按月将担保代偿补偿备付金足额存入省级再担保机构在银行分行设立的备付金账户\",{\"1\":{\"189\":1}}],[\"按承租人同意的条件\",{\"1\":{\"187\":1}}],[\"按信用证规定向其所在地行\",{\"1\":{\"176\":1}}],[\"按期在指定地点收取货款\",{\"1\":{\"176\":1}}],[\"按主键删除实体\",{\"1\":{\"58\":1}}],[\"按照分区时间分组\",{\"1\":{\"789\":1}}],[\"按照天分组来统计每天用户登录总数\",{\"1\":{\"789\":1}}],[\"按照设置的策略来处理无法执行的任务\",{\"1\":{\"753\":1}}],[\"按照名名列的形式组织的数据集合\",{\"1\":{\"627\":1}}],[\"按照容量划分二个大小相等的内存区域\",{\"1\":{\"557\":1}}],[\"按照\",{\"0\":{\"385\":1}}],[\"按照原始数据大小以16k为单位的4倍申请内存\",{\"1\":{\"317\":1}}],[\"按照服务器端的响应时间来分配请求\",{\"1\":{\"304\":1}}],[\"按照规范填写各项\",{\"1\":{\"297\":1}}],[\"按照时间有序递增\",{\"1\":{\"206\":1}}],[\"按照委托管理协议直接支付代偿资金\",{\"1\":{\"189\":1}}],[\"按照委托人意愿\",{\"1\":{\"179\":1}}],[\"按照银行贷款评审要求和程序完成贷款审批\",{\"1\":{\"189\":1}}],[\"按照本办法第九条有关规定重新组织采购活动\",{\"1\":{\"188\":1}}],[\"按照水平分库的思路对商品库内的表也进行水平拆分\",{\"1\":{\"132\":1}}],[\"按照mapreduce语义\",{\"1\":{\"47\":1}}],[\"按照输入路径下的数据块百分比进行抽样\",{\"1\":{\"24\":1}}],[\"按照一个或者多个列对结果进行分组\",{\"1\":{\"22\":1}}],[\"执行失败\",{\"1\":{\"891\":1}}],[\"执行语句1\",{\"1\":{\"891\":1}}],[\"执行计划放入\",{\"1\":{\"863\":1}}],[\"执行注册服务脚本\",{\"1\":{\"838\":1}}],[\"执行号\",{\"1\":{\"838\":2,\"841\":4,\"843\":12,\"869\":5,\"883\":1,\"884\":1,\"885\":1,\"887\":3,\"893\":7}}],[\"执行下\",{\"1\":{\"834\":1}}],[\"执行速度快非自旋锁在获取不到锁的时候会进入阻塞状态\",{\"1\":{\"812\":1}}],[\"执行的顺序是会随机改变的\",{\"1\":{\"809\":1}}],[\"执行的命令发送到\",{\"1\":{\"155\":1}}],[\"执行的命令\",{\"1\":{\"155\":1,\"230\":1}}],[\"执行完一个任务调用countdown让计数器减一\",{\"1\":{\"776\":1}}],[\"执行流程以及造成的影响同fixedthreadpool\",{\"1\":{\"772\":1}}],[\"执行顺序往往是有序的\",{\"1\":{\"660\":1}}],[\"执行顺序是一个乱序\",{\"1\":{\"659\":1}}],[\"执行和监控container\",{\"1\":{\"655\":1}}],[\"执行程序的线程是tomcat的工作线程\",{\"1\":{\"650\":1}}],[\"执行这些\",{\"1\":{\"627\":1}}],[\"执行字节码工作时就是利用程序计数器来选取下一条需要执行的字节码指令\",{\"1\":{\"556\":1}}],[\"执行请求\",{\"1\":{\"518\":1}}],[\"执行请求并获得响应结果\",{\"1\":{\"518\":2}}],[\"执行命令之前记得先提交你当前分支的修改\",{\"1\":{\"500\":1}}],[\"执行cas操作的时候\",{\"1\":{\"442\":1}}],[\"执行一个线程dump\",{\"1\":{\"418\":1}}],[\"执行编译\",{\"1\":{\"343\":1}}],[\"执行在kubeadm\",{\"1\":{\"294\":1}}],[\"执行ifconfig命令\",{\"1\":{\"256\":1}}],[\"执行结果\",{\"1\":{\"214\":1}}],[\"执行业务代码\",{\"1\":{\"214\":1}}],[\"执行业务\",{\"1\":{\"214\":1}}],[\"执行了javaagent\",{\"1\":{\"709\":1}}],[\"执行了\",{\"1\":{\"150\":1}}],[\"执行\",{\"1\":{\"116\":1,\"214\":1,\"293\":1,\"294\":1,\"475\":1,\"621\":2,\"622\":2,\"838\":1,\"863\":1}}],[\"执行混合搜索\",{\"1\":{\"58\":1}}],[\"执行矢量查询\",{\"1\":{\"58\":1}}],[\"执行map方法\",{\"0\":{\"35\":1}}],[\"执行mapreduce作业的机器角色由两个\",{\"1\":{\"33\":1}}],[\"向线程池提交任务\",{\"0\":{\"762\":1}}],[\"向客户端发送结束连接请求\",{\"1\":{\"649\":1}}],[\"向负责人发送代码合并请求\",{\"1\":{\"488\":1}}],[\"向消费组2中增加新的消费者即可\",{\"1\":{\"431\":1}}],[\"向集群添加新节点\",{\"1\":{\"294\":1}}],[\"向集合中插入向量\",{\"1\":{\"58\":1}}],[\"向已合作的银行\",{\"1\":{\"189\":1}}],[\"向国家融资担保基金报送担保代偿补偿备付金使用情况以及担保代偿补偿项目明细及业务汇总表等\",{\"1\":{\"189\":1}}],[\"向承租人指定的出卖人\",{\"1\":{\"187\":1}}],[\"向承租人转移了与资产所有权有关的全部风险和报酬的租赁形式\",{\"1\":{\"187\":1}}],[\"向业主提供的\",{\"1\":{\"181\":1}}],[\"向出口人开出信用证\",{\"1\":{\"176\":1}}],[\"向开户银行申请并经银行审查同意承兑的\",{\"1\":{\"175\":1}}],[\"向符合条件的担保\",{\"1\":{\"165\":1}}],[\"向符合条件的担保机构担保项目提供一定比例的风险分担\",{\"1\":{\"164\":1}}],[\"向担保机构提供代偿补偿\",{\"1\":{\"165\":1}}],[\"向namenode发送心跳\",{\"1\":{\"19\":1}}],[\"示例6\",{\"1\":{\"475\":1}}],[\"示例5\",{\"1\":{\"475\":1}}],[\"示例4\",{\"1\":{\"475\":1}}],[\"示例3\",{\"1\":{\"475\":1}}],[\"示例代码\",{\"1\":{\"401\":1}}],[\"示例如下\",{\"1\":{\"398\":1,\"416\":1,\"539\":2}}],[\"示例2\",{\"1\":{\"307\":1,\"475\":1}}],[\"示例1\",{\"1\":{\"307\":1,\"475\":1}}],[\"示例\",{\"0\":{\"58\":1},\"1\":{\"64\":1,\"263\":1,\"526\":1,\"537\":1,\"616\":2}}],[\"交互获取\",{\"1\":{\"627\":1}}],[\"交互对比\",{\"0\":{\"482\":1}}],[\"交互方式还有delete\",{\"1\":{\"476\":1}}],[\"交互式数字qa聊天机器人\",{\"1\":{\"55\":1}}],[\"交给用户编写的map函数处理\",{\"1\":{\"40\":1}}],[\"问答系统\",{\"1\":{\"55\":1}}],[\"问题特别严重的银行机构\",{\"1\":{\"189\":1}}],[\"问题\",{\"1\":{\"27\":1,\"413\":1}}],[\"音频\",{\"0\":{\"87\":1},\"1\":{\"623\":1}}],[\"音频相似性搜索\",{\"1\":{\"55\":1}}],[\"音效等海量音频数据\",{\"1\":{\"55\":1}}],[\"音乐\",{\"1\":{\"55\":1}}],[\"视同未预留份额的采购项目或者采购包\",{\"1\":{\"188\":1}}],[\"视频\",{\"1\":{\"623\":1}}],[\"视频等大容量内容\",{\"0\":{\"87\":1}}],[\"视频相似性搜索\",{\"1\":{\"55\":1}}],[\"视图等对象的定义\",{\"1\":{\"864\":1}}],[\"视图等\",{\"1\":{\"846\":1,\"888\":1}}],[\"视图名为\",{\"1\":{\"20\":1}}],[\"视图如下\",{\"1\":{\"20\":1}}],[\"视图才能工作\",{\"1\":{\"20\":1}}],[\"视图可以允许保存一个查询\",{\"1\":{\"20\":1}}],[\"领域的金融支持\",{\"1\":{\"167\":1}}],[\"领域\",{\"1\":{\"53\":2,\"54\":1}}],[\"欧几里得距离\",{\"1\":{\"53\":1}}],[\"xhost\",{\"1\":{\"834\":2}}],[\"xhtml+xml\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"xsd\",{\"1\":{\"715\":2}}],[\"xsi\",{\"1\":{\"715\":1}}],[\"xsi=\",{\"1\":{\"715\":1}}],[\"xslt\",{\"1\":{\"243\":1}}],[\"xy\",{\"1\":{\"622\":1}}],[\"xyz\",{\"1\":{\"222\":1}}],[\"xl\",{\"1\":{\"544\":1}}],[\"x=192~223时称为c类地址\",{\"1\":{\"525\":1}}],[\"x=128~191时称为b类地址\",{\"1\":{\"525\":1}}],[\"x=1~126时称为a类地址\",{\"1\":{\"525\":1}}],[\"xa\",{\"1\":{\"420\":1}}],[\"x版本\",{\"1\":{\"414\":1}}],[\"xt\",{\"1\":{\"401\":1,\"415\":1}}],[\"xmn\",{\"1\":{\"651\":1}}],[\"xmx值\",{\"1\":{\"651\":1}}],[\"xmx选项设置为相同\",{\"1\":{\"651\":1}}],[\"xmx等选项可进行设置\",{\"1\":{\"651\":1}}],[\"xmx\",{\"1\":{\"651\":1}}],[\"xmx800m这个参数就可以了\",{\"1\":{\"651\":1}}],[\"xmx800m\",{\"1\":{\"651\":2}}],[\"xmx<size>\",{\"1\":{\"651\":1}}],[\"xmx512m<\",{\"1\":{\"707\":1,\"715\":1}}],[\"xmx512m\",{\"1\":{\"574\":1,\"651\":2}}],[\"xmx1024m\",{\"1\":{\"389\":1,\"575\":1}}],[\"xms800m\",{\"1\":{\"651\":1}}],[\"xms为1\",{\"1\":{\"651\":1}}],[\"xms\",{\"1\":{\"651\":3}}],[\"xms32m\",{\"1\":{\"651\":3}}],[\"xms256m\",{\"1\":{\"651\":1}}],[\"xms<size>\",{\"1\":{\"651\":1}}],[\"xms128m\",{\"1\":{\"574\":1}}],[\"xms512m\",{\"1\":{\"389\":1,\"575\":1,\"707\":1,\"715\":1}}],[\"xml等\",{\"1\":{\"748\":1}}],[\"xmlschema\",{\"1\":{\"715\":1}}],[\"xmlns\",{\"1\":{\"715\":1}}],[\"xmlns=\",{\"1\":{\"715\":1}}],[\"xml文件中的enablelookups参数值\",{\"1\":{\"651\":1}}],[\"xml的本地仓库的地址\",{\"1\":{\"584\":1}}],[\"xml的根元素\",{\"1\":{\"578\":1}}],[\"xml的头\",{\"1\":{\"578\":1}}],[\"xml所作的配置是全局的配置\",{\"1\":{\"576\":1}}],[\"xml中所作的配置就是用户级别的配置\",{\"1\":{\"576\":1}}],[\"xml复制到~\",{\"1\":{\"572\":1}}],[\"xml可以在机器上定义全局的行为\",{\"1\":{\"572\":1}}],[\"xml<\",{\"1\":{\"389\":1}}],[\"xml\",{\"0\":{\"425\":1,\"578\":1,\"715\":1},\"1\":{\"317\":3,\"477\":1,\"479\":1,\"480\":1,\"572\":1,\"576\":1,\"578\":1,\"715\":1}}],[\"xzf\",{\"1\":{\"379\":1}}],[\"xforward和真实ip\",{\"1\":{\"317\":2}}],[\"xr9v7\",{\"1\":{\"278\":1}}],[\"xr\",{\"1\":{\"277\":1,\"832\":2,\"833\":4,\"834\":8,\"845\":6}}],[\"x64\",{\"1\":{\"263\":1,\"287\":1,\"376\":1,\"845\":1}}],[\"xvf\",{\"1\":{\"77\":1}}],[\"x86\",{\"1\":{\"76\":1,\"77\":5,\"291\":1,\"318\":1,\"833\":1}}],[\"x\",{\"1\":{\"50\":1,\"73\":1,\"127\":2,\"267\":3,\"277\":1,\"287\":1,\"307\":16,\"315\":1,\"317\":8,\"357\":4,\"362\":4,\"389\":6,\"414\":2,\"435\":1,\"479\":2,\"526\":1,\"527\":2,\"549\":2,\"555\":1,\"566\":1,\"622\":1,\"748\":1,\"749\":1,\"832\":2,\"833\":2,\"834\":4,\"845\":6}}],[\"xx\",{\"1\":{\"28\":1,\"389\":9,\"651\":1,\"669\":1,\"722\":1,\"893\":2}}],[\"xxx或\",{\"1\":{\"307\":1}}],[\"xxxxx\",{\"1\":{\"445\":1,\"779\":1}}],[\"xxxxxx\",{\"1\":{\"213\":1}}],[\"xxxx类的请求都不会以前缀的形式匹配到它\",{\"1\":{\"307\":1}}],[\"xxxx\",{\"1\":{\"214\":4,\"495\":2}}],[\"xxx\",{\"1\":{\"28\":1,\"112\":1,\"307\":1}}],[\"蛋白质结构等等\",{\"1\":{\"50\":1}}],[\"照片\",{\"1\":{\"50\":1}}],[\"论文\",{\"1\":{\"50\":1}}],[\"模\",{\"1\":{\"887\":1}}],[\"模型有\",{\"1\":{\"783\":1}}],[\"模型生成的大量嵌入向量\",{\"1\":{\"50\":1}}],[\"模拟车辆在停车场停留的时间\",{\"1\":{\"554\":1}}],[\"模拟100辆车进入停车场\",{\"1\":{\"554\":1}}],[\"模拟每人到游戏战场所需时间\",{\"1\":{\"552\":1}}],[\"模拟耗时与返回结果\",{\"1\":{\"475\":1}}],[\"模块名\",{\"1\":{\"417\":1}}],[\"模块内的server是服务器列表\",{\"1\":{\"298\":1}}],[\"模块定义的后端服务器列表中选取一台服务器接受用户的请求\",{\"1\":{\"298\":1}}],[\"模式下对象\",{\"1\":{\"846\":1}}],[\"模式具有一个直接量前缀时\",{\"1\":{\"100\":1}}],[\"模式\",{\"0\":{\"421\":1,\"422\":1,\"423\":1},\"1\":{\"21\":1,\"422\":1,\"846\":1}}],[\"年的免费服务\",{\"1\":{\"522\":1}}],[\"年的担保贷款业务纳入合作范围\",{\"1\":{\"189\":1}}],[\"年t\",{\"1\":{\"205\":1}}],[\"年向省级再担保机构收取再担保费\",{\"1\":{\"189\":1}}],[\"年向企业收取担保费\",{\"1\":{\"189\":1}}],[\"年发明\",{\"1\":{\"127\":1}}],[\"年\",{\"1\":{\"50\":1,\"883\":1}}],[\"为用户的默认表空间\",{\"1\":{\"864\":1}}],[\"为用户打造一站式的分布式解决方案\",{\"1\":{\"420\":1}}],[\"为0则释放写锁\",{\"1\":{\"821\":1}}],[\"为传入\",{\"1\":{\"711\":1}}],[\"为公钥做认证\",{\"1\":{\"705\":1}}],[\"为虚拟机提供安全可信的隔离环境\",{\"1\":{\"699\":1}}],[\"为虚拟运行环境提供可信保障\",{\"1\":{\"697\":1}}],[\"为代表\",{\"1\":{\"687\":1}}],[\"为最小单位操作的\",{\"1\":{\"662\":1}}],[\"为哈希\",{\"1\":{\"506\":1}}],[\"为我们的后续产品做准备\",{\"1\":{\"489\":1}}],[\"为产品研发提供参考\",{\"1\":{\"489\":1}}],[\"为特定消费者设置异常处理程序的支持类\",{\"1\":{\"472\":1}}],[\"为事件\",{\"1\":{\"448\":1}}],[\"为为当前环境对应的\",{\"1\":{\"417\":1}}],[\"为配置内容的数据格式\",{\"1\":{\"417\":1}}],[\"为dataid的前缀\",{\"1\":{\"417\":1}}],[\"为docker\",{\"1\":{\"236\":1,\"289\":1}}],[\"为轮询方式的负载均衡\",{\"1\":{\"404\":1}}],[\"为修饰的方法定义一个\",{\"1\":{\"402\":1}}],[\"为处理脚本添加可执行权限\",{\"0\":{\"340\":1,\"365\":1}}],[\"为检测脚本添加可执行权限\",{\"0\":{\"333\":1,\"338\":1,\"346\":1,\"350\":1,\"358\":1,\"363\":1}}],[\"为前缀的请求都会被匹配到\",{\"1\":{\"307\":1}}],[\"为前缀创建全局唯一的\",{\"1\":{\"214\":1}}],[\"为原则\",{\"1\":{\"307\":1}}],[\"为filebeat\",{\"1\":{\"280\":1}}],[\"为空值\",{\"1\":{\"263\":1}}],[\"为分割库存后存储库信息的\",{\"1\":{\"221\":1}}],[\"为商品的\",{\"1\":{\"221\":1}}],[\"为锁对应的\",{\"1\":{\"214\":1}}],[\"为单位计算\",{\"1\":{\"189\":1}}],[\"为中小企业在投标\",{\"1\":{\"188\":1}}],[\"为受益人的利益或者特定目的\",{\"1\":{\"179\":1}}],[\"为受益人的利益\",{\"1\":{\"179\":1}}],[\"为担保机构提供增信和分担风险的担保机构\",{\"1\":{\"162\":1}}],[\"为例\",{\"1\":{\"160\":1,\"343\":1}}],[\"为\",{\"1\":{\"152\":1,\"221\":1,\"616\":1,\"684\":1}}],[\"为散列里面的一个或多个键设置值\",{\"1\":{\"136\":1}}],[\"为了应付分类规则和计费规则的变化\",{\"1\":{\"898\":1}}],[\"为了实现这个功能\",{\"1\":{\"898\":1}}],[\"为了实现变更\",{\"1\":{\"898\":1}}],[\"为了实现可重入锁\",{\"1\":{\"815\":1}}],[\"为了完成预定的功能\",{\"1\":{\"898\":1}}],[\"为了照顾这种处理器\",{\"1\":{\"809\":1}}],[\"为了防止访问冲突\",{\"1\":{\"659\":1}}],[\"为了消除dns查询对性能的影响我们可以关闭dns查询\",{\"1\":{\"651\":1}}],[\"为了确保\",{\"1\":{\"623\":1}}],[\"为了方便区分\",{\"1\":{\"588\":1}}],[\"为了性能和安全\",{\"1\":{\"484\":1}}],[\"为了提高计算机系统的可靠性\",{\"1\":{\"704\":1}}],[\"为了提高性能\",{\"1\":{\"452\":1}}],[\"为了提高用户体验\",{\"1\":{\"202\":1}}],[\"为了满足以上诉求\",{\"1\":{\"431\":1}}],[\"为了重新启用主库\",{\"1\":{\"342\":1}}],[\"为了便于用户访问服务\",{\"1\":{\"222\":1}}],[\"为了避免\",{\"1\":{\"620\":1}}],[\"为了避免出现重复数据和数据丢失\",{\"1\":{\"435\":1}}],[\"为了避免等待期间租约失效\",{\"1\":{\"214\":1}}],[\"为了避免io争抢并减少锁表的几率\",{\"1\":{\"129\":1}}],[\"为了解决跨jvm互斥机制来控制共享资源的访问\",{\"1\":{\"212\":1}}],[\"为了保证多线程间的有效并发\",{\"1\":{\"924\":1}}],[\"为了保证uuid的唯一性\",{\"1\":{\"208\":1}}],[\"为了保证高可用\",{\"1\":{\"201\":1}}],[\"为了对相同或者不同类型的多个键执行操作\",{\"1\":{\"139\":1}}],[\"为了使计算机理解和处理非结构化数据\",{\"1\":{\"50\":1}}],[\"为创建多态字典而设置的\",{\"1\":{\"126\":1}}],[\"为终点\",{\"1\":{\"119\":1}}],[\"为什么选择租期长度呢\",{\"1\":{\"905\":1}}],[\"为什么要这么做\",{\"1\":{\"898\":1}}],[\"为什么要这样做呢\",{\"1\":{\"673\":1}}],[\"为什么实现compareto两个元素比较\",{\"1\":{\"734\":1}}],[\"为什么这么多定义\",{\"1\":{\"684\":1}}],[\"为什么需要混合加密机制\",{\"0\":{\"681\":1}}],[\"为什么会这样\",{\"1\":{\"650\":1}}],[\"为什么用gitlab\",{\"0\":{\"489\":1}}],[\"为什么不在项目开始时多花些时间把设计做好\",{\"1\":{\"898\":1}}],[\"为什么不能用观察者设计模式呢\",{\"1\":{\"475\":1}}],[\"为什么不直接存储图片\",{\"0\":{\"87\":1}}],[\"为什么大字段io效率低\",{\"1\":{\"129\":1}}],[\"为什么一定要设一个主键\",{\"0\":{\"84\":1}}],[\"为字段选取数据类型时\",{\"1\":{\"82\":1}}],[\"为mysql客户端程序和服务器之间的本地通讯指定一个套接字文件\",{\"1\":{\"74\":1}}],[\"为数据库操作提供了一个从失败中恢复到正常状态的方法\",{\"1\":{\"65\":1}}],[\"为数据库的\",{\"1\":{\"21\":1}}],[\"为机器学习\",{\"1\":{\"63\":1}}],[\"为啥要用两个线程呢\",{\"1\":{\"46\":1}}],[\"阶段中\",{\"1\":{\"782\":1}}],[\"阶段处理完的结果\",{\"1\":{\"781\":1}}],[\"阶段再去下载\",{\"1\":{\"781\":1}}],[\"阶段的处理结果会写入磁盘中\",{\"1\":{\"781\":1}}],[\"阶段的执行类\",{\"1\":{\"652\":3}}],[\"阶段的排序与合并\",{\"0\":{\"37\":1}}],[\"阶段\",{\"1\":{\"652\":1}}],[\"阶段方法\",{\"1\":{\"475\":1}}],[\"阶段按照分桶数据进行连接\",{\"1\":{\"23\":1}}],[\"先观察消息链最终得到的对象是用来干什么的\",{\"1\":{\"921\":1}}],[\"先将计算金额代码搬移到rental类中\",{\"1\":{\"902\":1}}],[\"先启动若干数量的线程\",{\"1\":{\"751\":1}}],[\"先于中央处理器\",{\"1\":{\"689\":1}}],[\"先拿对称加密和非对称加密算法\",{\"1\":{\"682\":1}}],[\"先来先得\",{\"1\":{\"674\":1}}],[\"先了解一下对象在jvm内存中的布局\",{\"0\":{\"672\":1}}],[\"先进先出\",{\"1\":{\"538\":1}}],[\"先进入主库\",{\"0\":{\"324\":1}}],[\"先得出网络地址\",{\"1\":{\"526\":1}}],[\"先发送\",{\"1\":{\"486\":1}}],[\"先看看错误\",{\"1\":{\"626\":1}}],[\"先看看get和post的样貌\",{\"1\":{\"476\":1}}],[\"先看一下效果\",{\"1\":{\"73\":1}}],[\"先自旋\",{\"1\":{\"472\":2}}],[\"先等待\",{\"1\":{\"458\":1}}],[\"先使用double\",{\"1\":{\"445\":1}}],[\"先前的值\",{\"1\":{\"444\":4}}],[\"先停止nginx\",{\"1\":{\"343\":1}}],[\"先查找是否有=开头的精确匹配\",{\"1\":{\"307\":1}}],[\"先查看下本地镜像有哪些\",{\"1\":{\"243\":1}}],[\"先以普通网络模式\",{\"1\":{\"256\":1}}],[\"先定位主键值\",{\"1\":{\"104\":1}}],[\"先通过普通索引定位到主键值id=5\",{\"1\":{\"104\":1}}],[\"先添加注解\",{\"1\":{\"64\":1}}],[\"先对数据进行一次本地排序\",{\"1\":{\"42\":1}}],[\"先对从\",{\"1\":{\"37\":1}}],[\"先排序\",{\"1\":{\"36\":1}}],[\"先按照\",{\"1\":{\"21\":1}}],[\"包下\",{\"1\":{\"735\":1}}],[\"包有所不同\",{\"1\":{\"706\":1}}],[\"包\",{\"1\":{\"706\":1}}],[\"包装数据类型的对象时\",{\"1\":{\"413\":1}}],[\"包名+类名\",{\"1\":{\"403\":1}}],[\"包含\",{\"1\":{\"855\":1}}],[\"包含用户管理\",{\"1\":{\"846\":1}}],[\"包含post和get\",{\"1\":{\"749\":1}}],[\"包含一些常量的定义和一个插件\",{\"1\":{\"707\":1}}],[\"包含一系列的标记位\",{\"1\":{\"672\":1}}],[\"包含一个参数\",{\"1\":{\"475\":1}}],[\"包含配置\",{\"0\":{\"259\":1}}],[\"包含本金\",{\"1\":{\"189\":1}}],[\"包含的节点数量\",{\"1\":{\"157\":1}}],[\"包含了若干序列的一个包装类\",{\"1\":{\"472\":1}}],[\"包含了\",{\"1\":{\"155\":1}}],[\"包含键值对的无序散列表\",{\"1\":{\"133\":1}}],[\"包含字符串的无序收集器\",{\"1\":{\"133\":1}}],[\"包含null的列\",{\"1\":{\"88\":1}}],[\"包含在其中的对数据库的操作要么全部被执行\",{\"1\":{\"65\":1}}],[\"包含回车\",{\"1\":{\"34\":1}}],[\"包括本系统当前的其他事务\",{\"1\":{\"725\":1}}],[\"包括可信操作系统\",{\"1\":{\"684\":1}}],[\"包括信任的传递\",{\"1\":{\"684\":1}}],[\"包括硬件结构\",{\"1\":{\"684\":1}}],[\"包括cpu\",{\"1\":{\"656\":1}}],[\"包括包名\",{\"1\":{\"651\":1}}],[\"包括8\",{\"1\":{\"452\":1}}],[\"包括客户端和其他broker节点\",{\"1\":{\"433\":1}}],[\"包括网卡\",{\"1\":{\"250\":1}}],[\"包括\",{\"1\":{\"52\":1,\"93\":1,\"497\":1}}],[\"包括电子邮件\",{\"1\":{\"50\":1}}],[\"包括列族f1和f2\",{\"1\":{\"13\":1}}],[\"拆分数据\",{\"1\":{\"34\":1}}],[\"拆分输入数据\",{\"0\":{\"34\":1}}],[\"频次\",{\"1\":{\"33\":1}}],[\"负数是1\",{\"1\":{\"205\":1}}],[\"负债是多样化的\",{\"1\":{\"172\":1}}],[\"负责协调运行\",{\"1\":{\"657\":1}}],[\"负责启动和监视集群中机器上的计算容器\",{\"1\":{\"657\":1}}],[\"负责与\",{\"1\":{\"655\":1}}],[\"负责与resource\",{\"1\":{\"653\":1}}],[\"负责具体业务逻辑实现\",{\"1\":{\"451\":1}}],[\"负责集群的元数据管理的功能\",{\"1\":{\"433\":1}}],[\"负责分区管理\",{\"1\":{\"433\":1}}],[\"负责创建消息\",{\"1\":{\"433\":1}}],[\"负责执行排序操作的sort命令可以根据字符串\",{\"1\":{\"139\":1}}],[\"负责实际文件数据的保存于操作\",{\"1\":{\"17\":1}}],[\"负载均衡策略\",{\"1\":{\"298\":1}}],[\"负载均衡用于从\",{\"1\":{\"298\":1}}],[\"负载均衡\",{\"0\":{\"397\":1},\"1\":{\"33\":1,\"394\":1,\"395\":1,\"416\":2}}],[\"提炼时应该选择类内彼此相关的变量\",{\"1\":{\"910\":1}}],[\"提出需求的用户往往要在软件成型后\",{\"1\":{\"898\":1}}],[\"提示\",{\"1\":{\"651\":2}}],[\"提示证书存在问题\",{\"1\":{\"522\":1}}],[\"提交账号\",{\"1\":{\"897\":1}}],[\"提交等操作\",{\"1\":{\"650\":1}}],[\"提交本地test分支作为远程的test分支\",{\"1\":{\"499\":1}}],[\"提交本地test分支作为远程的master分支\",{\"1\":{\"499\":1}}],[\"提交当前工作空间的修改内容\",{\"1\":{\"497\":1}}],[\"提交修改\",{\"1\":{\"492\":1}}],[\"提交任务并获得future\",{\"1\":{\"475\":1}}],[\"提交\",{\"1\":{\"456\":1,\"503\":1}}],[\"提交新的数据\",{\"0\":{\"456\":1}}],[\"提交给集群的多台计算机处理\",{\"1\":{\"33\":1}}],[\"提前解除担保责任或银行免除担保代偿责任\",{\"1\":{\"189\":1}}],[\"提高软件的扩展性和维护性\",{\"1\":{\"898\":1}}],[\"提高逻辑读\",{\"1\":{\"863\":1}}],[\"提高效率\",{\"1\":{\"855\":1}}],[\"提高线程利用率\",{\"1\":{\"757\":1}}],[\"提高响应速度\",{\"1\":{\"752\":1}}],[\"提高风险定价能力\",{\"1\":{\"178\":1}}],[\"提高服务效率\",{\"1\":{\"167\":1}}],[\"提高了网络连接的整体可信性\",{\"1\":{\"691\":1}}],[\"提高了一致性\",{\"1\":{\"199\":1}}],[\"提高了其财务稳定性\",{\"1\":{\"167\":1}}],[\"提高了系统的稳定性和可用性\",{\"1\":{\"131\":1}}],[\"提高行业透明度\",{\"1\":{\"166\":1}}],[\"提高检索性能\",{\"1\":{\"132\":1}}],[\"提高索引利用率\",{\"1\":{\"82\":1}}],[\"提供脱机备份还原\",{\"1\":{\"847\":1}}],[\"提供线程可以管理性\",{\"1\":{\"752\":1}}],[\"提供拥塞控制\",{\"1\":{\"644\":1}}],[\"提供并发控制手段\",{\"1\":{\"550\":1}}],[\"提供最终的值时\",{\"1\":{\"475\":1}}],[\"提供给ringbuffer做事件预填充\",{\"1\":{\"461\":1}}],[\"提供then\",{\"1\":{\"451\":1}}],[\"提供onevent\",{\"1\":{\"451\":1}}],[\"提供start\",{\"1\":{\"451\":1}}],[\"提供服务的地方\",{\"1\":{\"234\":1}}],[\"提供外部访问docker\",{\"0\":{\"230\":1}}],[\"提供贷款担保\",{\"1\":{\"189\":1}}],[\"提供\",{\"1\":{\"150\":1,\"153\":1,\"627\":1}}],[\"提供了readlock和writelock两种锁的操作机制\",{\"1\":{\"818\":1}}],[\"提供了对唯一实例的受控访问\",{\"1\":{\"683\":1}}],[\"提供了单播\",{\"1\":{\"640\":1}}],[\"提供了新的方法\",{\"1\":{\"527\":1}}],[\"提供了根据序列获取对应的对象有两个地方调用\",{\"1\":{\"472\":1}}],[\"提供了按序列值来获取数据的功能\",{\"1\":{\"472\":3}}],[\"提供了一些序列功能\",{\"1\":{\"472\":2}}],[\"提供了一份独立的网络环境\",{\"1\":{\"250\":1}}],[\"提供了不一样的性能表现\",{\"1\":{\"450\":1}}],[\"提供了docker镜像的上传\",{\"1\":{\"234\":1}}],[\"提供了\",{\"1\":{\"140\":1,\"609\":1}}],[\"提供了另一种按照抽样百分比进行抽样的方式\",{\"1\":{\"24\":1}}],[\"提供极快的访问\",{\"1\":{\"93\":1}}],[\"仅对当前会话生效\",{\"1\":{\"834\":1}}],[\"仅对字段country建立索引\",{\"1\":{\"28\":1}}],[\"仅支持单播传输\",{\"1\":{\"644\":1}}],[\"仅列出了部分关键的配置\",{\"1\":{\"155\":1}}],[\"仅启用\",{\"1\":{\"140\":1}}],[\"仅删除所有数据\",{\"1\":{\"109\":1}}],[\"仅删除表数据\",{\"1\":{\"109\":1}}],[\"仅加速查询\",{\"1\":{\"101\":1}}],[\"仅需要相应块的位置信息请求\",{\"1\":{\"14\":1}}],[\"定\",{\"1\":{\"887\":1}}],[\"定时任务线程池类\",{\"1\":{\"214\":1}}],[\"定义一个节点\",{\"1\":{\"929\":1}}],[\"定义一个resttemplate的bean\",{\"1\":{\"408\":1}}],[\"定义server\",{\"1\":{\"612\":1}}],[\"定义10线程\",{\"1\":{\"552\":1}}],[\"定义\",{\"1\":{\"530\":1}}],[\"定义线程池\",{\"1\":{\"475\":2}}],[\"定义任务\",{\"1\":{\"475\":1}}],[\"定义了多种不同的策略\",{\"1\":{\"450\":1}}],[\"定义了用户可以创建的内存表\",{\"1\":{\"74\":1}}],[\"定义consumer如何进行等待下一个事件的策略\",{\"1\":{\"450\":1}}],[\"定义变量a\",{\"1\":{\"440\":1}}],[\"定义时区分unchecked\",{\"1\":{\"413\":1}}],[\"定义接口\",{\"1\":{\"408\":1,\"409\":1}}],[\"定义的方法也是不会被调用的\",{\"1\":{\"381\":1}}],[\"定义的扫描路径去找到带有\",{\"1\":{\"381\":1}}],[\"定义发布到\",{\"1\":{\"381\":1}}],[\"定义表\",{\"1\":{\"28\":1}}],[\"定长易于索引\",{\"1\":{\"25\":1}}],[\"加时间戳和流水号\",{\"1\":{\"897\":1}}],[\"加电第一时刻\",{\"1\":{\"689\":1}}],[\"加可信平台控制模块的双节点\",{\"1\":{\"689\":1}}],[\"加解密算法\",{\"1\":{\"675\":1}}],[\"加密算法均自主设计\",{\"0\":{\"692\":1}}],[\"加密过程\",{\"0\":{\"679\":1}}],[\"加密成\",{\"1\":{\"675\":1}}],[\"加密密钥\",{\"1\":{\"675\":1,\"676\":1,\"677\":1}}],[\"加密后的消息ct\",{\"1\":{\"675\":1}}],[\"加密解密\",{\"0\":{\"675\":1}}],[\"加1\",{\"1\":{\"648\":1}}],[\"加强对日期与时间的处理\",{\"1\":{\"527\":1}}],[\"加强了整个融资担保行业的稳定性和可持续性\",{\"1\":{\"167\":1}}],[\"加入打包插件\",{\"1\":{\"576\":1}}],[\"加入到\",{\"1\":{\"529\":1}}],[\"加入到git的索引中就表示记入了版本历史中\",{\"1\":{\"497\":1,\"503\":1}}],[\"加入自己的理解的error\",{\"1\":{\"413\":1}}],[\"加入kubernetes\",{\"0\":{\"294\":1}}],[\"加入我们不能一次性获取到锁\",{\"1\":{\"219\":1}}],[\"加上前后填充属性所占的字节数\",{\"1\":{\"667\":1}}],[\"加上前缀\",{\"1\":{\"549\":1}}],[\"加上clean\",{\"1\":{\"576\":1}}],[\"加上128\",{\"1\":{\"479\":1}}],[\"加上一个数字标识来存储\",{\"1\":{\"221\":1}}],[\"加上视图功能\",{\"1\":{\"20\":1}}],[\"加锁前先查看是否有排队等待的线程\",{\"1\":{\"674\":1}}],[\"加锁\",{\"0\":{\"217\":1},\"1\":{\"213\":1}}],[\"加锁机制\",{\"1\":{\"213\":1}}],[\"加州大学伯克利分校的eric\",{\"1\":{\"190\":1}}],[\"加载这两种\",{\"1\":{\"710\":1}}],[\"加载是类加载的第一个过程\",{\"1\":{\"558\":1}}],[\"加载过的类信息\",{\"1\":{\"557\":1}}],[\"加载到\",{\"1\":{\"563\":1}}],[\"加载到内存去操作\",{\"1\":{\"433\":1}}],[\"加载到properties对象出现io异常\",{\"1\":{\"297\":1}}],[\"加载应用成功\",{\"1\":{\"243\":1}}],[\"加载\",{\"1\":{\"155\":2,\"321\":1,\"558\":2}}],[\"加速查询\",{\"1\":{\"101\":2}}],[\"加新字段\",{\"1\":{\"27\":1}}],[\"个工作线程\",{\"1\":{\"858\":1}}],[\"个步骤\",{\"1\":{\"809\":1}}],[\"个体对群体\",{\"1\":{\"684\":1}}],[\"个虚箭头\",{\"1\":{\"549\":1}}],[\"个实心箭头\",{\"1\":{\"549\":1}}],[\"个包\",{\"1\":{\"522\":3}}],[\"个方法左右的类\",{\"1\":{\"475\":1}}],[\"个人理解=>大概相当于把atomicreferencefieldupdater中原有的tail取出\",{\"1\":{\"929\":1}}],[\"个人认为message\",{\"1\":{\"921\":1}}],[\"个人到达游戏战场\",{\"1\":{\"552\":1}}],[\"个人发现某60和某讯电脑管家\",{\"1\":{\"485\":1}}],[\"个人免费版\",{\"1\":{\"263\":1}}],[\"个人或银行的汇票\",{\"1\":{\"175\":1}}],[\"个\",{\"1\":{\"161\":1}}],[\"个已连接的\",{\"1\":{\"155\":1}}],[\"个索引\",{\"1\":{\"100\":1}}],[\"个或\",{\"1\":{\"100\":1}}],[\"个字节长的\",{\"1\":{\"622\":1}}],[\"个字节多的空间\",{\"1\":{\"82\":1}}],[\"个字符长的数组\",{\"1\":{\"620\":1}}],[\"个字符的\",{\"1\":{\"620\":1}}],[\"个字符串\",{\"1\":{\"133\":1}}],[\"个字符内\",{\"1\":{\"100\":1}}],[\"个字段的话\",{\"1\":{\"25\":1}}],[\"个数\",{\"1\":{\"27\":1}}],[\"建造起模式\",{\"1\":{\"825\":1}}],[\"建设工程担保的履约保函\",{\"1\":{\"180\":1}}],[\"建议\",{\"0\":{\"775\":1}}],[\"建议4\",{\"1\":{\"611\":1}}],[\"建议真实开发时使用\",{\"1\":{\"475\":2}}],[\"建议不超过\",{\"1\":{\"417\":1}}],[\"建议不要和业务表放在一起\",{\"1\":{\"82\":1}}],[\"建议以产品分组\",{\"1\":{\"417\":1}}],[\"建议$\",{\"1\":{\"417\":1}}],[\"建议npe检查\",{\"1\":{\"413\":1}}],[\"建议大于1k\",{\"1\":{\"317\":1}}],[\"建议使用有界队列\",{\"1\":{\"769\":1}}],[\"建议使用properties和yaml\",{\"1\":{\"417\":1}}],[\"建议使用properties或yaml\",{\"1\":{\"401\":1}}],[\"建议使用官方提供的在线地址进行工程的初始化创建\",{\"1\":{\"414\":1}}],[\"建议使用fallbackfactory\",{\"1\":{\"398\":1,\"416\":1}}],[\"建议使用\",{\"1\":{\"97\":1}}],[\"建议使用主键来进行范围检索\",{\"1\":{\"82\":1}}],[\"建议模糊查询\",{\"1\":{\"82\":1}}],[\"建议来自\",{\"1\":{\"82\":1}}],[\"建议将hive设置为\",{\"1\":{\"21\":1}}],[\"建立maven的空java项目\",{\"0\":{\"707\":1}}],[\"建立kafkaproperties\",{\"1\":{\"564\":1}}],[\"建立公共溢出区\",{\"0\":{\"514\":1}}],[\"建立自己的分支\",{\"1\":{\"493\":1}}],[\"建立百分比格式化引用\",{\"1\":{\"445\":1}}],[\"建立货币格式化引用\",{\"1\":{\"445\":1}}],[\"建立\",{\"1\":{\"155\":1}}],[\"建立集合实体\",{\"0\":{\"60\":1}}],[\"建立图片模型\",{\"0\":{\"59\":1}}],[\"建立连接的方法是\",{\"1\":{\"644\":1}}],[\"建立连接\",{\"1\":{\"58\":1,\"155\":1,\"214\":1,\"644\":1}}],[\"建立三个文档\",{\"0\":{\"31\":1}}],[\"建立索引时不要在选择性低的字段上创建\",{\"1\":{\"82\":1}}],[\"建立索引\",{\"1\":{\"28\":1}}],[\"建立分区\",{\"1\":{\"27\":1}}],[\"扫描一次\",{\"1\":{\"27\":1}}],[\"二是把责任推给下家\",{\"1\":{\"825\":1}}],[\"二进制安全\",{\"0\":{\"623\":1}}],[\"二阶段\",{\"1\":{\"421\":2,\"422\":2}}],[\"二\",{\"0\":{\"27\":1,\"83\":1,\"118\":1,\"343\":1},\"1\":{\"63\":1,\"64\":1,\"189\":5,\"683\":1,\"684\":1,\"704\":1,\"722\":1}}],[\"子版本号加\",{\"1\":{\"605\":1}}],[\"子网掩码都可以设置成255\",{\"1\":{\"526\":1}}],[\"子网掩码是用来判断任意两台计算机的ip地址是否属于同一子网络的根据\",{\"1\":{\"526\":1}}],[\"子网掩码是255\",{\"1\":{\"526\":1}}],[\"子网掩码为\",{\"1\":{\"526\":1}}],[\"子网掩码为27位\",{\"1\":{\"526\":1}}],[\"子网掩码为255\",{\"1\":{\"526\":1}}],[\"子网掩码255\",{\"1\":{\"526\":1}}],[\"子网掩码应该为255\",{\"1\":{\"526\":1}}],[\"子网掩码共有26位\",{\"1\":{\"526\":1}}],[\"子网掩码及主机段的十进制算法\",{\"1\":{\"526\":1}}],[\"子网掩码\",{\"1\":{\"526\":1}}],[\"子模块\",{\"0\":{\"502\":1},\"1\":{\"578\":1}}],[\"子系统\",{\"1\":{\"250\":1}}],[\"子句\",{\"1\":{\"82\":1,\"883\":1}}],[\"子句中表达式来选择查询所需要的指定的分区\",{\"1\":{\"26\":1}}],[\"子结构搜索或上层结构搜索\",{\"1\":{\"55\":1}}],[\"子查询都必须具有相同的列\",{\"1\":{\"24\":1}}],[\"实时计算可以用flink\",{\"1\":{\"788\":1}}],[\"实时搜索\",{\"1\":{\"4\":1}}],[\"实体继承comparable\",{\"1\":{\"734\":1}}],[\"实际数据大小为4字节\",{\"1\":{\"722\":1}}],[\"实际数据大小=int类型4字节+int类型4字节=8字节\",{\"1\":{\"722\":2}}],[\"实际数据大小=int类型4字节+long类型8字节=12字节\",{\"1\":{\"722\":1}}],[\"实际上做到这点是不可能的\",{\"1\":{\"704\":1}}],[\"实际上\",{\"1\":{\"671\":1}}],[\"实际上就是一个数字\",{\"1\":{\"652\":1}}],[\"实际上继承了宿主机的ip地址\",{\"1\":{\"255\":1}}],[\"实际项目中大部分是会划分vlan的\",{\"1\":{\"526\":1}}],[\"实际可分配子网数\",{\"1\":{\"526\":1}}],[\"实际值与预期值不相等返回false\",{\"1\":{\"444\":1}}],[\"实际\",{\"1\":{\"428\":1}}],[\"实际接到的是铅球\",{\"1\":{\"413\":1}}],[\"实际写入的\",{\"1\":{\"214\":1}}],[\"实际是创建了\",{\"1\":{\"100\":1}}],[\"实例一般是由一组正在运行的\",{\"1\":{\"852\":1}}],[\"实例名\",{\"1\":{\"837\":1}}],[\"实例数据和补齐填充3个部分\",{\"1\":{\"722\":1}}],[\"实例同步方法\",{\"1\":{\"661\":1}}],[\"实例的时候\",{\"1\":{\"650\":1}}],[\"实例变量将会在对象实例化时随着对象一起分配在java堆中\",{\"1\":{\"563\":1}}],[\"实例如下\",{\"1\":{\"527\":1}}],[\"实例\",{\"0\":{\"852\":1},\"1\":{\"156\":1,\"381\":1,\"527\":1}}],[\"实例使用\",{\"1\":{\"25\":1}}],[\"实现具体的实现\",{\"1\":{\"906\":1}}],[\"实现rejectedexecutionhandler接口自定义策略\",{\"1\":{\"761\":1}}],[\"实现reactor模式\",{\"1\":{\"433\":1}}],[\"实现compareto方法\",{\"1\":{\"734\":1}}],[\"实现方法\",{\"0\":{\"727\":1}}],[\"实现方式\",{\"1\":{\"458\":1}}],[\"实现信任链在\",{\"1\":{\"689\":1}}],[\"实现对计算机系统局部或全局的可信验证\",{\"1\":{\"685\":1}}],[\"实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器\",{\"1\":{\"558\":1}}],[\"实现阻塞接口的队列\",{\"0\":{\"530\":1}}],[\"实现来定位\",{\"1\":{\"529\":1}}],[\"实现类\",{\"1\":{\"475\":3}}],[\"实现以不同的方式来实现提醒\",{\"1\":{\"456\":1}}],[\"实现更加简单\",{\"1\":{\"446\":1}}],[\"实现并发算法时常用到的一种技术\",{\"1\":{\"442\":1}}],[\"实现配置自动更新\",{\"1\":{\"401\":1}}],[\"实现挂载\",{\"1\":{\"373\":1}}],[\"实现https主要手段\",{\"1\":{\"308\":1}}],[\"实现每个url定向到同一个后端服务器\",{\"1\":{\"305\":1}}],[\"实现响应时间短的优先分配\",{\"1\":{\"304\":1}}],[\"实现实时故障切换及全球负载均衡\",{\"1\":{\"222\":1}}],[\"实现分布式锁\",{\"1\":{\"221\":1}}],[\"实现分片\",{\"1\":{\"161\":1}}],[\"实现代码如下\",{\"1\":{\"219\":1}}],[\"实现原理\",{\"1\":{\"214\":1,\"533\":1}}],[\"实现公平锁\",{\"1\":{\"214\":2}}],[\"实现优化\",{\"1\":{\"159\":1}}],[\"实现的分布式锁的可用性\",{\"1\":{\"221\":1}}],[\"实现的\",{\"1\":{\"157\":1,\"158\":1}}],[\"实现了空间预分配和惰性空间释放两种优化策略\",{\"1\":{\"620\":1}}],[\"实现了任意精度的浮点数运\",{\"1\":{\"549\":1}}],[\"实现了高并发状态下的高性能\",{\"1\":{\"530\":1}}],[\"实现了java\",{\"1\":{\"529\":1}}],[\"实现了\",{\"1\":{\"157\":1}}],[\"实现\",{\"0\":{\"216\":1},\"1\":{\"153\":1,\"161\":2,\"527\":1,\"529\":1}}],[\"实现级联复制需要\",{\"1\":{\"79\":1}}],[\"键的反序列化方式\",{\"1\":{\"435\":1}}],[\"键的序列化方式\",{\"1\":{\"435\":1}}],[\"键入\",{\"1\":{\"230\":1}}],[\"键值对k2\",{\"1\":{\"513\":1}}],[\"键值对\",{\"1\":{\"124\":1}}],[\"键\",{\"1\":{\"25\":1,\"125\":1,\"161\":1}}],[\"数人\",{\"1\":{\"825\":1}}],[\"数学模型\",{\"1\":{\"684\":1}}],[\"数学上的并集计算\",{\"1\":{\"136\":2}}],[\"数学上的交集运算\",{\"1\":{\"136\":2}}],[\"数学上的差集运算\",{\"1\":{\"136\":2}}],[\"数字证书\",{\"1\":{\"705\":2}}],[\"数字证书认证机构\",{\"1\":{\"522\":1}}],[\"数字签名可以用于证实数字内容的完整性和来源\",{\"1\":{\"736\":1}}],[\"数字签名技术是消息传递进行加密获得的签名\",{\"1\":{\"736\":1}}],[\"数字签名\",{\"0\":{\"736\":1},\"1\":{\"705\":4}}],[\"数字分析法\",{\"0\":{\"509\":1}}],[\"数量较少\",{\"1\":{\"161\":1}}],[\"数组对象大小=16+64=80\",{\"1\":{\"722\":1}}],[\"数组分配空间时多分配一个字节来容纳这个空字符\",{\"1\":{\"624\":1}}],[\"数组分配了五字节未使用空间\",{\"1\":{\"616\":1}}],[\"数组里的数据\",{\"1\":{\"623\":1}}],[\"数组里面可以包含未使用的字节\",{\"1\":{\"620\":1}}],[\"数组中对象的retainedsize\",{\"1\":{\"722\":1}}],[\"数组中未使用字节的数量\",{\"1\":{\"616\":1}}],[\"数组中已使用字节的数量\",{\"1\":{\"616\":1}}],[\"数组中的元素\",{\"1\":{\"541\":1}}],[\"数组中的每个项都是一个\",{\"1\":{\"126\":1}}],[\"数组中的每个元素都是一个指向\",{\"1\":{\"124\":1}}],[\"数组\",{\"1\":{\"527\":1,\"539\":1,\"722\":1}}],[\"数组实现的内部队列\",{\"1\":{\"472\":1}}],[\"数组的实际长度将为\",{\"1\":{\"621\":1}}],[\"数组的实际长度将变成\",{\"1\":{\"621\":1}}],[\"数组的长度\",{\"1\":{\"722\":1}}],[\"数组的长度不一定就是字符数量加一\",{\"1\":{\"620\":1}}],[\"数组的长度最好是质数\",{\"1\":{\"508\":1}}],[\"数组的前五个字节分别保存了\",{\"1\":{\"616\":1}}],[\"数组的哪个索引上面\",{\"1\":{\"124\":1}}],[\"数组的大小\",{\"1\":{\"124\":1}}],[\"数\",{\"1\":{\"116\":1,\"627\":1,\"887\":2}}],[\"数值类型之间的转换\",{\"1\":{\"549\":1}}],[\"数值\",{\"1\":{\"25\":1}}],[\"数据项就像小孩子\",{\"1\":{\"914\":1}}],[\"数据泥团\",{\"0\":{\"914\":1}}],[\"数据操作权限\",{\"1\":{\"888\":1}}],[\"数据磁盘损坏\",{\"1\":{\"868\":1}}],[\"数据缓冲区\",{\"1\":{\"863\":1}}],[\"数据迁移工具支持其他数据库迁移到达梦\",{\"1\":{\"848\":1}}],[\"数据迁移工具\",{\"0\":{\"848\":1}}],[\"数据页大小\",{\"1\":{\"837\":1}}],[\"数据文件和备份文件同时损坏的情况\",{\"1\":{\"890\":1}}],[\"数据文件和索引文件可以放置在不同的目录\",{\"1\":{\"91\":1}}],[\"数据文件大小\",{\"1\":{\"866\":1}}],[\"数据文件\",{\"1\":{\"853\":2,\"893\":1}}],[\"数据文件使用的簇大小\",{\"1\":{\"837\":1}}],[\"数据通过总线在处理器和内存之间传递\",{\"1\":{\"809\":1}}],[\"数据倾斜无非就是大量的相同key被partition分配到一个分区里\",{\"1\":{\"789\":1}}],[\"数据格式对操作行为进行封装\",{\"1\":{\"786\":1}}],[\"数据会变成key1=value1\",{\"1\":{\"749\":1}}],[\"数据x\",{\"1\":{\"663\":1}}],[\"数据从ram流到l3缓存\",{\"1\":{\"662\":1}}],[\"数据可能不完整\",{\"1\":{\"641\":1}}],[\"数据报文套接字\",{\"1\":{\"636\":1}}],[\"数据量大推荐使用\",{\"1\":{\"789\":1}}],[\"数据量小\",{\"1\":{\"788\":1}}],[\"数据量\",{\"1\":{\"627\":1}}],[\"数据在写入时是什么样的\",{\"1\":{\"623\":1}}],[\"数据被频繁修改的场合\",{\"1\":{\"620\":1}}],[\"数据完成持久化的操作\",{\"1\":{\"544\":1}}],[\"数据流又分为输入流和输出流\",{\"1\":{\"538\":1}}],[\"数据源\",{\"0\":{\"786\":1,\"787\":1}}],[\"数据源可以是集合\",{\"1\":{\"527\":1}}],[\"数据源是流的来源\",{\"1\":{\"527\":1}}],[\"数据就够安全\",{\"1\":{\"522\":1}}],[\"数据传输过程是加密的\",{\"1\":{\"522\":1}}],[\"数据都是未加密的\",{\"1\":{\"522\":1}}],[\"数据\",{\"1\":{\"483\":1}}],[\"数据仍然是完整的\",{\"1\":{\"432\":1}}],[\"数据序列化和传输\",{\"1\":{\"413\":1}}],[\"数据卷容器是一个普通的容器\",{\"1\":{\"262\":1}}],[\"数据卷的使用类似于\",{\"1\":{\"262\":1}}],[\"数据卷是一个供容器使用的特殊目录\",{\"1\":{\"262\":1}}],[\"数据卷\",{\"1\":{\"262\":1}}],[\"数据模型的多版本并发控制\",{\"1\":{\"214\":1}}],[\"数据日渐增长\",{\"1\":{\"204\":1}}],[\"数据分布于不同的实例\",{\"1\":{\"159\":1}}],[\"数据分片\",{\"0\":{\"159\":1,\"160\":1},\"1\":{\"158\":1,\"159\":1,\"160\":2,\"161\":3}}],[\"数据分区\",{\"1\":{\"21\":1}}],[\"数据复制\",{\"1\":{\"155\":1}}],[\"数据复制的基本工作机制\",{\"0\":{\"154\":1}}],[\"数据持久化\",{\"1\":{\"141\":1,\"146\":1}}],[\"数据结构\",{\"0\":{\"117\":1,\"133\":1},\"1\":{\"161\":1,\"530\":1}}],[\"数据结构角度\",{\"1\":{\"101\":1}}],[\"数据存储引擎和数据列\",{\"0\":{\"95\":1}}],[\"数据仓储和其他应用环境下最常使用的存\",{\"1\":{\"93\":1}}],[\"数据的桶\",{\"1\":{\"455\":1}}],[\"数据的一致性是他们最最基本的要求\",{\"1\":{\"197\":1}}],[\"数据的一致性问题并不都和原子性有关\",{\"1\":{\"67\":1}}],[\"数据的状态在执行该事务操作之后从一个状态改变到了另外一个状态\",{\"1\":{\"66\":1}}],[\"数据处理完成后\",{\"1\":{\"41\":1}}],[\"数据更新和删除操作\",{\"1\":{\"22\":1}}],[\"数据库是启动状态\",{\"1\":{\"894\":1}}],[\"数据库是由数据库和实例构成\",{\"0\":{\"850\":1}}],[\"数据库关闭状态下的备份\",{\"1\":{\"892\":1}}],[\"数据库自动完成归档的切换\",{\"1\":{\"871\":1}}],[\"数据库需要开启归档状态\",{\"1\":{\"868\":1}}],[\"数据库恢复时就可以\",{\"1\":{\"868\":1}}],[\"数据库故障\",{\"1\":{\"868\":1}}],[\"数据库启动时会按照如下参数重建\",{\"1\":{\"865\":1}}],[\"数据库启动顺序\",{\"1\":{\"843\":1}}],[\"数据库中的\",{\"1\":{\"864\":1}}],[\"数据库中的数据的集合\",{\"1\":{\"851\":1}}],[\"数据库运行中可以直接修改\",{\"1\":{\"854\":2}}],[\"数据库参数的类型\",{\"0\":{\"854\":1}}],[\"数据库指的是磁盘上存放在\",{\"1\":{\"851\":1}}],[\"数据库物理联机备份\",{\"1\":{\"846\":1}}],[\"数据库即会被挂起\",{\"1\":{\"843\":1}}],[\"数据库配置助手\",{\"1\":{\"838\":1}}],[\"数据库配置助手注册数据库服务\",{\"1\":{\"838\":1}}],[\"数据库配置助手方式默认自动注册数\",{\"1\":{\"837\":1}}],[\"数据库配置助手图形化界面方式创建数据库\",{\"0\":{\"836\":1}}],[\"数据库名\",{\"1\":{\"837\":1}}],[\"数据库创建完成将无法更改\",{\"1\":{\"836\":1}}],[\"数据库性能的大量开销\",{\"1\":{\"726\":1}}],[\"数据库或者socket连接要收到一定的限制\",{\"1\":{\"683\":1}}],[\"数据库迁移的纤细信息\",{\"1\":{\"418\":1}}],[\"数据库的恢复\",{\"1\":{\"893\":1}}],[\"数据库的还原\",{\"1\":{\"893\":1}}],[\"数据库的最大逻辑存储单元\",{\"1\":{\"864\":1}}],[\"数据库的最大存储单元\",{\"1\":{\"853\":1}}],[\"数据库的查询结果可能为null\",{\"1\":{\"413\":1}}],[\"数据库的自增id显然不能满足需求\",{\"1\":{\"204\":1}}],[\"数据库\",{\"0\":{\"835\":1,\"843\":1,\"851\":1},\"1\":{\"297\":1,\"834\":1,\"835\":4,\"837\":1}}],[\"数据库服务器等\",{\"1\":{\"194\":1}}],[\"数据库连接和降低单机硬件资源的瓶颈\",{\"1\":{\"130\":1}}],[\"数据库以行为单位将数据加载到内存中\",{\"1\":{\"129\":1}}],[\"数据库允许多个并发事务同时对其数据进行读写和修改的能力\",{\"1\":{\"105\":1}}],[\"数据库字符集对应一些排序等规则\",{\"1\":{\"74\":1}}],[\"数据库默认字符集\",{\"1\":{\"74\":1}}],[\"数据库错误日志文件\",{\"1\":{\"74\":2}}],[\"数据库目录为\",{\"1\":{\"21\":1}}],[\"数据库写入\",{\"1\":{\"3\":1}}],[\"数据类型\",{\"1\":{\"20\":1,\"25\":1}}],[\"数据块的大小和备份银子都是可以配置的\",{\"1\":{\"19\":1}}],[\"数据块都会通过计算校验和来检测数据的完整性\",{\"1\":{\"14\":1}}],[\"数据块被认为已经持久化到所有节点\",{\"1\":{\"14\":1}}],[\"数据将会继续写到剩余的datanode中\",{\"1\":{\"14\":1}}],[\"数据包\",{\"0\":{\"486\":1},\"1\":{\"486\":1}}],[\"数据包以流水线的形式被写入和备份到所有datanode节点\",{\"1\":{\"14\":1}}],[\"数据包括\",{\"1\":{\"13\":1}}],[\"数据中心d1中有一个机架r1中一个节点n1表示为d1\",{\"1\":{\"14\":1}}],[\"数据写入\",{\"1\":{\"3\":2}}],[\"小孩子\",{\"1\":{\"914\":1}}],[\"小数量使用\",{\"1\":{\"789\":1}}],[\"小数点后9位\",{\"1\":{\"25\":1}}],[\"小则放到左子树\",{\"1\":{\"734\":1}}],[\"小于mysql最大连接数\",{\"1\":{\"683\":1}}],[\"小时\",{\"1\":{\"527\":1,\"758\":1}}],[\"小p\",{\"1\":{\"251\":1}}],[\"小微企业\",{\"1\":{\"189\":1}}],[\"小表\",{\"1\":{\"23\":1}}],[\"午夜12点的秒数\",{\"1\":{\"25\":1}}],[\"距离unix新纪元时间1970年1月1日\",{\"1\":{\"25\":1}}],[\"字节的\",{\"1\":{\"621\":1}}],[\"字节的未使用空间\",{\"1\":{\"619\":1,\"621\":1}}],[\"字节足以保存\",{\"1\":{\"621\":1}}],[\"字节长\",{\"1\":{\"619\":1}}],[\"字节空间已经足以拼接\",{\"1\":{\"622\":1}}],[\"字节空间作为未使用空间保留在了\",{\"1\":{\"622\":1}}],[\"字节空间\",{\"1\":{\"616\":1,\"622\":1}}],[\"字节空间不计算在\",{\"1\":{\"616\":1}}],[\"字节码验证\",{\"0\":{\"562\":1}}],[\"字节码验证∶是整个验证过程中最复杂的一个阶段\",{\"1\":{\"558\":1}}],[\"字节流\",{\"0\":{\"538\":1},\"1\":{\"538\":1}}],[\"字节\",{\"1\":{\"158\":1,\"417\":1,\"539\":1,\"618\":2,\"621\":4}}],[\"字节数组\",{\"1\":{\"157\":1,\"616\":1}}],[\"字典缓冲区\",{\"1\":{\"863\":1}}],[\"字典只使用\",{\"1\":{\"126\":1}}],[\"字典所使用的哈希表由\",{\"1\":{\"124\":1}}],[\"字典的实现\",{\"0\":{\"123\":1},\"1\":{\"124\":1,\"125\":1,\"126\":1}}],[\"字典\",{\"0\":{\"122\":1,\"126\":1}}],[\"字符的需要了\",{\"1\":{\"549\":1}}],[\"字符则需要两个char\",{\"1\":{\"549\":1}}],[\"字符流对象\",{\"1\":{\"542\":1}}],[\"字符流\",{\"0\":{\"540\":1},\"1\":{\"538\":1}}],[\"字符集都要一致\",{\"1\":{\"82\":1}}],[\"字符集\",{\"1\":{\"82\":1,\"549\":1,\"836\":3,\"837\":1}}],[\"字符串分割\",{\"1\":{\"652\":1}}],[\"字符串之后的函数了\",{\"1\":{\"624\":1}}],[\"字符串追加到\",{\"1\":{\"624\":1}}],[\"字符串值了\",{\"1\":{\"624\":1}}],[\"字符串函数\",{\"0\":{\"624\":1}}],[\"字符串函数库里面的函数\",{\"1\":{\"616\":1}}],[\"字符串所用的函数只会识别出其中的\",{\"1\":{\"623\":1}}],[\"字符串来保存\",{\"1\":{\"623\":1}}],[\"字符串来说\",{\"1\":{\"620\":1}}],[\"字符串只能保存文本数据\",{\"1\":{\"623\":1}}],[\"字符串里面不能包含空字符\",{\"1\":{\"623\":1}}],[\"字符串中出现过的字符\",{\"1\":{\"622\":1}}],[\"字符串中的字符必须符合某种编码\",{\"1\":{\"623\":1}}],[\"字符串中的所有\",{\"1\":{\"622\":1}}],[\"字符串中的所有内容\",{\"1\":{\"619\":1}}],[\"字符串中的内容拼接到\",{\"1\":{\"619\":1}}],[\"字符串作为参数\",{\"1\":{\"622\":1}}],[\"字符串并不记录自身的长度\",{\"1\":{\"620\":1}}],[\"字符串并不记录自身的长度信息\",{\"1\":{\"618\":1}}],[\"字符串拼接到给定\",{\"1\":{\"619\":1}}],[\"字符串不记录自身的长度\",{\"1\":{\"619\":1}}],[\"字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出\",{\"1\":{\"619\":1}}],[\"字符串不同\",{\"1\":{\"618\":1,\"619\":1}}],[\"字符串长度的过程\",{\"1\":{\"618\":1}}],[\"字符串的后面\",{\"1\":{\"624\":1}}],[\"字符串的这种缺陷\",{\"1\":{\"620\":1}}],[\"字符串的数组进行一次内存重分配操作\",{\"1\":{\"620\":1}}],[\"字符串的底层实现总是一个\",{\"1\":{\"620\":1}}],[\"字符串的末尾\",{\"1\":{\"619\":1}}],[\"字符串的长度和底层数组的长度之间存在着这种关联性\",{\"1\":{\"620\":1}}],[\"字符串的长度\",{\"1\":{\"618\":1}}],[\"字符串的区别\",{\"0\":{\"617\":1}}],[\"字符串更适用于\",{\"1\":{\"617\":1}}],[\"字符串和\",{\"1\":{\"617\":1,\"625\":2}}],[\"字符串以空字符结尾的惯例\",{\"1\":{\"616\":1,\"624\":2}}],[\"字符串成员\",{\"1\":{\"133\":1}}],[\"字符串\",{\"1\":{\"25\":1,\"158\":1,\"161\":2,\"617\":1,\"618\":1,\"619\":1,\"620\":2,\"623\":1,\"624\":1}}],[\"字符串等进行解析\",{\"1\":{\"25\":1}}],[\"字符数组\",{\"1\":{\"25\":1}}],[\"字段和移动端字段值来统计一周内用户登录情况\",{\"1\":{\"789\":1}}],[\"字段分组\",{\"1\":{\"789\":3}}],[\"字段分隔符\",{\"1\":{\"25\":1}}],[\"字段来实现\",{\"1\":{\"730\":1}}],[\"字段里\",{\"1\":{\"648\":1}}],[\"字段为什么要定义not\",{\"0\":{\"88\":1}}],[\"字段名必须使用小写字母\",{\"1\":{\"82\":1}}],[\"字段\",{\"1\":{\"24\":1,\"642\":1,\"864\":1}}],[\"相应的\",{\"1\":{\"703\":1}}],[\"相应的把财产保全担保分为诉前保全担保和诉讼保全担保\",{\"1\":{\"185\":1}}],[\"相互竞争同一cache\",{\"1\":{\"663\":1}}],[\"相互引用\",{\"1\":{\"558\":1}}],[\"相比synchronized\",{\"1\":{\"703\":1}}],[\"相比\",{\"1\":{\"642\":1}}],[\"相比blockingwaitstrategy\",{\"1\":{\"466\":1,\"472\":1}}],[\"相对路径\",{\"1\":{\"537\":1}}],[\"相对于主版本号而言\",{\"1\":{\"605\":1}}],[\"相对于上一次\",{\"1\":{\"152\":1}}],[\"相对于\",{\"1\":{\"140\":1,\"161\":2}}],[\"相乘\",{\"1\":{\"445\":1}}],[\"相当于\",{\"1\":{\"864\":1}}],[\"相当于10个玩家\",{\"1\":{\"552\":1}}],[\"相当于getandadd\",{\"1\":{\"444\":2}}],[\"相当于addandget\",{\"1\":{\"441\":1,\"444\":2}}],[\"相当于switch中的default\",{\"1\":{\"306\":1}}],[\"相信安装过虚拟机的同学一定很眼熟\",{\"1\":{\"250\":1}}],[\"相较于\",{\"1\":{\"157\":1}}],[\"相关数据字典\",{\"1\":{\"887\":1}}],[\"相关操作命令\",{\"0\":{\"502\":1}}],[\"相关各方做好登记\",{\"1\":{\"189\":1}}],[\"相关\",{\"0\":{\"142\":1,\"147\":1}}],[\"相关的配置\",{\"1\":{\"141\":1}}],[\"相关文档\",{\"1\":{\"63\":1}}],[\"相似性指标\",{\"0\":{\"53\":1}}],[\"相同名字空间中相同名字的uuid重复生成是相同的\",{\"1\":{\"208\":1}}],[\"相同名字空间中不同名字生成的uuid的唯一性\",{\"1\":{\"208\":1}}],[\"相同\",{\"1\":{\"25\":1,\"896\":1}}],[\"相反的\",{\"1\":{\"22\":1}}],[\"相反\",{\"1\":{\"4\":1}}],[\"上一次登录\",{\"1\":{\"834\":2}}],[\"上篇已经介绍comparable的用法\",{\"1\":{\"735\":1}}],[\"上线前的演练等\",{\"1\":{\"704\":1}}],[\"上下文\",{\"1\":{\"684\":1}}],[\"上下游设计很多系统如负载均衡\",{\"1\":{\"194\":1}}],[\"上\",{\"1\":{\"612\":1,\"834\":2}}],[\"上使用得最多\",{\"1\":{\"515\":1}}],[\"上的程序\",{\"1\":{\"706\":1}}],[\"上的\",{\"1\":{\"456\":1}}],[\"上只要安装了docker的环境\",{\"1\":{\"234\":1}}],[\"上述的\",{\"1\":{\"809\":1}}],[\"上述的类满足以下几个特点\",{\"1\":{\"665\":1}}],[\"上述计算过程\",{\"1\":{\"526\":1}}],[\"上述文章中提到\",{\"1\":{\"486\":1}}],[\"上述等待策略实现接口\",{\"1\":{\"472\":1}}],[\"上述一般\",{\"1\":{\"410\":1}}],[\"上述代码中没有用到springcloud\",{\"1\":{\"297\":1}}],[\"上述配置文件中的\",{\"1\":{\"280\":1}}],[\"上述解决分布式锁失效的方案在分布式锁领域有一个专业的术语叫做\",{\"1\":{\"220\":1}}],[\"上述业务操作流程\",{\"1\":{\"189\":1}}],[\"上面代码每次循环都会进行锁的请求\",{\"1\":{\"924\":1}}],[\"上面代码实现中\",{\"1\":{\"219\":1}}],[\"上面看到\",{\"1\":{\"710\":1}}],[\"上面加入以下行\",{\"1\":{\"651\":1}}],[\"上面的代码是有两块需要同步操作的\",{\"1\":{\"924\":1}}],[\"上面的代码实现\",{\"1\":{\"218\":1}}],[\"上面的例子就是轮询的方式\",{\"1\":{\"299\":1}}],[\"上面包含了网站url和ip的对应信息\",{\"1\":{\"222\":1}}],[\"上面图列表了hive所支持的基本数据类型\",{\"1\":{\"25\":1}}],[\"上图\",{\"1\":{\"34\":1}}],[\"上传构件到私有仓库\",{\"0\":{\"604\":1}}],[\"上传私服\",{\"1\":{\"576\":1}}],[\"上传到私服的流程\",{\"1\":{\"576\":1}}],[\"上传到从库服务器\",{\"1\":{\"327\":1}}],[\"上传本地tag到远程仓库\",{\"1\":{\"501\":1}}],[\"上传的非结构数据也会存储到redis\",{\"1\":{\"367\":1}}],[\"上传从库导出的sql文件到tmp目录\",{\"1\":{\"342\":1}}],[\"上传filebeat配置文件是否成功\",{\"0\":{\"277\":1}}],[\"上传filebeat配置文件\",{\"0\":{\"276\":1}}],[\"上传一个文件\",{\"1\":{\"63\":2}}],[\"上传\",{\"1\":{\"31\":1}}],[\"上表为动态分区属性\",{\"1\":{\"22\":1}}],[\"分解重组statement\",{\"0\":{\"900\":1}}],[\"分段提交\",{\"1\":{\"864\":1}}],[\"分成小部分\",{\"1\":{\"749\":1}}],[\"分配内存\",{\"1\":{\"751\":1}}],[\"分配额外的未使用空间\",{\"1\":{\"621\":1}}],[\"分配修改所必须要的空间\",{\"1\":{\"621\":1}}],[\"分配了\",{\"1\":{\"619\":1}}],[\"分配了足够多的内存\",{\"1\":{\"619\":1}}],[\"分配足够的空间\",{\"1\":{\"619\":1}}],[\"分类\",{\"1\":{\"601\":1}}],[\"分钟\",{\"1\":{\"527\":1,\"758\":1}}],[\"分4步走\",{\"1\":{\"502\":1}}],[\"分支\",{\"0\":{\"500\":1}}],[\"分开发送是部分浏览器或框架的请求方法\",{\"1\":{\"486\":1}}],[\"分开发送\",{\"1\":{\"486\":1}}],[\"分析项目的目的\",{\"0\":{\"785\":1}}],[\"分析\",{\"0\":{\"786\":1},\"1\":{\"526\":1}}],[\"分析countdownlatch的源码我们可以知道\",{\"1\":{\"446\":1}}],[\"分析和应用程序数据工作负载构建高性能基础架构\",{\"1\":{\"63\":1}}],[\"分别是tcp和udp\",{\"1\":{\"638\":1}}],[\"分别是创建配置类\",{\"1\":{\"403\":1}}],[\"分别建立对货币和百分比格式化的引用\",{\"1\":{\"445\":1}}],[\"分别为源端口\",{\"1\":{\"642\":1}}],[\"分别为\",{\"1\":{\"214\":2}}],[\"分为三个级别\",{\"1\":{\"704\":1}}],[\"分为三步\",{\"1\":{\"559\":1}}],[\"分为指令缓存和数据缓存\",{\"1\":{\"662\":1}}],[\"分为四步\",{\"1\":{\"559\":1}}],[\"分为\",{\"1\":{\"514\":1}}],[\"分为10个buckets\",{\"1\":{\"402\":1}}],[\"分为了商品库和店铺库\",{\"1\":{\"130\":1}}],[\"分两步\",{\"1\":{\"402\":1}}],[\"分离lib\",{\"1\":{\"389\":1}}],[\"分组统计一周内的用户登录分布情况\",{\"1\":{\"789\":1}}],[\"分组\",{\"1\":{\"297\":1,\"735\":1}}],[\"分组字段上都要创建索引\",{\"1\":{\"82\":1}}],[\"分而治之\",{\"1\":{\"221\":1}}],[\"分担风险责任\",{\"1\":{\"189\":1}}],[\"分期预拨担保代偿补偿备付资金\",{\"1\":{\"189\":1}}],[\"分险机制有助于稳定金融系统\",{\"1\":{\"166\":1}}],[\"分险意味着分散或分担风险\",{\"1\":{\"166\":1}}],[\"分险\",{\"1\":{\"166\":2}}],[\"分险型再担保\",{\"0\":{\"164\":1},\"1\":{\"162\":1}}],[\"分布式文件系统\",{\"1\":{\"657\":1}}],[\"分布式的\",{\"1\":{\"627\":1}}],[\"分布式的一致性\",{\"1\":{\"192\":1}}],[\"分布式应用程序生成的统计数据集中聚合\",{\"1\":{\"428\":1}}],[\"分布式功能\",{\"1\":{\"428\":1}}],[\"分布式事务\",{\"0\":{\"420\":1}}],[\"分布式监控体系\",{\"1\":{\"222\":1}}],[\"分布式自旋锁实现\",{\"0\":{\"219\":1}}],[\"分布式系统后由于多线程\",{\"1\":{\"212\":1}}],[\"分布式锁的实现主要思路就是\",{\"1\":{\"214\":1}}],[\"分布式锁工具类\",{\"1\":{\"213\":1}}],[\"分布式锁应用场景大都是高并发\",{\"1\":{\"212\":1}}],[\"分布式锁\",{\"0\":{\"212\":1}}],[\"分布式id生成\",{\"1\":{\"211\":1}}],[\"分布式全局唯一id生成策略\",{\"0\":{\"204\":1}}],[\"分布式cap概念\",{\"0\":{\"190\":1}}],[\"分布式\",{\"0\":{\"159\":1},\"1\":{\"159\":1,\"428\":1}}],[\"分布到不同的数据库上面\",{\"1\":{\"130\":1}}],[\"分值介于min和max之间的所有成员\",{\"1\":{\"138\":1}}],[\"分出来的小表中只包含一部分数据\",{\"1\":{\"132\":1}}],[\"分库分表的方式在生产中通常包括\",{\"1\":{\"128\":1}}],[\"分库分表的目的就是为了解决由于数据量过而导致数据库性能降低的问题\",{\"1\":{\"128\":1}}],[\"分库分表概念篇\",{\"0\":{\"128\":1}}],[\"分割库存后的\",{\"1\":{\"221\":1}}],[\"分割库存后\",{\"1\":{\"221\":1}}],[\"分割\",{\"1\":{\"82\":1,\"221\":1,\"483\":1}}],[\"分割完成后\",{\"1\":{\"35\":1}}],[\"分页插件\",{\"1\":{\"64\":2}}],[\"分子相似性搜索\",{\"1\":{\"55\":1}}],[\"分片到多个内存占有量小的\",{\"1\":{\"160\":1}}],[\"分片\",{\"1\":{\"41\":1}}],[\"分桶\",{\"1\":{\"27\":1}}],[\"分桶是将数据集分解成更统一管理的若干部分的另一个技术\",{\"1\":{\"27\":1}}],[\"分桶语句中的分母表示的是数据将会被散列的桶的个数\",{\"1\":{\"24\":1}}],[\"分区占用哈希区\",{\"1\":{\"855\":1}}],[\"分区分块情况\",{\"1\":{\"627\":1}}],[\"分区步骤如下图\",{\"1\":{\"370\":1}}],[\"分区容错性和扩展性紧密相关\",{\"1\":{\"195\":1}}],[\"分区容错性指\",{\"1\":{\"195\":1}}],[\"分区容错性\",{\"1\":{\"191\":1}}],[\"分区提供一个数据隔离和优化查询的遍历的方式\",{\"1\":{\"27\":1}}],[\"分区表改变了\",{\"1\":{\"21\":1}}],[\"分区\",{\"0\":{\"370\":1},\"1\":{\"21\":1,\"27\":1,\"28\":1}}],[\"到此上限\",{\"1\":{\"872\":1}}],[\"到故障前一刻\",{\"1\":{\"868\":1}}],[\"到临界区之外\",{\"1\":{\"809\":1}}],[\"到主内存中去读取线程\",{\"1\":{\"809\":1}}],[\"到了初始化阶段\",{\"1\":{\"558\":1,\"563\":1}}],[\"到hdfs\",{\"1\":{\"31\":1}}],[\"到\",{\"1\":{\"24\":1,\"118\":1,\"214\":1,\"576\":1,\"834\":1}}],[\"转自\",{\"1\":{\"924\":1}}],[\"转义\",{\"1\":{\"883\":2}}],[\"转化即调用\",{\"1\":{\"627\":1}}],[\"转化为16进制\",{\"1\":{\"479\":1}}],[\"转化为字节\",{\"1\":{\"479\":1}}],[\"转换16进制\",{\"1\":{\"613\":1}}],[\"转换成ascii\",{\"1\":{\"613\":1}}],[\"转换成uft\",{\"1\":{\"613\":1}}],[\"转换成十进制\",{\"1\":{\"526\":1}}],[\"转换成了二进制\",{\"1\":{\"526\":1}}],[\"转换成网络地址就是\",{\"1\":{\"526\":2}}],[\"转换和作用于异步任务的结果\",{\"1\":{\"475\":1}}],[\"转换为\",{\"1\":{\"24\":1}}],[\"转数达到一定的情况下\",{\"1\":{\"433\":1}}],[\"转纳秒\",{\"1\":{\"214\":1}}],[\"转成\",{\"1\":{\"25\":1}}],[\"转为\",{\"1\":{\"24\":1}}],[\"函数对于某个类的兴趣高过对自己所处类的兴趣\",{\"1\":{\"913\":1}}],[\"函数库\",{\"1\":{\"624\":1}}],[\"函数的第二个参数\",{\"1\":{\"624\":1}}],[\"函数接受一个\",{\"1\":{\"622\":1}}],[\"函数执行之后\",{\"1\":{\"619\":1}}],[\"函数可以将\",{\"1\":{\"619\":1}}],[\"函数自动完成的\",{\"1\":{\"616\":1}}],[\"函数返回值会告诉它有多少个新的节点可以读取数据了\",{\"1\":{\"453\":1}}],[\"函数再调用\",{\"1\":{\"217\":1}}],[\"函数则用于对比链表节点所保存的值和另一个输入值是否相等\",{\"1\":{\"119\":1}}],[\"函数用于释放链表节点所保存的值\",{\"1\":{\"119\":1}}],[\"函数用于复制链表节点所保存的值\",{\"1\":{\"119\":1}}],[\"函数容易返回null值\",{\"1\":{\"82\":1}}],[\"函数将计算结果写到hdfs\",{\"1\":{\"49\":1}}],[\"函数处理\",{\"1\":{\"48\":1}}],[\"函数输入数据时按\",{\"1\":{\"47\":1}}],[\"函数进行启动\",{\"1\":{\"706\":1}}],[\"函数进行分桶\",{\"1\":{\"24\":1}}],[\"函数进行抽样\",{\"1\":{\"24\":1}}],[\"函数\",{\"1\":{\"24\":2,\"217\":1,\"506\":2,\"616\":1,\"619\":1,\"624\":1,\"710\":2,\"846\":1,\"865\":1}}],[\"时代在发展\",{\"1\":{\"898\":1}}],[\"时延\",{\"0\":{\"781\":1}}],[\"时被阻塞\",{\"1\":{\"552\":1}}],[\"时决定采用16\",{\"1\":{\"549\":1}}],[\"时序图\",{\"1\":{\"472\":1}}],[\"时序等元素\",{\"1\":{\"208\":1}}],[\"时请分清稳定代码和非稳定代码\",{\"1\":{\"413\":1}}],[\"时使用\",{\"1\":{\"126\":1}}],[\"时按照长度展示\",{\"1\":{\"115\":1}}],[\"时间复杂度o\",{\"0\":{\"798\":1,\"801\":1,\"804\":1}}],[\"时间转换出错\",{\"1\":{\"626\":1}}],[\"时间同步\",{\"1\":{\"288\":1}}],[\"时间字段\",{\"1\":{\"283\":1,\"285\":1}}],[\"时间戳\",{\"1\":{\"208\":1}}],[\"时间戳在高位\",{\"1\":{\"206\":1}}],[\"时间+机器码+pid+inc\",{\"1\":{\"207\":1}}],[\"时间越长\",{\"1\":{\"100\":1}}],[\"时间\",{\"1\":{\"25\":1,\"145\":1,\"527\":1,\"926\":1}}],[\"时\",{\"1\":{\"23\":1,\"82\":1,\"139\":1,\"149\":2,\"317\":1,\"475\":1,\"497\":1,\"665\":1,\"673\":1,\"751\":1,\"926\":1}}],[\"全量备份\",{\"1\":{\"894\":1}}],[\"全量\",{\"1\":{\"893\":1}}],[\"全量快照\",{\"1\":{\"140\":1}}],[\"全库的还原与恢复\",{\"1\":{\"893\":1}}],[\"全库备份\",{\"1\":{\"889\":1}}],[\"全恢复\",{\"1\":{\"868\":1}}],[\"全站点统计\",{\"1\":{\"789\":4}}],[\"全平台统计\",{\"1\":{\"789\":1}}],[\"全平台\",{\"1\":{\"789\":2}}],[\"全1为1\",{\"1\":{\"526\":1}}],[\"全局变量a\",{\"1\":{\"809\":1}}],[\"全局事务提交的时候会删除lock\",{\"1\":{\"427\":1}}],[\"全局锁用于读写隔离\",{\"1\":{\"427\":1}}],[\"全局锁使用数据库表实现\",{\"1\":{\"427\":1}}],[\"全局块\",{\"1\":{\"305\":2}}],[\"全局唯一性\",{\"1\":{\"204\":1}}],[\"全局有序\",{\"1\":{\"23\":1}}],[\"全部字符小写\",{\"1\":{\"417\":1}}],[\"全部是异步的\",{\"1\":{\"155\":1}}],[\"全部数据表\",{\"1\":{\"23\":1}}],[\"全文索引\",{\"1\":{\"101\":1}}],[\"方便定制和开发私有协议栈\",{\"1\":{\"609\":1}}],[\"方便搜索\",{\"1\":{\"580\":1}}],[\"方便自己做出相应动作\",{\"1\":{\"214\":1}}],[\"方住能够返回的记录数量\",{\"1\":{\"564\":1}}],[\"方式打开才有启动的权限\",{\"1\":{\"844\":1}}],[\"方式创建数据库不会自动注册数据库服务\",{\"1\":{\"837\":1}}],[\"方式2\",{\"0\":{\"837\":1}}],[\"方式1\",{\"0\":{\"836\":1}}],[\"方式二\",{\"0\":{\"779\":1,\"841\":1}}],[\"方式一\",{\"0\":{\"778\":1,\"840\":1}}],[\"方式获取资源\",{\"1\":{\"727\":1}}],[\"方式是修改server\",{\"1\":{\"651\":1}}],[\"方式的理由\",{\"1\":{\"413\":1}}],[\"方式\",{\"1\":{\"413\":2}}],[\"方式减少内存占用\",{\"1\":{\"160\":1}}],[\"方案3\",{\"1\":{\"410\":1}}],[\"方案2\",{\"1\":{\"410\":1}}],[\"方案1\",{\"1\":{\"410\":1}}],[\"方法定义参数和异常处理器参数不会在线程之间共享\",{\"1\":{\"809\":1}}],[\"方法b和c都对a进行操作\",{\"1\":{\"809\":1}}],[\"方法会阻塞当前线程知道任务完成\",{\"1\":{\"762\":1}}],[\"方法会产生两个\",{\"0\":{\"486\":1}}],[\"方法耗时\",{\"1\":{\"716\":1}}],[\"方法耗时利用前人轮子字节码操作工具bytebuddy\",{\"1\":{\"714\":1}}],[\"方法是在数据被接收的时候调用\",{\"1\":{\"613\":1}}],[\"方法是最新的值呢\",{\"1\":{\"443\":1}}],[\"方法来把所需的类加载到\",{\"1\":{\"563\":1}}],[\"方法来把所需的类加载到jvm中\",{\"1\":{\"558\":1}}],[\"方法中的类型转换是否正确\",{\"1\":{\"562\":1}}],[\"方法中的参数也必须是bigdecimal的对象\",{\"1\":{\"445\":1}}],[\"方法区的实现\",{\"1\":{\"722\":1}}],[\"方法区常量池引用的对象\",{\"1\":{\"558\":1}}],[\"方法区类静态属性引用的对象\",{\"1\":{\"558\":1}}],[\"方法执行完成\",{\"1\":{\"773\":1}}],[\"方法执行失败或抛出异常\",{\"1\":{\"711\":1}}],[\"方法执行服务\",{\"1\":{\"556\":1}}],[\"方法执行的内存模型\",{\"1\":{\"556\":1}}],[\"方法出口灯信息\",{\"1\":{\"556\":1}}],[\"方法引用提供了非常有用的语法\",{\"1\":{\"527\":1}}],[\"方法引用\",{\"1\":{\"527\":1}}],[\"方法用于对流进行排序\",{\"1\":{\"527\":1}}],[\"方法用于映射每个元素到对应的结果\",{\"1\":{\"527\":1}}],[\"方法用于获取指定数量的流\",{\"1\":{\"527\":1}}],[\"方法过滤出空字符串\",{\"1\":{\"527\":1}}],[\"方法安全\",{\"0\":{\"485\":1}}],[\"方法比\",{\"0\":{\"485\":1}}],[\"方法不需要在编译时处理受检的异常\",{\"1\":{\"475\":1}}],[\"方法提供supplier的返回值\",{\"1\":{\"475\":1}}],[\"方法都不支持\",{\"1\":{\"472\":1}}],[\"方法实现的\",{\"1\":{\"820\":1}}],[\"方法实现\",{\"1\":{\"446\":1}}],[\"方法的类名\",{\"1\":{\"707\":1,\"715\":1}}],[\"方法的局部变量引用的对象等\",{\"1\":{\"557\":1}}],[\"方法的长度限制是怎么回事\",{\"0\":{\"484\":1}}],[\"方法的参数\",{\"1\":{\"445\":1}}],[\"方法的返回值可以为\",{\"1\":{\"413\":1}}],[\"方法可以将普通的数值转换为大数值\",{\"1\":{\"549\":1}}],[\"方法可以使用bigdecimal对象作为其参数\",{\"1\":{\"445\":1}}],[\"方法可能继续在现有事务中运行\",{\"1\":{\"72\":1}}],[\"方法返回方式使用\",{\"1\":{\"413\":1}}],[\"方法\",{\"1\":{\"381\":1,\"413\":2,\"443\":1,\"445\":2,\"446\":4,\"451\":1,\"452\":1,\"454\":1,\"475\":3,\"549\":1,\"553\":1,\"555\":1,\"612\":1,\"613\":1,\"626\":1,\"709\":1,\"711\":1,\"822\":1}}],[\"方法进行处理\",{\"1\":{\"35\":1,\"37\":1}}],[\"方法就可以创建文件\",{\"1\":{\"14\":1}}],[\"方法就可以打开系统中希望读取的文件\",{\"1\":{\"14\":1}}],[\"方言中的定义是一样的\",{\"1\":{\"23\":1}}],[\"q=0\",{\"1\":{\"477\":3,\"479\":3,\"480\":3}}],[\"qixiao\",{\"1\":{\"278\":5}}],[\"qixiao1v\",{\"1\":{\"268\":2,\"270\":3,\"271\":1,\"272\":1,\"273\":5}}],[\"qq\",{\"1\":{\"230\":1,\"243\":2,\"427\":1,\"664\":1,\"683\":1,\"825\":4,\"924\":1}}],[\"qa\",{\"1\":{\"76\":1,\"318\":2}}],[\"q\",{\"1\":{\"73\":1,\"530\":8,\"533\":7}}],[\"queuecapacity\",{\"1\":{\"779\":2}}],[\"queue接口和java\",{\"1\":{\"529\":1}}],[\"queue接口与list\",{\"1\":{\"528\":1}}],[\"queue\",{\"1\":{\"528\":1,\"529\":1}}],[\"queries\",{\"1\":{\"74\":2}}],[\"query把thisamount除去\",{\"1\":{\"902\":1}}],[\"querybuilders\",{\"1\":{\"3\":4}}],[\"query\",{\"1\":{\"3\":6,\"22\":2,\"58\":1,\"74\":6,\"341\":1,\"389\":3,\"904\":2}}],[\"quoteexample\",{\"1\":{\"527\":1}}],[\"quotetype\",{\"1\":{\"527\":1}}],[\"quick\",{\"1\":{\"427\":1}}],[\"quickstart\",{\"1\":{\"63\":1,\"564\":3}}],[\"quit\",{\"1\":{\"353\":1}}],[\"quantity<4\",{\"1\":{\"26\":1}}],[\"quantity\",{\"1\":{\"26\":8}}],[\"ql\",{\"1\":{\"23\":1,\"28\":1}}],[\"或开发者事先规划了某些变化\",{\"1\":{\"918\":1}}],[\"或开发人员将一系列等同的\",{\"1\":{\"93\":1}}],[\"或许都是\",{\"1\":{\"910\":1}}],[\"或范围\",{\"1\":{\"898\":1}}],[\"或范围发生变化\",{\"1\":{\"214\":1}}],[\"或适应性\",{\"1\":{\"898\":1}}],[\"或安全性\",{\"1\":{\"898\":1}}],[\"或一个灵活得可以容纳任何扩展的设计是不存在的\",{\"1\":{\"898\":1}}],[\"或redis\",{\"1\":{\"897\":1}}],[\"或使用备份集中的\",{\"1\":{\"889\":1}}],[\"或被处理掉\",{\"1\":{\"825\":1}}],[\"或回答问题\",{\"1\":{\"825\":1}}],[\"或写入数据的流\",{\"1\":{\"800\":1}}],[\"或shutdownnow\",{\"1\":{\"764\":1}}],[\"或执行完成时间无法预估的场景\",{\"1\":{\"764\":1}}],[\"或多对多\",{\"1\":{\"684\":1}}],[\"或0b1111\",{\"1\":{\"549\":1}}],[\"或index\",{\"1\":{\"490\":1}}],[\"或用户输入密码过于\",{\"1\":{\"413\":1}}],[\"或用户名称已存在\",{\"1\":{\"413\":1}}],[\"或域名\",{\"1\":{\"222\":1}}],[\"或通过购买需要资金的单位发行的有价证券\",{\"1\":{\"171\":1}}],[\"或整数\",{\"1\":{\"157\":1}}],[\"或落地\",{\"1\":{\"149\":1}}],[\"或切分后数据量行数巨大\",{\"1\":{\"131\":1}}],[\"或连接子\",{\"1\":{\"100\":1}}],[\"或\",{\"1\":{\"23\":1,\"251\":1,\"262\":1,\"500\":1,\"549\":6,\"834\":1,\"898\":1}}],[\"或者通过隐藏\",{\"1\":{\"923\":1}}],[\"或者通过其他方式仅仅将文件写入到正确的目录下\",{\"1\":{\"22\":1}}],[\"或者把调用链封装在较外层类的方法\",{\"1\":{\"921\":1}}],[\"或者转化成了别的需求\",{\"1\":{\"898\":1}}],[\"或者redis缓存\",{\"1\":{\"897\":1}}],[\"或者恢复到指定的时间点或指定\",{\"1\":{\"868\":1}}],[\"或者超出缓存限制后淘汰不常用的缓存项\",{\"1\":{\"863\":1}}],[\"或者达梦迁移到文件等功能\",{\"1\":{\"848\":1}}],[\"或者按\",{\"1\":{\"845\":1}}],[\"或者hdfs\",{\"1\":{\"788\":1}}],[\"或者特定时间\",{\"1\":{\"751\":1}}],[\"或者当前线程已经拥有了这个对象的锁\",{\"1\":{\"723\":2}}],[\"或者当前线程已经拥有了那个对象锁\",{\"1\":{\"703\":1}}],[\"或者说程序不会因为系统故障而中止或被修改\",{\"1\":{\"704\":1}}],[\"或者说对于该情况\",{\"1\":{\"445\":1}}],[\"或者恶意的服务攻击\",{\"1\":{\"651\":1}}],[\"或者等内存将要满的时候才会发生gc\",{\"1\":{\"650\":1}}],[\"或者假设\",{\"1\":{\"623\":1}}],[\"或者peer\",{\"1\":{\"607\":1}}],[\"或者根据传递给构造函数的\",{\"1\":{\"529\":1}}],[\"或者其他任何和\",{\"1\":{\"515\":1}}],[\"或者作为另外一个名叫test的分支\",{\"1\":{\"499\":1}}],[\"或者抽象公共类\",{\"1\":{\"413\":1}}],[\"或者空对象等\",{\"1\":{\"413\":1}}],[\"或者捕获异常是抛异常的父类\",{\"1\":{\"413\":1}}],[\"或者伪随机数生成uuid\",{\"1\":{\"208\":1}}],[\"或者是在遭遇错误是\",{\"1\":{\"704\":1}}],[\"或者是机器之间有网络异常\",{\"1\":{\"195\":1}}],[\"或者是一个\",{\"1\":{\"125\":1}}],[\"或者购买银行\",{\"1\":{\"171\":1}}],[\"或者一个键\",{\"1\":{\"139\":1}}],[\"或者在timeout秒之内阻塞并等待可弹出的元素出现\",{\"1\":{\"135\":2}}],[\"或者成员来获取元素\",{\"1\":{\"133\":1}}],[\"或者自减\",{\"1\":{\"133\":1}}],[\"或者哈希键的底层实现时\",{\"1\":{\"127\":1}}],[\"或者看到\",{\"1\":{\"82\":1}}],[\"或者文件很大\",{\"1\":{\"34\":1}}],[\"或者floor\",{\"1\":{\"24\":1}}],[\"或者用insert\",{\"1\":{\"22\":1}}],[\"或者\",{\"1\":{\"20\":1,\"25\":1,\"82\":1,\"127\":1,\"413\":1,\"427\":1,\"440\":1,\"537\":1,\"709\":1,\"820\":1}}],[\"因而需要一定费用\",{\"1\":{\"522\":1}}],[\"因而降低了整个社会的融资成本\",{\"1\":{\"172\":1}}],[\"因而\",{\"1\":{\"97\":1}}],[\"因此长时间保持空闲的cachedthreadpool不会使用任何资源\",{\"1\":{\"773\":1}}],[\"因此可能会造成如下\",{\"1\":{\"771\":1}}],[\"因此可能会造成脏数据被更新到数据库中\",{\"1\":{\"731\":1}}],[\"因此可以将商品列表数据与商品详情数据拆分成两个表\",{\"1\":{\"129\":1}}],[\"因此也具备一定的局限性\",{\"1\":{\"731\":1}}],[\"因此避错技术对系统的可靠性的提高受到很大的限制\",{\"1\":{\"704\":1}}],[\"因此没有一刀切的方案来确定线程数的值\",{\"1\":{\"651\":1}}],[\"因此一般建议堆的最大值设置为可用内存的最大值的80\",{\"1\":{\"651\":1}}],[\"因此一起被存放在商品库\",{\"1\":{\"130\":1}}],[\"因此下一个请求的线程中会遗留上一次请求的信息\",{\"1\":{\"650\":1}}],[\"因此会有2个nioeventloopgroup会被使用\",{\"1\":{\"612\":1}}],[\"因此加快了编译速度\",{\"1\":{\"563\":1}}],[\"因此当只有部分类被修改时\",{\"1\":{\"563\":1}}],[\"因此我们不必考虑数据格式\",{\"1\":{\"539\":1}}],[\"因此无法读取中文字符\",{\"1\":{\"539\":1}}],[\"因此无论使用char或varchar列都没有关\",{\"1\":{\"96\":1}}],[\"因此消费者\",{\"1\":{\"454\":1}}],[\"因此访问不用加锁\",{\"1\":{\"453\":1}}],[\"因此它被称为是循环的barrier\",{\"1\":{\"446\":1}}],[\"因此对unsafe的使用一定要慎重\",{\"1\":{\"442\":1}}],[\"因此请求为\",{\"1\":{\"306\":1}}],[\"因此先安装docker\",{\"1\":{\"289\":1}}],[\"因此大大提示了系统的复杂度\",{\"1\":{\"131\":1}}],[\"因此单独被放到店铺库\",{\"1\":{\"130\":1}}],[\"因此每个表还是竞争同一个物理机的cpu\",{\"1\":{\"130\":1}}],[\"因此io效率低\",{\"1\":{\"129\":1}}],[\"因此比较慢\",{\"1\":{\"109\":1}}],[\"因此使用varchar来最小化需要处理的数据行的存储总\",{\"1\":{\"97\":1}}],[\"因此在理解一致性的问题时\",{\"1\":{\"192\":1}}],[\"因此在本质上\",{\"1\":{\"97\":1}}],[\"因此在生产环境可以使用datetime时间类型\",{\"1\":{\"82\":1}}],[\"因此\",{\"1\":{\"67\":1,\"100\":1,\"102\":1,\"161\":1,\"445\":1,\"458\":1,\"475\":2,\"520\":1,\"623\":1,\"642\":1,\"705\":1,\"723\":1,\"725\":1,\"751\":1}}],[\"因此这种情况下\",{\"1\":{\"23\":1}}],[\"因为锁的讲求\",{\"1\":{\"924\":1}}],[\"因为你通常认为对象在所有时候都需要它的所有变量\",{\"1\":{\"920\":1}}],[\"因为你发现很难完成客户所需的修改\",{\"1\":{\"898\":1}}],[\"因为很可能只需增加一两条请求\",{\"1\":{\"910\":1}}],[\"因为很多的前缀操作都需要访问\",{\"1\":{\"221\":1}}],[\"因为除此之外就只能选择全局数据\",{\"1\":{\"910\":1}}],[\"因为本系统可能发生变化是加入新影片类型\",{\"1\":{\"905\":1}}],[\"因为配置了归档的空间上限\",{\"1\":{\"872\":1}}],[\"因为动态视图数据来源于控制文件或内存中的\",{\"1\":{\"843\":1}}],[\"因为每个线程都需要执行\",{\"1\":{\"813\":1}}],[\"因为每个子网的首\",{\"1\":{\"526\":1}}],[\"因为线程池中的线程不会超过corepoolsize\",{\"1\":{\"771\":1}}],[\"因为是进程间通信\",{\"1\":{\"712\":1}}],[\"因为他们都需要在读写事件就绪后自己负责进行读写\",{\"1\":{\"808\":1}}],[\"因为他们的研究背景不同\",{\"1\":{\"684\":1}}],[\"因为他们破坏了第一范式\",{\"1\":{\"20\":1}}],[\"因为公平锁需要在多核情况下维护一个队列\",{\"1\":{\"674\":1}}],[\"因为经验表明\",{\"1\":{\"673\":1}}],[\"因为tcp连接的两端都设有缓存\",{\"1\":{\"644\":1}}],[\"因为string修改其实是new了一个新对象\",{\"1\":{\"629\":1}}],[\"因为super\",{\"1\":{\"613\":1}}],[\"因为未使用空间里面的\",{\"1\":{\"621\":1}}],[\"因为内存重分配涉及复杂的算法\",{\"1\":{\"620\":1}}],[\"因为字符串键在底层使用\",{\"1\":{\"618\":1}}],[\"因为x=10在1~126范围内所以称为a类地址\",{\"1\":{\"525\":1}}],[\"因为只有你一个人有这把钥匙\",{\"1\":{\"522\":1}}],[\"因为只有它释放锁\",{\"1\":{\"214\":1}}],[\"因为哈希函数是从关键字集合和地址集合的映像\",{\"1\":{\"506\":1}}],[\"因为速度较快\",{\"1\":{\"497\":1}}],[\"因为数据在地址栏上不可见\",{\"1\":{\"485\":1}}],[\"因为数据还是始终限制在一台服务器\",{\"1\":{\"130\":1}}],[\"因为官方作者还没有完全证明锁定省略代码的正确性\",{\"1\":{\"466\":1,\"472\":1}}],[\"因为有一个消费者正在占用它\",{\"1\":{\"454\":1}}],[\"因为当尝试的更新由于线程之间的争用而失败时\",{\"1\":{\"444\":2}}],[\"因为上述步骤测试redis\",{\"1\":{\"367\":1}}],[\"因为上边说每次发送的数据包是4kb比较小\",{\"1\":{\"14\":1}}],[\"因为ie低版本不支持\",{\"1\":{\"317\":1}}],[\"因为没有意义\",{\"1\":{\"317\":1}}],[\"因为没有路由开销\",{\"1\":{\"255\":1}}],[\"因为zk对写操作是顺序性的\",{\"1\":{\"214\":1}}],[\"因为redo可能还没完成\",{\"1\":{\"199\":1}}],[\"因为分区是必然的\",{\"1\":{\"196\":1}}],[\"因为两者的收益率是相当的\",{\"1\":{\"186\":1}}],[\"因为金融机构的出现是专业化分工协作的结果\",{\"1\":{\"172\":1}}],[\"因为链表表头节点的前置节点和表尾节点的后置节点都指向\",{\"1\":{\"121\":1}}],[\"因为在很多应用场景中\",{\"1\":{\"723\":1}}],[\"因为在hash索引中经过hash函数建立索引之后\",{\"1\":{\"102\":1}}],[\"因为在不设置主键的情况下\",{\"1\":{\"84\":1}}],[\"因为可利用索引中最左边的列集来匹配行\",{\"1\":{\"100\":1}}],[\"因为enum类型order\",{\"1\":{\"86\":1}}],[\"因为它的串包含一个头\",{\"1\":{\"749\":1}}],[\"因为它的通用性比\",{\"1\":{\"82\":1}}],[\"因为它永远是最新的\",{\"1\":{\"728\":1}}],[\"因为它限制了实例的个数\",{\"1\":{\"683\":1}}],[\"因为它在队列的尾部添加元素并从头部删除它们\",{\"1\":{\"529\":1}}],[\"因为它完全是由用户定义的\",{\"1\":{\"461\":1}}],[\"因为它是线程不安全的\",{\"1\":{\"626\":1}}],[\"因为它是\",{\"1\":{\"454\":1}}],[\"因为它不像一个表会存储数据\",{\"1\":{\"20\":1}}],[\"因为值为null的数据不会被计算进去\",{\"1\":{\"82\":1}}],[\"因为这些新的节点的确已经写入了数据\",{\"1\":{\"453\":1}}],[\"因为这些资源非常有限\",{\"1\":{\"52\":1}}],[\"因为这个数据还没有提交那么另外一个事务读取到的这个数据我们称之为脏数据\",{\"1\":{\"72\":1}}],[\"因为通常要对输入进行全盘扫描\",{\"1\":{\"26\":1}}],[\"因为\",{\"1\":{\"23\":1,\"25\":1,\"118\":1,\"297\":1,\"440\":2,\"485\":1,\"618\":3,\"619\":1,\"620\":2,\"622\":1,\"623\":2,\"709\":1,\"740\":1,\"745\":1}}],[\"因为重命名操作只是元信息的变动\",{\"1\":{\"14\":1}}],[\"类中的某个实例变量仅为某种特定情况而设\",{\"1\":{\"920\":1}}],[\"类中还有很多个api都是利用相同的方式保证原子性\",{\"1\":{\"441\":1}}],[\"类内如果有太多代码\",{\"1\":{\"910\":1}}],[\"类同步方法\",{\"1\":{\"661\":1}}],[\"类加载器双亲委派模型\",{\"1\":{\"558\":1}}],[\"类加载器\",{\"1\":{\"558\":1}}],[\"类加载器本身也是一个类\",{\"1\":{\"558\":1,\"563\":1}}],[\"类加载过程\",{\"1\":{\"558\":1}}],[\"类信息\",{\"1\":{\"556\":1}}],[\"类实现了任意精度的整数运算\",{\"1\":{\"549\":1}}],[\"类实质上维护了一个有序列表\",{\"1\":{\"529\":1}}],[\"类和\",{\"1\":{\"538\":1}}],[\"类和outputstream\",{\"1\":{\"538\":1}}],[\"类在\",{\"1\":{\"529\":1}}],[\"类是一个可以为null的容器对象\",{\"1\":{\"527\":1}}],[\"类子网掩码的格式应为\",{\"1\":{\"526\":1}}],[\"类默认子网掩\",{\"0\":{\"526\":1}}],[\"类范围\",{\"0\":{\"525\":1}}],[\"类的加载\",{\"1\":{\"559\":1}}],[\"类的加载方式分为隐式加载和显示加载\",{\"1\":{\"558\":1,\"563\":1}}],[\"类的对象\",{\"1\":{\"537\":1}}],[\"类的对象可以表示一个文件\",{\"1\":{\"537\":1}}],[\"类的\",{\"1\":{\"475\":1}}],[\"类图\",{\"0\":{\"449\":1},\"1\":{\"472\":1}}],[\"类\",{\"1\":{\"419\":2,\"538\":2,\"558\":1,\"563\":1,\"564\":1,\"703\":1}}],[\"类来防止\",{\"1\":{\"413\":1}}],[\"类来执行更新锁超时的时间\",{\"1\":{\"220\":1}}],[\"类库中定义的可以通过预检查方式规避的\",{\"1\":{\"413\":1}}],[\"类似sql语句一样的操作\",{\"1\":{\"527\":1}}],[\"类似于经纬度定位\",{\"1\":{\"569\":1}}],[\"类似于中间人攻击也会导致泄露\",{\"1\":{\"485\":1}}],[\"类似于\",{\"1\":{\"158\":1,\"527\":1}}],[\"类似\",{\"1\":{\"25\":1}}],[\"类似的任务可以使用线程的\",{\"1\":{\"446\":1}}],[\"类似的\",{\"1\":{\"23\":1}}],[\"类型以字符为单位\",{\"1\":{\"836\":1}}],[\"类型以字符为单位等一旦指定\",{\"1\":{\"836\":1}}],[\"类型长度默认不能大于页大小的一半\",{\"1\":{\"836\":1}}],[\"类型已经不能满足描述所有\",{\"1\":{\"549\":1}}],[\"类型原本用于表示单个字符\",{\"1\":{\"549\":1}}],[\"类型主要用于特定的应用场合\",{\"1\":{\"549\":1}}],[\"类型了\",{\"1\":{\"549\":1}}],[\"类型的数组\",{\"1\":{\"616\":1}}],[\"类型的数值有一个后缀\",{\"1\":{\"549\":1}}],[\"类型的两倍\",{\"1\":{\"549\":1}}],[\"类型的\",{\"1\":{\"443\":1}}],[\"类型为configmap的存储卷\",{\"1\":{\"263\":1}}],[\"类型为secret的存储卷\",{\"1\":{\"263\":1}}],[\"类型为hostpath的存储卷\",{\"1\":{\"263\":1}}],[\"类型为emtydir的存储卷\",{\"1\":{\"263\":1}}],[\"类型用于\",{\"1\":{\"261\":1}}],[\"类型特定函数\",{\"1\":{\"126\":1}}],[\"类型作为主键\",{\"1\":{\"82\":1}}],[\"类型\",{\"1\":{\"24\":1,\"417\":1,\"475\":1,\"549\":8,\"652\":2}}],[\"类型转换\",{\"1\":{\"24\":1}}],[\"类型或者注释\",{\"1\":{\"21\":1}}],[\"即在预定环境下能正确地完成预期功能的程度\",{\"1\":{\"898\":1}}],[\"即在把线程进行阻塞操作之前先让线程自旋等待一段时间\",{\"1\":{\"723\":1}}],[\"即会关闭数据库\",{\"1\":{\"845\":1}}],[\"即同一时刻该锁可以被多个读线程获取也就是一种共享式锁\",{\"1\":{\"822\":1}}],[\"即同一宿主机的所有容器之间都是可以相互联通和访问的\",{\"1\":{\"250\":1}}],[\"即取同步状态的高16位\",{\"1\":{\"820\":1}}],[\"即取同步状态的低16位\",{\"1\":{\"820\":1}}],[\"即线程一直都是active的\",{\"1\":{\"812\":1}}],[\"即epoll使用mmap减少复制开销\",{\"1\":{\"806\":1}}],[\"即达到饱和状态\",{\"1\":{\"761\":1}}],[\"即要锁定和解锁的对象\",{\"1\":{\"723\":1}}],[\"即信任与环境\",{\"1\":{\"684\":1}}],[\"即a信任b\",{\"1\":{\"684\":1}}],[\"即所有java对象占用bytes数必须是8的倍数\",{\"1\":{\"672\":1,\"722\":1}}],[\"即x+1\",{\"1\":{\"648\":1}}],[\"即s\",{\"1\":{\"738\":1}}],[\"即syn\",{\"1\":{\"648\":1}}],[\"即string对象一旦创建之后该对象是不可更改的\",{\"1\":{\"629\":1}}],[\"即simplechannelinboundhandler中的release\",{\"1\":{\"613\":1}}],[\"即当一个线程第一次已经获取到了该锁\",{\"1\":{\"815\":1}}],[\"即当netty由于io错误或者处理器在处理事件时抛出的异常时\",{\"1\":{\"613\":2}}],[\"即当计算结果完成及时通知监听者\",{\"1\":{\"475\":1}}],[\"即不仅计算机系统所提供的服务是可信赖的\",{\"1\":{\"684\":1}}],[\"即不去远程仓库更新包\",{\"1\":{\"566\":1}}],[\"即不停的重试\",{\"1\":{\"219\":1}}],[\"即这个对象无用但是却无法被垃圾回收器回收的\",{\"1\":{\"558\":1}}],[\"即对象变成了孤儿的时候\",{\"1\":{\"558\":1}}],[\"即5个子网\",{\"1\":{\"526\":1}}],[\"即可\",{\"1\":{\"874\":1}}],[\"即可得出广播地址为\",{\"1\":{\"526\":1}}],[\"即可容纳的主机数为2的5次方减2\",{\"1\":{\"526\":1}}],[\"即可调用远程服务\",{\"1\":{\"409\":1}}],[\"即有62个ip地址可用\",{\"1\":{\"526\":1}}],[\"即2的6次方减去2\",{\"1\":{\"526\":1}}],[\"即响应时间\",{\"1\":{\"518\":3}}],[\"即从多线程中获取数据\",{\"1\":{\"475\":1}}],[\"即比较并替换\",{\"1\":{\"442\":1}}],[\"即dry原则\",{\"1\":{\"413\":1}}],[\"即10秒\",{\"1\":{\"402\":1}}],[\"即匹配压缩类型\",{\"1\":{\"317\":1}}],[\"即新创建的docker容器不会虚拟出自己的网卡\",{\"1\":{\"250\":1}}],[\"即全局流量管理\",{\"1\":{\"222\":1}}],[\"即全年停机时间不超过\",{\"1\":{\"194\":1}}],[\"即gtld\",{\"1\":{\"222\":1}}],[\"即如何在高并发的环境下保证\",{\"1\":{\"221\":1}}],[\"即相同的线程能够多次获取同一把锁\",{\"1\":{\"218\":1}}],[\"即加锁操作和解锁只能由同一线程来进行\",{\"1\":{\"217\":1}}],[\"即监听机制\",{\"1\":{\"214\":1}}],[\"即前缀机制\",{\"1\":{\"214\":1}}],[\"即保证p和a\",{\"1\":{\"202\":1}}],[\"即任何时刻对zookeeper的访问请求能得到一致的数据结果\",{\"1\":{\"198\":1}}],[\"即容许系统停机或者长时间无响应的话\",{\"1\":{\"197\":1}}],[\"即分布式系统在遇到某节点或网络分区故障的时候\",{\"1\":{\"195\":1}}],[\"即服务一直可用\",{\"1\":{\"194\":1}}],[\"即更新操作成功并返回客户端完成后\",{\"1\":{\"192\":1}}],[\"即资金盈余单位通过存款\",{\"1\":{\"171\":1}}],[\"即为0x0000ffff\",{\"1\":{\"820\":1}}],[\"即为数据增加一个版本标识\",{\"1\":{\"730\":1}}],[\"即为担保公司提供额外的信用保障\",{\"1\":{\"167\":1}}],[\"即为常见且有效的扩展\",{\"1\":{\"158\":1}}],[\"即增信型再担保\",{\"1\":{\"162\":1}}],[\"即无法使用\",{\"1\":{\"158\":1}}],[\"即无论\",{\"1\":{\"155\":1}}],[\"即占用的字节数\",{\"1\":{\"157\":1}}],[\"即作为\",{\"1\":{\"153\":1}}],[\"即自动开始\",{\"1\":{\"152\":1}}],[\"即通过系统调用\",{\"1\":{\"147\":1}}],[\"即关闭\",{\"1\":{\"146\":1,\"152\":1}}],[\"即生成\",{\"1\":{\"141\":1}}],[\"即生成一个临时表保存子查询的结果\",{\"1\":{\"113\":1}}],[\"即压缩\",{\"1\":{\"141\":1}}],[\"即停止\",{\"1\":{\"141\":1}}],[\"即表示关闭\",{\"1\":{\"141\":1}}],[\"即落地新的\",{\"1\":{\"141\":1}}],[\"即使其他空闲的核心线程能够执行新任务也会创建\",{\"1\":{\"755\":1}}],[\"即使在本系统中实现了加锁机制\",{\"1\":{\"725\":1}}],[\"即使落在别人手里\",{\"1\":{\"705\":1}}],[\"即使被调用方法返回空集合或者空对象\",{\"1\":{\"413\":1}}],[\"即使你定义了applicationcontextaware接口\",{\"1\":{\"381\":1}}],[\"即使锁的持有者因故障而不能主动释放锁\",{\"1\":{\"214\":1}}],[\"即使是优先的法律地位也不能保证债券持有者避免财务损失\",{\"1\":{\"177\":1}}],[\"即使输入的键是有规律的\",{\"1\":{\"127\":1}}],[\"即使对于很小的数据集\",{\"1\":{\"23\":1}}],[\"即另外一个事务不能读取该事务未提交的数据\",{\"1\":{\"106\":1}}],[\"即便系统故障也不会丢失\",{\"1\":{\"105\":1}}],[\"即把relay\",{\"1\":{\"79\":1}}],[\"即\",{\"1\":{\"34\":1,\"36\":1,\"140\":1,\"149\":2,\"506\":1,\"526\":1,\"651\":1,\"664\":1,\"673\":1,\"738\":1}}],[\"即是确认字符\",{\"1\":{\"14\":1}}],[\"称为盐值\",{\"1\":{\"897\":1}}],[\"称为物理读\",{\"1\":{\"863\":1}}],[\"称为逻辑读\",{\"1\":{\"863\":1}}],[\"称为最左前缀\",{\"1\":{\"100\":1}}],[\"称为\",{\"1\":{\"23\":1,\"214\":1}}],[\"段执行连接过程\",{\"1\":{\"23\":1}}],[\"从本质上说\",{\"1\":{\"916\":1}}],[\"从另一个对象那儿调用几乎半打的取值函数\",{\"1\":{\"913\":1}}],[\"从用户端考虑或从服务端考虑也会不同\",{\"1\":{\"897\":1}}],[\"从用户空间拷贝fd\",{\"1\":{\"799\":1}}],[\"从高位开始比较得到的是\",{\"1\":{\"896\":1}}],[\"从系统性能考虑\",{\"1\":{\"863\":1}}],[\"从系统性能提升来说\",{\"1\":{\"863\":1}}],[\"从业务数据中有效的分析各类统计指标\",{\"1\":{\"785\":1}}],[\"从上图来看\",{\"1\":{\"809\":1}}],[\"从上图我们可以看出\",{\"1\":{\"672\":1}}],[\"从上文的分析中可以看到\",{\"1\":{\"722\":1}}],[\"从jdk\",{\"1\":{\"722\":1}}],[\"从偏向锁到重量锁\",{\"0\":{\"671\":1}}],[\"从cache角度来说\",{\"1\":{\"665\":1}}],[\"从输出中看到maven首先执行了clean\",{\"1\":{\"580\":1}}],[\"从输入\",{\"1\":{\"39\":1}}],[\"从一个被称为gc\",{\"1\":{\"558\":1}}],[\"从头获取元素\",{\"1\":{\"530\":2}}],[\"从子网掩码可以看出\",{\"1\":{\"526\":1}}],[\"从当前的工作空间中和索引中删除文件\",{\"1\":{\"503\":1}}],[\"从其他的版本库\",{\"1\":{\"499\":1}}],[\"从传输的角度来说\",{\"1\":{\"485\":1}}],[\"从future获取异步执行返回的结果\",{\"1\":{\"475\":1}}],[\"从源码的注释上看\",{\"1\":{\"466\":1}}],[\"从生产者到消费者过程中所处理的数据单元\",{\"1\":{\"461\":1}}],[\"从生产者传递给消费者的数据单位\",{\"1\":{\"450\":1}}],[\"从ringbuffer读取的事件会交由实际的生产者实现类来消费\",{\"1\":{\"450\":1}}],[\"从3\",{\"1\":{\"450\":1}}],[\"从图中可以看出\",{\"1\":{\"433\":1,\"673\":1}}],[\"从库使用客户端\",{\"1\":{\"355\":1}}],[\"从库重启redis\",{\"1\":{\"355\":1}}],[\"从库是否升级为主库\",{\"0\":{\"341\":1}}],[\"从header头的content\",{\"1\":{\"317\":1}}],[\"从主节点拷过去\",{\"1\":{\"293\":1}}],[\"从节点没有\",{\"1\":{\"293\":1}}],[\"从国内docker镜像库下载tomcat\",{\"0\":{\"239\":1}}],[\"从结构上来说最顶层是\",{\"1\":{\"222\":1}}],[\"从开发的角度来说\",{\"1\":{\"217\":1}}],[\"从特定的名字空间到全球\",{\"1\":{\"208\":1}}],[\"从google的经验中可以得到的结论是\",{\"1\":{\"196\":1}}],[\"从客户端角度\",{\"1\":{\"192\":1}}],[\"从客户端来看\",{\"1\":{\"192\":1}}],[\"从服务端来看\",{\"1\":{\"192\":1}}],[\"从服务器进行读操作\",{\"1\":{\"75\":1}}],[\"从融资成本看\",{\"1\":{\"186\":1}}],[\"从广义上来说\",{\"1\":{\"168\":1}}],[\"从\",{\"0\":{\"154\":1},\"1\":{\"153\":4,\"154\":5,\"155\":22,\"158\":1,\"161\":2,\"549\":2,\"622\":1}}],[\"从有序集合里面移除给定的成员\",{\"1\":{\"137\":1}}],[\"从散列里面获取一个或多个键的值\",{\"1\":{\"136\":1}}],[\"从集合里面随机地返回一个或多个元素\",{\"1\":{\"135\":1}}],[\"从集合里面随机获取元素\",{\"1\":{\"133\":1}}],[\"从集合里面移除一个或多个元素\",{\"1\":{\"135\":1}}],[\"从source\",{\"1\":{\"135\":2}}],[\"从第一个非空列表中弹出位于最右端的元素\",{\"1\":{\"135\":1}}],[\"从第一个非空列表中弹出位于最左端的元素\",{\"1\":{\"135\":1}}],[\"从链表的两端推入或者弹出元素\",{\"1\":{\"133\":1}}],[\"从而减少狎昵行径\",{\"1\":{\"923\":1}}],[\"从而进入内核态\",{\"1\":{\"812\":1}}],[\"从而自动恢复系统或达到安全停机的目的\",{\"1\":{\"704\":1}}],[\"从而确保系统安全\",{\"1\":{\"685\":1}}],[\"从而确保计算机系统可信\",{\"1\":{\"684\":1}}],[\"从而发现不可信实体\",{\"1\":{\"685\":1}}],[\"从而导致超出了虚拟机使用内存的大小\",{\"1\":{\"651\":1}}],[\"从而接更多的请求\",{\"1\":{\"651\":1}}],[\"从而各个dao可以获取同一connection\",{\"1\":{\"650\":1}}],[\"从而把整个请求串起来\",{\"1\":{\"650\":1}}],[\"从而可以用来保存线程上下文信息\",{\"1\":{\"650\":1}}],[\"从而避免写出条件式代码\",{\"1\":{\"920\":1}}],[\"从而避免了不必要的代码重复\",{\"1\":{\"624\":1}}],[\"从而避免频繁分配和回收内存\",{\"1\":{\"452\":1}}],[\"从而改变先进先出的队列顺序\",{\"1\":{\"533\":1}}],[\"从而提升多线程的性能\",{\"1\":{\"664\":1}}],[\"从而提升了数据库性能\",{\"1\":{\"129\":1}}],[\"从而提取参数\",{\"1\":{\"483\":1}}],[\"从而性能好\",{\"1\":{\"472\":1}}],[\"从而整体上大幅提高系统性能\",{\"1\":{\"452\":1}}],[\"从而很好地解决了存储的扩展性问题\",{\"1\":{\"430\":1}}],[\"从而使得系统在单线程的情况下可以同时处理多个客户端请求\",{\"1\":{\"808\":1}}],[\"从而使得单个表的数据量变小\",{\"1\":{\"132\":1}}],[\"从而使人更方便地访问互联网\",{\"1\":{\"222\":1}}],[\"从而锁释放\",{\"1\":{\"214\":1}}],[\"从而实现终端计算机的可信启动\",{\"1\":{\"687\":1}}],[\"从而实现计算机部件的冗余备份和故障切换\",{\"1\":{\"686\":1}}],[\"从而实现数据在宿主机与容器之间的迁移\",{\"1\":{\"262\":1}}],[\"从而实现高可用性\",{\"1\":{\"196\":1}}],[\"从而实现资金融通的过程\",{\"1\":{\"171\":1}}],[\"从而迫使商业银行进行深刻转型\",{\"1\":{\"178\":1}}],[\"从而安全性较高\",{\"1\":{\"172\":1}}],[\"从而分散风险\",{\"1\":{\"167\":1}}],[\"从而达到多个服务器共同分摊压力的效果\",{\"1\":{\"130\":1}}],[\"从而达到提升数据库性能的目的\",{\"1\":{\"128\":2}}],[\"从而省略掉常规连接操作所需要的\",{\"1\":{\"23\":1}}],[\"从最好到最差的连接类型依次为\",{\"1\":{\"113\":1}}],[\"从逻辑角度\",{\"1\":{\"101\":1}}],[\"从配置中心获取配置失败\",{\"1\":{\"297\":2}}],[\"从配置\",{\"1\":{\"79\":1}}],[\"从b账号中把余额读出来\",{\"1\":{\"66\":1}}],[\"从a账号中把余额读出来\",{\"1\":{\"66\":1}}],[\"从数据库中搜索最相似的图片\",{\"1\":{\"58\":1}}],[\"从这点来看\",{\"1\":{\"23\":1}}],[\"从离它最近的那个datanode获取数据块的副本\",{\"1\":{\"14\":1}}],[\"注解参数注入\",{\"1\":{\"402\":1}}],[\"注册数据库服务\",{\"1\":{\"838\":1}}],[\"注册回调函数\",{\"1\":{\"799\":1}}],[\"注册分支事务的时候会插入lock\",{\"1\":{\"427\":1}}],[\"注册到nacos的服务名称\",{\"1\":{\"392\":1}}],[\"注册系统服务\",{\"1\":{\"352\":1}}],[\"注意每次调整都要编译测试\",{\"1\":{\"900\":1}}],[\"注意执行\",{\"1\":{\"622\":1}}],[\"注意图\",{\"1\":{\"619\":1}}],[\"注意新分支创建后不会自动切换为当前分支\",{\"1\":{\"500\":1}}],[\"注意下面替换为实际ip\",{\"1\":{\"332\":1}}],[\"注意配置中interface\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"注意这里以\",{\"1\":{\"307\":1}}],[\"注意这里没有以\",{\"1\":{\"307\":1}}],[\"注意dockerfile的d需要大写\",{\"1\":{\"243\":1}}],[\"注意是空格\",{\"1\":{\"306\":1}}],[\"注意是\",{\"1\":{\"106\":1}}],[\"注意要和character\",{\"1\":{\"74\":1}}],[\"注意\",{\"1\":{\"34\":1,\"35\":1,\"255\":1,\"270\":1,\"281\":1,\"299\":1,\"300\":1,\"301\":1,\"316\":1,\"321\":1,\"381\":1,\"402\":1,\"403\":1,\"413\":1,\"414\":2,\"418\":1,\"456\":1,\"654\":1,\"669\":1,\"723\":1,\"789\":1,\"924\":1}}],[\"注\",{\"1\":{\"23\":2,\"24\":2,\"82\":1,\"307\":1,\"309\":1,\"384\":1,\"398\":1,\"402\":1,\"416\":1,\"450\":1,\"497\":1,\"682\":1,\"722\":1}}],[\"值和\",{\"1\":{\"624\":1}}],[\"值描述\",{\"1\":{\"549\":1}}],[\"值需要存在\",{\"1\":{\"527\":1}}],[\"值的函数function\",{\"1\":{\"475\":1}}],[\"值的反序列化方式\",{\"1\":{\"435\":1}}],[\"值的序列化方式\",{\"1\":{\"435\":1}}],[\"值为方法名\",{\"1\":{\"402\":2}}],[\"值为\",{\"1\":{\"126\":1}}],[\"值累加\",{\"1\":{\"36\":1}}],[\"值相同的\",{\"1\":{\"36\":1}}],[\"值进行排序\",{\"1\":{\"36\":1}}],[\"值\",{\"1\":{\"24\":1,\"125\":1,\"413\":1,\"507\":1,\"549\":1,\"616\":1,\"619\":1,\"621\":1,\"622\":1,\"624\":1,\"652\":3}}],[\"值代替\",{\"1\":{\"23\":1}}],[\"值对属性值\",{\"1\":{\"21\":1}}],[\"左右两端分别移除所有在\",{\"1\":{\"622\":1}}],[\"左侧导航栏\",{\"1\":{\"283\":1,\"284\":1,\"285\":1}}],[\"左节点小于父节点\",{\"1\":{\"102\":1}}],[\"左边表中选择的列是可以预测的\",{\"1\":{\"23\":1}}],[\"左边的字符串\",{\"1\":{\"22\":1}}],[\"左开半连接\",{\"1\":{\"23\":1}}],[\"左表中匹配不上的字段值用null代替\",{\"1\":{\"23\":1}}],[\"右移16次\",{\"1\":{\"820\":1}}],[\"右键打开git\",{\"1\":{\"495\":1}}],[\"右侧三个点\",{\"1\":{\"278\":1}}],[\"右节点大于父节点\",{\"1\":{\"102\":1}}],[\"右外连接\",{\"1\":{\"23\":1}}],[\"右边表是ibm的记录\",{\"1\":{\"23\":1}}],[\"用不上的装置只会阻挡你的路\",{\"1\":{\"919\":1}}],[\"用多态替换switch\",{\"1\":{\"906\":1}}],[\"用原来程序设计和调试的成本除移植时需用的费用\",{\"1\":{\"898\":1}}],[\"用验证码代替时间戳\",{\"1\":{\"897\":1}}],[\"用ca的公钥解开数字证书\",{\"1\":{\"705\":1}}],[\"用自己的私钥做成\",{\"1\":{\"705\":1}}],[\"用自己的公钥换走了鲍勃的公钥\",{\"1\":{\"705\":1}}],[\"用鲍勃的公钥解密\",{\"1\":{\"705\":1}}],[\"用私钥解密\",{\"1\":{\"705\":1}}],[\"用完即释放\",{\"1\":{\"855\":1}}],[\"用完之后返回到pool中\",{\"1\":{\"683\":1}}],[\"用完再取一批号段\",{\"1\":{\"211\":1}}],[\"用threadlocal存储connection\",{\"1\":{\"650\":1}}],[\"用了threadlocal\",{\"1\":{\"626\":1}}],[\"用起来很麻烦\",{\"1\":{\"626\":1}}],[\"用以快速开发高性能\",{\"1\":{\"607\":2}}],[\"用以接下来判断自己是否获得锁\",{\"1\":{\"214\":1}}],[\"用nexus作为前缀\",{\"1\":{\"588\":1}}],[\"用代码说话\",{\"1\":{\"527\":1}}],[\"用的端口也不一样\",{\"1\":{\"522\":1}}],[\"用的是顺序写\",{\"1\":{\"433\":1}}],[\"用正则等工具从数据中获取\",{\"1\":{\"483\":1}}],[\"用红色\",{\"1\":{\"454\":1}}],[\"用5个线程分别a++\",{\"1\":{\"440\":2}}],[\"用来记录获取锁的线程数\",{\"1\":{\"815\":1}}],[\"用来协助监测\",{\"1\":{\"706\":1}}],[\"用来实现分组唤醒需要唤醒的线程们\",{\"1\":{\"703\":1}}],[\"用来指向对象对应的class对象\",{\"1\":{\"672\":1}}],[\"用来与其他实体间共享作业文件\",{\"1\":{\"657\":1}}],[\"用来临时存放双向通信的数据\",{\"1\":{\"644\":1}}],[\"用来处理已经被接收的连接\",{\"1\":{\"612\":1}}],[\"用来接收进来的连接\",{\"1\":{\"612\":1}}],[\"用来加载java核心类库\",{\"1\":{\"558\":1}}],[\"用来控制同时访问资源的线程数量\",{\"1\":{\"554\":1}}],[\"用来提供高效的\",{\"1\":{\"515\":1}}],[\"用来对超过16位有效位的数进行精确的运算\",{\"1\":{\"445\":1}}],[\"用来管理docker镜像的\",{\"1\":{\"234\":1}}],[\"用来表示每分钟允许记录到slow\",{\"1\":{\"74\":1}}],[\"用分布式锁控制多个进程对资源的访问\",{\"1\":{\"212\":1}}],[\"用可变长度varchar列简\",{\"1\":{\"97\":1}}],[\"用于保证数据的一致性\",{\"1\":{\"864\":1}}],[\"用于保存字符串\",{\"1\":{\"616\":1}}],[\"用于定时调度任务\",{\"1\":{\"863\":1}}],[\"用于读写数据\",{\"1\":{\"859\":1}}],[\"用于在服务器端口上进行循环监听\",{\"1\":{\"857\":1}}],[\"用于在java应用程序运行时创建和修改java类\",{\"1\":{\"714\":1}}],[\"用于线程内有迭代逻辑\",{\"1\":{\"764\":1}}],[\"用于线程内无迭代\",{\"1\":{\"764\":1}}],[\"用于提交需要有返回值的任务\",{\"1\":{\"762\":1}}],[\"用于暂时存储\",{\"1\":{\"652\":1}}],[\"用于结构化数据的计算\",{\"1\":{\"627\":1}}],[\"用于实现各进程节点之间的内部通信\",{\"1\":{\"608\":1}}],[\"用于控制单次调用\",{\"1\":{\"564\":1}}],[\"用于存储虚拟机加载的\",{\"1\":{\"556\":1}}],[\"用于修改服务器上的数据\",{\"1\":{\"481\":1}}],[\"用于获取信息\",{\"1\":{\"481\":1}}],[\"用于获取结果\",{\"1\":{\"474\":1}}],[\"用于产生结果\",{\"1\":{\"474\":1}}],[\"用于disruptor的基于轮询\",{\"1\":{\"472\":1}}],[\"用于申请序列\",{\"1\":{\"472\":1}}],[\"用于管理sequencegroup对象的静态方法\",{\"1\":{\"472\":1}}],[\"用于解决没有传递executor对象的时候使用默认的basicexecutor即可\",{\"1\":{\"472\":1}}],[\"用于运行时提高代码性能的提示\",{\"1\":{\"472\":1}}],[\"用于跟踪ringbuffer中任务的变化和消费者的消费情况\",{\"1\":{\"450\":1}}],[\"用于组合和处理多个集合的redis命令\",{\"0\":{\"136\":1}}],[\"用于计算索引值\",{\"1\":{\"124\":1}}],[\"用于事务处理应用程序\",{\"1\":{\"93\":1}}],[\"用于处理ringbuffer中可用的事件\",{\"1\":{\"472\":1}}],[\"用于处理实际的i\",{\"1\":{\"433\":1}}],[\"用于处理多个client\",{\"1\":{\"433\":1}}],[\"用于处理从非结构化数据转换的嵌入向量\",{\"1\":{\"50\":1}}],[\"用于处理单个列的查询结果\",{\"1\":{\"22\":1}}],[\"用\",{\"1\":{\"82\":2,\"483\":1,\"887\":1}}],[\"用一个常用的\",{\"1\":{\"66\":1}}],[\"用途\",{\"0\":{\"55\":1},\"1\":{\"530\":1}}],[\"用户资源限制设置\",{\"1\":{\"883\":1}}],[\"用户资源限制\",{\"0\":{\"883\":1}}],[\"用户锁定和解锁\",{\"0\":{\"879\":1}}],[\"用户输入错误多次\",{\"0\":{\"877\":1}}],[\"用户输入docker提供的命令来管理本地或者远程的服务器\",{\"1\":{\"234\":1}}],[\"用户类型\",{\"0\":{\"873\":1}}],[\"用户默认表空间\",{\"1\":{\"864\":1}}],[\"用户角色权限信息等\",{\"1\":{\"864\":1}}],[\"用户启动\",{\"0\":{\"845\":1}}],[\"用户执行脚本\",{\"1\":{\"836\":1,\"838\":1}}],[\"用户执行如下脚本\",{\"1\":{\"834\":1,\"835\":1}}],[\"用户的\",{\"1\":{\"834\":2}}],[\"用户的一次行为记录\",{\"1\":{\"786\":1}}],[\"用户和该用户所属组\",{\"1\":{\"832\":1}}],[\"用户一周内每天的登录总数\",{\"1\":{\"789\":1}}],[\"用户一周内\",{\"1\":{\"789\":1}}],[\"用户一周内登陆总数\",{\"1\":{\"789\":1}}],[\"用户一周中登陆分布情况\",{\"1\":{\"789\":1}}],[\"用户\",{\"1\":{\"789\":5,\"834\":1,\"888\":1}}],[\"用户行为结果能够帮助企业在某块业务进行决策时提供可靠的数据依据\",{\"1\":{\"785\":1}}],[\"用户行为特征提取\",{\"0\":{\"780\":1}}],[\"用户发送请求\",{\"0\":{\"633\":1}}],[\"用户配置\",{\"0\":{\"576\":1}}],[\"用户自定义类加载器\",{\"1\":{\"558\":1}}],[\"用户访问网站\",{\"1\":{\"520\":1}}],[\"用户访问www\",{\"1\":{\"308\":1}}],[\"用户线程充当该角色\",{\"1\":{\"450\":1}}],[\"用户实现该接口\",{\"1\":{\"450\":1}}],[\"用户注册的场景中\",{\"1\":{\"413\":1}}],[\"用户会看到乱码\",{\"1\":{\"317\":1}}],[\"用户可以将该域名下的网站服务器指向到自己的web\",{\"1\":{\"222\":1}}],[\"用户可以使用del命令显式地删除这些无用数据\",{\"1\":{\"139\":1}}],[\"用户请求通过浏览器输入要访问网站的地址\",{\"1\":{\"222\":1}}],[\"用户感受到的是支付宝系统长时间宕机\",{\"1\":{\"203\":1}}],[\"用户下单体验好了\",{\"1\":{\"202\":1}}],[\"用户体验就非常差了\",{\"1\":{\"202\":1}}],[\"用户在浏览商品列表时\",{\"1\":{\"129\":1}}],[\"用户进程分配到的内存设置\",{\"1\":{\"74\":1}}],[\"用户名\",{\"1\":{\"63\":1}}],[\"用户点击文件上传之后\",{\"1\":{\"58\":1}}],[\"用户编写的\",{\"1\":{\"47\":1}}],[\"用户数比桶数多\",{\"1\":{\"27\":1}}],[\"用例如使用\",{\"1\":{\"25\":1}}],[\"用法和\",{\"1\":{\"23\":2}}],[\"将新建的节点设置为尾部节点\",{\"1\":{\"929\":1}}],[\"将双向关联改为单向关联提炼类\",{\"1\":{\"923\":1}}],[\"将null值替换为null对象\",{\"1\":{\"920\":1}}],[\"将超类和子类合为一体\",{\"1\":{\"918\":1}}],[\"将与这些数据有关联的方法也一并移入类中\",{\"1\":{\"915\":1}}],[\"将它们提炼到一个独立对象中\",{\"1\":{\"914\":1}}],[\"将它们放在一起\",{\"1\":{\"910\":1}}],[\"将长长的函数变为多个短小的函数\",{\"1\":{\"910\":1}}],[\"将getpricecode\",{\"1\":{\"906\":1}}],[\"将积分计算方法搬移到rental类中\",{\"1\":{\"903\":1}}],[\"将密码通过md5算法加密\",{\"1\":{\"897\":1}}],[\"将任务加入工作线程队列\",{\"1\":{\"863\":1}}],[\"将任务加入linkedblockingqueue\",{\"1\":{\"771\":1}}],[\"将申请的任务加入工作线程的任务队列\",{\"1\":{\"857\":1}}],[\"将当前锁升级成轻量级锁\",{\"1\":{\"828\":1}}],[\"将锁对象的对象头的markword替换为指向锁记录的指针\",{\"1\":{\"827\":1}}],[\"将锁对象的对象头中的markword复制到线程的刚刚创建的锁记录中\",{\"1\":{\"827\":1}}],[\"将锁记录中的owner指针指向锁对象\",{\"1\":{\"827\":1}}],[\"将花传下去\",{\"1\":{\"825\":1}}],[\"将同步状态减去读状态即可\",{\"1\":{\"823\":1}}],[\"将没有线程执行synchronousqueue\",{\"1\":{\"773\":1}}],[\"将提交的版本数据与数据库表对应记录的当前版本信息对比时\",{\"1\":{\"730\":1}}],[\"将此版本一同读出\",{\"1\":{\"730\":1}}],[\"将此项目fork到自己的gitlab上\",{\"1\":{\"488\":1}}],[\"将javassist包打包到agent中\",{\"1\":{\"715\":1}}],[\"将得到的结果\",{\"1\":{\"705\":1}}],[\"将线程id插入到markword中\",{\"1\":{\"673\":1}}],[\"将系统中的资源分配给各个正在运行的应用程序\",{\"1\":{\"654\":1}}],[\"将相同的key进行合并\",{\"1\":{\"652\":1}}],[\"将具体\",{\"1\":{\"627\":1}}],[\"将2019\",{\"1\":{\"626\":1}}],[\"将连续增长\",{\"1\":{\"621\":1}}],[\"将执行一次内存重分配操作\",{\"1\":{\"621\":1}}],[\"将变成\",{\"1\":{\"621\":2}}],[\"将小于\",{\"1\":{\"621\":1}}],[\"将小表放在前边\",{\"1\":{\"23\":1}}],[\"将在执行拼接操作之前检查\",{\"1\":{\"619\":1}}],[\"将获取字符串长度所需的复杂度从\",{\"1\":{\"618\":1}}],[\"将项目打包放到本地maven仓库\",{\"0\":{\"584\":1}}],[\"将项目主代码编译至targert\",{\"1\":{\"580\":1}}],[\"将完成一下三件事情\",{\"1\":{\"558\":1}}],[\"将字符串转换为字节数组\",{\"1\":{\"539\":1}}],[\"将ip地址10\",{\"1\":{\"526\":1}}],[\"将ip地址192\",{\"1\":{\"526\":4}}],[\"将子网掩码255\",{\"1\":{\"526\":3}}],[\"将子模块的相关配置节点删除掉\",{\"1\":{\"502\":2}}],[\"将信息和私钥通过某种算法混合在一起\",{\"1\":{\"522\":1}}],[\"将名称为\",{\"1\":{\"500\":1}}],[\"将本地commit的代码更新到远程版本库中\",{\"1\":{\"499\":1}}],[\"将本地应用war包上传到tomcat容器的webapps下面\",{\"1\":{\"243\":1}}],[\"将代码更新到本地\",{\"1\":{\"499\":1}}],[\"将操作提交到gitlab\",{\"1\":{\"497\":1}}],[\"将bigdecimal对象中的值转换成整数\",{\"1\":{\"445\":1}}],[\"将bigdecimal对象中的值转换成长整数\",{\"1\":{\"445\":1}}],[\"将bigdecimal对象中的值转换成单精度数\",{\"1\":{\"445\":1}}],[\"将bigdecimal对象中的值转换成双精度数\",{\"1\":{\"445\":1}}],[\"将bigdecimal对象中的值转换成字符串\",{\"1\":{\"445\":1}}],[\"将double转换为string\",{\"1\":{\"445\":1}}],[\"将创建一个\",{\"1\":{\"445\":1}}],[\"将值设置为newvalue\",{\"1\":{\"444\":2}}],[\"将内存中的数据输出到文件中\",{\"1\":{\"539\":1}}],[\"将内存中的数据存储到硬盘\",{\"1\":{\"140\":1}}],[\"将内存位置的值与预期原值比较\",{\"1\":{\"442\":1}}],[\"将响应response返回给processor线程\",{\"1\":{\"433\":1}}],[\"将响应报⽂发送⾄客户端之前可以启⽤压缩功能\",{\"1\":{\"317\":1}}],[\"将为用户提供了\",{\"1\":{\"420\":1}}],[\"将该密文加上保存在session\",{\"1\":{\"897\":1}}],[\"将该二进制流中的静态存储结构转化为方法去运行时数据结构\",{\"1\":{\"558\":1,\"559\":1}}],[\"将该计算阶段的结果作为参数传递给参数\",{\"1\":{\"475\":1}}],[\"将该异常抛给它的调用者\",{\"1\":{\"413\":1}}],[\"将该租赁物的占有\",{\"1\":{\"187\":1}}],[\"将动态获得服务地址改为固定的地址\",{\"1\":{\"410\":1}}],[\"将动态url地址显示为静态url的一种技术\",{\"1\":{\"308\":1}}],[\"将来不打进jar包里\",{\"1\":{\"389\":1}}],[\"将下载好的jdk包拷贝至\",{\"1\":{\"376\":1}}],[\"将防火墙服务停止并禁止开机自启\",{\"1\":{\"352\":1}}],[\"将配置修改为yes\",{\"1\":{\"352\":1}}],[\"将master分支clone\",{\"1\":{\"493\":1}}],[\"将master\",{\"1\":{\"329\":1,\"342\":1}}],[\"将member成员的分值加上increment\",{\"1\":{\"137\":1}}],[\"将导出的数据all\",{\"1\":{\"327\":1}}],[\"将原配置文件内容清空\",{\"1\":{\"321\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"将原来独立的数据库拆分为若干数据库组成\",{\"1\":{\"128\":1}}],[\"将和user\",{\"1\":{\"317\":1}}],[\"将用户通过http的请求协议重新跳转至https协议\",{\"1\":{\"308\":1}}],[\"将用于docker\",{\"1\":{\"263\":2}}],[\"将桥接的ipv4流量传递到iptables的链\",{\"1\":{\"288\":1}}],[\"将主机上的目录挂载到pod容器里\",{\"1\":{\"275\":1}}],[\"将被用于同期中mount的目录\",{\"1\":{\"263\":1}}],[\"将镜像推送到阿里云镜像仓库registry\",{\"1\":{\"263\":1}}],[\"将不必要的委托转移到另一个类中\",{\"1\":{\"919\":1}}],[\"将不需要执行内存重分配\",{\"1\":{\"621\":1}}],[\"将不会分配网络环境\",{\"1\":{\"257\":1}}],[\"将不能响应其他任何命令\",{\"1\":{\"143\":1}}],[\"将宿主机的\",{\"1\":{\"252\":1}}],[\"将商品库存分开放\",{\"1\":{\"221\":1}}],[\"将步骤\",{\"1\":{\"214\":1}}],[\"将因租约到期而被删除\",{\"1\":{\"214\":1}}],[\"将失效删除\",{\"1\":{\"214\":1}}],[\"将分布式系统分隔未独立的几个部分\",{\"1\":{\"195\":1}}],[\"将已支付的担保代偿补偿备付金退回\",{\"1\":{\"189\":1}}],[\"将其转化为用户可以理解的内容\",{\"1\":{\"413\":1}}],[\"将其定向至一个新的域名www\",{\"1\":{\"308\":1}}],[\"将其财产权委托给受托人\",{\"1\":{\"179\":1}}],[\"将其暂时闲置的资金先行提供给这些金融中介机构\",{\"1\":{\"171\":1}}],[\"将两个同步代码块合并成一个\",{\"1\":{\"924\":1}}],[\"将两个类的共同点提炼到新类中\",{\"1\":{\"923\":1}}],[\"将两个以上\",{\"1\":{\"179\":1}}],[\"将两个索引值相同的键\",{\"1\":{\"125\":1}}],[\"将命令转发到\",{\"1\":{\"161\":1}}],[\"将单个内存占用量大的\",{\"1\":{\"160\":1}}],[\"将引起\",{\"1\":{\"155\":1}}],[\"将尝试调用该方法\",{\"1\":{\"709\":1,\"717\":1,\"721\":1}}],[\"将尝试获取连接中断期间于\",{\"1\":{\"155\":1}}],[\"将尝试进行\",{\"1\":{\"154\":1}}],[\"将尝试重新建立连接\",{\"1\":{\"154\":1}}],[\"将等待\",{\"1\":{\"151\":1}}],[\"将自动地\",{\"1\":{\"144\":1}}],[\"将阻塞\",{\"1\":{\"143\":1}}],[\"将产生额外的性能损耗\",{\"1\":{\"141\":1}}],[\"将加载\",{\"1\":{\"140\":1}}],[\"将给定键的过期时间设置为给定的unix时间戳\",{\"1\":{\"139\":1}}],[\"将带有给定分值的成员添加到有序集合里面\",{\"1\":{\"137\":1}}],[\"将键key存储的值加上浮点数increment\",{\"1\":{\"137\":1}}],[\"将键key存储的值加上整数increment\",{\"1\":{\"137\":1}}],[\"将键存储的值减去整数amount\",{\"1\":{\"134\":1}}],[\"将键存储的值减去1\",{\"1\":{\"134\":1}}],[\"将键存储的值加上浮点数\",{\"1\":{\"134\":1}}],[\"将键存储的值加上整数amount\",{\"1\":{\"134\":1}}],[\"将键存储的值加上1\",{\"1\":{\"134\":1}}],[\"将那些必要的简介依赖\",{\"1\":{\"594\":1}}],[\"将那些至少存在于一个集合中的元素\",{\"1\":{\"136\":1}}],[\"将那些同时存在于所有集合的元素\",{\"1\":{\"136\":1}}],[\"将那些存在于第一个集合但并不存在于其他集合中的元素\",{\"1\":{\"136\":1}}],[\"将店铺id为单数的和店铺id为偶数的商品信息分布存在两个表中\",{\"1\":{\"131\":1}}],[\"将热门字段\",{\"1\":{\"129\":1}}],[\"将一个或多个元素添加到集合里面\",{\"1\":{\"135\":1}}],[\"将一个或多个值推入列表的左端\",{\"1\":{\"135\":1}}],[\"将一个或多个值推入列表的右端\",{\"1\":{\"135\":1}}],[\"将一个表按字段分成多表\",{\"1\":{\"129\":1}}],[\"将一个大的作业分解成若干小的任务\",{\"1\":{\"33\":1}}],[\"将访问频率高的商品基本信息单独放在另一张表中\",{\"1\":{\"129\":1}}],[\"将访问频率低的商品描述信息单独存放在一张表中\",{\"1\":{\"129\":1}}],[\"将电商数据库拆分为若干独立的数据库\",{\"1\":{\"128\":1}}],[\"将包含新键值对的哈希表节点放到哈希表数组的指定索引上面\",{\"1\":{\"127\":1}}],[\"将表所占的空间都释放掉\",{\"1\":{\"109\":1}}],[\"将会被锁定\",{\"0\":{\"877\":1}}],[\"将会被重传\",{\"1\":{\"644\":1}}],[\"将会被强行关闭\",{\"1\":{\"74\":1}}],[\"将会阻塞所有窗口\",{\"1\":{\"255\":1}}],[\"将会直接挂掉\",{\"1\":{\"221\":1}}],[\"将会返回所有表中符合\",{\"1\":{\"23\":1}}],[\"将每张图的数据进行存储模型数据\",{\"1\":{\"58\":1}}],[\"将集合加载到内存并执行向量相似性搜索\",{\"1\":{\"58\":1}}],[\"将数据和对数据的操作行为包装在一起\",{\"1\":{\"913\":1}}],[\"将数据读入数据缓冲区\",{\"1\":{\"863\":1}}],[\"将数据处于锁定状态\",{\"1\":{\"725\":1}}],[\"将数据大表拆分成若干数据表\",{\"1\":{\"128\":1}}],[\"将数据写入本地磁盘之前\",{\"1\":{\"42\":1}}],[\"将数据从物理上转移到和使用最频繁的用户更近的地方\",{\"1\":{\"21\":1}}],[\"将解析出的\",{\"1\":{\"40\":1}}],[\"将\",{\"1\":{\"36\":1,\"93\":1,\"140\":1,\"147\":1,\"155\":1,\"514\":1,\"619\":1,\"621\":1,\"624\":1,\"900\":1}}],[\"将临时表覆盖重写\",{\"1\":{\"27\":1}}],[\"将float与double对比\",{\"1\":{\"25\":1}}],[\"将浮点数转换成整数的推荐方式是round\",{\"1\":{\"24\":1}}],[\"大话设计模式\",{\"1\":{\"825\":1}}],[\"大则放到右子树\",{\"1\":{\"734\":1}}],[\"大家共用\",{\"1\":{\"683\":1}}],[\"大数据处理的始终\",{\"1\":{\"627\":1}}],[\"大数据领域\",{\"0\":{\"610\":1}}],[\"大多数时候\",{\"1\":{\"916\":1}}],[\"大多数编程环境都有两种数据\",{\"1\":{\"915\":1}}],[\"大多数修改都将没有必要\",{\"1\":{\"910\":1}}],[\"大多数人需要把m2\",{\"1\":{\"572\":1}}],[\"大多数情况下\",{\"1\":{\"23\":1}}],[\"大于1的小数\",{\"1\":{\"445\":1}}],[\"大概在46行左右位置\",{\"1\":{\"321\":1}}],[\"大p\",{\"1\":{\"251\":1}}],[\"大小敏感\",{\"1\":{\"837\":1}}],[\"大小写敏感\",{\"1\":{\"836\":1}}],[\"大小\",{\"1\":{\"214\":1}}],[\"大流量场景\",{\"1\":{\"212\":1}}],[\"大部分\",{\"1\":{\"818\":1}}],[\"大部分对象生命周期中最多会被一个线程锁定\",{\"1\":{\"723\":1}}],[\"大部分操作继承inputstream\",{\"1\":{\"538\":1}}],[\"大部分的情况下\",{\"1\":{\"526\":1}}],[\"大部分是异步的\",{\"1\":{\"155\":1}}],[\"大部分情况下关闭下面两项\",{\"1\":{\"74\":1}}],[\"大表\",{\"1\":{\"23\":1}}],[\"大表放到后边\",{\"1\":{\"23\":1}}],[\"大量重复statement的行为\",{\"1\":{\"898\":1}}],[\"大量的数据排序\",{\"1\":{\"855\":1}}],[\"大量\",{\"1\":{\"22\":1}}],[\"大量小文件意味着元数据增加\",{\"1\":{\"15\":1}}],[\"大量小文件\",{\"1\":{\"15\":1}}],[\"苹果公司股价\",{\"1\":{\"23\":1}}],[\"等同于\",{\"1\":{\"864\":1}}],[\"等功能\",{\"1\":{\"847\":1}}],[\"等都属于\",{\"1\":{\"638\":1}}],[\"等方式创建对象时\",{\"1\":{\"563\":1}}],[\"等于\",{\"1\":{\"616\":1}}],[\"等于30\",{\"1\":{\"526\":1}}],[\"等于62\",{\"1\":{\"526\":1}}],[\"等一下我们所有的十进制计算都要用256来进行\",{\"1\":{\"526\":1}}],[\"等哈希函数\",{\"1\":{\"512\":1}}],[\"等\",{\"1\":{\"497\":1,\"522\":1,\"527\":1,\"712\":1,\"723\":2,\"843\":1}}],[\"等api\",{\"1\":{\"451\":1}}],[\"等到其他三个线程执行完后才继续执行\",{\"1\":{\"446\":1}}],[\"等到事务提交需要提交的时候\",{\"1\":{\"74\":1}}],[\"等算术运算符直接对其对象进行数学运算\",{\"1\":{\"445\":1}}],[\"等级1\",{\"1\":{\"317\":1}}],[\"等级越底压缩速度越快文件压缩比越小\",{\"1\":{\"317\":1}}],[\"等待工作线程进行处理\",{\"1\":{\"857\":1}}],[\"等待需要执行的任务数大于线程核心大小就不会继续创建\",{\"1\":{\"755\":1}}],[\"等待持有锁的线程释放锁\",{\"1\":{\"727\":1}}],[\"等待可中断\",{\"1\":{\"703\":1}}],[\"等待可能出现的要求重传的ack包\",{\"1\":{\"649\":1}}],[\"等待任务完成\",{\"1\":{\"652\":1}}],[\"等待来自客户端的最后一个ack\",{\"1\":{\"649\":1}}],[\"等待服务器端关闭连接\",{\"1\":{\"649\":1}}],[\"等待其他人到达游戏战场\",{\"1\":{\"552\":1}}],[\"等待特定时间后\",{\"1\":{\"551\":1}}],[\"等待将来完成\",{\"1\":{\"475\":1}}],[\"等待下次cpu调度后再行尝试\",{\"1\":{\"471\":1,\"472\":1}}],[\"等待策略的接口\",{\"1\":{\"463\":1}}],[\"等待策略\",{\"1\":{\"458\":1,\"472\":1}}],[\"等待更多数据被写入ringbuffer\",{\"1\":{\"452\":1}}],[\"等待\",{\"1\":{\"446\":2,\"454\":1,\"553\":2}}],[\"等待几秒\",{\"1\":{\"341\":1}}],[\"等待前一个节点的删除\",{\"1\":{\"214\":1}}],[\"等待所有数据全部一致了之后再让用户访问系统\",{\"1\":{\"197\":1}}],[\"等内存优化方式\",{\"1\":{\"160\":1}}],[\"等等\",{\"1\":{\"121\":1,\"413\":1}}],[\"等不相等匹配\",{\"1\":{\"23\":1}}],[\"等价于下边嵌套查询\",{\"1\":{\"22\":1}}],[\"只用一个节点即可\",{\"1\":{\"929\":1}}],[\"只用到了nacos的客户端\",{\"1\":{\"297\":1}}],[\"只在该处做修改\",{\"1\":{\"911\":1}}],[\"只在首次检出仓库时运行一次就行\",{\"1\":{\"502\":1}}],[\"只对内部的结构进行重新的整理\",{\"1\":{\"898\":1}}],[\"只去除\",{\"1\":{\"639\":1}}],[\"只会给数据增加一个\",{\"1\":{\"639\":1}}],[\"只会代理到localhost\",{\"1\":{\"410\":1}}],[\"只需传给它足够的\",{\"1\":{\"910\":1}}],[\"只需将interruptedexception传递给方法的调用者\",{\"1\":{\"766\":1}}],[\"只需更新系统变量指向它\",{\"1\":{\"571\":1}}],[\"只需要用当前同步状态直接减去写状态的原因\",{\"1\":{\"821\":1}}],[\"只需要重新编译变化的类即可\",{\"1\":{\"563\":1}}],[\"只需要在本地克隆一份\",{\"1\":{\"497\":1}}],[\"只需要在在application\",{\"1\":{\"403\":1}}],[\"只需要配置一个\",{\"1\":{\"398\":1,\"416\":1}}],[\"只打jar包\",{\"1\":{\"566\":1}}],[\"只把需要的类加载到\",{\"1\":{\"563\":1}}],[\"只连接6个子公司\",{\"1\":{\"526\":1}}],[\"只维护一个指向下一个可用位置的序号\",{\"1\":{\"452\":1}}],[\"只允许英文字符和4种特殊字符\",{\"1\":{\"417\":1}}],[\"只允许英文字符和\",{\"1\":{\"417\":1}}],[\"只响应\",{\"1\":{\"307\":1}}],[\"只详细说明nginx自带的负载均衡策略\",{\"1\":{\"298\":1}}],[\"只是读数据\",{\"1\":{\"818\":1}}],[\"只是启动方式和普通\",{\"1\":{\"706\":1}}],[\"只是引用\",{\"1\":{\"563\":1}}],[\"只是包含了很多信息\",{\"1\":{\"522\":1}}],[\"只是全世界只有你一个人有这把钥匙\",{\"1\":{\"522\":1}}],[\"只是简单的实现了executor接口\",{\"1\":{\"472\":1}}],[\"只是new自定义异常\",{\"1\":{\"413\":1}}],[\"只是散列值计算使用sha1\",{\"1\":{\"208\":1}}],[\"只是在展示\",{\"1\":{\"115\":1}}],[\"只能通过函数或\",{\"1\":{\"874\":1}}],[\"只能通过修改\",{\"1\":{\"854\":1}}],[\"只能修改参数文件中的值\",{\"1\":{\"854\":1}}],[\"只能修改文件的属性\",{\"1\":{\"537\":1}}],[\"只能使用此方式启动\",{\"1\":{\"845\":1}}],[\"只能读\",{\"1\":{\"843\":1}}],[\"只能保存三个中文\",{\"1\":{\"836\":1}}],[\"只能保存五个中文\",{\"1\":{\"836\":1}}],[\"只能进行点对点的数据传输\",{\"1\":{\"644\":1}}],[\"只能作用在location中\",{\"1\":{\"317\":1}}],[\"只能根据场景定夺\",{\"1\":{\"203\":1}}],[\"只能在ca两者之间做权衡\",{\"1\":{\"196\":1}}],[\"只能用ip地址检查客户端的登录\",{\"1\":{\"74\":1}}],[\"只读状态\",{\"1\":{\"843\":1}}],[\"只读\",{\"1\":{\"155\":1,\"234\":1}}],[\"只保留从start偏移量到end偏移量范围内的元素\",{\"1\":{\"135\":1}}],[\"只保持所需的索引有利于查询优化\",{\"1\":{\"100\":1}}],[\"只有在提交操作时检查是否违反数据完整性\",{\"1\":{\"730\":1}}],[\"只有获取锁的线程释放了锁\",{\"1\":{\"702\":1}}],[\"只有八字节\",{\"1\":{\"642\":1}}],[\"只有被加载到\",{\"1\":{\"563\":1}}],[\"只有被加载到jvm后才能运行\",{\"1\":{\"558\":1}}],[\"只有原来的一半\",{\"1\":{\"557\":1}}],[\"只有通过方法才能够设置具体的属性值\",{\"1\":{\"523\":1,\"733\":1}}],[\"只有当它解除暂停后\",{\"1\":{\"458\":1}}],[\"只有当count的值为零时\",{\"1\":{\"446\":1}}],[\"只有实现了\",{\"1\":{\"381\":1}}],[\"只有完全匹配上才能生效\",{\"1\":{\"306\":1}}],[\"只有对商品感兴趣时才会点进去查看商品的详细描述信息\",{\"1\":{\"129\":1}}],[\"只有进行连接的两个表中都存在于连接标准相匹配的数据才会被保留下来\",{\"1\":{\"23\":1}}],[\"只要函数名称能够解释其用途\",{\"1\":{\"910\":1}}],[\"只要调用两者之一\",{\"1\":{\"764\":1}}],[\"只要使用的是同一个数据库\",{\"1\":{\"727\":1}}],[\"只要在签名的同时\",{\"1\":{\"705\":1}}],[\"只要在网络节点上捉包\",{\"1\":{\"485\":1}}],[\"只要鲍勃的私钥不泄露\",{\"1\":{\"705\":1}}],[\"只要它们和根进程不可达的\",{\"1\":{\"558\":1}}],[\"只要散列表足够大\",{\"1\":{\"511\":1}}],[\"只要服务端能够解释出来就行\",{\"1\":{\"483\":1}}],[\"只要有可能就应该这做样\",{\"1\":{\"100\":1}}],[\"只要事务还没有提交\",{\"1\":{\"66\":1}}],[\"只记录受影响的列\",{\"1\":{\"74\":1}}],[\"只支持脱机还原恢复\",{\"1\":{\"894\":1}}],[\"只支持将\",{\"1\":{\"24\":1}}],[\"只支持等值连接\",{\"1\":{\"23\":1}}],[\"内核和用户空间共享一块内存来实现的\",{\"1\":{\"806\":1}}],[\"内核需要将消息传递到用户空间\",{\"1\":{\"800\":1,\"803\":1}}],[\"内核仅仅知道\",{\"1\":{\"800\":1}}],[\"内层递归函数仍然有获取该锁的代码\",{\"1\":{\"702\":1}}],[\"内未收到确认\",{\"1\":{\"644\":1}}],[\"内置的两个不阻塞队列\",{\"1\":{\"529\":1}}],[\"内置数学函数\",{\"1\":{\"22\":1}}],[\"内超过10个请求才进行进行容错率判断\",{\"1\":{\"402\":1}}],[\"内容是资源正忙\",{\"1\":{\"727\":1}}],[\"内容为\",{\"1\":{\"708\":1}}],[\"内容格式应当与\",{\"1\":{\"417\":1}}],[\"内容\",{\"1\":{\"162\":1,\"166\":1,\"168\":1,\"189\":1}}],[\"内存中能排下的\",{\"1\":{\"863\":1}}],[\"内存中放不下\",{\"1\":{\"855\":1}}],[\"内存系统的重排序\",{\"1\":{\"809\":1}}],[\"内存拷贝\",{\"1\":{\"806\":1}}],[\"内存池才将之前申请的内存真正释放\",{\"1\":{\"751\":1}}],[\"内存池是指程序预先从操作系统申请一块足够大内存\",{\"1\":{\"751\":1}}],[\"内存池\",{\"1\":{\"751\":1}}],[\"内存泄露\",{\"1\":{\"650\":1}}],[\"内存区域最小的一块区域\",{\"1\":{\"556\":1}}],[\"内存位置\",{\"1\":{\"442\":1}}],[\"内存请求\",{\"1\":{\"263\":1}}],[\"内存限制\",{\"1\":{\"263\":1}}],[\"内存优化效果\",{\"1\":{\"161\":1}}],[\"内存占有量小的\",{\"1\":{\"160\":1}}],[\"内存占用不超过\",{\"1\":{\"158\":1}}],[\"内存使用率不高\",{\"1\":{\"557\":1}}],[\"内存使用\",{\"1\":{\"160\":1}}],[\"内存的占有量不应当超过\",{\"1\":{\"156\":1}}],[\"内存调优\",{\"0\":{\"156\":1}}],[\"内存\",{\"1\":{\"130\":1,\"656\":1}}],[\"内存能加载更多的数据\",{\"1\":{\"129\":1}}],[\"内存消耗的方案\",{\"1\":{\"52\":1}}],[\"内部迭代\",{\"1\":{\"527\":1}}],[\"内部用这个接口做一下数据到事件的转换\",{\"1\":{\"472\":1}}],[\"内部的行存储格式没有区分固定长度和可变长度列\",{\"1\":{\"97\":1}}],[\"内部内存临时表的最大值\",{\"1\":{\"74\":1}}],[\"内积\",{\"1\":{\"53\":1}}],[\"内连接也可以使用这个优化\",{\"1\":{\"23\":1}}],[\"内连接\",{\"1\":{\"23\":1}}],[\"yarn\",{\"1\":{\"654\":1,\"657\":3}}],[\"yarn的基本思想是将\",{\"1\":{\"653\":1}}],[\"yarn概述\",{\"0\":{\"653\":1}}],[\"yang\",{\"1\":{\"631\":1}}],[\"yaml配置文件内添加nacos\",{\"1\":{\"392\":1,\"396\":1,\"415\":1,\"416\":1}}],[\"yaml中的fields\",{\"1\":{\"280\":1}}],[\"yaml格式的pod定义文件完整内容\",{\"1\":{\"263\":1}}],[\"yaml文件名称\",{\"1\":{\"263\":1}}],[\"yaml\",{\"1\":{\"263\":5,\"275\":1,\"276\":2,\"417\":1}}],[\"yucheng\",{\"1\":{\"475\":1}}],[\"yum源\",{\"1\":{\"319\":1}}],[\"yum\",{\"1\":{\"224\":2,\"225\":2,\"226\":1,\"227\":2,\"228\":1,\"243\":2,\"266\":1,\"267\":2,\"268\":1,\"288\":1,\"290\":2,\"291\":5,\"292\":1,\"319\":8,\"320\":5,\"321\":2}}],[\"yielding\",{\"1\":{\"471\":1}}],[\"yieldingwaitstrategy\",{\"0\":{\"471\":1},\"1\":{\"472\":1}}],[\"yieldingwaitstrategy实现方法是先自旋\",{\"1\":{\"458\":1}}],[\"yield时间和备用等待策略\",{\"1\":{\"458\":1,\"468\":1,\"472\":1}}],[\"yield\",{\"1\":{\"458\":2,\"468\":1,\"469\":1,\"472\":2}}],[\"yourmessage\",{\"1\":{\"501\":1}}],[\"yourname\",{\"1\":{\"495\":3,\"497\":1}}],[\"your\",{\"1\":{\"426\":1,\"495\":1,\"612\":1}}],[\"yourself\",{\"1\":{\"413\":1}}],[\"you\",{\"1\":{\"214\":1,\"293\":1,\"612\":1}}],[\"yes\",{\"1\":{\"141\":6,\"146\":2,\"149\":1,\"155\":4,\"352\":1}}],[\"years\",{\"1\":{\"230\":1}}],[\"year\",{\"1\":{\"21\":2,\"22\":8}}],[\"y\",{\"1\":{\"73\":1,\"224\":2,\"225\":1,\"228\":1,\"243\":3,\"266\":1,\"268\":1,\"288\":1,\"290\":1,\"292\":1,\"307\":16,\"319\":4,\"321\":1,\"525\":3,\"622\":1,\"663\":1,\"837\":3}}],[\"yyyy年mm月\",{\"1\":{\"626\":1}}],[\"yyyy年mm月dd日\",{\"1\":{\"626\":1}}],[\"yyyymmddhhmmsssss\",{\"1\":{\"626\":2}}],[\"yyyy\",{\"1\":{\"25\":1,\"626\":6}}],[\"yml中添加配置\",{\"1\":{\"403\":1}}],[\"yml中的commandkey设置为default\",{\"1\":{\"402\":1}}],[\"yml里配置\",{\"1\":{\"402\":1}}],[\"yml配置文件配置\",{\"1\":{\"402\":1}}],[\"yml<\",{\"1\":{\"389\":1}}],[\"ymldocker\",{\"1\":{\"56\":1}}],[\"yml\",{\"0\":{\"392\":1,\"435\":1},\"1\":{\"22\":1,\"23\":2,\"56\":4,\"270\":1,\"272\":1,\"275\":4,\"277\":1,\"295\":3,\"297\":2,\"403\":1}}],[\"ymd\",{\"1\":{\"22\":5,\"23\":14}}],[\"|grep\",{\"1\":{\"321\":1,\"389\":3}}],[\"|^~\",{\"1\":{\"306\":1}}],[\"|^$\",{\"1\":{\"270\":1,\"272\":1}}],[\"||\",{\"1\":{\"219\":1,\"743\":2,\"744\":2,\"745\":6,\"820\":2,\"822\":1,\"823\":1}}],[\"|\",{\"1\":{\"22\":1,\"76\":1,\"78\":1,\"107\":4,\"214\":2,\"263\":4,\"275\":1,\"318\":2,\"320\":3,\"328\":12,\"332\":4,\"337\":4,\"342\":12,\"343\":1,\"345\":4,\"349\":4}}],[\"后台进程\",{\"1\":{\"852\":1}}],[\"后台启动方式\",{\"1\":{\"845\":1}}],[\"后执行\",{\"1\":{\"774\":2}}],[\"后开始执行\",{\"1\":{\"774\":1}}],[\"后续操作具有给定的周期\",{\"1\":{\"774\":1}}],[\"后续的解锁操作只能由该线程来执行\",{\"1\":{\"217\":1}}],[\"后\",{\"1\":{\"703\":1}}],[\"后继的线程才能够获取锁\",{\"1\":{\"702\":1}}],[\"后来查阅资料发现javaagent用途还是很广的\",{\"1\":{\"706\":1}}],[\"后来\",{\"1\":{\"705\":1}}],[\"后来由产生可信操作系统\",{\"1\":{\"685\":1}}],[\"后来为了获取更高的效率\",{\"1\":{\"683\":1}}],[\"后才能运行\",{\"1\":{\"563\":1}}],[\"后者是\",{\"1\":{\"522\":1}}],[\"后者是容器内部端口\",{\"1\":{\"241\":1}}],[\"后边\",{\"1\":{\"483\":1}}],[\"后边这个1是个数\",{\"1\":{\"35\":1}}],[\"后一个是只要以\",{\"1\":{\"307\":1}}],[\"后面每次新请求过来\",{\"1\":{\"650\":1}}],[\"后面的路径和内容能开发人员完全自定义\",{\"1\":{\"414\":1}}],[\"后面的即使符合最左前缀原则\",{\"1\":{\"112\":1}}],[\"后面添加括号中的内容\",{\"1\":{\"343\":1}}],[\"后面单位是k\",{\"1\":{\"317\":1}}],[\"后面必须要用\",{\"1\":{\"317\":1}}],[\"后面我会细说\",{\"1\":{\"234\":1}}],[\"后置节点\",{\"1\":{\"119\":1}}],[\"后期根据业务情况测试决定是否开启\",{\"1\":{\"74\":1}}],[\"后累加\",{\"1\":{\"36\":1}}],[\"后加正则表达式\",{\"1\":{\"22\":1}}],[\"后按照\",{\"1\":{\"21\":1}}],[\"有来自客户的连接请求\",{\"1\":{\"857\":1}}],[\"有i\",{\"1\":{\"800\":1}}],[\"有特殊字符需要utf\",{\"1\":{\"749\":1}}],[\"有侵入式\",{\"1\":{\"712\":1}}],[\"有jrebel\",{\"1\":{\"706\":1}}],[\"有以下几类技术\",{\"1\":{\"704\":1}}],[\"有比较多的定义\",{\"1\":{\"684\":1}}],[\"有利于java垃圾回收\",{\"1\":{\"683\":1}}],[\"有利于降低中小企业参与政府采购的成本\",{\"1\":{\"188\":1}}],[\"有点绕\",{\"1\":{\"682\":1}}],[\"有点儿落后\",{\"1\":{\"454\":1}}],[\"有的需求变化的比较剧烈\",{\"1\":{\"898\":1}}],[\"有的需求相对稳定一些\",{\"1\":{\"898\":1}}],[\"有的话优先处理排在前面的线程\",{\"1\":{\"674\":1}}],[\"有的数据库\",{\"1\":{\"20\":1}}],[\"有可能收不到\",{\"1\":{\"641\":1}}],[\"有背与我们代码简洁的初衷\",{\"1\":{\"626\":1}}],[\"有释放资源的方法\",{\"1\":{\"613\":1}}],[\"有了对象\",{\"1\":{\"910\":1}}],[\"有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库\",{\"1\":{\"604\":1}}],[\"有了传递依赖机制\",{\"1\":{\"594\":1}}],[\"有向图进行管理\",{\"1\":{\"558\":1}}],[\"有两个值\",{\"1\":{\"549\":1}}],[\"有两种方法\",{\"1\":{\"403\":1}}],[\"有边界的意思是它的容量是有限的\",{\"1\":{\"531\":1}}],[\"有多个不同的hash函数\",{\"1\":{\"512\":1}}],[\"有人称之为双精度数值\",{\"1\":{\"549\":1}}],[\"有人说post\",{\"1\":{\"485\":1}}],[\"有人可能认为在java中写入newbigdecimal\",{\"1\":{\"445\":1}}],[\"有副作用\",{\"1\":{\"481\":1}}],[\"有更新了\",{\"1\":{\"458\":1}}],[\"有事情发生了\",{\"1\":{\"456\":1}}],[\"有序性\",{\"1\":{\"440\":1}}],[\"有序集合的范围型数据获取命令和范围型数据删除命令\",{\"0\":{\"138\":1}}],[\"有序集合\",{\"1\":{\"133\":1,\"139\":1,\"157\":2,\"158\":1}}],[\"有异常也要做\",{\"1\":{\"413\":1}}],[\"有127\",{\"1\":{\"343\":1}}],[\"有每个进程的最大连接数\",{\"1\":{\"305\":1}}],[\"有如下参数\",{\"1\":{\"299\":1}}],[\"有\",{\"1\":{\"261\":1,\"413\":1,\"522\":1,\"549\":1,\"705\":1}}],[\"有它路由到应用服务器上\",{\"1\":{\"222\":1}}],[\"有一种经典的气味\",{\"1\":{\"913\":1}}],[\"有一种定量度量的方法是\",{\"1\":{\"898\":1}}],[\"有一种日志文件叫做重做日志文件\",{\"1\":{\"199\":1}}],[\"有一个\",{\"1\":{\"454\":1}}],[\"有一个参数\",{\"1\":{\"433\":1}}],[\"有一定得安全隐患\",{\"1\":{\"255\":1}}],[\"有一台计算机名为\",{\"1\":{\"222\":1}}],[\"有很大概率不在\",{\"1\":{\"221\":1}}],[\"有很多\",{\"1\":{\"22\":1}}],[\"有关文件\",{\"1\":{\"189\":1}}],[\"有关的属性就是\",{\"1\":{\"126\":1}}],[\"有确定的金额及到期日\",{\"1\":{\"186\":1}}],[\"有助于解决由于信息不对称所引起的逆向选择和道德风险问题\",{\"1\":{\"172\":1}}],[\"有效地实现内存使用的优化\",{\"1\":{\"160\":1}}],[\"有null\",{\"1\":{\"88\":1}}],[\"有些情况下我们反而希望把很多次锁的请求合并成一个请求\",{\"1\":{\"924\":1}}],[\"有些公司为了安全无法访问公共的maven中央仓库\",{\"1\":{\"573\":1}}],[\"有些\",{\"1\":{\"549\":1}}],[\"有些接口在发生异常时\",{\"1\":{\"419\":1}}],[\"有些bean会在取的时候才初始化和依赖注入\",{\"1\":{\"381\":1}}],[\"有些请求占用的时间很长\",{\"1\":{\"302\":1}}],[\"有些数据可能在某个时间点之后就不再有用了\",{\"1\":{\"139\":1}}],[\"有些字段比如性别sex字段\",{\"1\":{\"82\":1}}],[\"有些时候不成功\",{\"1\":{\"73\":1}}],[\"有另外一个事务执行了c给b转账的操作\",{\"1\":{\"66\":1}}],[\"有四种方式\",{\"1\":{\"64\":1}}],[\"有中间表distinct\",{\"1\":{\"27\":1}}],[\"有时不能抛出interruptedexception\",{\"1\":{\"766\":1}}],[\"有时间戳转换的操作\",{\"1\":{\"626\":1}}],[\"有时会出现不是全局递增的情况\",{\"1\":{\"207\":1}}],[\"有时可能需要重构\",{\"1\":{\"100\":1}}],[\"有时候你会发现\",{\"1\":{\"920\":1}}],[\"有时候一个函数往往会用到几个类的功能\",{\"1\":{\"913\":1}}],[\"有时候\",{\"1\":{\"825\":1}}],[\"有时候为了同时处理多个结构\",{\"1\":{\"139\":1}}],[\"有时候精确计算使用decimal\",{\"1\":{\"82\":1}}],[\"有时候会用having子句来补充条件查询\",{\"1\":{\"22\":1}}],[\"有时用户需要使用的是一个具有代表性的查询结果而不是全部结果\",{\"1\":{\"24\":1}}],[\"与自旋锁不同\",{\"1\":{\"926\":1}}],[\"与该类型码相关的函数或类\",{\"1\":{\"916\":1}}],[\"与0x0000ffff相与\",{\"1\":{\"820\":1}}],[\"与互斥锁相比\",{\"1\":{\"818\":1}}],[\"与根节点比较大小\",{\"1\":{\"734\":1}}],[\"与你正在浏览的网址不一致\",{\"1\":{\"705\":1}}],[\"与上一步得到的摘要进行对比\",{\"1\":{\"705\":1}}],[\"与之相关的是应用程序的application\",{\"1\":{\"653\":1}}],[\"与之前的pom中定义的groupid和artifactid相吻合\",{\"1\":{\"580\":1}}],[\"与此类似\",{\"1\":{\"624\":1}}],[\"与此同时\",{\"1\":{\"622\":1}}],[\"与discard唯一区别\",{\"1\":{\"613\":1}}],[\"与java包名类似\",{\"1\":{\"587\":1}}],[\"与整型不能进行相互转换\",{\"1\":{\"549\":1}}],[\"与32\",{\"1\":{\"526\":1}}],[\"与队列一样\",{\"1\":{\"448\":1}}],[\"与nacos\",{\"1\":{\"426\":1}}],[\"与seata\",{\"1\":{\"424\":1}}],[\"与本地调用无异\",{\"0\":{\"400\":1}}],[\"与pod同生命周期的一个临时目录\",{\"1\":{\"263\":1}}],[\"与其他的模式都不同\",{\"1\":{\"250\":1}}],[\"与当地承办担保机构\",{\"1\":{\"189\":1}}],[\"与存款单\",{\"1\":{\"186\":1}}],[\"与担保公司之间的关系主要体现在再担保服务上\",{\"1\":{\"167\":1}}],[\"与\",{\"0\":{\"541\":1,\"617\":1,\"786\":1,\"787\":1},\"1\":{\"141\":1,\"307\":1,\"398\":1,\"416\":1,\"526\":2,\"619\":1,\"626\":1,\"627\":1,\"843\":1}}],[\"与浮点数分值\",{\"1\":{\"133\":1}}],[\"与索引一个列的前缀不同\",{\"1\":{\"100\":1}}],[\"与现有关系数据库主要按照预定义模式处理结构化数据不同\",{\"1\":{\"50\":1}}],[\"与聚合函数\",{\"1\":{\"22\":1}}],[\"与客户端直接交互\",{\"1\":{\"17\":1}}],[\"非阻塞io\",{\"0\":{\"794\":1}}],[\"非阻塞i\",{\"1\":{\"791\":1}}],[\"非压缩情况下\",{\"1\":{\"722\":1}}],[\"非对称加密的安全优势\",{\"1\":{\"682\":1}}],[\"非对称加密\",{\"1\":{\"678\":1}}],[\"非对称加密算法\",{\"0\":{\"677\":1}}],[\"非公平锁比公平锁性能高5\",{\"1\":{\"674\":1}}],[\"非公平锁\",{\"0\":{\"674\":1}}],[\"非幂等\",{\"1\":{\"481\":1}}],[\"非常不便\",{\"1\":{\"475\":1}}],[\"非常适合于备份以及灾难恢复的场景\",{\"1\":{\"140\":1}}],[\"非标度值\",{\"1\":{\"445\":1}}],[\"非设置值不进行压缩\",{\"1\":{\"317\":1}}],[\"非融资担保\",{\"1\":{\"180\":1}}],[\"非融资类担保产品\",{\"0\":{\"180\":1}}],[\"非空+唯一\",{\"1\":{\"110\":2}}],[\"非聚簇索引一定会回表查询吗\",{\"0\":{\"103\":1}}],[\"非聚集索引\",{\"1\":{\"101\":1}}],[\"非结构化数据变得越来越普遍\",{\"1\":{\"50\":1}}],[\"非顶级将会在执行一个group\",{\"1\":{\"22\":1}}],[\"非分区表省略此行\",{\"1\":{\"22\":1}}],[\"顶级域名可以分为三类\",{\"1\":{\"222\":1}}],[\"顶级域名又称一级域名\",{\"1\":{\"222\":1}}],[\"顶级域名服务器\",{\"1\":{\"222\":1}}],[\"顶级\",{\"1\":{\"22\":1}}],[\"下边是\",{\"1\":{\"734\":1}}],[\"下边设置可以调高聚合的性能\",{\"1\":{\"22\":1}}],[\"下一个元素插入的时候就把顺序排好了\",{\"1\":{\"734\":1}}],[\"下\",{\"1\":{\"576\":1,\"837\":1,\"887\":1}}],[\"下来\",{\"1\":{\"493\":1}}],[\"下级服务响应最大时间\",{\"1\":{\"396\":1}}],[\"下图以\",{\"1\":{\"370\":1,\"371\":1}}],[\"下对目录进行的\",{\"1\":{\"262\":1}}],[\"下单失败\",{\"1\":{\"219\":1}}],[\"下单了\",{\"1\":{\"202\":1}}],[\"下的子项目\",{\"1\":{\"515\":1}}],[\"下的index文件\",{\"1\":{\"490\":1}}],[\"下的\",{\"1\":{\"218\":1}}],[\"下面先简单描述下锁撤销之后\",{\"1\":{\"827\":1}}],[\"下面的代码主要是新增的一些功能\",{\"1\":{\"822\":1}}],[\"下面让我们通过一个示意图来说明总线的工作机制\",{\"1\":{\"809\":1}}],[\"下面\",{\"1\":{\"705\":1}}],[\"下面详细介绍方案2和方案3\",{\"1\":{\"410\":1}}],[\"下面修改或增加配置\",{\"1\":{\"323\":1,\"325\":1}}],[\"下面将详细说明\",{\"1\":{\"251\":1}}],[\"下面是一个简单的实现\",{\"1\":{\"712\":1}}],[\"下面是对这些概念的解释\",{\"1\":{\"166\":1}}],[\"下面是常用存储引擎的适用环境\",{\"1\":{\"93\":1}}],[\"下面只返回两行\",{\"1\":{\"22\":1}}],[\"下载依赖包的源码\",{\"1\":{\"566\":1}}],[\"下载地址\",{\"0\":{\"375\":1}}],[\"下载地址https\",{\"1\":{\"352\":1}}],[\"下载nginx源码包到docker\",{\"1\":{\"243\":1}}],[\"下载和浏览等功能\",{\"1\":{\"234\":1}}],[\"下载一个文件\",{\"1\":{\"63\":1}}],[\"下载a\",{\"0\":{\"11\":1}}],[\"下发布的高性能对象存储\",{\"1\":{\"63\":1}}],[\"点备份\",{\"1\":{\"868\":1}}],[\"点赞\",{\"1\":{\"428\":1}}],[\"点击登录\",{\"1\":{\"897\":1}}],[\"点击stack\",{\"1\":{\"283\":1}}],[\"点击management\",{\"1\":{\"283\":1}}],[\"点\",{\"1\":{\"22\":1,\"868\":2}}],[\"则将tail节点更新为null\",{\"1\":{\"929\":1}}],[\"则将minio版本降低\",{\"1\":{\"63\":1}}],[\"则当前线程获得锁\",{\"1\":{\"929\":1}}],[\"则验证成功\",{\"1\":{\"897\":1}}],[\"则为1\",{\"1\":{\"896\":1}}],[\"则为0\",{\"1\":{\"896\":1}}],[\"则备份报错\",{\"1\":{\"891\":1}}],[\"则设置口\",{\"1\":{\"874\":1}}],[\"则数据库无法恢复\",{\"1\":{\"868\":1}}],[\"则占用排序区\",{\"1\":{\"863\":1}}],[\"则直接从数据缓冲区中读取数据\",{\"1\":{\"863\":1}}],[\"则直接返回字符串\",{\"1\":{\"445\":1}}],[\"则写锁获取失败\",{\"1\":{\"820\":1}}],[\"则写到磁盘上\",{\"1\":{\"45\":1}}],[\"则调用select的进程会重新被唤醒获得cpu\",{\"1\":{\"799\":1}}],[\"则不会调用拒绝策略\",{\"1\":{\"771\":1}}],[\"则不一定就有b信任a\",{\"1\":{\"684\":1}}],[\"则用此右子树进行递归调用\",{\"1\":{\"734\":1}}],[\"则用此左子树进行递归调用\",{\"1\":{\"734\":1}}],[\"则予以更新\",{\"1\":{\"730\":1}}],[\"则表示此方法对应的类对象为锁对象\",{\"1\":{\"723\":1}}],[\"则该人就得饮酒\",{\"1\":{\"825\":1}}],[\"则该实体是可信的\",{\"1\":{\"684\":1}}],[\"则该条件称为缓存命中\",{\"1\":{\"662\":1}}],[\"则利用cas操作来竞争锁\",{\"1\":{\"673\":1}}],[\"则要检查一下对象是否还是可偏向\",{\"1\":{\"673\":1}}],[\"则保存了字符串\",{\"1\":{\"619\":1}}],[\"则部署到快照仓库地址\",{\"1\":{\"604\":1}}],[\"则才能判定这个对象属于内存泄露\",{\"1\":{\"558\":1}}],[\"则说明有线程目前正在使用共享变量\",{\"1\":{\"723\":1}}],[\"则说明存在了竞争\",{\"1\":{\"673\":1}}],[\"则说明此线程已经成功获得了锁\",{\"1\":{\"673\":1}}],[\"则说明此对象不可用\",{\"1\":{\"558\":1}}],[\"则说明这两台计算机是处于同一个子网络上的\",{\"1\":{\"526\":1}}],[\"则子网掩码应设为多少合适\",{\"1\":{\"526\":1}}],[\"则称表m为哈希\",{\"1\":{\"506\":1}}],[\"则抛出异常\",{\"1\":{\"472\":1}}],[\"则释放所有等待的线程\",{\"1\":{\"446\":1}}],[\"则前面直接加上0\",{\"1\":{\"445\":1}}],[\"则必须使用bigdecimal类来操作\",{\"1\":{\"445\":1}}],[\"则必然返回不一致的数据\",{\"1\":{\"199\":1}}],[\"则变为$\",{\"1\":{\"417\":1}}],[\"则默认对应client端\",{\"1\":{\"417\":1}}],[\"则只调用本地的程序\",{\"1\":{\"410\":2}}],[\"则它会用\",{\"1\":{\"385\":1}}],[\"则它实际在幕后担保了售给投资者的商业票据\",{\"1\":{\"186\":1}}],[\"则对\",{\"1\":{\"317\":1}}],[\"则返回404\",{\"1\":{\"307\":1}}],[\"则以3中缓存的结果为最终匹配结果\",{\"1\":{\"307\":1}}],[\"则需要注册数据库\",{\"1\":{\"837\":1}}],[\"则需要添加此参数\",{\"1\":{\"270\":1}}],[\"则需放弃一致性\",{\"1\":{\"201\":1}}],[\"则每份的库存为200件\",{\"1\":{\"221\":1}}],[\"则每个节点只能用本地数据提供服务\",{\"1\":{\"201\":1}}],[\"则\",{\"1\":{\"221\":1,\"864\":1}}],[\"则自旋获取锁直至成功\",{\"1\":{\"219\":1}}],[\"则自己获得锁\",{\"1\":{\"214\":1}}],[\"则采用zk的watch机制监听自己的前一个顺序节点\",{\"1\":{\"214\":1}}],[\"则获取锁成功\",{\"1\":{\"214\":1}}],[\"则是最终一致性\",{\"1\":{\"193\":1}}],[\"则是弱一致性\",{\"1\":{\"193\":1}}],[\"则是更新如何复制分布到整个系统\",{\"1\":{\"192\":1}}],[\"则无需开启\",{\"1\":{\"141\":1}}],[\"则会调用schedule\",{\"1\":{\"799\":1}}],[\"则会调用配置好的url\",{\"1\":{\"410\":1}}],[\"则会创建新的线程执行任务\",{\"1\":{\"756\":1}}],[\"则会弹出一个警告框\",{\"1\":{\"522\":1}}],[\"则会根据value去找nacos中对应的ip和端口\",{\"1\":{\"410\":1}}],[\"则会作为全局默认配置\",{\"1\":{\"402\":1}}],[\"则会匹配后一项\",{\"1\":{\"307\":1}}],[\"则会造成索引树的分裂\",{\"1\":{\"82\":1}}],[\"则会占用10003=3000个文件块\",{\"1\":{\"17\":1}}],[\"则把日志持久化到磁盘\",{\"1\":{\"74\":1}}],[\"则配置\",{\"1\":{\"63\":1}}],[\"则意味着原始数据源也相似\",{\"1\":{\"50\":1}}],[\"则十分浪费资源\",{\"1\":{\"22\":1}}],[\"$ifun\",{\"1\":{\"872\":1,\"894\":1}}],[\"$instance\",{\"1\":{\"838\":1,\"841\":2,\"843\":5}}],[\"$datafile\",{\"1\":{\"843\":1}}],[\"$database\",{\"1\":{\"838\":1,\"841\":2,\"843\":1,\"869\":2}}],[\"$dm\",{\"1\":{\"838\":1,\"840\":1,\"869\":2}}],[\"$display\",{\"1\":{\"834\":1}}],[\"$document\",{\"1\":{\"315\":1}}],[\"$catalina\",{\"1\":{\"651\":1}}],[\"$rm\",{\"1\":{\"500\":1}}],[\"$remote\",{\"1\":{\"315\":2,\"317\":2}}],[\"$request\",{\"1\":{\"305\":1,\"315\":3}}],[\"$git\",{\"1\":{\"499\":2,\"500\":2,\"502\":1}}],[\"$jvm\",{\"1\":{\"389\":1}}],[\"$java\",{\"1\":{\"377\":4}}],[\"$2\",{\"1\":{\"389\":2}}],[\"$1\",{\"1\":{\"389\":2}}],[\"$parameter\",{\"1\":{\"865\":1,\"874\":1,\"887\":1,\"890\":1}}],[\"$pid\",{\"1\":{\"389\":6}}],[\"$port\",{\"1\":{\"357\":2}}],[\"$proxy\",{\"1\":{\"317\":2}}],[\"$appname|grep\",{\"1\":{\"389\":3}}],[\"$appname\",{\"1\":{\"389\":11}}],[\"$a\",{\"1\":{\"357\":1,\"362\":1}}],[\"$mainpid\",{\"1\":{\"353\":2}}],[\"$backupset\",{\"1\":{\"894\":2}}],[\"$binary\",{\"1\":{\"317\":1}}],[\"$body\",{\"1\":{\"315\":1}}],[\"$server\",{\"1\":{\"315\":1,\"317\":1}}],[\"$status\",{\"1\":{\"315\":1}}],[\"$host\",{\"1\":{\"315\":1,\"317\":3}}],[\"$home\",{\"1\":{\"293\":3,\"343\":2}}],[\"$http\",{\"1\":{\"315\":3}}],[\"$time\",{\"1\":{\"315\":1}}],[\"$uri\",{\"1\":{\"314\":1}}],[\"$name\",{\"1\":{\"310\":2,\"313\":2}}],[\"$\",{\"1\":{\"22\":1,\"27\":4,\"56\":1,\"230\":2,\"262\":1,\"266\":1,\"290\":5,\"291\":1,\"292\":2,\"293\":4,\"294\":1,\"296\":3,\"298\":1,\"332\":4,\"337\":2,\"345\":2,\"349\":2,\"387\":2,\"401\":1,\"410\":2,\"417\":8,\"426\":1,\"495\":3,\"496\":1,\"497\":11,\"499\":7,\"500\":11,\"501\":9,\"502\":4,\"503\":5,\"833\":2,\"834\":8,\"835\":2,\"836\":2,\"837\":2,\"838\":1,\"840\":2,\"841\":3,\"842\":2,\"843\":1,\"845\":8,\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"870\":2,\"883\":3,\"891\":1,\"893\":3}}],[\"如配对\",{\"1\":{\"897\":1}}],[\"如需要应用策略\",{\"1\":{\"874\":1}}],[\"如用户在浏览某商品高\",{\"1\":{\"785\":1}}],[\"如用1\",{\"1\":{\"549\":1}}],[\"如2n个线程\",{\"1\":{\"769\":1}}],[\"如http请求时将请求体加密\",{\"1\":{\"736\":1}}],[\"如collections\",{\"1\":{\"735\":1}}],[\"如将乐观锁策略在数据库存储过程中实过程中实现\",{\"1\":{\"731\":1}}],[\"如在上例中\",{\"1\":{\"731\":1}}],[\"如为节省资源将数据库连接池对象设计为单例\",{\"1\":{\"683\":1}}],[\"如为空\",{\"1\":{\"417\":1}}],[\"如先生产后使用\",{\"1\":{\"659\":1}}],[\"如不允许同时写\",{\"1\":{\"659\":1}}],[\"如不指定\",{\"1\":{\"263\":1}}],[\"如jar文件\",{\"1\":{\"569\":1}}],[\"如∶方法中的类型转换是否正确\",{\"1\":{\"558\":1}}],[\"如这个类是否有父类\",{\"1\":{\"558\":1}}],[\"如主次版本号是否在当前虚拟机范围内\",{\"1\":{\"558\":1}}],[\"如今\",{\"1\":{\"549\":1}}],[\"如0xcafe\",{\"1\":{\"549\":1}}],[\"如10\",{\"1\":{\"525\":1}}],[\"如1s\",{\"1\":{\"435\":1}}],[\"如证书的颁发机构\",{\"1\":{\"522\":1}}],[\"如评论\",{\"1\":{\"428\":1}}],[\"如未配置\",{\"1\":{\"417\":1}}],[\"如有以下两个location\",{\"1\":{\"307\":1}}],[\"如文件引入\",{\"1\":{\"305\":1}}],[\"如toutiao\",{\"1\":{\"222\":1}}],[\"如redis\",{\"1\":{\"197\":1}}],[\"如my\",{\"1\":{\"196\":1}}],[\"如由经销商发售\",{\"1\":{\"186\":1}}],[\"如金融科技\",{\"1\":{\"166\":1}}],[\"如企业或个人\",{\"1\":{\"166\":1}}],[\"如图所示\",{\"1\":{\"665\":1}}],[\"如图\",{\"1\":{\"119\":1,\"127\":1,\"433\":1,\"619\":4,\"621\":2,\"622\":1,\"623\":2,\"624\":1}}],[\"如粉红色路径\",{\"1\":{\"104\":1}}],[\"如何做\",{\"1\":{\"910\":1}}],[\"如何映射到已经创建的channels上都需要依赖于eventloopgroup的实现\",{\"1\":{\"612\":1}}],[\"如何知道多少个线程已经被使用\",{\"1\":{\"612\":1}}],[\"如何确实子网掩码\",{\"1\":{\"526\":1}}],[\"如何确定这个大网段里面的子网掩码呢\",{\"1\":{\"526\":1}}],[\"如何计算可用ip数量和可用的ip地址\",{\"1\":{\"526\":1}}],[\"如何计算ip地址和子网掩码是否匹配\",{\"1\":{\"526\":1}}],[\"如何来设置这个子网掩码呢\",{\"1\":{\"526\":1}}],[\"如何获得异步执行的结果\",{\"1\":{\"475\":1}}],[\"如何对不同类型的接口使用不同的全局异常进行处理呢\",{\"1\":{\"419\":1}}],[\"如何判断谁获得了锁呢\",{\"1\":{\"214\":1}}],[\"如何查看表结构\",{\"0\":{\"108\":1}}],[\"如何查看当前隔离级别\",{\"0\":{\"107\":1}}],[\"如何避免回表查询\",{\"0\":{\"104\":1},\"1\":{\"104\":1}}],[\"如何设置ip地址\",{\"1\":{\"526\":1}}],[\"如何设置\",{\"0\":{\"92\":1}}],[\"如下demo的4个方法展示了不同使用方法下锁对象\",{\"1\":{\"661\":1}}],[\"如下代码\",{\"1\":{\"650\":1}}],[\"如下\",{\"0\":{\"400\":1},\"1\":{\"73\":1,\"251\":1,\"410\":1,\"499\":1,\"766\":1,\"779\":1}}],[\"如下图所示\",{\"1\":{\"132\":1,\"373\":1}}],[\"如下图\",{\"0\":{\"672\":1},\"1\":{\"25\":1,\"381\":1,\"430\":1,\"431\":1,\"575\":1}}],[\"如\",{\"0\":{\"387\":1,\"388\":1},\"1\":{\"21\":1,\"26\":1,\"27\":1,\"100\":2,\"214\":1,\"222\":1,\"307\":2,\"381\":1,\"413\":1,\"417\":1,\"428\":1,\"445\":1,\"502\":1,\"504\":1,\"549\":2,\"560\":1,\"562\":1,\"566\":1,\"605\":1,\"683\":1,\"781\":1,\"897\":1}}],[\"如果tail节点等于node\",{\"1\":{\"929\":1}}],[\"如果中间人还有其它行为\",{\"1\":{\"922\":1}}],[\"如果函数名称带有多余的抽象意味\",{\"1\":{\"919\":1}}],[\"如果函数的某些参数未被用上\",{\"1\":{\"919\":1}}],[\"如果所有的装置都被用到了\",{\"1\":{\"919\":1}}],[\"如果所有表中只有一张表是小表\",{\"1\":{\"23\":1}}],[\"如果它们不再有意义\",{\"1\":{\"914\":1}}],[\"如果它没坏\",{\"1\":{\"898\":1}}],[\"如果眼下没有合适的类可以安置这些代码\",{\"1\":{\"912\":1}}],[\"如果每遇到变化\",{\"1\":{\"912\":1}}],[\"如果每次修改字符串的长度都需要执行一次内存重分配的话\",{\"1\":{\"620\":1}}],[\"如果新出现一种工具\",{\"1\":{\"911\":1}}],[\"如果新加入一个数据库\",{\"1\":{\"911\":1}}],[\"如果某个抽象类其实没有太大作用\",{\"1\":{\"919\":1}}],[\"如果某个类经常因为不同的原因在不同的方向上发生变化\",{\"1\":{\"911\":1}}],[\"如果某些子类并没有做足够的工作\",{\"1\":{\"918\":1}}],[\"如果某些同步代码块大多数情况下都是有两个及以上的线程竞争的话\",{\"1\":{\"828\":1}}],[\"如果代码之间只是类似而并非完全相同\",{\"1\":{\"909\":1}}],[\"如果代理类没有实现上面的方法\",{\"1\":{\"709\":1,\"717\":1,\"721\":1}}],[\"如果用不到\",{\"1\":{\"919\":1}}],[\"如果用比较形象的事物来形容数据项\",{\"1\":{\"914\":1}}],[\"如果用某种方式来设计\",{\"1\":{\"907\":1}}],[\"如果用户希望改变影片分类规则\",{\"1\":{\"898\":1}}],[\"如果用户希望对系统做一点修改\",{\"1\":{\"898\":1}}],[\"如果用户量一大直接操作数据库\",{\"1\":{\"428\":1}}],[\"如果用户输入非法字符\",{\"1\":{\"413\":1}}],[\"如果用户指定了\",{\"1\":{\"28\":1}}],[\"如果创建三个子类继承movie\",{\"1\":{\"906\":1}}],[\"如果影片类型发生变化\",{\"1\":{\"905\":1}}],[\"如果计费标准发生变化必须同时修改statement和htmlstatement\",{\"1\":{\"898\":1}}],[\"如果计数到达零\",{\"1\":{\"446\":1}}],[\"如果全量备份丢失\",{\"1\":{\"893\":1}}],[\"如果全部命中了索引\",{\"1\":{\"103\":1}}],[\"如果页大小是\",{\"1\":{\"866\":2}}],[\"如果涉及到排序\",{\"1\":{\"863\":1}}],[\"如果查询涉及\",{\"1\":{\"863\":1}}],[\"如果数据缓冲区中不存在该数据页\",{\"1\":{\"863\":1}}],[\"如果数据缓冲区中存在数据页\",{\"1\":{\"863\":1}}],[\"如果数字证书记载的网址\",{\"1\":{\"705\":1}}],[\"如果找到\",{\"1\":{\"863\":1}}],[\"如果找不到数据\",{\"1\":{\"662\":1}}],[\"如果业务\",{\"1\":{\"855\":1}}],[\"如果业务经常有排序\",{\"1\":{\"855\":1}}],[\"如果安装时报错\",{\"1\":{\"834\":1}}],[\"如果存在锁记录的话\",{\"1\":{\"828\":1}}],[\"如果存在动态成员或者指针就会报错\",{\"1\":{\"558\":1}}],[\"如果写锁已经被获取并且获取写锁的线程不是当前线程的话\",{\"1\":{\"822\":1}}],[\"如果仅仅是读数据的话并不会影响数据正确性\",{\"1\":{\"818\":1}}],[\"如果线程竞争不激烈\",{\"1\":{\"813\":1}}],[\"如果锁已经被其它线程获取\",{\"1\":{\"811\":1}}],[\"如果超过一定的超时时间\",{\"1\":{\"799\":1}}],[\"如果超过这个值就会抛出一个致命错误\",{\"1\":{\"22\":1}}],[\"如果遍历完所有的fd\",{\"1\":{\"799\":1}}],[\"如果60秒钟内主线程提交了一个新任务\",{\"1\":{\"773\":1}}],[\"如果设为0\",{\"1\":{\"771\":1}}],[\"如果设置了git的系统环境变量\",{\"1\":{\"495\":1}}],[\"如果设置为true\",{\"1\":{\"263\":1}}],[\"如果队列满了\",{\"1\":{\"756\":1}}],[\"如果提交的数据版本号大于数据库当前版本号\",{\"1\":{\"730\":1}}],[\"如果state=1\",{\"1\":{\"723\":1}}],[\"如果state=0\",{\"1\":{\"723\":1}}],[\"如果source\",{\"1\":{\"135\":1}}],[\"如果重试成功\",{\"1\":{\"723\":1}}],[\"如果获取对象失败了\",{\"1\":{\"723\":1}}],[\"如果获取对象锁失败\",{\"1\":{\"703\":1}}],[\"如果你看到用户向一个对象请求另一个对象\",{\"1\":{\"921\":1}}],[\"如果你有大量的基本数据类型字段\",{\"1\":{\"915\":1}}],[\"如果你有一组应该总是被放在一起的字段\",{\"1\":{\"915\":1}}],[\"如果你发现自己正从数组中挑选数据\",{\"1\":{\"915\":2}}],[\"如果你在参数列中看到基本型数据\",{\"1\":{\"915\":1}}],[\"如果你手上没有所需的东西\",{\"1\":{\"910\":1}}],[\"如果你犯下错误\",{\"1\":{\"900\":1}}],[\"如果你查看被synchronized修饰过的程序块编译后的字节码\",{\"1\":{\"723\":1}}],[\"如果你是在实际中用的话\",{\"1\":{\"526\":1}}],[\"如果两者一致\",{\"1\":{\"705\":1}}],[\"如果两个类实在是情投意合\",{\"1\":{\"923\":1}}],[\"如果两个任务执行时间相差大\",{\"1\":{\"769\":1}}],[\"如果两个操作数中有一个是\",{\"1\":{\"549\":1}}],[\"如果两个嵌入向量非常相似\",{\"1\":{\"50\":1}}],[\"如果利用单例模式对connection对象封装\",{\"1\":{\"683\":1}}],[\"如果实例化的对象长时间不被利用\",{\"1\":{\"683\":1}}],[\"如果当前maximumpool中有空闲线程正在执行synchronousqueue\",{\"1\":{\"773\":1}}],[\"如果当前线程不是队列的第一个无法获取锁\",{\"1\":{\"674\":1}}],[\"如果当前值等于expectedvalue\",{\"1\":{\"444\":2}}],[\"如果此对象已经偏向了\",{\"1\":{\"673\":1}}],[\"如果此时父类不能加载\",{\"1\":{\"558\":1}}],[\"如果此时获取的是a记录\",{\"1\":{\"222\":1}}],[\"如果还未偏向\",{\"1\":{\"673\":1}}],[\"如果还在运行\",{\"1\":{\"220\":1}}],[\"如果再次进入或者退出同一段同步块代码\",{\"1\":{\"673\":1}}],[\"如果cpu能够找到它\",{\"1\":{\"662\":1}}],[\"如果一致\",{\"1\":{\"673\":1}}],[\"如果一天内每秒仅发生5次单击事件\",{\"1\":{\"651\":1}}],[\"如果一个类的所得并不值其身价\",{\"1\":{\"918\":1}}],[\"如果一个系统按照预期的设计和策略运行\",{\"1\":{\"684\":1}}],[\"如果一个实体的行为是预期的方式符合预期的目标\",{\"1\":{\"684\":1}}],[\"如果一个程序员决定通过执行\",{\"1\":{\"619\":1}}],[\"如果一个对象到gc\",{\"1\":{\"558\":1}}],[\"如果一个生产者在写入\",{\"1\":{\"458\":1}}],[\"如果一个匹配都没搜索到\",{\"1\":{\"307\":1}}],[\"如果一个分布式系统不要求强的可用性\",{\"1\":{\"197\":1}}],[\"如果一个表的标结果指定的是3列\",{\"1\":{\"25\":1}}],[\"如果使用客户端工具连接远端数据库服务器\",{\"1\":{\"839\":1}}],[\"如果使用线程池\",{\"1\":{\"650\":1}}],[\"如果使用springcloud读取多个配置文件\",{\"1\":{\"297\":1}}],[\"如果考虑不周使用simpledateformat方法可以会出现线程安全方面的问题\",{\"1\":{\"626\":1}}],[\"如果现在对\",{\"1\":{\"622\":1}}],[\"如果现在有1000个1mb大小的文件\",{\"1\":{\"17\":1}}],[\"如果将对象传递给函数\",{\"1\":{\"910\":1}}],[\"如果将来要对\",{\"1\":{\"622\":1}}],[\"如果将application\",{\"1\":{\"402\":1}}],[\"如果足够的话\",{\"1\":{\"621\":1}}],[\"如果进行修改之后\",{\"1\":{\"621\":2}}],[\"如果这发生在两个\",{\"1\":{\"923\":1}}],[\"如果这样\",{\"1\":{\"922\":1}}],[\"如果这张数字证书不是由受信任的机构颁发的\",{\"1\":{\"705\":1}}],[\"如果这个对象没有锁定\",{\"1\":{\"723\":2}}],[\"如果这个对象没被锁定\",{\"1\":{\"703\":1}}],[\"如果这个类是否有父类\",{\"1\":{\"561\":1}}],[\"如果这时\",{\"1\":{\"621\":1}}],[\"如果这种修改频繁地发生的话\",{\"1\":{\"620\":1}}],[\"如果修改字符串长度的情况不太常出现\",{\"1\":{\"620\":1}}],[\"如果忘了这一步就会产生内存泄漏\",{\"1\":{\"620\":1}}],[\"如果忘了这一步就会产生缓冲区溢出\",{\"1\":{\"620\":1}}],[\"如果程序执行的是缩短字符串的操作\",{\"1\":{\"620\":1}}],[\"如果程序执行的是增长字符串的操作\",{\"1\":{\"620\":1}}],[\"如果项目当前是快照版本\",{\"1\":{\"604\":1}}],[\"如果得到一个完全可预测的结果比运行速度更重要的话\",{\"1\":{\"549\":1}}],[\"如果得出的结果是相同的\",{\"1\":{\"526\":1}}],[\"如果值存在\",{\"1\":{\"527\":1}}],[\"如果传递的参数是null\",{\"1\":{\"527\":1}}],[\"如果证书没有问题\",{\"1\":{\"522\":1}}],[\"如果发现某个继承体系的类名称前缀和另一个继承体系的类名称前缀完全相同\",{\"1\":{\"917\":1}}],[\"如果发现异常\",{\"1\":{\"522\":1}}],[\"如果发送端实体在合理的往返时延\",{\"1\":{\"644\":1}}],[\"如果发生发行人没有足够的现金流支付其债务的情况\",{\"1\":{\"177\":1}}],[\"如果对\",{\"1\":{\"621\":2}}],[\"如果对象的引用被置为null\",{\"1\":{\"558\":1}}],[\"如果对公钥和私钥不太理解\",{\"1\":{\"522\":1}}],[\"如果对串列进行索引\",{\"1\":{\"100\":1}}],[\"如果攻击者截取了web浏览器和网站服务器之间的传输报文\",{\"1\":{\"520\":1}}],[\"如果想利用单个的类做太多的事情\",{\"1\":{\"910\":1}}],[\"如果想强制删除一个分支\",{\"1\":{\"500\":1}}],[\"如果想把本地的某个分支test提交到远程仓库\",{\"1\":{\"499\":1}}],[\"如果想给已索引的表增加索引\",{\"1\":{\"100\":1}}],[\"如果开发人员人为一个小模块做好了\",{\"1\":{\"488\":1}}],[\"如果异步任务还没有完成\",{\"1\":{\"475\":1}}],[\"如果异步任务已经完成\",{\"1\":{\"475\":1}}],[\"如果仔细看executorservice\",{\"1\":{\"475\":1}}],[\"如果任务不一定要执行完\",{\"1\":{\"764\":1}}],[\"如果任务执行失败\",{\"1\":{\"475\":1}}],[\"如果任务需要一个返回结果\",{\"1\":{\"475\":1}}],[\"如果任一表的指定字段没有符合条件的值的话\",{\"1\":{\"23\":1}}],[\"如果其中一个操作数是\",{\"1\":{\"549\":2}}],[\"如果其他人修改了\",{\"1\":{\"492\":1}}],[\"如果其他线程需要cpu资源\",{\"1\":{\"471\":1,\"472\":1}}],[\"如果其大小超过一定阈值\",{\"1\":{\"45\":1}}],[\"如果成功返回true\",{\"1\":{\"444\":2}}],[\"如果相匹配\",{\"1\":{\"442\":1}}],[\"如果大家有了解\",{\"1\":{\"433\":1}}],[\"如果集群中有哪些broker节点以及topic\",{\"1\":{\"433\":1}}],[\"如果集合source\",{\"1\":{\"135\":1}}],[\"如果分区规则设定合理\",{\"1\":{\"430\":1}}],[\"如果分区目录不存在的话\",{\"1\":{\"22\":1}}],[\"如果要为它添加一个新的case语句\",{\"1\":{\"916\":1}}],[\"如果要以服务方式启动\",{\"1\":{\"837\":1}}],[\"如果要求对\",{\"1\":{\"809\":1}}],[\"如果要将一个线程进行阻塞或唤起都需要操作系统的协助\",{\"1\":{\"723\":1}}],[\"如果要加大并发连接数\",{\"1\":{\"651\":1}}],[\"如果要使这三个ip段在同一个网段内\",{\"1\":{\"526\":1}}],[\"如果要用分布式事务\",{\"1\":{\"427\":1}}],[\"如果要修改默认策略\",{\"1\":{\"403\":1}}],[\"如果logging\",{\"1\":{\"418\":1}}],[\"如果加了栈信息\",{\"1\":{\"413\":1}}],[\"如果为指定用户的默认表空间\",{\"1\":{\"864\":1}}],[\"如果为\",{\"1\":{\"413\":1}}],[\"如果预期对方抛的是绣球\",{\"1\":{\"413\":1}}],[\"如果上面语句执行出现上图所示报错\",{\"1\":{\"321\":1}}],[\"如果header头中包含\",{\"1\":{\"317\":1}}],[\"如果header头中包括\",{\"1\":{\"317\":1}}],[\"如果header头中不包含\",{\"1\":{\"317\":1}}],[\"如果未找到正则匹配项\",{\"1\":{\"307\":1}}],[\"如果多人开发没有注意到这种情况\",{\"1\":{\"297\":1}}],[\"如果服务器down掉了\",{\"1\":{\"299\":1}}],[\"如果服务器不能上网\",{\"1\":{\"287\":1}}],[\"如果服务器时钟回拨\",{\"1\":{\"207\":1}}],[\"如果启动单节点\",{\"1\":{\"270\":1}}],[\"如果需要修改的代码散布四周\",{\"1\":{\"912\":1}}],[\"如果需要存储多个\",{\"1\":{\"650\":1}}],[\"如果需要合并到主分支\",{\"1\":{\"493\":1}}],[\"如果需要回滚事务\",{\"1\":{\"413\":1}}],[\"如果需要在容器之间共享一些数据\",{\"1\":{\"262\":1}}],[\"如果需要省略每行记录的尾部\",{\"1\":{\"25\":1}}],[\"如果docker容器使用none模式\",{\"1\":{\"250\":1}}],[\"如果依附的docker容器关闭\",{\"1\":{\"250\":1}}],[\"如果主机使用了双线ip\",{\"1\":{\"222\":1}}],[\"如果之前访问过\",{\"1\":{\"222\":1}}],[\"如果采用\",{\"1\":{\"221\":1}}],[\"如果持有锁期间客户端崩溃\",{\"1\":{\"214\":1}}],[\"如果\",{\"1\":{\"214\":1,\"413\":1,\"723\":1,\"863\":1,\"891\":1,\"896\":1}}],[\"如果抢锁失败\",{\"1\":{\"214\":1}}],[\"如果应用只是在局域网中使用\",{\"1\":{\"208\":1}}],[\"如果机器分机房\",{\"1\":{\"205\":1}}],[\"如果先检查库存\",{\"1\":{\"202\":1}}],[\"如果redo的region能够响应请求\",{\"1\":{\"199\":1}}],[\"如果把一个事务可看作是一个程序\",{\"1\":{\"199\":1}}],[\"如果说spanner真有什么特别之处\",{\"1\":{\"196\":1}}],[\"如果说数字一样大\",{\"1\":{\"113\":1}}],[\"如果经过一段时间后要求能访问到更新后的数据\",{\"1\":{\"193\":1}}],[\"如果能容忍后续的部分或者全部访问不到\",{\"1\":{\"193\":1}}],[\"如果能够承担一定程度的数据丢失风险\",{\"1\":{\"140\":1}}],[\"如果因保全错误为被申请人或案外人造成损失\",{\"1\":{\"185\":1}}],[\"如果债务人违约\",{\"1\":{\"168\":1}}],[\"如果读者之前曾经使用过关系数据库的话\",{\"1\":{\"139\":1}}],[\"如果给定了可选的withscores选项\",{\"1\":{\"137\":1}}],[\"如果item被成功移除\",{\"1\":{\"135\":1}}],[\"如果我们有一个保存文本数据的\",{\"1\":{\"624\":1}}],[\"如果我们有一个指向图\",{\"1\":{\"616\":1}}],[\"如果我们又打算将\",{\"1\":{\"620\":1}}],[\"如果我们持有一个值为\",{\"1\":{\"620\":1}}],[\"如果我们执行\",{\"1\":{\"619\":1,\"621\":1}}],[\"如果我们读入的是字符流数据\",{\"1\":{\"545\":1}}],[\"如果我们初始化时指定一个大小\",{\"1\":{\"532\":1}}],[\"如果我们想确定我们没有让\",{\"1\":{\"454\":1}}],[\"如果我们需要精确计算的结果\",{\"1\":{\"445\":1}}],[\"如果我们系统中利用\",{\"1\":{\"221\":1}}],[\"如果我们要将一个键值对\",{\"1\":{\"127\":1}}],[\"如果我们是在mydb数据库中创建的这个表\",{\"1\":{\"21\":1}}],[\"如果目前没有在进行\",{\"1\":{\"126\":1}}],[\"如果只为做一两件事而创建结构类型也可能显得很麻烦\",{\"1\":{\"915\":1}}],[\"如果只将某个列用于其他类型的运算时\",{\"1\":{\"100\":1}}],[\"如果只有一个文件\",{\"1\":{\"34\":1}}],[\"如果在一个的以上地方看到相同的代码\",{\"1\":{\"909\":1}}],[\"如果在测试的时候可能会用eclispe这时候就需要在eclipse\",{\"1\":{\"651\":1}}],[\"如果在数值计算中不允许有任何舍入误差\",{\"1\":{\"549\":1}}],[\"如果在没有包装消耗序列的情况下\",{\"1\":{\"472\":1}}],[\"如果在这一步还是没有完成dns解析\",{\"1\":{\"222\":1}}],[\"如果在校园网\",{\"1\":{\"222\":1}}],[\"如果在文件中依旧没有找到映射关系\",{\"1\":{\"222\":1}}],[\"如果在前\",{\"1\":{\"100\":1}}],[\"如果在a给b转账的同时\",{\"1\":{\"66\":1}}],[\"如果遇到表情储存的需求\",{\"1\":{\"82\":1}}],[\"如果索引数量太多\",{\"1\":{\"82\":1}}],[\"如果是无界队列\",{\"1\":{\"756\":1}}],[\"如果是数组对象\",{\"1\":{\"672\":1}}],[\"如果是dev环境则调用localhost\",{\"1\":{\"410\":1}}],[\"如果是mysql\",{\"1\":{\"321\":1}}],[\"如果是小区网络\",{\"1\":{\"222\":1}}],[\"如果是最小的\",{\"1\":{\"214\":1}}],[\"如果是则认为获得锁\",{\"1\":{\"214\":1}}],[\"如果是自增的主键\",{\"1\":{\"85\":1}}],[\"如果是1\",{\"1\":{\"82\":1}}],[\"如果是对全表的删除或更新操作\",{\"1\":{\"64\":1}}],[\"如果没有此权限\",{\"1\":{\"888\":1}}],[\"如果没有注册数据库服务\",{\"1\":{\"845\":1}}],[\"如果没有明确指定\",{\"1\":{\"723\":1}}],[\"如果没有明确设置\",{\"1\":{\"515\":1}}],[\"如果没有\",{\"1\":{\"558\":1}}],[\"如果没有catch\",{\"1\":{\"541\":1}}],[\"如果没有前面的src\",{\"1\":{\"537\":1}}],[\"如果没有缓存\",{\"1\":{\"222\":1}}],[\"如果没有本行表示同步所有的数据库\",{\"1\":{\"79\":1}}],[\"如果没有where过滤的话\",{\"1\":{\"21\":1}}],[\"如果库里的表特别多的情况\",{\"1\":{\"74\":1}}],[\"如果有五个\",{\"1\":{\"910\":1}}],[\"如果有些函数以不同的算法做相同的事\",{\"1\":{\"909\":1}}],[\"如果有另一线程试图锁定某个被偏斜过的对象\",{\"1\":{\"723\":1}}],[\"如果有一种使用空字符来分割多个单词的特殊数据格式\",{\"1\":{\"623\":1}}],[\"如果有一个索引很少利用或从不使用\",{\"1\":{\"100\":1}}],[\"如果有多个分布式事务同时操作同一行数据库记录\",{\"1\":{\"427\":1}}],[\"如果有blob对象建议修改成1g\",{\"1\":{\"74\":1}}],[\"如果有索引表的话\",{\"1\":{\"28\":1}}],[\"如果由多个文件\",{\"1\":{\"34\":1}}],[\"如果省略掉\",{\"1\":{\"28\":1}}],[\"如果根据user\",{\"1\":{\"27\":1}}],[\"如果同时运行两个这样的实例\",{\"1\":{\"27\":1}}],[\"如果按照指定的列而不是rand\",{\"1\":{\"24\":1}}],[\"如果不存在前驱节点\",{\"1\":{\"929\":1}}],[\"如果不存在数据依赖性\",{\"1\":{\"809\":1}}],[\"如果不需要同步的代码需要花很长时间\",{\"1\":{\"924\":1}}],[\"如果不能做到这点\",{\"1\":{\"911\":1}}],[\"如果不得不使用\",{\"1\":{\"905\":1}}],[\"如果不一致\",{\"1\":{\"673\":1}}],[\"如果不remove掉\",{\"1\":{\"650\":1}}],[\"如果不够的话\",{\"1\":{\"619\":1}}],[\"如果不满足的话\",{\"1\":{\"619\":1}}],[\"如果不指定\",{\"1\":{\"532\":1}}],[\"如果不加栈信息\",{\"1\":{\"413\":1}}],[\"如果不想处理它\",{\"1\":{\"413\":1}}],[\"如果不小心按照秒分区\",{\"1\":{\"22\":1}}],[\"如果不匹配\",{\"1\":{\"19\":1}}],[\"如果文件越小\",{\"1\":{\"17\":1}}],[\"如果管道中的任何一个datanode失败\",{\"1\":{\"14\":1}}],[\"z被加载到同一cache\",{\"1\":{\"663\":1}}],[\"zzzzzzzz\",{\"1\":{\"499\":1}}],[\"zzzzzz\",{\"1\":{\"497\":1}}],[\"zzzzz\",{\"1\":{\"497\":1}}],[\"zero\",{\"1\":{\"445\":2,\"446\":1}}],[\"zeros\",{\"1\":{\"59\":1}}],[\"zxvf\",{\"1\":{\"343\":1,\"352\":1,\"376\":1}}],[\"zone=\",{\"1\":{\"842\":1}}],[\"zone=public\",{\"1\":{\"839\":1}}],[\"zone=perserver\",{\"1\":{\"317\":1}}],[\"zone=perip\",{\"1\":{\"317\":1}}],[\"zoneid\",{\"1\":{\"527\":5}}],[\"zoneddatetime\",{\"1\":{\"527\":2}}],[\"zone\",{\"1\":{\"317\":2,\"837\":1}}],[\"zookeeper\",{\"1\":{\"433\":1,\"564\":2}}],[\"zookeeper作为高性能分布式协调框架\",{\"1\":{\"214\":1}}],[\"zookeeper是分布式协调服务\",{\"1\":{\"198\":1}}],[\"zookeeper是个cp\",{\"1\":{\"198\":1}}],[\"zookeeper可能会丢弃一些请求\",{\"1\":{\"198\":1}}],[\"zuoyu\",{\"1\":{\"298\":2,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1}}],[\"zunionstore\",{\"1\":{\"138\":1}}],[\"ztq\",{\"1\":{\"230\":3,\"437\":1,\"446\":1,\"517\":1,\"518\":1,\"563\":1}}],[\"zk锁具备高可用\",{\"1\":{\"214\":1}}],[\"zkaddress\",{\"1\":{\"214\":4}}],[\"zk\",{\"1\":{\"214\":3}}],[\"zklock\",{\"1\":{\"214\":7}}],[\"zk服务器维护了客户端的会话有效性\",{\"1\":{\"214\":1}}],[\"zl\",{\"1\":{\"157\":4}}],[\"zscore\",{\"1\":{\"137\":1}}],[\"zset\",{\"1\":{\"133\":1,\"158\":2}}],[\"zrevrangebyscore\",{\"1\":{\"138\":1}}],[\"zrevrange\",{\"1\":{\"138\":1}}],[\"zrevrank\",{\"1\":{\"138\":1}}],[\"zremrangebyscore\",{\"1\":{\"138\":1}}],[\"zremrangebyrank\",{\"1\":{\"138\":1}}],[\"zrem\",{\"1\":{\"137\":1}}],[\"zrangebyscore\",{\"1\":{\"138\":1}}],[\"zrange\",{\"1\":{\"137\":1}}],[\"zrank\",{\"1\":{\"137\":1}}],[\"zcount\",{\"1\":{\"137\":1}}],[\"zcard\",{\"1\":{\"137\":1}}],[\"zinterstore\",{\"1\":{\"138\":1}}],[\"zincrby\",{\"1\":{\"137\":1}}],[\"ziplist\",{\"0\":{\"157\":1},\"1\":{\"157\":9,\"158\":14,\"160\":2}}],[\"zipkin\",{\"1\":{\"108\":1}}],[\"zip\",{\"1\":{\"21\":1,\"25\":1,\"28\":1}}],[\"zadd\",{\"1\":{\"137\":1}}],[\"zhao的博客\",{\"1\":{\"526\":1}}],[\"zhangsan\",{\"1\":{\"104\":1,\"734\":4,\"735\":4}}],[\"zh\",{\"1\":{\"272\":1,\"420\":1,\"427\":1,\"477\":2,\"479\":2,\"480\":2}}],[\"zhuanlan\",{\"1\":{\"132\":2}}],[\"zheng\",{\"1\":{\"78\":1,\"80\":1}}],[\"zhengtianqi<郑天祺>\",{\"1\":{\"297\":1}}],[\"zhengtianqi\",{\"1\":{\"3\":1,\"58\":1,\"62\":1,\"230\":1,\"263\":6,\"267\":1,\"268\":2,\"270\":3,\"271\":1,\"272\":1,\"273\":5,\"317\":2,\"446\":1,\"533\":1,\"563\":1,\"626\":3,\"683\":1,\"709\":1,\"716\":1,\"717\":1,\"721\":1}}],[\"zhihu\",{\"1\":{\"75\":1,\"132\":2}}],[\"z\",{\"1\":{\"73\":1,\"874\":1}}],[\"zjl\",{\"1\":{\"63\":1}}],[\"州\",{\"1\":{\"21\":1}}],[\"通俗的称为\",{\"1\":{\"684\":1}}],[\"通俗地说\",{\"1\":{\"558\":1}}],[\"通话即将结束后\",{\"1\":{\"648\":1}}],[\"通畅关键字集合比较大\",{\"1\":{\"506\":1}}],[\"通用代理类的实例进行服务调用\",{\"0\":{\"400\":1}}],[\"通用匹配\",{\"1\":{\"306\":1}}],[\"通用公共许可证\",{\"1\":{\"63\":1}}],[\"通知订阅者监听值得变化\",{\"1\":{\"214\":1}}],[\"通过竞争\",{\"1\":{\"926\":1}}],[\"通过重构\",{\"1\":{\"898\":1}}],[\"通过调整程序代码改善软件的质量\",{\"1\":{\"898\":1}}],[\"通过循环不断的自旋判断锁是否被其他线程持有\",{\"1\":{\"814\":1}}],[\"通过循环遍历上面的string\",{\"1\":{\"541\":1}}],[\"通过私钥pk和m生成确定随机数k\",{\"1\":{\"738\":1}}],[\"通过amount来做出一些行为\",{\"1\":{\"728\":1}}],[\"通过某种特定的手段加载\",{\"1\":{\"712\":1}}],[\"通过定义定义规则来容忍系统缺陷\",{\"1\":{\"704\":1}}],[\"通过lock\",{\"1\":{\"703\":1}}],[\"通过lower\",{\"1\":{\"82\":1}}],[\"通过可信接入技术提供可信的云环境接入方法\",{\"1\":{\"700\":1}}],[\"通过基于可信根支撑的隔离技术\",{\"1\":{\"699\":1}}],[\"通过建立基于可信第三方的监控技术\",{\"1\":{\"698\":1}}],[\"通过建立云架构下的可信链\",{\"1\":{\"697\":1}}],[\"通过为计算机增加硬件实现的信任根\",{\"1\":{\"687\":1}}],[\"通过为链表设置不同的类型特定函数\",{\"1\":{\"121\":1}}],[\"通过纯软件实现的容错\",{\"1\":{\"686\":1}}],[\"通过对一个对象进行加锁来实现同步\",{\"1\":{\"671\":1}}],[\"通过填充变量\",{\"1\":{\"667\":1}}],[\"通过一定的逻辑关系来共同完成一个任务\",{\"1\":{\"659\":1}}],[\"通过一个类的全限定名获取该类的二进制流\",{\"1\":{\"558\":1,\"559\":1}}],[\"通过应用程序的连接器\",{\"1\":{\"651\":1}}],[\"通过遵循\",{\"1\":{\"624\":1}}],[\"通过惰性空间释放策略\",{\"1\":{\"622\":1}}],[\"通过空间预分配策略\",{\"1\":{\"621\":1}}],[\"通过未使用空间\",{\"1\":{\"620\":1}}],[\"通过未使用空间解除了字符串长度和底层数组长度之间的关联\",{\"1\":{\"620\":1}}],[\"通过使用二进制安全的\",{\"1\":{\"623\":1}}],[\"通过使用\",{\"1\":{\"618\":1}}],[\"通过使用视图将这个查询语句分割成多个小的\",{\"1\":{\"20\":1}}],[\"通过执行以下语句\",{\"1\":{\"616\":1}}],[\"通过继承\",{\"1\":{\"558\":1}}],[\"通过验证数据流和控制流的分析\",{\"1\":{\"558\":1,\"562\":1}}],[\"通过协调各个线程\",{\"1\":{\"554\":1}}],[\"通过fifo\",{\"1\":{\"538\":1}}],[\"通过无锁的方式\",{\"1\":{\"530\":1}}],[\"通过其\",{\"1\":{\"529\":1}}],[\"通过访问者模式\",{\"1\":{\"527\":1}}],[\"通过方法注入属性的对象\",{\"1\":{\"523\":1}}],[\"通过给定的数据提生产者控制序列来创建一个eventpoller\",{\"1\":{\"472\":1}}],[\"通过sequencer可以得到一个sequencebarrier\",{\"1\":{\"472\":1}}],[\"通过sequencer的大部分功能来使用序列\",{\"1\":{\"472\":1}}],[\"通过reset\",{\"1\":{\"446\":1,\"553\":1}}],[\"通过root\",{\"1\":{\"222\":1}}],[\"通过bigdecimal的divide方法进行除法时当不整除\",{\"1\":{\"445\":1}}],[\"通过topic逻辑分类与partition物理分片\",{\"1\":{\"430\":1}}],[\"通过回滚日志\",{\"1\":{\"421\":1}}],[\"通过我们的配置\",{\"1\":{\"381\":1}}],[\"通过修改\",{\"1\":{\"373\":1}}],[\"通过yaml创建服务\",{\"1\":{\"263\":1}}],[\"通过查询宿主机和容器的ip地址\",{\"1\":{\"255\":1}}],[\"通过指定类的\",{\"1\":{\"706\":1}}],[\"通过指定\",{\"1\":{\"251\":1}}],[\"通过docker\",{\"1\":{\"250\":1}}],[\"通过本地运营商获取url和ip的映射关系\",{\"1\":{\"222\":1}}],[\"通过计算机本地的host文件配置\",{\"1\":{\"222\":1}}],[\"通过9步来诠释dns解析过程\",{\"1\":{\"222\":1}}],[\"通过这个future对象可以判断任务是否执行成功\",{\"1\":{\"762\":1}}],[\"通过这种预分配策略\",{\"1\":{\"621\":1}}],[\"通过这种数据库拆分的方法来解决数据库的性能问题\",{\"1\":{\"128\":1}}],[\"通过这一特点\",{\"1\":{\"214\":1}}],[\"通过前缀\",{\"1\":{\"214\":1}}],[\"通过客户端可以在租约到期之前续约\",{\"1\":{\"214\":1}}],[\"通过4+3+2+3的方式最终标识成一个24长度的十六进制字符\",{\"1\":{\"207\":1}}],[\"通过发布公告方式邀请供应商后\",{\"1\":{\"188\":1}}],[\"通过发行者的代理向投资者连续发行\",{\"1\":{\"178\":1}}],[\"通过提供再担保服务和风险分担机制\",{\"1\":{\"167\":1}}],[\"通过再担保\",{\"1\":{\"167\":1}}],[\"通过尽可能减少非数据节点的占用\",{\"1\":{\"157\":1}}],[\"通过设置\",{\"1\":{\"152\":1}}],[\"通过垂直分表性能得到了一定程度的提升\",{\"1\":{\"130\":1}}],[\"通过把数据分散到不同的数据库中\",{\"1\":{\"128\":1}}],[\"通过转换函数\",{\"1\":{\"82\":2}}],[\"通过运行以下命令启动\",{\"1\":{\"56\":1}}],[\"通过将关键字与文本数据库进行比较\",{\"1\":{\"55\":1}}],[\"通过将关键帧转换为矢量\",{\"1\":{\"55\":1}}],[\"通过比较相似的dna序列\",{\"1\":{\"55\":1}}],[\"通过partitioner\",{\"1\":{\"41\":1}}],[\"通过用户编写的\",{\"1\":{\"39\":1}}],[\"通过\",{\"1\":{\"26\":1,\"119\":1,\"207\":1,\"214\":2,\"443\":1,\"657\":1,\"711\":1}}],[\"通常情况下\",{\"1\":{\"924\":1}}],[\"通常更好的选择是\",{\"1\":{\"921\":1}}],[\"通常可以运用内联类把一系列相关行为放进同一个类\",{\"1\":{\"912\":1}}],[\"通常可设置为30000毫秒\",{\"1\":{\"651\":1}}],[\"通常如果类内的数个变量有着相同的前缀或字尾\",{\"1\":{\"910\":1}}],[\"通常windows是2000个左右\",{\"1\":{\"651\":1}}],[\"通常是反向的域名\",{\"1\":{\"587\":1}}],[\"通常是不记名的\",{\"1\":{\"186\":1}}],[\"通常concurrentlinkedqueue性能好于blockingqueue\",{\"1\":{\"530\":1}}],[\"通常将ringbuffer的size大小设置成实际使用的2倍\",{\"1\":{\"452\":1}}],[\"通常建议优先使用string构造方法\",{\"1\":{\"445\":1}}],[\"通常会使用内存池\",{\"1\":{\"751\":1}}],[\"通常会使用pipework工具为docker容器指定ip等信息\",{\"1\":{\"250\":1}}],[\"通常会提供限制最大长度的\",{\"1\":{\"25\":1}}],[\"通常用于同时提供www和mail服务的计算机\",{\"1\":{\"222\":1}}],[\"通常以36长度的字符串表示\",{\"1\":{\"210\":1}}],[\"通常我们描述一个系统的可用性时\",{\"1\":{\"194\":1}}],[\"通常能够减少内存使用\",{\"1\":{\"161\":1}}],[\"通常能够取得良好的\",{\"1\":{\"161\":1}}],[\"通常而言\",{\"1\":{\"160\":1}}],[\"通常\",{\"1\":{\"158\":1}}],[\"通常使用分区来水平分散压力\",{\"1\":{\"21\":1}}],[\"表和归档的备份\",{\"1\":{\"894\":1}}],[\"表误删除\",{\"1\":{\"893\":1}}],[\"表级备份\",{\"1\":{\"889\":1}}],[\"表空间备份\",{\"1\":{\"894\":1}}],[\"表空间的恢复系统会自动利用归档恢复到最新状态\",{\"1\":{\"893\":1}}],[\"表空间的还原与恢复需要在脱机状态下操作\",{\"1\":{\"893\":1}}],[\"表空间的还原和恢复不支持联机恢复\",{\"1\":{\"894\":1}}],[\"表空间的还原和恢复\",{\"0\":{\"893\":1}}],[\"表空间的方法\",{\"1\":{\"865\":1}}],[\"表空间级备份\",{\"1\":{\"889\":1}}],[\"表空间重命名\",{\"0\":{\"867\":1}}],[\"表空间数据文件会重建\",{\"1\":{\"865\":1}}],[\"表空间对应的数据文件中\",{\"1\":{\"864\":1}}],[\"表空间自动扩展不允许关闭\",{\"1\":{\"864\":1}}],[\"表空间由数据文件组成\",{\"1\":{\"864\":1}}],[\"表空间采用段\",{\"1\":{\"853\":1,\"864\":1}}],[\"表空间是\",{\"1\":{\"853\":1,\"864\":1}}],[\"表空间占用等信息\",{\"1\":{\"849\":1}}],[\"表空间\",{\"1\":{\"846\":1,\"864\":3,\"865\":1,\"893\":1}}],[\"表面上看epoll的性能最好\",{\"1\":{\"807\":1}}],[\"表结点node的值就是每一个请求当前锁的线程\",{\"1\":{\"674\":1}}],[\"表明自己接受到了客户端关闭连接的请求\",{\"1\":{\"649\":1}}],[\"表格对比\",{\"0\":{\"481\":1}}],[\"表现\",{\"1\":{\"140\":2}}],[\"表\",{\"1\":{\"120\":2,\"506\":1,\"625\":2,\"846\":1,\"864\":1}}],[\"表尾指针\",{\"1\":{\"119\":1}}],[\"表尾节点指针\",{\"1\":{\"121\":1}}],[\"表尾节点\",{\"1\":{\"119\":1}}],[\"表头节点的\",{\"1\":{\"119\":1}}],[\"表头节点\",{\"1\":{\"119\":1}}],[\"表中只有一个\",{\"1\":{\"101\":1}}],[\"表中的数据在逻辑上都是存放在表空间中\",{\"1\":{\"864\":1}}],[\"表中的数据必须是按照\",{\"1\":{\"23\":1}}],[\"表中的字段和索引数量都不宜过多\",{\"1\":{\"82\":1}}],[\"表以逻辑方式组合在一起\",{\"1\":{\"93\":1}}],[\"表的备份\",{\"1\":{\"894\":1}}],[\"表的字符集默认使用\",{\"1\":{\"82\":1}}],[\"表的存储引擎一定要选择使用innodb\",{\"1\":{\"82\":1}}],[\"表名\",{\"1\":{\"82\":1}}],[\"表足够小用map\",{\"1\":{\"29\":1}}],[\"表只有\",{\"1\":{\"24\":1}}],[\"表示当前线程释放了锁\",{\"1\":{\"929\":1}}],[\"表示该锁没有被其他线程占用\",{\"1\":{\"929\":1}}],[\"表示该对象还没有被加上偏向锁\",{\"1\":{\"673\":1}}],[\"表示不限制\",{\"1\":{\"865\":1}}],[\"表示多余的空闲线程会立即终止\",{\"1\":{\"771\":1}}],[\"表示同步状态\",{\"1\":{\"723\":1}}],[\"表示此方法对应的对象为锁对象\",{\"1\":{\"723\":1}}],[\"表示初始化内存为256\",{\"1\":{\"651\":1}}],[\"表示jvm堆的最大值\",{\"1\":{\"651\":1}}],[\"表示jvm初始化堆的大小\",{\"1\":{\"651\":1}}],[\"表示自己已经没有数据可以发送了\",{\"1\":{\"649\":1}}],[\"表示这个\",{\"1\":{\"616\":2}}],[\"表示这种类型的数值精度是\",{\"1\":{\"549\":1}}],[\"表示可能有精度损失的转换\",{\"1\":{\"549\":1}}],[\"表示无信息丢失的转换\",{\"1\":{\"549\":1}}],[\"表示执行比较耗时的任务\",{\"1\":{\"446\":1}}],[\"表示a大于b\",{\"1\":{\"445\":1}}],[\"表示a等于b\",{\"1\":{\"445\":1}}],[\"表示a小于b\",{\"1\":{\"445\":1}}],[\"表示要增加的值\",{\"1\":{\"443\":1}}],[\"表示内存地址的偏移量\",{\"1\":{\"443\":1}}],[\"表示在传送数据时\",{\"1\":{\"317\":1}}],[\"表示精确匹配\",{\"1\":{\"306\":1}}],[\"表示挂载pod所在宿主机的目录\",{\"1\":{\"263\":1}}],[\"表示使用宿主机网络\",{\"1\":{\"263\":1}}],[\"表示全局唯一的\",{\"1\":{\"214\":1}}],[\"表示\",{\"1\":{\"155\":1}}],[\"表示枚举的字段为什么不用enum类型\",{\"1\":{\"86\":1}}],[\"表示没有限制\",{\"1\":{\"74\":1}}],[\"表示后台运行\",{\"1\":{\"63\":1}}],[\"表示暴露端口\",{\"1\":{\"63\":1}}],[\"表示运行参数\",{\"1\":{\"63\":1}}],[\"表示和x或者y匹配\",{\"1\":{\"22\":1}}],[\"表示和任意的字符匹配\",{\"1\":{\"22\":1}}],[\"表示重复\",{\"1\":{\"22\":1}}],[\"表示发来的数据已确认接收无误\",{\"1\":{\"14\":1}}],[\"表重命名\",{\"1\":{\"21\":1}}],[\"来取代totalamount和frequentrentalpoints这两个临时变量\",{\"1\":{\"904\":1}}],[\"来抽取积分\",{\"0\":{\"903\":1}}],[\"来达到欺骗系统的目的\",{\"1\":{\"897\":1}}],[\"来管理用户的资源限制\",{\"1\":{\"883\":1}}],[\"来将多条指令重叠执行\",{\"1\":{\"809\":1}}],[\"来关闭线程池\",{\"1\":{\"764\":1}}],[\"来获取cpu个数\",{\"1\":{\"769\":1}}],[\"来获取返回值\",{\"1\":{\"762\":1}}],[\"来获取它\",{\"1\":{\"558\":1}}],[\"来使各个变量在cache\",{\"1\":{\"669\":1}}],[\"来解决simpledateformat的线程安全问题\",{\"1\":{\"650\":1}}],[\"来保存之前提到的特殊数据格式就没有任何问题\",{\"1\":{\"623\":1}}],[\"来保证合理的公共资源的访问\",{\"1\":{\"554\":1}}],[\"来保证在所有的任务都完成之前不会有\",{\"1\":{\"27\":1}}],[\"来说\",{\"1\":{\"618\":2,\"621\":1,\"622\":1}}],[\"来打印出\",{\"1\":{\"616\":1}}],[\"来制定main方法的位置\",{\"1\":{\"583\":1}}],[\"来加载java类\",{\"1\":{\"558\":1}}],[\"来加密数据包\",{\"1\":{\"521\":1}}],[\"来到停车场\",{\"1\":{\"554\":1}}],[\"来迭代流中的每个数据\",{\"1\":{\"527\":1}}],[\"来标记这个被你还原的版本\",{\"1\":{\"501\":1}}],[\"来攻击\",{\"1\":{\"484\":1}}],[\"来验证用户是否登录等权限问题\",{\"1\":{\"483\":1}}],[\"来执行可获取返回值的异步任务\",{\"1\":{\"475\":1}}],[\"来替代匿名\",{\"1\":{\"475\":3}}],[\"来配置\",{\"1\":{\"417\":1}}],[\"来记录当前的请求数量\",{\"1\":{\"221\":1}}],[\"来判断此时锁是否真正释放掉了\",{\"1\":{\"218\":1}}],[\"来判断自己是否可以获得锁\",{\"1\":{\"214\":1}}],[\"来实现这个机制\",{\"1\":{\"703\":1}}],[\"来实现这个接口\",{\"1\":{\"216\":1}}],[\"来实现分布式锁\",{\"1\":{\"221\":1}}],[\"来实现\",{\"1\":{\"217\":1,\"413\":1,\"618\":1}}],[\"来redo\",{\"1\":{\"199\":1}}],[\"来自百度百科\",{\"1\":{\"897\":1}}],[\"来自外部系统的用户余额更新操作不受我们系统的控制\",{\"1\":{\"731\":1}}],[\"来自\",{\"1\":{\"176\":1}}],[\"来自于\",{\"1\":{\"161\":1}}],[\"来持有链表的话\",{\"1\":{\"119\":1}}],[\"来存储我们的数据\",{\"1\":{\"539\":1}}],[\"来存储这些值\",{\"1\":{\"221\":1}}],[\"来存储时间\",{\"1\":{\"82\":1}}],[\"来存储金钱\",{\"1\":{\"82\":1}}],[\"来存储\",{\"1\":{\"82\":2}}],[\"来源\",{\"1\":{\"50\":1,\"189\":1}}],[\"来满足查询条件\",{\"1\":{\"26\":1}}],[\"来描述数据库的属性信息\",{\"1\":{\"21\":1}}],[\"来限制\",{\"1\":{\"20\":1}}],[\"就绪状态\",{\"1\":{\"926\":1}}],[\"就应该对它重命名\",{\"1\":{\"919\":1}}],[\"就应该将这个类的所有特性搬移到另一个类中\",{\"1\":{\"918\":1}}],[\"就应该使用\",{\"1\":{\"549\":1}}],[\"就有可能将其中部分存在逻辑联系的字段组织起来\",{\"1\":{\"915\":1}}],[\"就有了偏向锁的标志位\",{\"1\":{\"673\":1}}],[\"就创造一个\",{\"1\":{\"912\":1}}],[\"就必须找到所用switch语句并修改它们\",{\"1\":{\"916\":1}}],[\"就必须修改这四个函数\",{\"1\":{\"911\":1}}],[\"就必须修改这三个函数\",{\"1\":{\"911\":1}}],[\"就必须确保将来的任何修改在两个地方保持一致\",{\"1\":{\"898\":1}}],[\"就把需要说明的东西写进一个独立函数中\",{\"1\":{\"910\":1}}],[\"就把锁的计数器+1\",{\"1\":{\"723\":1}}],[\"就使用普通的轻量级锁\",{\"1\":{\"723\":1}}],[\"就说明这张证书可能被冒用\",{\"1\":{\"705\":1}}],[\"就证明这封信未被修改过\",{\"1\":{\"705\":1}}],[\"就看到了信件内容\",{\"1\":{\"705\":1}}],[\"就存在了排队\",{\"1\":{\"683\":1}}],[\"就很可能出现permgen\",{\"1\":{\"651\":1}}],[\"就给每个包一个序号\",{\"1\":{\"644\":1}}],[\"就展示了一个值为\",{\"1\":{\"617\":1}}],[\"就展示了如何通过\",{\"1\":{\"125\":1}}],[\"就能得到更多的数据\",{\"1\":{\"910\":1}}],[\"就能自动完成\",{\"1\":{\"568\":1}}],[\"就能完整地获取数据报文\",{\"1\":{\"485\":1}}],[\"就将还存活的对象复制到另一块去\",{\"1\":{\"557\":1}}],[\"就不值得\",{\"1\":{\"919\":1}}],[\"就不得不修改它\",{\"1\":{\"910\":1}}],[\"就不要动它\",{\"1\":{\"898\":1}}],[\"就不会再变化\",{\"1\":{\"665\":1}}],[\"就不会继续阻塞当前线程\",{\"1\":{\"551\":1}}],[\"就不用专门编写一个将\",{\"1\":{\"624\":1}}],[\"就不用自己专门去写一个函数来对比\",{\"1\":{\"624\":1}}],[\"就不用压缩\",{\"1\":{\"317\":1}}],[\"就传入n\",{\"1\":{\"551\":1}}],[\"就需要我们自己加盐值\",{\"1\":{\"897\":1}}],[\"就需要使用\",{\"1\":{\"549\":1}}],[\"就需要执行回滚操作\",{\"1\":{\"66\":1}}],[\"就在当前目录创建文件\",{\"1\":{\"537\":1}}],[\"就这么简单\",{\"1\":{\"526\":1}}],[\"就好像上面说的\",{\"1\":{\"522\":1}}],[\"就去寻找下一个空的散列地址\",{\"1\":{\"511\":1}}],[\"就只有利用非对称加密\",{\"1\":{\"485\":1}}],[\"就只能直接返回\",{\"1\":{\"219\":1}}],[\"就像应用程序打开一个文件句柄\",{\"1\":{\"636\":1}}],[\"就像ringbuffer显然需要一个序号才能找到下一个可用节点一样\",{\"1\":{\"452\":1}}],[\"就像git的仓库一样\",{\"1\":{\"234\":2}}],[\"就立即commit\",{\"1\":{\"435\":1}}],[\"就自动开一个新的日志段文件来写入\",{\"1\":{\"433\":1}}],[\"就执行\",{\"1\":{\"321\":1}}],[\"就以此项为最终匹配结果\",{\"1\":{\"307\":1}}],[\"就查询\",{\"1\":{\"222\":1}}],[\"就比如上面的买票的例子\",{\"1\":{\"202\":1}}],[\"就要牺牲用户的体验\",{\"1\":{\"197\":1}}],[\"就是中间不需要同步的代码能够很快速地完成\",{\"1\":{\"924\":1}}],[\"就是integer\",{\"1\":{\"896\":1}}],[\"就是普通对象指针\",{\"1\":{\"722\":1}}],[\"就是支持重进入的锁\",{\"1\":{\"702\":1}}],[\"就是不同线程通过竞争进入临界区\",{\"1\":{\"659\":1}}],[\"就是abcd这些线程要约定一个执行的协调顺序\",{\"1\":{\"659\":1}}],[\"就是线程a访问了一组数据\",{\"1\":{\"659\":1}}],[\"就是在同一时刻只能有一个线程获取到锁\",{\"1\":{\"702\":1}}],[\"就是在执行java类文件时加上这个参数\",{\"1\":{\"651\":1}}],[\"就是在网络中断\",{\"1\":{\"195\":1}}],[\"就是源码有点多没敢用\",{\"1\":{\"626\":1}}],[\"就是程序员可能创建了一个对象\",{\"1\":{\"558\":1}}],[\"就是由classloader和它的子类来实现的\",{\"1\":{\"558\":1,\"563\":1}}],[\"就是已经告诉了子网掩码了\",{\"1\":{\"526\":1}}],[\"就是个不错的选择\",{\"1\":{\"522\":1}}],[\"就是用户在浏览器里输入一个\",{\"1\":{\"522\":1}}],[\"就是将origin这个版本库的代码更新到本地的master主枝\",{\"1\":{\"499\":1}}],[\"就是你在电脑里能看到的目录\",{\"1\":{\"490\":1}}],[\"就是往队列上放数据\",{\"1\":{\"472\":2}}],[\"就是一个内存环\",{\"1\":{\"452\":1}}],[\"就是一个线程执行了加锁操作后\",{\"1\":{\"217\":1}}],[\"就是代表了这个日志段文件里包含的起始\",{\"1\":{\"433\":1}}],[\"就是每隔一段时间去检查当前线程是否还在运行\",{\"1\":{\"220\":1}}],[\"就是有比较好的分区容错性\",{\"1\":{\"195\":1}}],[\"就是出现问题\",{\"1\":{\"73\":1}}],[\"就叫垂直分表\",{\"1\":{\"129\":1}}],[\"就可以重点投入\",{\"1\":{\"784\":1}}],[\"就可以拿到鲍勃真实的公钥了\",{\"1\":{\"705\":1}}],[\"就可以放心了\",{\"1\":{\"705\":1}}],[\"就可以达到保密的效果\",{\"1\":{\"705\":1}}],[\"就可以用threadlocal进行set\",{\"1\":{\"650\":1}}],[\"就可以立即知道\",{\"1\":{\"618\":2}}],[\"就可以交换数据了\",{\"1\":{\"555\":1}}],[\"就可以写二进制数\",{\"1\":{\"549\":1}}],[\"就可以直接读懂其中的信息\",{\"1\":{\"520\":1}}],[\"就可以直接使用cmd命令行进行git操作\",{\"1\":{\"495\":1}}],[\"就可以使用\",{\"1\":{\"501\":1}}],[\"就可以使用utf8mb4\",{\"1\":{\"82\":1}}],[\"就可以获得异步执行的结果\",{\"1\":{\"475\":1}}],[\"就可以让线程池去执行\",{\"1\":{\"475\":1}}],[\"就可以从缓存中读取\",{\"1\":{\"305\":1}}],[\"就可以根据这个key直接到redis中获取相应的库存信息\",{\"1\":{\"221\":1}}],[\"就可以在cap三者中保障cp而舍弃a\",{\"1\":{\"197\":1}}],[\"就可以像其它文件一样被打开和读取了\",{\"1\":{\"4\":1}}],[\"就会导致同步块的执行需要花费很长的时间\",{\"1\":{\"924\":1}}],[\"就会导致大量内存被占据\",{\"1\":{\"650\":1}}],[\"就会唤醒线程池中的某一个睡眠线程\",{\"1\":{\"751\":1}}],[\"就会有一些有趣的问题\",{\"1\":{\"665\":1}}],[\"就会直接使用未使用空间\",{\"1\":{\"621\":1}}],[\"就会先扩展\",{\"1\":{\"619\":2}}],[\"就会产生缓冲区溢出\",{\"1\":{\"619\":1}}],[\"就会产生意外情况\",{\"1\":{\"413\":1}}],[\"就会把连接信息注册到\",{\"1\":{\"612\":1}}],[\"就会增加app\",{\"1\":{\"503\":1}}],[\"就会将user\",{\"1\":{\"500\":1}}],[\"就会将本地的代码更新到名为orgin的远程版本库中\",{\"1\":{\"499\":1}}],[\"就会切换到new\",{\"1\":{\"500\":1}}],[\"就会强制删除叫做new\",{\"1\":{\"500\":1}}],[\"就会抛异常\",{\"1\":{\"445\":1}}],[\"就会发现\",{\"1\":{\"433\":1}}],[\"就会使用链表作为列表键的底层实现\",{\"1\":{\"118\":1}}],[\"就会终止该操作\",{\"1\":{\"64\":1}}],[\"就会立即停止扫描\",{\"1\":{\"23\":1}}],[\"就允许用户可以基于同一个物理表构建多个逻辑表\",{\"1\":{\"20\":1}}],[\"可运用\",{\"1\":{\"915\":1}}],[\"可移植性\",{\"1\":{\"898\":1}}],[\"可再用性\",{\"1\":{\"898\":1}}],[\"可维修性\",{\"1\":{\"898\":1}}],[\"可理解性\",{\"1\":{\"898\":1}}],[\"可推荐该商品的优惠活动\",{\"1\":{\"785\":1}}],[\"可信的安全保障机制\",{\"0\":{\"696\":1}}],[\"可信的应用\",{\"0\":{\"694\":1}}],[\"可信的基本思想是在计算机系统中首先建立一个信任根\",{\"1\":{\"685\":1}}],[\"可信基础支撑软件框架\",{\"0\":{\"690\":1}}],[\"可信基本概念\",{\"0\":{\"685\":1}}],[\"可信平台控制模块\",{\"1\":{\"689\":1}}],[\"可信3\",{\"0\":{\"688\":1}}],[\"可信2\",{\"0\":{\"687\":1}}],[\"可信计算技术的发展最早可追溯到２０世纪８０年代\",{\"1\":{\"686\":1}}],[\"可信1\",{\"0\":{\"686\":1}}],[\"可信应用\",{\"1\":{\"685\":1}}],[\"可信应用软件\",{\"1\":{\"684\":1}}],[\"可信性度量理论\",{\"1\":{\"684\":1}}],[\"可信度量理论\",{\"1\":{\"684\":1}}],[\"可信模型\",{\"1\":{\"684\":1}}],[\"可信网络到可信浏览器等等等等整套可信的体系\",{\"1\":{\"685\":1}}],[\"可信网络设备\",{\"1\":{\"684\":1}}],[\"可信网络协议\",{\"1\":{\"684\":1}}],[\"可信网络结构\",{\"1\":{\"684\":1}}],[\"可信网络\",{\"1\":{\"684\":1}}],[\"可信数据库\",{\"1\":{\"684\":1}}],[\"可信编译\",{\"1\":{\"684\":1}}],[\"可信软件基的双系统体系结构\",{\"1\":{\"690\":1}}],[\"可信软件工程\",{\"1\":{\"684\":1}}],[\"可信软件\",{\"1\":{\"684\":1}}],[\"可信测试\",{\"1\":{\"684\":1}}],[\"可信根\",{\"1\":{\"684\":1}}],[\"可信赖计算\",{\"1\":{\"684\":1}}],[\"可信是指计算机系统提供的服务可以被证明是可信赖的\",{\"1\":{\"684\":1}}],[\"可信≈可靠+安全\",{\"1\":{\"684\":1}}],[\"可信\",{\"1\":{\"684\":5,\"688\":1}}],[\"可信与可信计算\",{\"0\":{\"684\":1}}],[\"可见多个线程操作在同一cache\",{\"1\":{\"663\":1}}],[\"可见性和有序性\",{\"1\":{\"440\":1}}],[\"可靠性\",{\"1\":{\"704\":1}}],[\"可靠性和容错技术\",{\"0\":{\"704\":1}}],[\"可靠传输\",{\"1\":{\"644\":1}}],[\"可靠的测试\",{\"0\":{\"899\":1}}],[\"可靠的流协议\",{\"1\":{\"642\":1}}],[\"可靠的\",{\"1\":{\"642\":1}}],[\"可是为什么呢\",{\"1\":{\"626\":1}}],[\"可是你想省事\",{\"1\":{\"626\":1}}],[\"可选值\",{\"1\":{\"837\":6}}],[\"可选字段\",{\"1\":{\"642\":1}}],[\"可选\",{\"0\":{\"590\":1,\"591\":1},\"1\":{\"642\":1}}],[\"可选配置格式\",{\"1\":{\"417\":1}}],[\"可达性算法\",{\"1\":{\"558\":1}}],[\"可循环使用的屏障\",{\"1\":{\"552\":1}}],[\"可用地址范围是\",{\"1\":{\"526\":1}}],[\"可用性和可维护性\",{\"1\":{\"684\":1}}],[\"可用性指\",{\"1\":{\"194\":1}}],[\"可用性\",{\"0\":{\"194\":1},\"1\":{\"191\":1,\"684\":1,\"898\":1}}],[\"可分配子网块大小\",{\"1\":{\"526\":1}}],[\"可处理\",{\"1\":{\"472\":1}}],[\"可水平拓展\",{\"1\":{\"433\":1}}],[\"可查看irule接口的实现类\",{\"1\":{\"403\":1}}],[\"可不用配置\",{\"1\":{\"402\":1}}],[\"可不加默认为true\",{\"1\":{\"402\":1}}],[\"可有可无\",{\"1\":{\"317\":1}}],[\"可将宿主机的目录挂载到数据卷上\",{\"1\":{\"262\":1}}],[\"可将一整行文本作为一个\",{\"1\":{\"20\":1}}],[\"可解决失效死锁问题\",{\"1\":{\"214\":1}}],[\"可根据业务定制设置\",{\"1\":{\"214\":1}}],[\"可在租约到期后自动释放锁\",{\"1\":{\"214\":1}}],[\"可通过\",{\"1\":{\"214\":1}}],[\"可重用固定线程数的线程池\",{\"1\":{\"771\":1}}],[\"可重入的自旋锁和不可重入的自旋锁\",{\"0\":{\"815\":1}}],[\"可重入性是显而易见的\",{\"1\":{\"723\":1}}],[\"可重入性是锁的一个基本要求\",{\"1\":{\"723\":1}}],[\"可重入锁\",{\"0\":{\"701\":1,\"702\":1}}],[\"可重入发布式锁实现\",{\"0\":{\"218\":1}}],[\"可重入\",{\"1\":{\"214\":1,\"702\":1}}],[\"可重入机制\",{\"1\":{\"213\":1}}],[\"可重复读\",{\"1\":{\"107\":1}}],[\"可能在等待期间其他线程已经解锁\",{\"1\":{\"723\":1}}],[\"可能是重新偏向\",{\"1\":{\"673\":1}}],[\"可能是没有打开创建函数的权限\",{\"1\":{\"73\":1}}],[\"可能还会对性能造成影响\",{\"1\":{\"620\":1}}],[\"可能会导致共享连接池对象对程序过多而出现连接池溢出\",{\"1\":{\"683\":1}}],[\"可能会等待\",{\"1\":{\"475\":1}}],[\"可能会到达不同的服务器上\",{\"1\":{\"305\":1}}],[\"可能阻塞\",{\"1\":{\"475\":1}}],[\"可能它在做\",{\"1\":{\"454\":1}}],[\"可能需要对更大或者更小的数进行运算和处理\",{\"1\":{\"445\":1}}],[\"可能你会觉得是不是有点像一个vm利用保存的备份或者快照跑起来环境一样\",{\"1\":{\"234\":1}}],[\"可能因为一些分布式的原因导致系统无法正常运转\",{\"1\":{\"195\":1}}],[\"可扣除追偿费用启按约定的责任比例向再担保机构进行返还\",{\"1\":{\"164\":1}}],[\"可起几个索引的作用\",{\"1\":{\"100\":1}}],[\"可利用的\",{\"1\":{\"100\":1}}],[\"可\",{\"1\":{\"93\":1}}],[\"可自动回答用户问题\",{\"1\":{\"55\":1}}],[\"可以说是让线程进入阻塞状态进行等待\",{\"1\":{\"926\":1}}],[\"可以运用以对象取代数组进行处理\",{\"1\":{\"915\":1}}],[\"可以引入参数对象进行处理\",{\"1\":{\"915\":1}}],[\"可以对一组甚至短短一行代码做这件事\",{\"1\":{\"910\":1}}],[\"可以对一些字段建立索引来加速某些操作\",{\"1\":{\"28\":1}}],[\"可以指定归档恢复到删除的前一刻\",{\"1\":{\"893\":1}}],[\"可以指定容器和主机的映射端口\",{\"1\":{\"241\":1}}],[\"可以考虑优化查询\",{\"1\":{\"864\":1}}],[\"可以调大哈希区\",{\"1\":{\"855\":1}}],[\"可以调大时间\",{\"1\":{\"757\":1}}],[\"可以适当调大排序区\",{\"1\":{\"855\":1}}],[\"可以适用于各种不同的使用场景\",{\"1\":{\"623\":1}}],[\"可以即可以修改内存中的值\",{\"1\":{\"854\":2}}],[\"可以配置归档\",{\"1\":{\"843\":1}}],[\"可以相互转换\",{\"1\":{\"843\":1}}],[\"可以分析各个业务模块的活跃度\",{\"1\":{\"785\":1}}],[\"可以分为从客户端和服务端两个不同的视角\",{\"1\":{\"192\":1}}],[\"可以改成2的写法\",{\"1\":{\"735\":1}}],[\"可以改为tpm安全芯片\",{\"1\":{\"205\":1}}],[\"可以替换为\",{\"1\":{\"735\":1}}],[\"可以自动对实现此接口的对象进行列表\",{\"1\":{\"735\":1}}],[\"可以自己制作\",{\"1\":{\"522\":1}}],[\"可以获得锁并将state=1\",{\"1\":{\"723\":1}}],[\"可以执行对应的逻辑\",{\"1\":{\"712\":1}}],[\"可以执行一个更快的分类\",{\"1\":{\"23\":1}}],[\"可以发送一些指令给jvm\",{\"1\":{\"712\":1}}],[\"可以选择缺陷移除技术\",{\"1\":{\"704\":1}}],[\"可以选用tcp\",{\"1\":{\"645\":1}}],[\"可以划分等级\",{\"1\":{\"684\":1}}],[\"可以划分vlan\",{\"1\":{\"526\":1}}],[\"可以节约内存\",{\"1\":{\"683\":1}}],[\"可以放到处理队列中的请求数\",{\"1\":{\"651\":1}}],[\"可以重新安排语句的执行顺序\",{\"1\":{\"809\":1}}],[\"可以重新应用该函数\",{\"1\":{\"444\":2}}],[\"可以重用一部分\",{\"1\":{\"624\":1}}],[\"可以减少连续执行字符串增长操作所需的内存重分配次数\",{\"1\":{\"621\":1}}],[\"可以容纳\",{\"1\":{\"619\":1}}],[\"可以容忍脑裂现场的发生\",{\"1\":{\"214\":1}}],[\"可以接受的参数如下\",{\"1\":{\"566\":1}}],[\"可以消除引用循环的问题\",{\"1\":{\"558\":1}}],[\"可以一步到位\",{\"1\":{\"545\":1}}],[\"可以直接调用shutdownnow方法\",{\"1\":{\"764\":1}}],[\"可以直接使用\",{\"1\":{\"652\":1,\"883\":1}}],[\"可以直接重用一部分\",{\"1\":{\"616\":1}}],[\"可以直接引用已有java类或对象\",{\"1\":{\"527\":1}}],[\"可以直接从服务器上面获取一些静态资源\",{\"1\":{\"222\":1}}],[\"可以看出\",{\"1\":{\"673\":1}}],[\"可以看得出\",{\"1\":{\"526\":1}}],[\"可以看到target下生成jar\",{\"1\":{\"582\":1}}],[\"可以看到他的返回值是\",{\"1\":{\"475\":1}}],[\"可以看到\",{\"1\":{\"475\":1}}],[\"可以看到数据的拷贝从内存拷贝到\",{\"1\":{\"433\":1}}],[\"可以看到nacos\",{\"1\":{\"394\":1,\"415\":1}}],[\"可以进行事务回滚\",{\"1\":{\"650\":1}}],[\"可以进行直接的通讯\",{\"1\":{\"526\":1}}],[\"可以进行原子更新\",{\"1\":{\"444\":1}}],[\"可以想象成一把钥匙和一个锁头\",{\"1\":{\"522\":1}}],[\"可以所用不同的协议\",{\"1\":{\"497\":1}}],[\"可以点击\",{\"1\":{\"488\":1}}],[\"可以帮助我们简化异步编程的复杂性\",{\"1\":{\"475\":1}}],[\"可以返回指定类型的结果\",{\"1\":{\"475\":1}}],[\"可以根据自己机器的内存进行更改\",{\"1\":{\"651\":1}}],[\"可以根据具体场景自行设置自旋时间\",{\"1\":{\"458\":1,\"468\":1,\"472\":1}}],[\"可以根据业务需求\",{\"1\":{\"206\":1}}],[\"可以完成生产者\",{\"1\":{\"458\":1}}],[\"可以同时在生产者和消费者两端实现批处理\",{\"1\":{\"457\":1}}],[\"可以读写数据文件\",{\"1\":{\"843\":1}}],[\"可以读\",{\"1\":{\"456\":2}}],[\"可以有效监控云服务的执行\",{\"1\":{\"698\":1}}],[\"可以有多个消费者\",{\"1\":{\"448\":1}}],[\"可以有null\",{\"1\":{\"101\":1}}],[\"可以设置\",{\"1\":{\"834\":1}}],[\"可以设置超时时间\",{\"1\":{\"762\":1}}],[\"可以设置的值为\",{\"1\":{\"435\":1}}],[\"可以设置url和ip地址的映射关系\",{\"1\":{\"222\":1}}],[\"可以理解就是默认提供的线程池对象\",{\"1\":{\"472\":1}}],[\"可以理解成kafka种的topic\",{\"1\":{\"429\":1}}],[\"可以理解为\",{\"1\":{\"402\":1}}],[\"可以理解为事务间的数据互不影响\",{\"1\":{\"106\":1}}],[\"可以把两者共同点提炼到一个安全地点\",{\"1\":{\"923\":1}}],[\"可以把它变成实责对象的子类\",{\"1\":{\"922\":1}}],[\"可以把它设为\",{\"1\":{\"564\":1}}],[\"可以把它设置为false\",{\"1\":{\"435\":1}}],[\"可以把这些操作放入到kafka消息队列中\",{\"1\":{\"428\":1}}],[\"可以把其看做一个文件系统\",{\"1\":{\"214\":1}}],[\"可以被规则\",{\"1\":{\"306\":1}}],[\"可以嵌套多个server\",{\"1\":{\"305\":1}}],[\"可以使得同一个url\",{\"1\":{\"305\":1}}],[\"可以使用提炼新类为这个可怜的孤儿创造一个家\",{\"1\":{\"920\":1}}],[\"可以使用比较清晰的一个替换掉其余的\",{\"1\":{\"909\":1}}],[\"可以使用execute\",{\"1\":{\"762\":1}}],[\"可以使用exchange\",{\"1\":{\"555\":1}}],[\"可以使用java代理或在构建过程中手动更改类\",{\"1\":{\"714\":1}}],[\"可以使用java并发处理相关的api进行互斥控制\",{\"1\":{\"212\":1}}],[\"可以使用的最大内存为512\",{\"1\":{\"651\":1}}],[\"可以使用repository子元素声明一个或者多个远程仓库\",{\"1\":{\"603\":1}}],[\"可以使用3个254个ip地址段来分配\",{\"1\":{\"526\":1}}],[\"可以使用spring\",{\"1\":{\"412\":1}}],[\"可以使用69年\",{\"1\":{\"205\":1}}],[\"可以使用搜索引擎sphinx代替\",{\"1\":{\"82\":1}}],[\"可以使用这个函数对指定的值进行显式的类型转换\",{\"1\":{\"24\":1}}],[\"可以使用\",{\"1\":{\"21\":1,\"250\":1,\"413\":1,\"500\":1,\"526\":1}}],[\"可以解决session不能跨服务器的问题\",{\"1\":{\"301\":1}}],[\"可以参考kube\",{\"1\":{\"295\":1}}],[\"可以参照上述业务操作流程办理\",{\"1\":{\"189\":1}}],[\"可以访问外网\",{\"1\":{\"287\":1}}],[\"可以保证当一个线程成功在\",{\"1\":{\"218\":1}}],[\"可以保证写入顺序是自增的\",{\"1\":{\"82\":1}}],[\"可以避免\",{\"1\":{\"214\":2}}],[\"可以为存储的\",{\"1\":{\"214\":1}}],[\"可以为如下的值\",{\"1\":{\"113\":1}}],[\"可以算作是和snowflake类似方法\",{\"1\":{\"207\":1}}],[\"可以部署在1024个节点\",{\"1\":{\"205\":1}}],[\"可以贴现\",{\"1\":{\"186\":1}}],[\"可以背书转让\",{\"1\":{\"186\":1}}],[\"可以是0到9中的任一个\",{\"1\":{\"317\":1}}],[\"可以是通知行\",{\"1\":{\"176\":1}}],[\"可以是字符串\",{\"1\":{\"133\":1}}],[\"可以是\",{\"1\":{\"127\":1}}],[\"可以多个事务同时进行\",{\"1\":{\"731\":1}}],[\"可以多个\",{\"1\":{\"110\":2}}],[\"可以用来监视数据库的线程\",{\"1\":{\"849\":1}}],[\"可以用来保护信息不被随意查询\",{\"1\":{\"20\":1}}],[\"可以用前面提到的sparkcontext创建sqlcontext\",{\"1\":{\"627\":1}}],[\"可以用mvn\",{\"1\":{\"604\":1}}],[\"可以用于区分环境\",{\"1\":{\"566\":1}}],[\"可以用于异步获取多线程任务结果\",{\"1\":{\"474\":1}}],[\"可以用show\",{\"1\":{\"99\":1}}],[\"可以\",{\"1\":{\"92\":1}}],[\"可以针对表设置引擎吗\",{\"0\":{\"92\":1}}],[\"可以让统计结果更准确\",{\"1\":{\"82\":1}}],[\"可以近乎实时地搜索和推荐数十亿个视频\",{\"1\":{\"55\":1}}],[\"可以优化上边两边编程下边\",{\"1\":{\"27\":1}}],[\"可以将它们放进调用端\",{\"1\":{\"922\":1}}],[\"可以将超类和子类合为一体\",{\"1\":{\"919\":1}}],[\"可以将其抽取为一个独立的类\",{\"1\":{\"915\":1}}],[\"可以将几个变量一起提炼至新类内\",{\"1\":{\"910\":1}}],[\"可以将比较器传递给排序方法\",{\"1\":{\"735\":1}}],[\"可以将某个具体的版本打上一个标签\",{\"1\":{\"501\":1}}],[\"可以将商品的库存进行\",{\"1\":{\"221\":1}}],[\"可以将表按字段切开\",{\"1\":{\"129\":1}}],[\"可以将\",{\"1\":{\"24\":1}}],[\"可以利用jvm提供的\",{\"1\":{\"651\":1}}],[\"可以利用bigdecimal对超出16位有效数字的货币值\",{\"1\":{\"445\":1}}],[\"可以利用他处理csv格式数据\",{\"1\":{\"25\":1}}],[\"可以利用\",{\"1\":{\"24\":1,\"650\":1}}],[\"可以和内存中的小表进行逐一匹配\",{\"1\":{\"23\":1}}],[\"可以在队列中等待\",{\"1\":{\"751\":1}}],[\"可以在云环境建立起具有可信保障的多层隔离防线\",{\"1\":{\"699\":1}}],[\"可以在有需要时重用\",{\"1\":{\"624\":1}}],[\"可以在客户端被还原\",{\"1\":{\"522\":1}}],[\"可以在远程服务器gitlab上创建一个目录\",{\"1\":{\"497\":1}}],[\"可以在这些应用程序之间提供一个隔离方法\",{\"1\":{\"65\":1}}],[\"可以在\",{\"1\":{\"23\":2,\"408\":1,\"857\":1}}],[\"可以通过精准推送来提升用户的留存感\",{\"1\":{\"785\":1}}],[\"可以通过runtime\",{\"1\":{\"769\":1}}],[\"可以通过shutdown\",{\"1\":{\"764\":1}}],[\"可以通过线程工厂给每个创建出来的线程设置更有意义的名字\",{\"1\":{\"760\":1}}],[\"可以通过设置合理分配\",{\"1\":{\"752\":1}}],[\"可以通过参数true设为公平锁\",{\"1\":{\"703\":1}}],[\"可以通过classloader\",{\"1\":{\"558\":1}}],[\"可以通过回调的方式处理计算结果\",{\"1\":{\"475\":1}}],[\"可以通过配置项\",{\"1\":{\"417\":1}}],[\"可以通过命令\",{\"1\":{\"251\":1}}],[\"可以通过watch临时节点来监控其他客户端的情况\",{\"1\":{\"214\":1}}],[\"可以通过\",{\"1\":{\"22\":1,\"119\":1,\"854\":3,\"923\":1}}],[\"可以通过创建视图来限制数据访问\",{\"1\":{\"20\":1}}],[\"可以修改当前工作数据库为默认数据库\",{\"1\":{\"21\":1}}],[\"可以得出hbase是强一致性系统的结论\",{\"1\":{\"199\":1}}],[\"可以得出\",{\"1\":{\"17\":1}}],[\"以降低多次锁请求\",{\"1\":{\"924\":1}}],[\"以降低短时间内大量锁请求\",{\"1\":{\"924\":1}}],[\"以对象取代数组\",{\"1\":{\"915\":1}}],[\"以保持自己的生命力\",{\"1\":{\"898\":1}}],[\"以保证操作最大程度的独占性\",{\"1\":{\"725\":1}}],[\"以保证系统稳定\",{\"1\":{\"720\":1}}],[\"以保证session会话\",{\"1\":{\"301\":1}}],[\"以保证数据最终一致\",{\"1\":{\"192\":1}}],[\"以字符为单位\",{\"1\":{\"836\":1}}],[\"以字节为单位\",{\"1\":{\"836\":1}}],[\"以字节为基本单位\",{\"1\":{\"538\":1}}],[\"以tcp\",{\"1\":{\"799\":1}}],[\"以tsvb为例\",{\"1\":{\"285\":1}}],[\"以备不时之需以及重复使用\",{\"1\":{\"750\":1}}],[\"以便对排序顺序进行精确控制\",{\"1\":{\"735\":1}}],[\"以便传输\",{\"1\":{\"543\":1}}],[\"以mysql\",{\"1\":{\"728\":1}}],[\"以m为单位\",{\"1\":{\"74\":1}}],[\"以表示这个对象偏向于当前线程\",{\"1\":{\"723\":1}}],[\"以实时把控我们的服务器性能是否在安全范围\",{\"1\":{\"720\":1}}],[\"以世界容错组织为代表\",{\"1\":{\"686\":1}}],[\"以近代cpu的视角来说\",{\"1\":{\"662\":1}}],[\"以共享的\",{\"1\":{\"657\":1}}],[\"以分布式的方式管理应用程序\",{\"1\":{\"653\":1}}],[\"以传递性依赖的形式引入到当前的项目中\",{\"1\":{\"594\":1}}],[\"以后每次的备份只需备份与前一次相比增加或者被修改的文件\",{\"1\":{\"889\":1}}],[\"以后再给苏珊写信\",{\"1\":{\"705\":1}}],[\"以后一直不再使用这个对象\",{\"1\":{\"558\":1}}],[\"以后客户端和服务端的通信就可以通过这个随机值来进行加密解密了\",{\"1\":{\"522\":1}}],[\"以加快查找的速度\",{\"1\":{\"506\":1}}],[\"以预先调用所有事件以填充ringbuffer\",{\"1\":{\"472\":1}}],[\"以前需要逐个节点地询问\",{\"1\":{\"453\":1}}],[\"以利用bigdecimal对货币和百分比格式化为例\",{\"1\":{\"445\":1}}],[\"以原子方式递减当前值\",{\"1\":{\"444\":1}}],[\"以原子方式递增当前值\",{\"1\":{\"441\":1,\"444\":2}}],[\"以原子方式将给定值与当前值相加\",{\"1\":{\"444\":2}}],[\"以info起始\",{\"1\":{\"414\":1}}],[\"以ip地址来代替mac地址\",{\"1\":{\"208\":1}}],[\"以整数形式字符串表示\",{\"1\":{\"412\":1}}],[\"以k为单位\",{\"1\":{\"317\":1}}],[\"以key\",{\"1\":{\"263\":2}}],[\"以同样的方式启动web02\",{\"1\":{\"262\":1}}],[\"以守护态运行\",{\"1\":{\"241\":1}}],[\"以服务的方式部署\",{\"1\":{\"206\":1}}],[\"以承办担保机构为单位核算\",{\"1\":{\"189\":1}}],[\"以合作银行省级分行\",{\"1\":{\"189\":1}}],[\"以确保农民工能够按时足额地领取到自己的工资\",{\"1\":{\"184\":1}}],[\"以确保最终只会生成一个数据文件\",{\"1\":{\"43\":1}}],[\"以该行或其指定的银行为付款人\",{\"1\":{\"176\":1}}],[\"以此来保证他们会按照约定履行还款义务\",{\"1\":{\"168\":1}}],[\"以此来解决键冲突\",{\"1\":{\"125\":1}}],[\"以指导和约束融资担保行业的行为\",{\"1\":{\"166\":1}}],[\"以增强担保人信用\",{\"1\":{\"163\":1}}],[\"以散列表的键作为\",{\"1\":{\"160\":1}}],[\"以提供内存密度\",{\"1\":{\"157\":1}}],[\"以\",{\"1\":{\"155\":1,\"160\":1,\"161\":1,\"214\":1,\"307\":1,\"343\":1,\"687\":1,\"844\":1}}],[\"以避免\",{\"1\":{\"214\":1}}],[\"以避免与存款单市场竞争\",{\"1\":{\"186\":1}}],[\"以避免可能产生的阻塞\",{\"1\":{\"149\":1}}],[\"以避免线上服务的中断\",{\"1\":{\"141\":1}}],[\"以上就是docker的简单入门操作\",{\"1\":{\"243\":1}}],[\"以上版本的客户端\",{\"1\":{\"161\":1}}],[\"以上的代码\",{\"1\":{\"155\":1}}],[\"以上的优化就叫\",{\"1\":{\"131\":1}}],[\"以上操作进行的优化就叫水平分表\",{\"1\":{\"132\":1}}],[\"以上这种优化就叫\",{\"1\":{\"130\":1}}],[\"以上这种优化操作\",{\"1\":{\"129\":1}}],[\"以及读线程和写线程之间的竞争\",{\"1\":{\"818\":1}}],[\"以及对中断异常的处理\",{\"1\":{\"768\":1}}],[\"以及来自外部系统的事务处理\",{\"1\":{\"725\":1}}],[\"以及其他如semaphore\",{\"1\":{\"723\":1}}],[\"以及所有的基于lock接口的实现类\",{\"1\":{\"723\":1}}],[\"以及系统恢复\",{\"1\":{\"704\":1}}],[\"以及优化数据访问\",{\"1\":{\"657\":1}}],[\"以及多用租户的方式使用集群的资源\",{\"1\":{\"657\":1}}],[\"以及它们的资源消耗\",{\"1\":{\"655\":1}}],[\"以及初始序号x\",{\"1\":{\"648\":1}}],[\"以及功能方面的要求\",{\"1\":{\"617\":1}}],[\"以及添加空字符到字符串末尾等操作都是由\",{\"1\":{\"616\":1}}],[\"以及前面的所有数据\",{\"1\":{\"456\":1}}],[\"以及一般数值进行格式化控制\",{\"1\":{\"445\":1}}],[\"以及一些资源时间的浪费\",{\"1\":{\"305\":1}}],[\"以及各种页面的处理情况\",{\"1\":{\"305\":1}}],[\"以及从这些元素生成uuid的算法\",{\"1\":{\"208\":1}}],[\"以及发行人的财务能力\",{\"1\":{\"177\":1}}],[\"以及创业创新企业\",{\"1\":{\"167\":1}}],[\"以及支持政策制定\",{\"1\":{\"166\":1}}],[\"以及防止欺诈和不当操作\",{\"1\":{\"166\":1}}],[\"以及并集命令和交集命令\",{\"0\":{\"138\":1}}],[\"以及字典的实现\",{\"1\":{\"123\":1}}],[\"以及链表长度等信息\",{\"1\":{\"121\":1}}],[\"以及链表长度计数器\",{\"1\":{\"119\":1}}],[\"以及使用链表来构建客户端输出缓冲区\",{\"1\":{\"118\":1}}],[\"以及顺序性的节点访问方式\",{\"1\":{\"118\":1}}],[\"以及实现其他目的\",{\"1\":{\"21\":1}}],[\"以小写存储\",{\"1\":{\"82\":1}}],[\"以防止承包商在收到业主的预付款后将款项挪作他用或宣布破产等\",{\"1\":{\"182\":1}}],[\"以防止彼此的操作互相干扰\",{\"1\":{\"65\":1}}],[\"以防止内存使用过多或者磁盘上文件过多\",{\"1\":{\"46\":1}}],[\"以图搜图的含义是用一张图片搜索与其相似的图片并进行展示\",{\"1\":{\"58\":1}}],[\"以下简称承办银行\",{\"1\":{\"189\":1}}],[\"以下简称承办担保机构\",{\"1\":{\"189\":1}}],[\"以下简称银行分行\",{\"1\":{\"189\":1}}],[\"以下简称省级再担保机构\",{\"1\":{\"189\":1}}],[\"以下将阐述两者涉及的配置选项\",{\"1\":{\"140\":1}}],[\"以下展示的\",{\"1\":{\"118\":1}}],[\"以下的语句返回的值会不相同\",{\"1\":{\"24\":1}}],[\"以下为springboot整合elasticsearch\",{\"1\":{\"3\":1}}],[\"以供访问\",{\"1\":{\"20\":1}}],[\"而全局数据是邪恶的东西\",{\"1\":{\"910\":1}}],[\"而减少冗长复杂的函数\",{\"1\":{\"904\":1}}],[\"而代码结构使你无法方便的达到目的\",{\"1\":{\"898\":1}}],[\"而要以后花时间来重构呢\",{\"1\":{\"898\":1}}],[\"而exclusivecount方法是将同步状态\",{\"1\":{\"820\":1}}],[\"而实现写锁的同步语义是通过重写\",{\"1\":{\"820\":1}}],[\"而实际数据文件每行记录包含有\",{\"1\":{\"25\":1}}],[\"而如果在这种业务场景下\",{\"1\":{\"818\":1}}],[\"而如果是可重入锁\",{\"1\":{\"815\":1}}],[\"而顺序一致性模型保证对所有的内存读\",{\"1\":{\"809\":1}}],[\"而对实时统计任务则不适合\",{\"1\":{\"781\":1}}],[\"而对象里非\",{\"1\":{\"723\":1}}],[\"而无法知道每个细枝末节\",{\"1\":{\"898\":1}}],[\"而无需编译器的帮助\",{\"1\":{\"714\":1}}],[\"而无须执行内存重分配\",{\"1\":{\"621\":1}}],[\"而无须为\",{\"1\":{\"616\":1}}],[\"而其它获取锁的线程只能处于同步队列中等待\",{\"1\":{\"702\":1}}],[\"而其他的进程就有可能来争抢这把锁\",{\"1\":{\"220\":1}}],[\"而忽略外部关系\",{\"1\":{\"683\":1}}],[\"而忽略之后的\",{\"1\":{\"623\":1}}],[\"而后才是core2从主存重新读取该地址内容\",{\"1\":{\"663\":1}}],[\"而数据高速缓存保存要在其上执行操作的数据\",{\"1\":{\"662\":1}}],[\"而b和c要开始\",{\"1\":{\"659\":1}}],[\"而b+树的查询效率比较稳定\",{\"1\":{\"102\":1}}],[\"而b+树的的所有节点皆遵循\",{\"1\":{\"102\":1}}],[\"而b+树在符合某些条件\",{\"1\":{\"102\":1}}],[\"而tomcat的工作线程是基于线程池的\",{\"1\":{\"650\":1}}],[\"而stringbuilder和stringbuffer均为字符串变量\",{\"1\":{\"629\":1}}],[\"而一旦这个假定不成立时\",{\"1\":{\"619\":1}}],[\"而最后一个字节则保存了空字符\",{\"1\":{\"616\":1}}],[\"而最慢的消费者在\",{\"1\":{\"457\":1}}],[\"而直接编辑maven\",{\"1\":{\"576\":1}}],[\"而直接进行访问的数据结构\",{\"1\":{\"506\":1}}],[\"而中文字符是无法读取的\",{\"1\":{\"541\":1}}],[\"而消费者也只从容器里拿元素\",{\"1\":{\"530\":1}}],[\"而26主机在16\",{\"1\":{\"526\":1}}],[\"而正好客户端和服务端都知道这个私钥\",{\"1\":{\"522\":1}}],[\"而使用受信任的公司申请的证书则不会弹出提示页面\",{\"1\":{\"522\":1}}],[\"而使用url\",{\"1\":{\"305\":1}}],[\"而地址集合的元素仅为哈希表中的地址值\",{\"1\":{\"506\":1}}],[\"而cyclicbarrier则是允许n个线程相互等待\",{\"1\":{\"446\":1}}],[\"而必须调用其相对应的方法\",{\"1\":{\"445\":1}}],[\"而应用内部推荐异常抛出\",{\"1\":{\"413\":1}}],[\"而我们就把这种规则称为协议\",{\"1\":{\"638\":1}}],[\"而我们只需要增加namespace为dev的yaml文件\",{\"1\":{\"410\":1}}],[\"而我们有熟知cgroups是linux内核提供的一种可以限制\",{\"1\":{\"250\":1}}],[\"而root可以存在server\",{\"1\":{\"317\":1}}],[\"而docker容器只需要50毫秒\",{\"1\":{\"232\":1}}],[\"而异步削峰只是基本操作\",{\"1\":{\"221\":1}}],[\"而在于函数\",{\"1\":{\"910\":1}}],[\"而在jmm\",{\"1\":{\"809\":1}}],[\"而在释放锁的时候\",{\"1\":{\"220\":1}}],[\"而在间接融资中\",{\"1\":{\"172\":1}}],[\"而此时原来获得锁的进程也在同时运行\",{\"1\":{\"220\":1}}],[\"而这些工作只会花费很少的时间\",{\"1\":{\"924\":1}}],[\"而这些字节的数量就由\",{\"1\":{\"620\":1}}],[\"而这样会导致全局数据的不一致性\",{\"1\":{\"201\":1}}],[\"而这种数据还没有提交到数据库中\",{\"1\":{\"72\":1}}],[\"而看上去却好像是在一个可以运转正常的整体\",{\"1\":{\"195\":1}}],[\"而是成为一种制约\",{\"1\":{\"898\":1}}],[\"而是仅仅改变了软件的实现方式\",{\"1\":{\"898\":1}}],[\"而是返回内存池\",{\"1\":{\"751\":1}}],[\"而是直接从内存池中获取\",{\"1\":{\"751\":1}}],[\"而是一种实现\",{\"1\":{\"729\":1}}],[\"而是一行缓存行\",{\"1\":{\"662\":1}}],[\"而是会做以下的步骤\",{\"1\":{\"673\":1}}],[\"而是在不保留报文边界的情况下以字节流方式进行传输\",{\"1\":{\"644\":1}}],[\"而是用它来保存一系列二进制数据\",{\"1\":{\"623\":1}}],[\"而是将这\",{\"1\":{\"622\":1}}],[\"而是将其委派给父类\",{\"1\":{\"558\":1}}],[\"而是使用\",{\"1\":{\"622\":1}}],[\"而是git的版本库\",{\"1\":{\"490\":1}}],[\"而是暂存当前匹配的结果\",{\"1\":{\"307\":1}}],[\"而是需要手工为docker容器添加网卡\",{\"1\":{\"250\":1}}],[\"而是和指定的docker容器共享ip和端口等信息\",{\"1\":{\"250\":1}}],[\"而是和宿主机共享ip和端口等信息\",{\"1\":{\"250\":1}}],[\"而是存储时间截的差值\",{\"1\":{\"205\":1}}],[\"而是隔一段时间检查库存\",{\"1\":{\"202\":1}}],[\"而是分别与金融机构发生一笔独立的交易\",{\"1\":{\"171\":1}}],[\"而是提供了多种事务管理器\",{\"1\":{\"72\":1}}],[\"而是提供给用户一个通过where子句限制了的视图\",{\"1\":{\"20\":1}}],[\"而店铺信息相对独立\",{\"1\":{\"130\":1}}],[\"而大字段占用空间大\",{\"1\":{\"129\":1}}],[\"而每个哈希表节点就保存了字典中的一个键值对\",{\"1\":{\"123\":1}}],[\"而\",{\"1\":{\"119\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"221\":1,\"317\":1,\"475\":1,\"522\":1,\"619\":1,\"651\":1,\"723\":1,\"809\":2}}],[\"而int的10只是代表了展示的长度\",{\"1\":{\"115\":1}}],[\"而不可以传给多于一个下家\",{\"1\":{\"825\":1}}],[\"而不能保存像图片\",{\"1\":{\"623\":1}}],[\"而不要求高吞吐量和低延迟的时候使用这个策略\",{\"1\":{\"464\":1,\"472\":1}}],[\"而不需要重新编译所有文件\",{\"1\":{\"563\":1}}],[\"而不需要等待计算结果\",{\"1\":{\"473\":1}}],[\"而不需要每个资金盈余者自己去搜集资金赤字者的有关信息\",{\"1\":{\"172\":1}}],[\"而不需要使用hash索引\",{\"1\":{\"102\":1}}],[\"而不是将线程销毁\",{\"1\":{\"751\":1}}],[\"而不是将数据库表直接对外公开\",{\"1\":{\"731\":1}}],[\"而不是已拥有了锁则不能继续获取\",{\"1\":{\"723\":1}}],[\"而不是像synchronized要么随机唤醒一个线程要么唤醒全部线程\",{\"1\":{\"703\":1}}],[\"而不是哈希值了\",{\"1\":{\"501\":1}}],[\"而不是\",{\"1\":{\"454\":1,\"618\":1,\"623\":1}}],[\"而不是实现\",{\"1\":{\"381\":1}}],[\"而不是出现在select\",{\"1\":{\"100\":1}}],[\"而不是使用类型转换操作符cast\",{\"1\":{\"24\":1}}],[\"而具有多个\",{\"1\":{\"100\":1}}],[\"而分子表示将会选择的桶的个数\",{\"1\":{\"24\":1}}],[\"而且一旦需要更多数据\",{\"1\":{\"910\":1}}],[\"而且在事先并不知道到底由哪一个处理者对象处理一个请求\",{\"1\":{\"825\":1}}],[\"而且在传递过程中可能有损失\",{\"1\":{\"684\":1}}],[\"而且由于其硬件实现安全防护\",{\"1\":{\"687\":1}}],[\"而且这种可信赖还是可论证的\",{\"1\":{\"684\":1}}],[\"而且这种冲突只能尽可能的减少\",{\"1\":{\"506\":1}}],[\"而且执行的速度比没有设置的时候快很多\",{\"1\":{\"651\":1}}],[\"而且并不是所有人的web站点的流量都是一样的\",{\"1\":{\"651\":1}}],[\"而且实际测试\",{\"1\":{\"486\":1}}],[\"而且也不能及时地得到计算结果\",{\"1\":{\"475\":1}}],[\"而且没有其他人正在写入ringbuffer\",{\"1\":{\"456\":1}}],[\"而且不用加锁使得速度更快\",{\"1\":{\"453\":1}}],[\"而且消费者对这些节点的唯一操作是读而不是写\",{\"1\":{\"453\":1}}],[\"而且大多数的网站会做cdn缓存\",{\"1\":{\"222\":1}}],[\"而且获取到了锁资源\",{\"1\":{\"219\":1}}],[\"而且要保证服务可用性达到n个9\",{\"1\":{\"202\":1}}],[\"而且现在的集群规模越来越大\",{\"1\":{\"202\":1}}],[\"而且是正常响应时间\",{\"1\":{\"194\":1}}],[\"而且影响索引的性能\",{\"1\":{\"88\":1}}],[\"而且插入阿拉伯数字有问题\",{\"1\":{\"86\":1}}],[\"而且可以提高扫描速度\",{\"1\":{\"27\":1}}],[\"而且对应的每个字段的字段类型必须是一致的\",{\"1\":{\"24\":1}}],[\"而且数据是按照\",{\"1\":{\"23\":1}}],[\"而且其中一张表的分桶的个数必须是另一张表分桶个数的若干倍\",{\"1\":{\"23\":1}}],[\"而且有时还可以同时减少\",{\"1\":{\"23\":1}}],[\"而树的层次可以这么划分\",{\"1\":{\"14\":1}}],[\"也许就像古代的恋人一样\",{\"1\":{\"923\":1}}],[\"也许还可以使用\",{\"1\":{\"920\":1}}],[\"也许有人会问\",{\"1\":{\"898\":1}}],[\"也很容易忘记某个重要的修改\",{\"1\":{\"912\":1}}],[\"也应毫不犹豫地那么做\",{\"1\":{\"910\":1}}],[\"也应该在对象自己的数据上使用而不是在别人的数据上使用\",{\"1\":{\"905\":1}}],[\"也行这个程序还没坏\",{\"1\":{\"898\":1}}],[\"也只有数据库层提供的锁机制才能真正保证数据访问的排他性\",{\"1\":{\"725\":1}}],[\"也无法保证外部系统不会修改数据\",{\"1\":{\"725\":1}}],[\"也无法解密\",{\"1\":{\"705\":1}}],[\"也无法使用索引\",{\"1\":{\"112\":1}}],[\"也叫做递归锁\",{\"1\":{\"702\":1}}],[\"也叫哈希表\",{\"1\":{\"506\":1}}],[\"也有可能是做偏向撤销\",{\"1\":{\"673\":1}}],[\"也有可能在初始化之后\",{\"1\":{\"558\":1,\"563\":1}}],[\"也同时说明所有被创建的对象的偏向锁并没有生效\",{\"1\":{\"673\":1}}],[\"也进入established\",{\"1\":{\"648\":1}}],[\"也提供了相应的\",{\"1\":{\"622\":1}}],[\"也提供了转换和组合\",{\"1\":{\"475\":1}}],[\"也是代码重复\",{\"1\":{\"910\":1}}],[\"也是一个\",{\"1\":{\"706\":1}}],[\"也是最慢的缓存单元\",{\"1\":{\"662\":1}}],[\"也是以先进先出的方式存储数据\",{\"1\":{\"532\":1}}],[\"也是可以存储的数据的最大长度\",{\"1\":{\"115\":1}}],[\"也束手无策\",{\"1\":{\"522\":1}}],[\"也会做出限制\",{\"1\":{\"433\":1}}],[\"也会索引进行更新\",{\"1\":{\"82\":1}}],[\"也并非高枕无忧\",{\"1\":{\"413\":1}}],[\"也不受内存模型的影响\",{\"1\":{\"809\":1}}],[\"也不是巧合\",{\"1\":{\"619\":1}}],[\"也不会出现前面所说的缓冲区溢出问题\",{\"1\":{\"619\":1}}],[\"也不会对系统性能造成任何影响\",{\"1\":{\"618\":1}}],[\"也不会对请求进行格式化\",{\"1\":{\"515\":1}}],[\"也不需要用另外的队列来协调不同的线程\",{\"1\":{\"453\":1}}],[\"也不利\",{\"1\":{\"413\":1}}],[\"也不要创建函数索引\",{\"1\":{\"82\":1}}],[\"也请分享我\",{\"1\":{\"410\":1}}],[\"也就说明这个分区里至少都写入了接近\",{\"1\":{\"433\":1}}],[\"也就没有\",{\"1\":{\"381\":1}}],[\"也就是current\",{\"1\":{\"799\":1}}],[\"也就是上面注册的回调函数\",{\"1\":{\"799\":1}}],[\"也就是将在\",{\"1\":{\"774\":1}}],[\"也就是三种不同的锁\",{\"1\":{\"723\":1}}],[\"也就是我们刚才在问题二中所阐述的获取\",{\"1\":{\"723\":1}}],[\"也就是简单判断一下当前线程id是否与markword当中的线程id是否一致\",{\"1\":{\"673\":1}}],[\"也就是一个单词\",{\"1\":{\"652\":1}}],[\"也就是通过一组坐标maven能够找到任何一个java类库\",{\"1\":{\"569\":1}}],[\"也就是把我们的数据永久的存放到计算机当中\",{\"1\":{\"543\":1}}],[\"也就是主机数还有3位可用\",{\"1\":{\"526\":1}}],[\"也就是用来获取当前生产者的实时位置\",{\"1\":{\"472\":1}}],[\"也就是同一个资源请求\",{\"1\":{\"305\":1}}],[\"也就是expose命令暴露的端口\",{\"1\":{\"251\":1}}],[\"也就是每个容器通过ifconfig查询到的ip地址是一样的\",{\"1\":{\"250\":1}}],[\"也就是dockerfile所在的context\",{\"1\":{\"243\":1}}],[\"也就是离自己最近\",{\"1\":{\"222\":1}}],[\"也就是设置这个dns解析在local\",{\"1\":{\"222\":1}}],[\"也就是先调用\",{\"1\":{\"217\":1}}],[\"也就是在极端环境下\",{\"1\":{\"198\":1}}],[\"也就是说这个读写过程是阻塞的\",{\"1\":{\"808\":1}}],[\"也就是说这些数据一直存放在buffer中\",{\"1\":{\"452\":1}}],[\"也就是说信任有程度之分\",{\"1\":{\"684\":1}}],[\"也就是说每个线程有一个自己的\",{\"1\":{\"650\":1}}],[\"也就是说他们共同的子网掩码二进制前面22个都是1\",{\"1\":{\"526\":1}}],[\"也就是说\",{\"1\":{\"66\":1,\"115\":1,\"202\":1,\"458\":1,\"483\":1,\"506\":1,\"638\":1,\"640\":1,\"651\":1}}],[\"也就是指标建\",{\"1\":{\"25\":1}}],[\"也就是执行一个局部排序过程\",{\"1\":{\"23\":1}}],[\"也就是\",{\"1\":{\"23\":1,\"221\":2,\"255\":1,\"485\":1}}],[\"也就是不给用户直接访问具有敏感数据的原始表\",{\"1\":{\"20\":1}}],[\"也表示前缀匹配\",{\"1\":{\"306\":1}}],[\"也称传彩球\",{\"1\":{\"825\":1}}],[\"也称为序列或游标\",{\"1\":{\"452\":1}}],[\"也称\",{\"1\":{\"214\":1}}],[\"也支持watch一个范围的key\",{\"1\":{\"214\":1}}],[\"也支持\",{\"1\":{\"214\":1}}],[\"也更能切合公司的融资需求\",{\"1\":{\"178\":1}}],[\"也即是第一次获取锁时的操作\",{\"1\":{\"673\":1}}],[\"也即是\",{\"1\":{\"124\":1,\"621\":1}}],[\"也要优先考虑创建排序索引和分组索引\",{\"1\":{\"82\":1}}],[\"也要避免使用union\",{\"1\":{\"82\":1}}],[\"也可组合应用\",{\"1\":{\"874\":1}}],[\"也可利用zookeeper\",{\"1\":{\"207\":1}}],[\"也可能会使\",{\"1\":{\"100\":1}}],[\"也可能开启一个新事务\",{\"1\":{\"72\":1}}],[\"也可以由拦截并重发该数据的敌方进行\",{\"1\":{\"897\":1}}],[\"也可以由经销商代为发售\",{\"1\":{\"186\":1}}],[\"也可以使用右斜杠\",{\"1\":{\"883\":1}}],[\"也可以使用\",{\"1\":{\"883\":1}}],[\"也可以使用退化的算法\",{\"1\":{\"208\":1}}],[\"也可以修改参数文件中的值\",{\"1\":{\"854\":2}}],[\"也可以相互转换\",{\"1\":{\"843\":1}}],[\"也可以相互依赖形成处理的先后次序\",{\"1\":{\"448\":1}}],[\"也可以直接手工编辑该文件\",{\"1\":{\"842\":1}}],[\"也可以关闭数据库服务器的防火墙\",{\"1\":{\"839\":1}}],[\"也可以采用stream进行处理\",{\"1\":{\"735\":1}}],[\"也可以缓存一段时间以便一次发送更多的数据段\",{\"1\":{\"644\":1}}],[\"也可以叫同步点\",{\"1\":{\"552\":1}}],[\"也可以在浮点数值后面添加后缀\",{\"1\":{\"549\":1}}],[\"也可以设置成一个大网段\",{\"1\":{\"526\":1}}],[\"也可以设置密码\",{\"1\":{\"63\":1}}],[\"也可以向组织申请\",{\"1\":{\"522\":1}}],[\"也可以是其他方式\",{\"1\":{\"897\":1}}],[\"也可以是其它银行\",{\"1\":{\"176\":1}}],[\"也可以是增量备份\",{\"1\":{\"889\":1}}],[\"也可以是一个环\",{\"1\":{\"825\":1}}],[\"也可以是浮点数\",{\"1\":{\"25\":1}}],[\"也可以通过redis的过期时间\",{\"1\":{\"139\":1}}],[\"也可以\",{\"1\":{\"24\":1}}],[\"也可以用\",{\"1\":{\"22\":1,\"652\":1}}],[\"也可以写成全路径\",{\"1\":{\"22\":1}}],[\"也成为copy\",{\"1\":{\"45\":1}}],[\"也负责为系统客户端提供数据块的读写服务\",{\"1\":{\"17\":1}}],[\"允许传给链结构的起点\",{\"1\":{\"825\":1}}],[\"允许传递null参数\",{\"1\":{\"527\":1}}],[\"允许创建的最大线程数\",{\"1\":{\"756\":1}}],[\"允许的最大连接数还受制于操作系统的内核参数设置\",{\"1\":{\"651\":1}}],[\"允许一个或多个线程等待其他线程完成操作\",{\"1\":{\"551\":1}}],[\"允许feign开启熔断器\",{\"1\":{\"396\":1,\"404\":1,\"416\":1}}],[\"允许生成worker\",{\"1\":{\"305\":1}}],[\"允许容器内标准输入\",{\"1\":{\"241\":1}}],[\"允许多个处理着处理最终处理这个命令\",{\"1\":{\"825\":1}}],[\"允许多个\",{\"1\":{\"141\":1}}],[\"允许使用任意一种持久化方法\",{\"1\":{\"140\":1}}],[\"允许\",{\"1\":{\"93\":1}}],[\"允许null值\",{\"1\":{\"74\":1}}],[\"允许将视图作为一个安全机制\",{\"1\":{\"20\":1}}],[\"允许新段被写入和打开\",{\"1\":{\"4\":1}}],[\"简化函数调用\",{\"1\":{\"914\":1}}],[\"简化逻辑\",{\"1\":{\"906\":1}}],[\"简化成一句话\",{\"1\":{\"543\":1}}],[\"简化了查询语句\",{\"1\":{\"20\":1}}],[\"简单自旋锁的实现\",{\"0\":{\"814\":1}}],[\"简单例子\",{\"1\":{\"809\":1}}],[\"简单动态字符串\",{\"0\":{\"614\":1,\"615\":1}}],[\"简单\",{\"1\":{\"413\":1,\"788\":1}}],[\"简单来说就是一种发布和接收\",{\"1\":{\"520\":1}}],[\"简单来说\",{\"1\":{\"217\":1}}],[\"简单点说\",{\"1\":{\"195\":1}}],[\"简单的处理方法\",{\"1\":{\"734\":1}}],[\"简单的讲就是另启一个线程来完成调用中的部分计算\",{\"1\":{\"473\":1}}],[\"简单的说\",{\"1\":{\"222\":1}}],[\"简单的配置文件注释\",{\"1\":{\"74\":1}}],[\"简单的一致性模型\",{\"1\":{\"15\":1}}],[\"简称ca\",{\"1\":{\"705\":1}}],[\"简称cctld\",{\"1\":{\"222\":1}}],[\"简称\",{\"1\":{\"167\":1}}],[\"简称nfgf\",{\"1\":{\"167\":1}}],[\"简书\",{\"1\":{\"113\":1}}],[\"简介\",{\"0\":{\"607\":1},\"1\":{\"63\":1}}],[\"简述上述过程\",{\"1\":{\"37\":1}}],[\"更进一步的是\",{\"1\":{\"915\":1}}],[\"更流畅\",{\"1\":{\"907\":1}}],[\"更改consumer类中获取积分\",{\"1\":{\"903\":1}}],[\"更改调用处\",{\"1\":{\"902\":1}}],[\"更改方法名\",{\"1\":{\"902\":1}}],[\"更改amountfor中的变量名\",{\"0\":{\"901\":1}}],[\"更改用户\",{\"1\":{\"831\":1}}],[\"更改或者新增的文件\",{\"1\":{\"503\":1}}],[\"更多的是直接使用非公平锁\",{\"1\":{\"674\":1}}],[\"更多实例\",{\"1\":{\"669\":1}}],[\"更多用\",{\"1\":{\"29\":1}}],[\"更密集\",{\"1\":{\"662\":1}}],[\"更加简洁的图片\",{\"1\":{\"647\":1}}],[\"更容易放弃cpu\",{\"1\":{\"472\":1}}],[\"更容易放弃cpu该策略在高性能与cpu资源之间取舍的折中方案\",{\"1\":{\"471\":1}}],[\"更不允许抛出\",{\"1\":{\"413\":1}}],[\"更是为了降低资金损失的风险\",{\"1\":{\"168\":1}}],[\"更负责任的方向发展\",{\"1\":{\"166\":1}}],[\"更大的设置可以提高性能\",{\"1\":{\"74\":1}}],[\"更快\",{\"1\":{\"21\":1,\"662\":1}}],[\"更可控的片段可以降低这种复杂度\",{\"1\":{\"20\":1}}],[\"更新数据库魔数\",{\"1\":{\"893\":1}}],[\"更新频率和检查文件策略\",{\"1\":{\"603\":1}}],[\"更新子模块\",{\"1\":{\"502\":1}}],[\"更新成\",{\"1\":{\"455\":1}}],[\"更新后的值\",{\"1\":{\"444\":1}}],[\"更新的值\",{\"1\":{\"441\":1,\"444\":3}}],[\"更新yum\",{\"1\":{\"319\":1}}],[\"更新yum软件包索引\",{\"0\":{\"227\":1}}],[\"更新项目配置文件\",{\"0\":{\"278\":1}}],[\"更新过的数据在不同进程如何获取的不同策略\",{\"1\":{\"192\":1}}],[\"更新时间\",{\"1\":{\"64\":1}}],[\"更新者\",{\"1\":{\"64\":1}}],[\"更新操作和删除操作\",{\"1\":{\"21\":1}}],[\"更新\",{\"1\":{\"3\":3,\"456\":1}}],[\"写脏块\",{\"1\":{\"859\":1}}],[\"写状态是由同步状态的低16位表示的\",{\"1\":{\"821\":1}}],[\"写锁释放通过重写aqs的tryrelease方法\",{\"1\":{\"821\":1}}],[\"写锁的释放\",{\"0\":{\"821\":1}}],[\"写锁的获取\",{\"0\":{\"820\":1}}],[\"写锁失败\",{\"1\":{\"820\":1}}],[\"写锁\",{\"1\":{\"820\":5}}],[\"写锁是独占式锁\",{\"1\":{\"820\":1}}],[\"写锁能够降级成为读锁\",{\"1\":{\"819\":1,\"824\":1}}],[\"写锁获取之后能够再次获取写锁\",{\"1\":{\"819\":1}}],[\"写不能共存\",{\"1\":{\"818\":2}}],[\"写数据很少\",{\"1\":{\"818\":1}}],[\"写数据时候通过负载均衡\",{\"1\":{\"19\":1}}],[\"写内存中一个或多个物理上连续的字\",{\"1\":{\"809\":1}}],[\"写事务从处理器传送数据到内存\",{\"1\":{\"809\":1}}],[\"写操作都具有原子性\",{\"1\":{\"809\":1}}],[\"写操作都会成功\",{\"1\":{\"214\":1}}],[\"写操作具有原子性\",{\"1\":{\"809\":1}}],[\"写缓冲区\",{\"1\":{\"809\":1}}],[\"写共享变量的副本\",{\"1\":{\"809\":1}}],[\"写一个main函数\",{\"0\":{\"709\":1}}],[\"写信给苏珊\",{\"1\":{\"705\":1}}],[\"写\",{\"1\":{\"472\":1,\"809\":1,\"818\":1}}],[\"写隔离\",{\"1\":{\"427\":1}}],[\"写法遵循\",{\"1\":{\"317\":1}}],[\"写命令\",{\"1\":{\"155\":2}}],[\"写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引\",{\"1\":{\"91\":1}}],[\"写入回滚段\",{\"1\":{\"863\":1}}],[\"写入字节流到文件\",{\"0\":{\"547\":1}}],[\"写入流\",{\"1\":{\"538\":1}}],[\"写入不需要的文件夹名或文件\",{\"1\":{\"504\":1}}],[\"写入数据后\",{\"1\":{\"456\":1}}],[\"写入硬盘\",{\"1\":{\"147\":1}}],[\"写入\",{\"1\":{\"140\":1,\"141\":1,\"214\":1,\"445\":1,\"454\":1}}],[\"写入更加高效\",{\"1\":{\"82\":1}}],[\"写入和打开一个新段的轻量的过程叫做\",{\"1\":{\"4\":1}}],[\"写比例进行调整\",{\"1\":{\"74\":1}}],[\"其是一种\",{\"1\":{\"913\":1}}],[\"其主要指\",{\"1\":{\"911\":1,\"912\":1}}],[\"其内往往会出现太多实例变量\",{\"1\":{\"910\":1}}],[\"其次永远不变的就是变化\",{\"1\":{\"898\":1}}],[\"其大概的过程如下\",{\"1\":{\"828\":1}}],[\"其大小由各个成员变量的大小决定\",{\"1\":{\"722\":2}}],[\"其核心实现就是\",{\"1\":{\"799\":1}}],[\"其本质是基于所谓的aqs框架\",{\"1\":{\"723\":1}}],[\"其本质都是一样的\",{\"1\":{\"218\":1}}],[\"其手段是采用精确的设计和质量控制方法尽量避免把故障引入系统\",{\"1\":{\"704\":1}}],[\"其对应的元数据对象\",{\"1\":{\"672\":1}}],[\"其初始空间\",{\"1\":{\"651\":1}}],[\"其余动作完全由虚拟机主导和控制\",{\"1\":{\"558\":1,\"563\":1}}],[\"其参数表示屏障拦截的线程数量\",{\"1\":{\"552\":1}}],[\"其网络内可用的ip地址个数为多少\",{\"1\":{\"526\":1}}],[\"其一是在不同的branch之间进行切换\",{\"1\":{\"500\":1}}],[\"其sam\",{\"1\":{\"475\":1}}],[\"其标度为\",{\"1\":{\"445\":1}}],[\"其它异常处理\",{\"1\":{\"765\":1}}],[\"其它服务器ip\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"其它客户端只能等待\",{\"1\":{\"214\":1}}],[\"其作用是按块大小的倍数申请内存空间\",{\"1\":{\"317\":1}}],[\"其运行时间可能偶尔会超过我们设置的过期时间\",{\"1\":{\"220\":1}}],[\"其lease功能保证分布式锁的安全性\",{\"1\":{\"214\":1}}],[\"其会话所创建的临时性节点都会被删除\",{\"1\":{\"214\":1}}],[\"其实本质上就通过这种方式实现了可重入性\",{\"1\":{\"723\":1}}],[\"其实大部分的类都还没有被加载\",{\"1\":{\"711\":1}}],[\"其实大部分情况下\",{\"1\":{\"673\":1}}],[\"其实质是把类文件从硬盘读取到内存中\",{\"1\":{\"558\":1,\"563\":1}}],[\"其实是\",{\"1\":{\"712\":1}}],[\"其实是采用了默认大小为integer\",{\"1\":{\"532\":1}}],[\"其实是挺像的\",{\"1\":{\"234\":1}}],[\"其实就是建构在\",{\"1\":{\"522\":1}}],[\"其实舍弃的只是强一致性\",{\"1\":{\"202\":1}}],[\"其实\",{\"1\":{\"196\":1,\"703\":1,\"706\":1}}],[\"其成员以\",{\"1\":{\"158\":1}}],[\"其\",{\"1\":{\"155\":1,\"887\":1}}],[\"其工作机制取决于操作系统\",{\"1\":{\"147\":1}}],[\"其目的是为了解决单表数据量大的问题\",{\"1\":{\"132\":1}}],[\"其目标只有一个\",{\"1\":{\"50\":1}}],[\"其定义\",{\"1\":{\"129\":1}}],[\"其效率大于索引合并\",{\"1\":{\"101\":1}}],[\"其索引效果最差\",{\"1\":{\"100\":1}}],[\"其中的重量锁\",{\"1\":{\"926\":1}}],[\"其中statement\",{\"1\":{\"900\":1}}],[\"其中status状态含义如下\",{\"1\":{\"412\":1}}],[\"其中exclusive\",{\"1\":{\"820\":1}}],[\"其中r为曲线上的一点\",{\"1\":{\"738\":1}}],[\"其中classname\",{\"1\":{\"651\":1}}],[\"其中calendar实例因为cpu时间片切换时共享变量进行clear操作\",{\"1\":{\"626\":1}}],[\"其中第一个子元素modelversion指定了当前pom模型的版本\",{\"1\":{\"578\":1}}],[\"其中启动内置的zk用\",{\"1\":{\"564\":1}}],[\"其中最常用的是\",{\"1\":{\"497\":1}}],[\"其中最典型的就是很多分布式数据库\",{\"1\":{\"197\":1}}],[\"其中leader副本负责读写请求\",{\"1\":{\"432\":1}}],[\"其中分区路由可以简单理解成一个hash函数\",{\"1\":{\"430\":1}}],[\"其中状态的变化根据时间的顺序记录下来\",{\"1\":{\"428\":1}}],[\"其中上面两种等价于\",{\"1\":{\"419\":1}}],[\"其中nacos的namespace区分dev\",{\"1\":{\"410\":1}}],[\"其中namenode\",{\"1\":{\"15\":1}}],[\"其中参数含义为\",{\"1\":{\"398\":1,\"416\":1}}],[\"其中流程节点针对于单个bean\",{\"1\":{\"381\":1}}],[\"其中有节点的概念\",{\"1\":{\"214\":1}}],[\"其中省级再担保机构分担风险比例不低于贷款本息20\",{\"1\":{\"189\":1}}],[\"其中偏移量为start和偏移量为end的元素也会被保留\",{\"1\":{\"135\":1}}],[\"其中偏移量为start和偏移量为end\",{\"1\":{\"135\":1}}],[\"其中键值对的值可以是一个指针\",{\"1\":{\"125\":1}}],[\"其中包括长度\",{\"1\":{\"82\":1}}],[\"其中\",{\"1\":{\"33\":1,\"63\":1,\"214\":1,\"261\":1,\"370\":1,\"371\":1,\"372\":1,\"373\":1,\"426\":1,\"619\":2,\"621\":1,\"711\":1,\"749\":2}}],[\"其值是\",{\"1\":{\"24\":1}}],[\"其只会在每个\",{\"1\":{\"23\":1}}],[\"其可以将单列扩展成多列或者多行\",{\"1\":{\"22\":1}}],[\"其他软件也可以做到\",{\"1\":{\"897\":1}}],[\"其他章节可重入锁\",{\"1\":{\"815\":1}}],[\"其他人闲死\",{\"1\":{\"789\":1}}],[\"其他参数和fixedthreadpool相同\",{\"1\":{\"772\":1}}],[\"其他事务的for\",{\"1\":{\"728\":1}}],[\"其他事务发现数据被锁定\",{\"1\":{\"727\":1}}],[\"其他事务等待\",{\"1\":{\"727\":1}}],[\"其他线程必须加入同步队列进行等待\",{\"1\":{\"723\":1}}],[\"其他线程再设置锁标志位时\",{\"1\":{\"218\":1}}],[\"其他类只有被使用到的时候才会被加载\",{\"1\":{\"563\":1}}],[\"其他类似于\",{\"1\":{\"155\":1}}],[\"其他等待中的提交才会立即执行\",{\"1\":{\"458\":1}}],[\"其他时候都是\",{\"1\":{\"446\":1}}],[\"其他数据源\",{\"1\":{\"427\":1}}],[\"其他ribbon自带的规则\",{\"1\":{\"403\":1}}],[\"其他spring\",{\"1\":{\"388\":1}}],[\"其他页面反向代理到tomcat容器\",{\"1\":{\"298\":1}}],[\"其他的启动方式都需要注册数据库服务\",{\"1\":{\"845\":1}}],[\"其他的处理器想要访问未变化的数据\",{\"1\":{\"665\":1}}],[\"其他的如文件系统\",{\"1\":{\"250\":2}}],[\"其他的软件\",{\"1\":{\"250\":2}}],[\"其他剩下的机器还能够正常运转满足系统需求\",{\"1\":{\"195\":1}}],[\"其他非融资担保还有财产保全担保\",{\"1\":{\"180\":1}}],[\"其他存储引擎都是非事务安全表\",{\"1\":{\"90\":1}}],[\"其他不可以更改\",{\"1\":{\"21\":1}}],[\"其他所有数据块大小都是一样的\",{\"1\":{\"19\":1}}],[\"保持存活的时间\",{\"1\":{\"757\":1}}],[\"保持与tomcat端口一致\",{\"1\":{\"412\":1,\"414\":1}}],[\"保护交换数据的隐私与完整性\",{\"1\":{\"521\":1}}],[\"保护投资者和借款人的利益\",{\"1\":{\"166\":1}}],[\"保障应用服务的持续高可用性\",{\"1\":{\"222\":1}}],[\"保障及时提供担保代偿\",{\"1\":{\"189\":1}}],[\"保障及时代偿\",{\"1\":{\"189\":1}}],[\"保险等金融机构发行的有价证券\",{\"1\":{\"171\":1}}],[\"保证不论是否抛出异常锁一定会被释放\",{\"0\":{\"777\":1}}],[\"保证密钥不被泄露\",{\"1\":{\"682\":1}}],[\"保证a的原子性\",{\"1\":{\"440\":1}}],[\"保证a的可见性\",{\"1\":{\"440\":1}}],[\"保证唯一性\",{\"1\":{\"417\":1}}],[\"保证每个访客固定访问一个后端服务器\",{\"1\":{\"301\":1}}],[\"保证数数据的一致性\",{\"1\":{\"203\":1}}],[\"保证合同或担保函\",{\"1\":{\"189\":1}}],[\"保证\",{\"1\":{\"188\":1}}],[\"保证投标人按照招标文件的规定参加招标活动的担保\",{\"1\":{\"183\":1}}],[\"保证人对承包商履行扣还预付款义务的保证\",{\"1\":{\"182\":1}}],[\"保证被保证人履行工程建设合同约定义务的保证\",{\"1\":{\"181\":1}}],[\"保证在指定日期无条件支付确定的金额给收款人或持票人的票据\",{\"1\":{\"175\":1}}],[\"保证一个事务相同条件下前后两次获取的数据是一致的\",{\"1\":{\"106\":1}}],[\"保证一个事务修改的数据提交后才能被另外一个事务读取\",{\"1\":{\"106\":1}}],[\"保证一个事物提交后才能被另外一个事务读取\",{\"1\":{\"69\":1}}],[\"保证1\",{\"1\":{\"66\":1}}],[\"保证高吞吐量\",{\"1\":{\"15\":1}}],[\"保存等待执行的任务的阻塞队列\",{\"1\":{\"759\":1}}],[\"保存线程上下文信息\",{\"1\":{\"650\":1}}],[\"保存线程与锁对象的映射\",{\"1\":{\"214\":1}}],[\"保存在包头的序列号\",{\"1\":{\"648\":1}}],[\"保存的数据的末尾设置为空字符\",{\"1\":{\"624\":1}}],[\"保存的字符串追加到一个\",{\"1\":{\"624\":1}}],[\"保存的字符串和另一个\",{\"1\":{\"624\":1}}],[\"保存的字符串时\",{\"1\":{\"622\":1}}],[\"保存的字符串值\",{\"1\":{\"616\":1}}],[\"保存的内容被意外地修改\",{\"1\":{\"619\":1}}],[\"保存的是从上个检查点开始发生的hdfs元信息状态改变信息\",{\"1\":{\"19\":1}}],[\"保存的是上个检查点的hdfs的元信息\",{\"1\":{\"19\":1}}],[\"保存空字符的\",{\"1\":{\"616\":1}}],[\"保存退出\",{\"1\":{\"353\":1}}],[\"保存配置后\",{\"1\":{\"323\":1,\"325\":1}}],[\"保存filebeat的配置信息\",{\"1\":{\"275\":1}}],[\"保存了字符串\",{\"1\":{\"619\":1}}],[\"保存了一个五字节长的字符串\",{\"1\":{\"616\":1}}],[\"保存了这个url对应ip地址的缓存\",{\"1\":{\"222\":1}}],[\"保存了最后一个检查点的时间戳\",{\"1\":{\"19\":1}}],[\"保存和检索的方式不同\",{\"1\":{\"98\":1}}],[\"所耗费的时间自然也就偏高\",{\"1\":{\"781\":1}}],[\"所述消息中\",{\"1\":{\"679\":1}}],[\"所存的值的\",{\"1\":{\"650\":1}}],[\"所保存的字符串的后面\",{\"1\":{\"619\":1}}],[\"所保存字符串的长度\",{\"1\":{\"616\":1}}],[\"所在的空间中\",{\"1\":{\"619\":1}}],[\"所在包com\",{\"1\":{\"472\":6}}],[\"所管理的内存最大的一块区域\",{\"1\":{\"556\":1}}],[\"所创建的bigdecimal正好等于\",{\"1\":{\"445\":1}}],[\"所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中\",{\"1\":{\"558\":1}}],[\"所谓对称加密就是\",{\"1\":{\"522\":1}}],[\"所谓的开放定址法就是一旦发生了冲突\",{\"1\":{\"511\":1}}],[\"所谓异步调用其实就是实现一个可无需等待被调用函数的返回值而让操作继续运行的方法\",{\"1\":{\"473\":1}}],[\"所谓\",{\"1\":{\"422\":1,\"684\":1}}],[\"所谓再担保\",{\"1\":{\"162\":1}}],[\"所定义的\",{\"1\":{\"381\":1}}],[\"所使用的物理资源的机制\",{\"1\":{\"250\":1}}],[\"所示的样子\",{\"1\":{\"622\":1}}],[\"所示的\",{\"1\":{\"618\":1,\"619\":1,\"621\":1,\"622\":1}}],[\"所示的字典来说\",{\"1\":{\"127\":1}}],[\"所示\",{\"1\":{\"119\":1,\"127\":1,\"616\":1,\"619\":4,\"621\":2,\"622\":1,\"623\":2,\"624\":1}}],[\"所能存储的数字大小以及占用的空间都是相同的\",{\"1\":{\"115\":1}}],[\"所花的\",{\"1\":{\"100\":1}}],[\"所做的操作\",{\"1\":{\"33\":1}}],[\"所著的\",{\"1\":{\"22\":1}}],[\"所有操作完全按程序的顺序串行执行\",{\"1\":{\"809\":1}}],[\"所有实例域\",{\"1\":{\"809\":1}}],[\"所有会引起中断异常的代码段都要单独处理中断异常\",{\"1\":{\"765\":1}}],[\"所有被屏障拦截的线程才会继续运行\",{\"1\":{\"552\":1}}],[\"所有插入priorityblockingqueue的对象必须实现\",{\"1\":{\"533\":1}}],[\"所有数之和\",{\"1\":{\"527\":1}}],[\"所有数据都存储在表空间中\",{\"1\":{\"853\":1}}],[\"所有数据都通过一个\",{\"1\":{\"23\":1}}],[\"所有数据行\",{\"1\":{\"97\":1}}],[\"所有数据保存在ram\",{\"1\":{\"93\":1}}],[\"所有线程都是使用setdaemon\",{\"1\":{\"472\":1}}],[\"所有消息将均匀地分配到不同的分区中\",{\"1\":{\"430\":1}}],[\"所有版本\",{\"1\":{\"352\":1}}],[\"所有页面都进行压缩\",{\"1\":{\"317\":1}}],[\"所有\",{\"1\":{\"307\":1,\"623\":1}}],[\"所有正则匹配模式location中找到第一个匹配项后\",{\"1\":{\"307\":1}}],[\"所有节点安装docker\",{\"0\":{\"289\":1}}],[\"所有节点在同一时间的数据完全一致\",{\"1\":{\"192\":1}}],[\"所有的身份验证令牌已经成功更新\",{\"1\":{\"831\":1}}],[\"所有的读线程和其他的写线程都会被阻塞\",{\"1\":{\"818\":1}}],[\"所有的对象和数组都要在堆上分配\",{\"1\":{\"556\":1}}],[\"所有的线程都必须等待\",{\"1\":{\"446\":1,\"553\":1}}],[\"所有的容器的网络加入到一个二层交换机网络里面\",{\"1\":{\"250\":1}}],[\"所有的hdfs中的沟通协议都是基于tcp\",{\"1\":{\"19\":1}}],[\"所有字段定义中\",{\"1\":{\"82\":1}}],[\"所有机器\",{\"1\":{\"75\":1}}],[\"所有对namenode的操作也都保存在内存中\",{\"1\":{\"19\":1}}],[\"所以应该将switch语句提炼到一个独立函数中\",{\"1\":{\"916\":1}}],[\"所以应该改这段代码搬移到rental类\",{\"1\":{\"902\":1}}],[\"所以不能以服务方式启动数据库\",{\"1\":{\"837\":1}}],[\"所以不用担心惰性空间释放策略会造成内存浪费\",{\"1\":{\"622\":1}}],[\"所以第二次获取会进入while循环等待\",{\"1\":{\"815\":1}}],[\"所以响应速度更快\",{\"1\":{\"813\":1}}],[\"所以要数据清洗\",{\"1\":{\"788\":1}}],[\"所以要进行第三次握手\",{\"1\":{\"647\":1}}],[\"所以无法响应终端的任务可以能永远无法停止\",{\"1\":{\"764\":1}}],[\"所以无法判断任务是否被执行成功\",{\"1\":{\"762\":1}}],[\"所以无需指定\",{\"1\":{\"251\":1}}],[\"所以继承此接口需要实现该方法\",{\"1\":{\"735\":1}}],[\"所以并不涉及真正的互斥锁\",{\"1\":{\"723\":1}}],[\"所以并发创建的顺序节点会有一个唯一确定的序号\",{\"1\":{\"214\":1}}],[\"所以数组中的实际数据是68=48字节\",{\"1\":{\"722\":1}}],[\"所以数组对象的大小\",{\"1\":{\"722\":1}}],[\"所以shallow\",{\"1\":{\"722\":1}}],[\"所以说软件容错是有弊端的\",{\"1\":{\"686\":1}}],[\"所以说这两种操作的效率会比较高\",{\"1\":{\"539\":1}}],[\"所以没有办法并发\",{\"1\":{\"683\":1}}],[\"所以如果任务很多\",{\"1\":{\"757\":1}}],[\"所以如果你的应用中有很多class的话\",{\"1\":{\"651\":1}}],[\"所以如果多个线程使用\",{\"1\":{\"650\":1}}],[\"所以如果舍弃p\",{\"1\":{\"196\":1}}],[\"所以每个线程往这个\",{\"1\":{\"650\":1}}],[\"所以每次增长或者缩短一个\",{\"1\":{\"620\":1}}],[\"所以是线程安全的\",{\"1\":{\"630\":1}}],[\"所以执行速度很慢\",{\"1\":{\"629\":1}}],[\"所以对于一个包含了\",{\"1\":{\"620\":1}}],[\"所以使用缓存时\",{\"1\":{\"662\":1}}],[\"所以使用\",{\"1\":{\"619\":1,\"712\":1}}],[\"所以即使我们对一个非常长的字符串键反复执行\",{\"1\":{\"618\":1}}],[\"所以获取一个\",{\"1\":{\"618\":1}}],[\"所以为了获取一个\",{\"1\":{\"618\":1}}],[\"所以它能够促成较干净的设计\",{\"1\":{\"904\":1}}],[\"所以它们会助长冗长而复杂的函数\",{\"1\":{\"904\":1}}],[\"所以它通常是一个比较耗时的操作\",{\"1\":{\"620\":1}}],[\"所以它的\",{\"1\":{\"616\":1}}],[\"所以它等于ip\",{\"1\":{\"526\":1}}],[\"所以这里引入了一个io多路复用模型\",{\"1\":{\"795\":1}}],[\"所以这个空字符对于\",{\"1\":{\"616\":1}}],[\"所以这些框架都是会考虑到这些问题\",{\"1\":{\"433\":1}}],[\"所以他们共同的子网掩码就是255\",{\"1\":{\"526\":1}}],[\"所以8个子网的主机块地址分别除去首尾两个\",{\"1\":{\"526\":1}}],[\"所以最终的子网掩码为255\",{\"1\":{\"526\":1}}],[\"所以只要不需要知道队列的大小\",{\"1\":{\"529\":1}}],[\"所以只要加密算法够彪悍\",{\"1\":{\"522\":1}}],[\"所以只有你才能看到被这把锁锁起来的东西\",{\"1\":{\"522\":1}}],[\"所以一共是\",{\"1\":{\"522\":1}}],[\"所以一般折中为6\",{\"1\":{\"317\":1}}],[\"所以在movie对象中计算费用\",{\"1\":{\"905\":1}}],[\"所以在jdk8中引入了一个新的类completablefuture\",{\"1\":{\"475\":1}}],[\"所以在做加减乘除运算时要记得要保存操作后的值\",{\"1\":{\"445\":1}}],[\"所以需要采取策略来处理新的任务\",{\"1\":{\"761\":1}}],[\"所以需要有4字节的填充\",{\"1\":{\"722\":1}}],[\"所以需要注意\",{\"1\":{\"475\":1}}],[\"所以需要实现加锁\",{\"1\":{\"217\":1}}],[\"所以开发中\",{\"1\":{\"445\":1}}],[\"所以把这些通知先存入kafka中\",{\"1\":{\"428\":1}}],[\"所以此步骤可恢复\",{\"1\":{\"367\":1}}],[\"所以正则匹配项匹配规则\",{\"1\":{\"307\":1}}],[\"所以将其替换成一个能够理解和识别的名字\",{\"1\":{\"222\":1}}],[\"所以我们不仅仅考虑用户名和md5密码了\",{\"1\":{\"897\":1}}],[\"所以我们不必担心我们获得的amount被修改过\",{\"1\":{\"728\":1}}],[\"所以我们重点研究容错技术\",{\"1\":{\"704\":1}}],[\"所以我们可以用这个类来进行写文件的操作\",{\"1\":{\"539\":1}}],[\"所以我们可以在程序中用file\",{\"1\":{\"537\":1}}],[\"所以我们把暂存区有时也叫作索引\",{\"1\":{\"490\":1}}],[\"所以我们现在应该来考虑如何解决这个问题\",{\"1\":{\"221\":1}}],[\"所以我们需要配置url为servicename\",{\"1\":{\"410\":1}}],[\"所以我们需要实现以自旋的形式来获取到锁\",{\"1\":{\"219\":1}}],[\"所以我们需要利用一些方式来实现分布式锁的可重入型\",{\"1\":{\"218\":1}}],[\"所以依靠这种顺序性可以很好的解释\",{\"1\":{\"214\":1}}],[\"所以id一般是正数\",{\"1\":{\"205\":1}}],[\"所以节点故障\",{\"1\":{\"202\":1}}],[\"所以hbase降低了可用性\",{\"1\":{\"199\":1}}],[\"所以就不难理解为什么zookeeper被设计成cp而不是ap特性的了\",{\"1\":{\"198\":1}}],[\"所以链表可以用于保存各种不同类型的值\",{\"1\":{\"119\":1}}],[\"所以实际中一般不用\",{\"1\":{\"106\":1}}],[\"所以自己显示指定更可以清晰的看出主键id\",{\"1\":{\"84\":1}}],[\"所以想要正确的排序\",{\"1\":{\"73\":1}}],[\"所以利用\",{\"1\":{\"23\":1}}],[\"所以优化join的时候\",{\"1\":{\"23\":1}}],[\"所以分区显著的提高查询性能\",{\"1\":{\"21\":1}}],[\"所以\",{\"1\":{\"17\":1,\"87\":1,\"118\":1,\"121\":2,\"129\":1,\"192\":1,\"194\":1,\"196\":1,\"201\":1,\"384\":1,\"454\":2,\"475\":1,\"522\":1,\"619\":1,\"650\":1,\"740\":1,\"745\":2,\"828\":1,\"898\":1}}],[\"所以整个过程非常快\",{\"1\":{\"14\":1}}],[\"多层结构系统\",{\"1\":{\"911\":1}}],[\"多半是为了让代码更具有可读性\",{\"1\":{\"907\":1}}],[\"多是唱歌\",{\"1\":{\"825\":1}}],[\"多路复用的好处\",{\"0\":{\"808\":1}}],[\"多备份技术\",{\"1\":{\"704\":1}}],[\"多线程帮助程序员写出cpu最大利用率的高效程序\",{\"1\":{\"651\":1}}],[\"多对一\",{\"1\":{\"684\":1}}],[\"多对一的方式\",{\"1\":{\"640\":1}}],[\"多对多\",{\"1\":{\"640\":1}}],[\"多播\",{\"0\":{\"640\":1},\"1\":{\"640\":1}}],[\"多亏了completablefuture\",{\"1\":{\"475\":1}}],[\"多副本冗余机制\",{\"1\":{\"432\":1}}],[\"多次点击调用成功\",{\"1\":{\"408\":1}}],[\"多次调用对应的服务\",{\"0\":{\"406\":1}}],[\"多次读同一数据\",{\"1\":{\"72\":1}}],[\"多的进程竞争\",{\"1\":{\"220\":1}}],[\"多进程分布在不同机器上\",{\"1\":{\"212\":1}}],[\"多进程并发访问时\",{\"1\":{\"192\":1}}],[\"多一个风险\",{\"1\":{\"206\":1}}],[\"多一个依赖的组件\",{\"1\":{\"206\":1}}],[\"多为承包商\",{\"1\":{\"181\":1}}],[\"多态\",{\"1\":{\"119\":1}}],[\"多叉树也类似\",{\"1\":{\"102\":1}}],[\"多列值组成一个索引\",{\"1\":{\"101\":1}}],[\"多列索引\",{\"1\":{\"100\":1}}],[\"多数值是惟一的\",{\"1\":{\"100\":1}}],[\"多种存储引擎\",{\"1\":{\"93\":1}}],[\"多占\",{\"1\":{\"82\":1}}],[\"多个线程之间\",{\"1\":{\"809\":1}}],[\"多个线程等待同一个锁时\",{\"1\":{\"703\":1}}],[\"多个签名\",{\"1\":{\"744\":1}}],[\"多个哈希表节点可以用next指针构成一个单向链表\",{\"1\":{\"513\":1}}],[\"多个分支\",{\"0\":{\"493\":1}}],[\"多个生产者的场景\",{\"0\":{\"458\":1}}],[\"多个窗口使用该命令进入\",{\"1\":{\"255\":1}}],[\"多个客户端并发的在特定路径下创建临时性顺序节点\",{\"1\":{\"214\":1}}],[\"多个客户端同时抢锁\",{\"1\":{\"214\":1}}],[\"多个\",{\"1\":{\"119\":1}}],[\"多个事务并发执行时\",{\"1\":{\"65\":1}}],[\"多个split\",{\"1\":{\"34\":1}}],[\"多个函数排重后的孤僻交易码个数\",{\"1\":{\"22\":1}}],[\"多个列的值\",{\"1\":{\"20\":1}}],[\"多个文件不能放到一个块中\",{\"1\":{\"17\":1}}],[\"多用户写入\",{\"1\":{\"15\":1}}],[\"例\",{\"1\":{\"315\":1,\"497\":2,\"593\":1}}],[\"例子如下\",{\"1\":{\"300\":1}}],[\"例子\",{\"1\":{\"17\":1,\"22\":1,\"134\":2,\"135\":1,\"214\":2}}],[\"例如代码位于runnable中时\",{\"1\":{\"766\":1}}],[\"例如告诉用户库存不足\",{\"1\":{\"728\":1}}],[\"例如指向permgen\",{\"1\":{\"722\":1}}],[\"例如指定\",{\"1\":{\"709\":1}}],[\"例如int类型占4个字节\",{\"1\":{\"722\":1}}],[\"例如测试\",{\"1\":{\"704\":1}}],[\"例如放在一个全局map对象中\",{\"1\":{\"558\":1}}],[\"例如有两个对象\",{\"1\":{\"558\":1}}],[\"例如你可以使用\",{\"1\":{\"501\":1}}],[\"例如你在某个域名服务提供商申请的域名\",{\"1\":{\"222\":1}}],[\"例如supplyasync\",{\"1\":{\"475\":1}}],[\"例如string是java中的string\",{\"1\":{\"25\":1}}],[\"例如optional\",{\"1\":{\"475\":1}}],[\"例如通过回调的方式\",{\"1\":{\"475\":1}}],[\"例如v1\",{\"1\":{\"263\":1}}],[\"例如商品信息\",{\"1\":{\"222\":1}}],[\"例如商品描述\",{\"1\":{\"129\":1}}],[\"例如派生自from中子查询的结果\",{\"1\":{\"113\":1}}],[\"例如\",{\"1\":{\"14\":1,\"20\":1,\"22\":2,\"24\":2,\"72\":1,\"100\":1,\"141\":1,\"150\":1,\"154\":1,\"160\":1,\"161\":4,\"214\":1,\"221\":1,\"222\":8,\"418\":3,\"499\":2,\"500\":3,\"503\":3,\"537\":1,\"549\":6,\"557\":3,\"558\":1,\"722\":1,\"727\":1}}],[\"对软件的生命造成威胁的因素只有一个\",{\"1\":{\"898\":1}}],[\"对未经授权的人使用软件或数据的企图\",{\"1\":{\"898\":1}}],[\"对他们进行操作\",{\"1\":{\"800\":1}}],[\"对外部世界隐藏其内部细节\",{\"1\":{\"922\":1}}],[\"对外只开放基于此存储过程的数据更新途径\",{\"1\":{\"731\":1}}],[\"对外暴露的门面类\",{\"1\":{\"451\":1}}],[\"对外暴露端口\",{\"1\":{\"243\":1}}],[\"对此版本后\",{\"1\":{\"730\":1}}],[\"对synchronized来说\",{\"1\":{\"723\":1}}],[\"对一些对象的集合施加了一个整体排序\",{\"1\":{\"735\":1}}],[\"对一些特殊类型的指针\",{\"1\":{\"722\":1}}],[\"对一个方法进行synchronized声明\",{\"1\":{\"671\":1}}],[\"对一个\",{\"1\":{\"621\":1}}],[\"对一个容器只需设置其中一种方法即可\",{\"1\":{\"263\":1}}],[\"对鲍勃的公钥和一些相关信息一起加密\",{\"1\":{\"705\":1}}],[\"对这个摘要加密\",{\"1\":{\"705\":1}}],[\"对缺陷的处理\",{\"1\":{\"704\":1}}],[\"对称加密\",{\"1\":{\"678\":1}}],[\"对称加密算法\",{\"0\":{\"676\":1},\"1\":{\"676\":1,\"677\":1}}],[\"对齐填充\",{\"1\":{\"672\":1,\"722\":1}}],[\"对效率影响很大\",{\"1\":{\"626\":1}}],[\"对遇到的每个字符进行计数\",{\"1\":{\"618\":1}}],[\"对字符串在安全性\",{\"1\":{\"617\":1}}],[\"对字节码描述的信息进行语义分析\",{\"1\":{\"561\":1}}],[\"对公共集合的共享访问就可以工作得很好\",{\"1\":{\"529\":1}}],[\"对关键字进行分析\",{\"1\":{\"509\":1}}],[\"对分支的增\",{\"1\":{\"500\":1}}],[\"对消费者进通知\",{\"1\":{\"472\":1}}],[\"对cpu缓存友好\",{\"1\":{\"452\":1}}],[\"对生产者提供下一序号获取\",{\"1\":{\"451\":1}}],[\"对生命周期对应的\",{\"1\":{\"381\":1}}],[\"对原先对象的地址进行了加\",{\"1\":{\"443\":1}}],[\"对usafe进行了删除\",{\"1\":{\"442\":1}}],[\"对a进行+1操作\",{\"1\":{\"440\":1}}],[\"对a账号做减法操作\",{\"1\":{\"66\":1}}],[\"对象技术的全部要点在于\",{\"1\":{\"913\":1}}],[\"对象技术告诉我们\",{\"1\":{\"910\":1}}],[\"对象里面所有用synchronized修饰的方法都将产生堵塞\",{\"1\":{\"723\":1}}],[\"对象头大小=class\",{\"1\":{\"722\":3}}],[\"对象头占用空间\",{\"1\":{\"722\":1}}],[\"对象头占用空间=\",{\"1\":{\"722\":3}}],[\"对象实际数据包括了对象的所有成员变量\",{\"1\":{\"722\":2}}],[\"对象的一个极大价值在于\",{\"1\":{\"915\":1}}],[\"对象的实际数据\",{\"1\":{\"722\":1}}],[\"对象的引用包括\",{\"1\":{\"650\":1}}],[\"对象存储\",{\"1\":{\"722\":1}}],[\"对象存储与指针压缩\",{\"0\":{\"722\":1}}],[\"对象中关于锁的信息是存在markword里的\",{\"1\":{\"672\":1}}],[\"对象其他cpu上相关的cache\",{\"1\":{\"665\":1}}],[\"对象那么就需要多个\",{\"1\":{\"650\":1}}],[\"对象将自动被垃圾回收器从内存中清除掉\",{\"1\":{\"558\":1}}],[\"对象生成后几乎不灭的对象\",{\"1\":{\"557\":1}}],[\"对象之后\",{\"1\":{\"537\":1}}],[\"对象说\",{\"1\":{\"456\":1}}],[\"对象\",{\"1\":{\"413\":1,\"441\":1,\"454\":1,\"558\":1}}],[\"对调用者来说\",{\"1\":{\"413\":1}}],[\"对大段代码进行\",{\"1\":{\"413\":1}}],[\"对容器监控检查的定期探测时间设置\",{\"1\":{\"263\":1}}],[\"对容器健康检查探测等待响应的超时时间\",{\"1\":{\"263\":1}}],[\"对pod内个容器健康检查方式设置为tcpsocket方式\",{\"1\":{\"263\":1}}],[\"对pod内个容器健康检查方法设置为httpget\",{\"1\":{\"263\":1}}],[\"对pod内个容器健康检查的设置\",{\"1\":{\"263\":1}}],[\"对pod容器内检查方式设置为exec方式\",{\"1\":{\"263\":1}}],[\"对该leaseid进行一次续约\",{\"1\":{\"214\":1}}],[\"对的的\",{\"1\":{\"214\":1}}],[\"对过期失效\",{\"1\":{\"214\":1}}],[\"对设置租约\",{\"1\":{\"214\":1}}],[\"对应博客中的这句话\",{\"1\":{\"929\":1}}],[\"对应一个会话线程\",{\"1\":{\"857\":1}}],[\"对应\",{\"1\":{\"853\":1}}],[\"对应八进制中的\",{\"1\":{\"549\":1}}],[\"对应我们前面往输入dd\",{\"1\":{\"545\":1}}],[\"对应不同的关键字可能获得相同的\",{\"1\":{\"506\":1}}],[\"对应于client端配置\",{\"1\":{\"417\":1}}],[\"对应的对象锁可以这么确定\",{\"1\":{\"723\":1}}],[\"对应的配置项\",{\"1\":{\"402\":1}}],[\"对应的ip地址记录\",{\"1\":{\"222\":1}}],[\"对应setnx命令\",{\"1\":{\"213\":1}}],[\"对应条件的表\",{\"1\":{\"23\":1}}],[\"对没有市县承办担保机构开展业务的市县\",{\"1\":{\"189\":1}}],[\"对各方权利义务进行明确规定\",{\"1\":{\"189\":3}}],[\"对不合规业务多\",{\"1\":{\"189\":1}}],[\"对支小支农业务占比合格\",{\"1\":{\"189\":1}}],[\"对合作银行进行考核评价\",{\"1\":{\"189\":1}}],[\"对经审核认定为不符合代偿条件的项目\",{\"1\":{\"189\":1}}],[\"对经合规性审核认定为不合规的担保项目\",{\"1\":{\"189\":1}}],[\"对符合条件的担保贷款项目\",{\"1\":{\"189\":1}}],[\"对担保代偿项目\",{\"1\":{\"189\":1}}],[\"对担保贷款不得设置资产抵\",{\"1\":{\"189\":1}}],[\"对担保贷款项目进行合规性审核确认\",{\"1\":{\"189\":1}}],[\"对输入列表\",{\"1\":{\"139\":1}}],[\"对列表\",{\"1\":{\"139\":1}}],[\"对列表进行修剪\",{\"1\":{\"135\":1}}],[\"对给定的有序集合执行类似于集合的交集运算\",{\"1\":{\"138\":1}}],[\"对整数和浮点数执行自增\",{\"1\":{\"133\":1}}],[\"对整个字符串或者字符串的其中一部分执行操作\",{\"1\":{\"133\":1}}],[\"对链表的访问以\",{\"1\":{\"119\":1}}],[\"对数据卷的修改操作立刻可见\",{\"1\":{\"262\":1}}],[\"对数据库的分库分表后需要有一个唯一id来标识一条数据或消息\",{\"1\":{\"204\":1}}],[\"对数据的拆分\",{\"1\":{\"132\":1}}],[\"对数据的修改就是永久的\",{\"1\":{\"105\":1}}],[\"对数据存储的组织方式\",{\"1\":{\"21\":1}}],[\"对文本的内容进行分词\",{\"1\":{\"101\":1}}],[\"对其进行索引没有价值\",{\"1\":{\"100\":1}}],[\"对表进行顺序扫描的请求将分配一个读入缓冲区\",{\"1\":{\"74\":1}}],[\"对b账户做加法时只加了50元\",{\"1\":{\"67\":1}}],[\"对b账号做加法操作\",{\"1\":{\"66\":1}}],[\"对指定分子进行超快速的相似性搜索\",{\"1\":{\"55\":1}}],[\"对所有临时文件进行一次合并\",{\"1\":{\"43\":1}}],[\"对后\",{\"1\":{\"36\":1}}],[\"对\",{\"1\":{\"35\":1,\"37\":1,\"214\":1,\"484\":1,\"625\":1,\"652\":1,\"809\":1}}],[\"对交给用户定义的\",{\"1\":{\"35\":1}}],[\"对索引进行重建\",{\"1\":{\"28\":1}}],[\"对于switch语句\",{\"1\":{\"905\":1}}],[\"对于session中获取的数据\",{\"1\":{\"413\":1}}],[\"对于consumer里面的statement方法\",{\"1\":{\"898\":1}}],[\"对于这种情况\",{\"1\":{\"828\":1}}],[\"对于数组来说\",{\"1\":{\"722\":1}}],[\"对于retained\",{\"1\":{\"722\":1}}],[\"对于reference类型来说\",{\"1\":{\"722\":1}}],[\"对于普通的jar包\",{\"1\":{\"706\":1}}],[\"对于系统容错\",{\"1\":{\"704\":1}}],[\"对于可靠传输\",{\"1\":{\"644\":1}}],[\"对于tcp通信来说\",{\"1\":{\"637\":1}}],[\"对于每个转换都new一个实例\",{\"1\":{\"626\":1}}],[\"对于每一次的查询都是从根节点出发\",{\"1\":{\"102\":1}}],[\"对于maven2和maven3来说\",{\"1\":{\"578\":1}}],[\"对于字符流进行操作的类主要是reader\",{\"1\":{\"538\":1}}],[\"对于任意给定的关键字值\",{\"1\":{\"506\":1}}],[\"对于未有合并的分支是无法删除的\",{\"1\":{\"500\":1}}],[\"对于post请求\",{\"1\":{\"482\":1}}],[\"对于get方式的请求\",{\"1\":{\"482\":1}}],[\"对于阻塞或者轮询方式\",{\"1\":{\"475\":1}}],[\"对于既想取得高性能\",{\"1\":{\"469\":1,\"472\":1}}],[\"对于单生产者这毫无意义\",{\"1\":{\"456\":1}}],[\"对于那些几乎没用的组件\",{\"1\":{\"918\":1}}],[\"对于那些将要从32位平台移植到64位的应用来说\",{\"1\":{\"722\":1}}],[\"对于那些不需要准确计算精度的数字\",{\"1\":{\"445\":1}}],[\"对于那些没有实现\",{\"1\":{\"381\":1}}],[\"对于调用\",{\"1\":{\"413\":1}}],[\"对于公司外的\",{\"1\":{\"413\":1}}],[\"对于非稳定代码的\",{\"1\":{\"413\":1}}],[\"对于非常大的数据集\",{\"1\":{\"24\":1}}],[\"对于没有缓存的动态资源需要从应用服务器获取\",{\"1\":{\"222\":1}}],[\"对于ipv4来说全球有13个根域名服务器\",{\"1\":{\"222\":1}}],[\"对于innodb数据表\",{\"1\":{\"97\":1}}],[\"对于多数大型互联网应用的场景\",{\"1\":{\"202\":1}}],[\"对于很多业务系统来说\",{\"1\":{\"201\":1}}],[\"对于一个分布式系统来说\",{\"1\":{\"196\":1}}],[\"对于一个可用性的分布式系统\",{\"1\":{\"194\":1}}],[\"对于一致性\",{\"1\":{\"192\":1}}],[\"对于关系型数据库\",{\"1\":{\"193\":1}}],[\"对于绝大多数的命令\",{\"1\":{\"161\":1}}],[\"对于接收到的命令\",{\"1\":{\"155\":1}}],[\"对于\",{\"1\":{\"155\":2}}],[\"对于相同的数据\",{\"1\":{\"140\":1}}],[\"对于图\",{\"1\":{\"127\":1,\"618\":2,\"621\":1}}],[\"对于所有的查询都是从根节点到叶子节点\",{\"1\":{\"102\":1}}],[\"对于惟一值的列\",{\"1\":{\"100\":1}}],[\"对于诸如数据仓储等\",{\"1\":{\"93\":1}}],[\"对于复杂的应用系统可以根据实际情况选择\",{\"1\":{\"93\":1}}],[\"对于binlog\",{\"1\":{\"74\":1}}],[\"对于order\",{\"1\":{\"29\":1}}],[\"对于小数据集\",{\"1\":{\"29\":1}}],[\"对于大数据集\",{\"1\":{\"23\":1}}],[\"对于左表的一条指定的记录\",{\"1\":{\"23\":1}}],[\"对于文件的每一个块\",{\"1\":{\"14\":1}}],[\"对比键的函数\",{\"1\":{\"126\":1}}],[\"对比\",{\"0\":{\"645\":1},\"1\":{\"21\":1,\"131\":1}}],[\"对某个字段重命名\",{\"1\":{\"21\":1}}],[\"对name容错机制也十分重要\",{\"1\":{\"16\":1}}],[\"关系则是多个线程彼此合作\",{\"1\":{\"659\":1}}],[\"关系型数据库\",{\"1\":{\"421\":1}}],[\"关联远程仓库\",{\"1\":{\"497\":1}}],[\"关注\",{\"1\":{\"428\":1}}],[\"关注这些事件发生后\",{\"1\":{\"428\":1}}],[\"关掉两个服务端实例\",{\"0\":{\"407\":1}}],[\"关键不在于函数的长度\",{\"1\":{\"910\":1}}],[\"关键字级联\",{\"1\":{\"888\":1}}],[\"关键字\",{\"1\":{\"837\":1,\"926\":1}}],[\"关键字后的选择列表中的列\",{\"1\":{\"100\":1}}],[\"关键还是要保证\",{\"1\":{\"221\":1}}],[\"关税担保等\",{\"1\":{\"180\":1}}],[\"关于锁降级下面的示例代码摘自reentrantwritereadlock源码中\",{\"1\":{\"824\":1}}],[\"关于车票的库存可能存在数据不一致的情况\",{\"1\":{\"202\":1}}],[\"关于\",{\"0\":{\"155\":1,\"659\":1},\"1\":{\"127\":1,\"155\":1,\"413\":1}}],[\"关于时间的和关于字符串的\",{\"1\":{\"22\":1}}],[\"关于郑天祺\",{\"0\":{\"1\":1}}],[\"关闭归档\",{\"1\":{\"869\":1}}],[\"关闭状态\",{\"1\":{\"843\":1}}],[\"关闭连接\",{\"0\":{\"648\":1},\"1\":{\"649\":1}}],[\"关闭文件\",{\"1\":{\"539\":1,\"541\":1}}],[\"关闭mysql8\",{\"1\":{\"320\":1}}],[\"关闭所有代理结果的数据的压缩\",{\"1\":{\"317\":1}}],[\"关闭swap\",{\"1\":{\"288\":1}}],[\"关闭selinux\",{\"1\":{\"288\":1}}],[\"关闭防火墙\",{\"1\":{\"288\":1}}],[\"关闭定时任务\",{\"1\":{\"214\":1}}],[\"关闭\",{\"1\":{\"16\":1}}],[\"和十个提炼出的\",{\"1\":{\"910\":1}}],[\"和此类程序共同生活数年后\",{\"1\":{\"910\":1}}],[\"和脱机备份\",{\"1\":{\"889\":1}}],[\"和空格外的所有符号\",{\"1\":{\"874\":1}}],[\"和页\",{\"1\":{\"853\":1}}],[\"和公平的锁获取方式\",{\"1\":{\"819\":1}}],[\"和写事务\",{\"1\":{\"809\":1}}],[\"和form类似\",{\"1\":{\"749\":1}}],[\"和float\",{\"1\":{\"445\":1}}],[\"和数据源\",{\"1\":{\"785\":1}}],[\"和数据卷容器\",{\"1\":{\"262\":1}}],[\"和数组\",{\"1\":{\"735\":1}}],[\"和submit\",{\"1\":{\"762\":1}}],[\"和synchronized\",{\"1\":{\"702\":1}}],[\"和sleepingwaitstrategy一样也是一种高性能与cpu资源之间取舍的折中方案但这个策略不会带来显著的延迟抖动\",{\"1\":{\"458\":1}}],[\"和时间因素相关\",{\"1\":{\"684\":1}}],[\"和信任计算\",{\"1\":{\"684\":1}}],[\"和应用程序管理器\",{\"1\":{\"654\":1}}],[\"和每个节点上的\",{\"1\":{\"653\":1}}],[\"和目标端口\",{\"1\":{\"642\":1}}],[\"和1一样也牺牲了部分空间\",{\"1\":{\"626\":1}}],[\"和一个\",{\"1\":{\"622\":1}}],[\"和之前展示的\",{\"1\":{\"616\":2}}],[\"和arrays\",{\"1\":{\"735\":1}}],[\"和arrayblockingqueue一样\",{\"1\":{\"532\":1}}],[\"和application\",{\"1\":{\"402\":1}}],[\"和runnable接口比\",{\"1\":{\"475\":1}}],[\"和配置application\",{\"1\":{\"403\":1}}],[\"和unicast\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"和版本3的uuid算法类似\",{\"1\":{\"208\":1}}],[\"和关系数据库那种可以在执行的过程中进行回滚\",{\"1\":{\"139\":1}}],[\"和int\",{\"0\":{\"115\":1},\"1\":{\"115\":1}}],[\"和if条件语句类似\",{\"1\":{\"22\":1}}],[\"和校对规则\",{\"1\":{\"99\":1}}],[\"和b+tree叶子节点分裂顺序一致\",{\"1\":{\"82\":1}}],[\"和全外连接\",{\"1\":{\"23\":1}}],[\"和\",{\"0\":{\"383\":1,\"657\":1,\"659\":1,\"870\":1},\"1\":{\"15\":1,\"19\":1,\"20\":1,\"23\":1,\"25\":3,\"33\":2,\"52\":1,\"82\":3,\"100\":1,\"119\":3,\"125\":1,\"127\":2,\"140\":2,\"217\":1,\"218\":1,\"221\":1,\"417\":1,\"420\":1,\"441\":1,\"457\":1,\"475\":1,\"483\":1,\"484\":1,\"486\":3,\"497\":1,\"514\":1,\"522\":2,\"529\":2,\"539\":1,\"549\":4,\"609\":1,\"618\":1,\"619\":1,\"622\":1,\"627\":2,\"651\":1,\"652\":1,\"665\":1,\"723\":1,\"809\":1,\"816\":1,\"843\":3,\"863\":1,\"864\":1,\"874\":1,\"910\":2,\"923\":1}}],[\"会消耗掉一定的系统资源\",{\"1\":{\"924\":1}}],[\"会要求每个线程持有锁的时间尽可能短\",{\"1\":{\"924\":1}}],[\"会让你发疯的\",{\"1\":{\"920\":1}}],[\"会让消费者知道buffer\",{\"1\":{\"456\":1}}],[\"会占用\",{\"1\":{\"863\":1}}],[\"会占用大量内存\",{\"1\":{\"15\":1}}],[\"会话超时检测\",{\"1\":{\"863\":1}}],[\"会话对应的线程\",{\"1\":{\"857\":1}}],[\"会话多时该线程会多\",{\"1\":{\"857\":1}}],[\"会话线程调用\",{\"1\":{\"863\":1}}],[\"会话线程\",{\"1\":{\"857\":1}}],[\"会话池\",{\"1\":{\"855\":1}}],[\"会话级\",{\"1\":{\"854\":1}}],[\"会把一个\",{\"1\":{\"809\":1}}],[\"会把数据写入数据库做持久化保存\",{\"1\":{\"66\":1}}],[\"会唤醒其等待队列上睡眠的进程\",{\"1\":{\"799\":1}}],[\"会执行synchronousqueue\",{\"1\":{\"773\":1}}],[\"会执行巨大的\",{\"1\":{\"21\":1}}],[\"会循环反复从linkedblockingqueue获取任务来执行\",{\"1\":{\"771\":1}}],[\"会发现\",{\"1\":{\"723\":1}}],[\"会压缩的对象\",{\"1\":{\"722\":1}}],[\"会优先加载\",{\"1\":{\"711\":1}}],[\"会在同步块的前后分别形成monitorenter和monitorexit这个两个字节码指令\",{\"1\":{\"703\":1}}],[\"会在特定时间之后过期\",{\"1\":{\"139\":1}}],[\"会进行回收的\",{\"1\":{\"650\":1}}],[\"会进入安全模式\",{\"1\":{\"19\":1}}],[\"会产生内存泄露吗\",{\"1\":{\"650\":1}}],[\"会产生两个\",{\"1\":{\"486\":1}}],[\"会走一个判断\",{\"1\":{\"613\":1}}],[\"会走相同的vgg16模型提取特征值\",{\"1\":{\"58\":1}}],[\"会清空target\",{\"1\":{\"576\":1}}],[\"会隐式地调用类的加载器把对应的类\",{\"1\":{\"563\":1}}],[\"会隐式地调用类的加载器把对应的类加载到jvm中\",{\"1\":{\"558\":1}}],[\"会出现奇怪的东西\",{\"1\":{\"541\":1}}],[\"会出现问题\",{\"1\":{\"88\":1}}],[\"会从当前的工作版本创建一个叫做new\",{\"1\":{\"500\":1}}],[\"会将你的网络请求原封不动的发送到他们的后端保存一份\",{\"1\":{\"897\":1}}],[\"会将该sql\",{\"1\":{\"863\":1}}],[\"会将编译生成的\",{\"1\":{\"563\":1}}],[\"会将\",{\"1\":{\"486\":1,\"622\":1}}],[\"会将get和post请求数据包完整的上传到他们的服务器\",{\"1\":{\"485\":1}}],[\"会将它们按照\",{\"1\":{\"36\":1}}],[\"会给\",{\"1\":{\"484\":1}}],[\"会阻塞\",{\"1\":{\"475\":1}}],[\"会阻塞业务流程\",{\"1\":{\"214\":1}}],[\"会更新自己的标识\",{\"1\":{\"452\":1}}],[\"会丢失精度\",{\"1\":{\"445\":1}}],[\"会根据它所订阅的topic以及所属的消费组\",{\"1\":{\"433\":1}}],[\"会被中止\",{\"1\":{\"711\":1}}],[\"会被该\",{\"1\":{\"419\":1}}],[\"会被写入到一个新的段中\",{\"1\":{\"4\":1}}],[\"会帮助您做格式校验\",{\"1\":{\"417\":1}}],[\"会去根据value进行负载\",{\"1\":{\"410\":1}}],[\"会读取yaml文件中的配置\",{\"1\":{\"410\":1}}],[\"会先检查未使用空间是否足够\",{\"1\":{\"621\":1}}],[\"会先检查给定\",{\"1\":{\"619\":1}}],[\"会先检查\",{\"1\":{\"619\":1}}],[\"会先判定是否存在\",{\"1\":{\"384\":1}}],[\"会先创建分区目录\",{\"1\":{\"22\":1}}],[\"会到达同一台服务器\",{\"1\":{\"305\":1}}],[\"会导致其它所有需要锁的线程挂起\",{\"1\":{\"727\":1}}],[\"会导致其所在的后端负载较高\",{\"1\":{\"302\":1}}],[\"会导致重复id生成\",{\"1\":{\"207\":1}}],[\"会引起配置文件的key冲突导致出现问题\",{\"1\":{\"297\":1}}],[\"会有比较大的开销\",{\"1\":{\"809\":1}}],[\"会有以下效果\",{\"1\":{\"475\":1}}],[\"会有覆盖的情况\",{\"1\":{\"297\":1}}],[\"会有很多好处\",{\"1\":{\"206\":1}}],[\"会同步显示\",{\"1\":{\"255\":1}}],[\"会自动切换到适合的锁实现\",{\"1\":{\"723\":1}}],[\"会自动将\",{\"1\":{\"619\":1}}],[\"会自动剔除该服务器\",{\"1\":{\"299\":1}}],[\"会自动给每个容器虚拟出自己的网卡\",{\"1\":{\"250\":1}}],[\"会自动进行续租\",{\"1\":{\"214\":1}}],[\"会分配network\",{\"1\":{\"250\":1}}],[\"会存在锁失效的问题\",{\"1\":{\"214\":1}}],[\"会影响一些用户体验\",{\"1\":{\"202\":1}}],[\"会为用途不同的字典设置不同的类型特定函数\",{\"1\":{\"126\":1}}],[\"会显示ok\",{\"1\":{\"73\":1}}],[\"会创建太多分区\",{\"1\":{\"27\":1}}],[\"会对查询结果集执行一个全局排序\",{\"1\":{\"23\":1}}],[\"会返回左边表的记录\",{\"1\":{\"23\":1}}],[\"会返回左侧表所有的记录\",{\"1\":{\"23\":1}}],[\"会返回右边表所有符合where语句的记录\",{\"1\":{\"23\":1}}],[\"会禁止提交这个任务\",{\"1\":{\"21\":1}}],[\"文本文件修改此参数\",{\"1\":{\"854\":1}}],[\"文本搜索引擎\",{\"1\":{\"55\":1}}],[\"文件映射内存加速与内核空间的消息传递\",{\"1\":{\"806\":1}}],[\"文件上传可以把文件编码成base64\",{\"1\":{\"749\":1}}],[\"文件上传之content\",{\"0\":{\"746\":1}}],[\"文件按照需求和一定的规则加载到内存中\",{\"1\":{\"563\":1}}],[\"文件格式验证\",{\"0\":{\"560\":1}}],[\"文件格式验证∶验证字节流是否符合class文件的规范\",{\"1\":{\"558\":1}}],[\"文件读取对象\",{\"1\":{\"542\":1}}],[\"文件打开失败\",{\"1\":{\"539\":1}}],[\"文件创建成功\",{\"1\":{\"537\":1}}],[\"文件创建完成后开始\",{\"1\":{\"151\":1}}],[\"文件已经存在\",{\"1\":{\"537\":2}}],[\"文件或者流的操作就要导入import\",{\"1\":{\"537\":1}}],[\"文件夹不提交\",{\"0\":{\"504\":1}}],[\"文件夹名\",{\"1\":{\"63\":1}}],[\"文件最大为\",{\"1\":{\"433\":1}}],[\"文件服务\",{\"1\":{\"410\":1}}],[\"文件去代替原来默认的\",{\"1\":{\"385\":1}}],[\"文件自动\",{\"1\":{\"152\":1}}],[\"文件仅保留最后一次\",{\"1\":{\"150\":1}}],[\"文件大小达到以下阈值\",{\"1\":{\"152\":1}}],[\"文件大小\",{\"1\":{\"150\":1,\"537\":1}}],[\"文件大小通常将超过\",{\"1\":{\"140\":1}}],[\"文件时\",{\"1\":{\"149\":1}}],[\"文件位于操作系统缓冲区的部分\",{\"1\":{\"147\":1}}],[\"文件完成创建与落地\",{\"1\":{\"143\":1}}],[\"文件加载\",{\"1\":{\"141\":1}}],[\"文件的规范\",{\"1\":{\"560\":1}}],[\"文件的字节流中的信息不回危害到虚拟机\",{\"1\":{\"558\":1}}],[\"文件的内容\",{\"1\":{\"545\":1}}],[\"文件的绝对路径\",{\"1\":{\"537\":1}}],[\"文件的路径\",{\"1\":{\"537\":1}}],[\"文件的名字\",{\"1\":{\"537\":1}}],[\"文件的名称\",{\"1\":{\"537\":1}}],[\"文件的自动\",{\"1\":{\"152\":1}}],[\"文件的冗余命令以减少\",{\"1\":{\"150\":1}}],[\"文件的大小必须持续增长\",{\"1\":{\"150\":1}}],[\"文件的结尾处损坏\",{\"1\":{\"146\":1}}],[\"文件的\",{\"1\":{\"145\":1}}],[\"文件的落地\",{\"1\":{\"141\":1}}],[\"文件的元数据存储在namenode内容中\",{\"1\":{\"15\":1}}],[\"文件路径\",{\"1\":{\"141\":1,\"146\":1}}],[\"文件结尾处的损坏\",{\"1\":{\"146\":1}}],[\"文件结尾\",{\"1\":{\"141\":1}}],[\"文件校验\",{\"1\":{\"141\":1}}],[\"文件写入失败时\",{\"1\":{\"141\":2}}],[\"文件落地\",{\"1\":{\"141\":1}}],[\"文件更适合于数据备份\",{\"1\":{\"140\":1}}],[\"文件同步选项\",{\"1\":{\"146\":1}}],[\"文件同步\",{\"1\":{\"140\":1,\"147\":1}}],[\"文件在\",{\"1\":{\"140\":1}}],[\"文件\",{\"0\":{\"150\":1,\"708\":1},\"1\":{\"140\":2,\"141\":2,\"143\":1,\"144\":2,\"146\":2,\"148\":1,\"149\":2,\"150\":1,\"151\":5,\"152\":2,\"155\":3,\"502\":2,\"708\":1,\"709\":1,\"835\":1,\"842\":1}}],[\"文件并落地\",{\"1\":{\"140\":1}}],[\"文件名称\",{\"1\":{\"141\":1,\"146\":1}}],[\"文件名都和表名相同\",{\"1\":{\"91\":1}}],[\"文件名\",{\"1\":{\"63\":1}}],[\"文件名目录名及它们之间的层级关系\",{\"1\":{\"16\":1}}],[\"文件目录的所有者及其权限\",{\"1\":{\"16\":1}}],[\"文档的变化并不是立即对搜索可见\",{\"1\":{\"4\":1}}],[\"一看到switch语句\",{\"1\":{\"916\":1}}],[\"一应答机制和一次性口令机制\",{\"1\":{\"897\":1}}],[\"一是承担责任\",{\"1\":{\"825\":1}}],[\"一直处于用户态\",{\"1\":{\"812\":1}}],[\"一直和服务员聊人生理想\",{\"1\":{\"791\":1}}],[\"一律使用scheduledexecutorservice\",{\"1\":{\"774\":1}}],[\"一律要求进行空指针判断\",{\"1\":{\"413\":1}}],[\"一种变化引发多个类相应修改\",{\"1\":{\"912\":1}}],[\"一种优化是使用自旋锁\",{\"1\":{\"723\":1}}],[\"一种是\",{\"1\":{\"709\":1,\"710\":2}}],[\"一种是利用\",{\"1\":{\"709\":1}}],[\"一点都不神秘\",{\"1\":{\"706\":1}}],[\"一起发送给客户端\",{\"1\":{\"705\":1}}],[\"一起发给苏珊\",{\"1\":{\"705\":1}}],[\"一起进步\",{\"1\":{\"1\":1}}],[\"一把是公钥\",{\"1\":{\"705\":1}}],[\"一把锁可能会被\",{\"1\":{\"220\":1}}],[\"一对多\",{\"1\":{\"684\":1}}],[\"一级信任一级\",{\"1\":{\"684\":1}}],[\"一级度量认证一级\",{\"1\":{\"684\":1}}],[\"一行缓存行这样使用\",{\"1\":{\"662\":1}}],[\"一边可以有效地调度\",{\"1\":{\"657\":1}}],[\"一系列的key值相同的序列化结构\",{\"1\":{\"652\":1}}],[\"一部分时间花在了编译\",{\"1\":{\"568\":1}}],[\"一路回车\",{\"1\":{\"495\":1}}],[\"一次发送\",{\"1\":{\"435\":1}}],[\"一次写入多次读取\",{\"1\":{\"15\":1}}],[\"一主多从\",{\"1\":{\"432\":1}}],[\"一条消息能够被消费多次\",{\"1\":{\"431\":1}}],[\"一条高速路通常会有对各车道进行分流\",{\"1\":{\"430\":1}}],[\"一条元信息记录会占用200b内存空间\",{\"1\":{\"17\":1}}],[\"一些业务场景中\",{\"1\":{\"818\":1}}],[\"一些产生统计结果的收集器也非常有用\",{\"1\":{\"527\":1}}],[\"一些项目数据同步问题也可以用到\",{\"1\":{\"428\":1}}],[\"一些建议\",{\"0\":{\"82\":1}}],[\"一并提交业务数据更新和相应回滚日志记录\",{\"1\":{\"421\":1}}],[\"一阶段正向服务和二阶段补偿服务都由业务开发实现\",{\"1\":{\"423\":1}}],[\"一阶段\",{\"1\":{\"421\":1,\"422\":1}}],[\"一组相关配置的集合\",{\"1\":{\"417\":1}}],[\"一连串调用\",{\"1\":{\"413\":1}}],[\"一台或多台机器\",{\"1\":{\"287\":1}}],[\"一台作为从服务器\",{\"1\":{\"75\":1}}],[\"一台作为主服务器\",{\"1\":{\"75\":1}}],[\"一文中写到\",{\"1\":{\"196\":1}}],[\"一定要让程序将各种分支情况都完整执行到程序结束\",{\"1\":{\"558\":1}}],[\"一定要注意手动回\",{\"1\":{\"413\":1}}],[\"一定要注意结合考虑并发读写的场景\",{\"1\":{\"192\":1}}],[\"一定是所要选择的列\",{\"1\":{\"100\":1}}],[\"一样\",{\"1\":{\"186\":1,\"616\":1,\"910\":1}}],[\"一般会遵循这样的原则\",{\"1\":{\"910\":1}}],[\"一般会调用outputcollector\",{\"1\":{\"41\":1}}],[\"一般一行缓存行有64字节\",{\"1\":{\"662\":1}}],[\"一般的要将\",{\"1\":{\"651\":1}}],[\"一般免费证书较少\",{\"1\":{\"522\":1}}],[\"一般存放在\",{\"1\":{\"490\":1}}],[\"一般约定中我们都是把参数写在\",{\"1\":{\"483\":1}}],[\"一般是读就绪或写就绪\",{\"1\":{\"795\":1}}],[\"一般是通过为数据表增加一个\",{\"1\":{\"730\":1}}],[\"一般是新生代和老年代\",{\"1\":{\"557\":1}}],[\"一般是指http\",{\"1\":{\"481\":1}}],[\"一般是我们的id生成器开始使用的时间\",{\"1\":{\"205\":1}}],[\"一般有运行nginx服务器的用户组\",{\"1\":{\"305\":1}}],[\"一般也建议用户使用cname记录绑定域名的\",{\"1\":{\"222\":1}}],[\"一般来说调用shutdown方法来关闭线程池\",{\"1\":{\"764\":1}}],[\"一般来说可以选择如下阻塞队列\",{\"1\":{\"759\":1}}],[\"一般来说为了避免一直等待的情况\",{\"1\":{\"555\":1}}],[\"一般来说\",{\"1\":{\"129\":1,\"558\":1,\"580\":1,\"659\":1}}],[\"一般情况下\",{\"1\":{\"102\":1,\"126\":1,\"445\":1}}],[\"一般建议不要超过\",{\"1\":{\"82\":1}}],[\"一般设置物理存储的60\",{\"1\":{\"74\":1}}],[\"一旦对象间的关系发生任何变化\",{\"1\":{\"921\":1}}],[\"一旦这样\",{\"1\":{\"919\":1}}],[\"一旦需要修改\",{\"1\":{\"911\":1}}],[\"一旦如此\",{\"1\":{\"910\":1}}],[\"一旦完成重构\",{\"1\":{\"907\":1}}],[\"一旦某个描述符就绪\",{\"1\":{\"795\":1}}],[\"一旦\",{\"1\":{\"612\":1}}],[\"一旦数据写入后消费者会收到通知\",{\"1\":{\"452\":1}}],[\"一旦找到了资源\",{\"1\":{\"381\":1}}],[\"一旦缓存住了资源\",{\"1\":{\"305\":1}}],[\"一旦监听到删除事件或者因租约失效而删除的事件\",{\"1\":{\"214\":1}}],[\"一旦网络问题发生\",{\"1\":{\"201\":1}}],[\"一旦发生网络故障或者消息丢失等情况\",{\"1\":{\"197\":1}}],[\"一旦关系型数据库要考虑主备同步\",{\"1\":{\"196\":1}}],[\"一旦高信用品质的客户转移运用中期票据融资\",{\"1\":{\"178\":1}}],[\"一旦转账成功\",{\"1\":{\"66\":1}}],[\"一旦在执行某一步骤的过程中发生问题\",{\"1\":{\"66\":1}}],[\"一\",{\"0\":{\"82\":1,\"368\":1,\"614\":1},\"1\":{\"63\":1,\"64\":1,\"189\":5,\"683\":1,\"684\":1,\"704\":1,\"722\":1,\"834\":1,\"892\":1}}],[\"一个程序对同一个锁不间断\",{\"1\":{\"924\":1}}],[\"一个比较好的评判方法是\",{\"1\":{\"914\":1}}],[\"一个对象具有状态\",{\"1\":{\"906\":1}}],[\"一个软件总是为解决某种特定的需求而产生\",{\"1\":{\"898\":1}}],[\"一个软件不可能发生物理损耗\",{\"1\":{\"898\":1}}],[\"一个存在安全漏洞的登录系统\",{\"1\":{\"897\":1}}],[\"一个数据文件仅能归属于一个表空间\",{\"1\":{\"853\":1}}],[\"一个数据库事务通常包含对数据库进行读或写的一个操作序列\",{\"1\":{\"65\":1}}],[\"一个表空间可以包含一个或多个数据文件\",{\"1\":{\"853\":1}}],[\"一个表只能有一个主键\",{\"1\":{\"110\":2}}],[\"一个中文占用三个字节\",{\"1\":{\"836\":1}}],[\"一个中文占用两个字节\",{\"1\":{\"836\":1}}],[\"一个树\",{\"1\":{\"825\":1}}],[\"一个链可以是一条线\",{\"1\":{\"825\":1}}],[\"一个链表\",{\"1\":{\"133\":1}}],[\"一个纯的责任链模式要求一个具体的处理者对象只能在两个行为中选择一个\",{\"1\":{\"825\":1}}],[\"一个人累死\",{\"1\":{\"789\":1}}],[\"一个具有优先级的阻塞队列\",{\"1\":{\"759\":1}}],[\"一个不存储元素的阻塞队列\",{\"1\":{\"759\":1}}],[\"一个包含两个属性的对象\",{\"1\":{\"722\":1}}],[\"一个java对象在内存中包括对象头\",{\"1\":{\"722\":1}}],[\"一个reentrantlock对象可以同时绑定对个对象\",{\"1\":{\"703\":1}}],[\"一个硬件\",{\"1\":{\"689\":1}}],[\"一个设计得当的系统不应该有所谓的全局变量的\",{\"1\":{\"683\":1}}],[\"一个类受多种变化的影响\",{\"1\":{\"911\":1}}],[\"一个类中的同步方法调用另一个同步方法\",{\"1\":{\"723\":1}}],[\"一个类中有多个\",{\"1\":{\"413\":1}}],[\"一个类只重视内部关系\",{\"1\":{\"683\":1}}],[\"一个全局的\",{\"1\":{\"653\":1}}],[\"一个threadlocal只能存储一个object对象\",{\"1\":{\"650\":1}}],[\"一个线程向threadlocal里面写值并打印\",{\"1\":{\"650\":1}}],[\"一个线程或多个等待另外n个线程完成之后才能执行\",{\"1\":{\"446\":1,\"553\":1}}],[\"一个服务端通常会对一个请求作出响应\",{\"1\":{\"610\":1}}],[\"一个用作输入流\",{\"1\":{\"539\":1}}],[\"一个利用\",{\"1\":{\"530\":1}}],[\"一个由优先级堆支持的\",{\"1\":{\"530\":1}}],[\"一个由优先级堆支持的无界优先级队列\",{\"1\":{\"530\":1}}],[\"一个由链接节点支持的可选有界队列\",{\"1\":{\"530\":1}}],[\"一个由数组支持的有界队列\",{\"1\":{\"530\":1}}],[\"一个是写锁\",{\"1\":{\"818\":1}}],[\"一个是只读的锁\",{\"1\":{\"818\":1}}],[\"一个是以blockingqueue接口为代表的阻塞队列\",{\"1\":{\"528\":1}}],[\"一个是以concurrentlinkedqueue为代表的高性能队列\",{\"1\":{\"528\":1}}],[\"一个是子网广播地址\",{\"1\":{\"526\":1}}],[\"一个是子网网络地址\",{\"1\":{\"526\":1}}],[\"一个队列就是一个先入先出\",{\"1\":{\"528\":1}}],[\"一个组播地址\",{\"1\":{\"526\":1}}],[\"一个为广播地址\",{\"1\":{\"526\":1}}],[\"一个为网络地址\",{\"1\":{\"526\":1}}],[\"一个分支\",{\"0\":{\"492\":1}}],[\"一个分布式系统\",{\"1\":{\"194\":1}}],[\"一个分布式系统最多只能同时满足一致性\",{\"1\":{\"191\":1}}],[\"一个future接口表示一个未来可能会返回的结果\",{\"1\":{\"475\":1}}],[\"一个future类型的实例代表一个未来能获取结果的对象\",{\"1\":{\"475\":1}}],[\"一个int值\",{\"1\":{\"444\":1}}],[\"一个日志段文件满了\",{\"1\":{\"433\":1}}],[\"一个监测周期内\",{\"1\":{\"402\":1}}],[\"一个监测周期\",{\"1\":{\"402\":1}}],[\"一个周期\",{\"1\":{\"402\":1}}],[\"一个请求过来后\",{\"1\":{\"307\":1}}],[\"一个http中可以有多个server\",{\"1\":{\"305\":1}}],[\"一个最基本的upstream模块是这样的\",{\"1\":{\"298\":1}}],[\"一个范围\",{\"1\":{\"214\":1}}],[\"一个名为\",{\"1\":{\"214\":1}}],[\"一个连数据一致性都保证不了的分布式存储要他有何用\",{\"1\":{\"197\":1}}],[\"一个保证了cp而一个舍弃了a的分布式系统\",{\"1\":{\"197\":1}}],[\"一个地执行\",{\"1\":{\"139\":1}}],[\"一个哈希表里面可以有多个哈希表节点\",{\"1\":{\"123\":1}}],[\"一个执行计划时\",{\"1\":{\"100\":1}}],[\"一个\",{\"1\":{\"100\":1}}],[\"一个事务中的所有操作\",{\"1\":{\"105\":1}}],[\"一个事务\",{\"1\":{\"74\":1,\"106\":1}}],[\"一个事务先后读取一个范围的记录\",{\"1\":{\"72\":1}}],[\"一个事务一旦提交\",{\"1\":{\"65\":1}}],[\"一个事务的执行不应影响其他事务的执行\",{\"1\":{\"65\":1}}],[\"一个集群只有一个jobtracker\",{\"1\":{\"33\":1}}],[\"一个客户端通过指定的tcp端口与namenode机器建立连接\",{\"1\":{\"19\":1}}],[\"一张表的索引储存在另外一张表中\",{\"1\":{\"28\":1}}],[\"一致则认为登录成功\",{\"1\":{\"897\":1}}],[\"一致状态的含义是数据库中的数据应满足完整性约束\",{\"1\":{\"65\":1}}],[\"一致性+分区容错性\",{\"1\":{\"198\":1}}],[\"一致性是因为有并发读写才有的问题\",{\"1\":{\"192\":1}}],[\"一致性主要指的是多并发访问时更新过的数据如何获取的问题\",{\"1\":{\"192\":1}}],[\"一致性指\",{\"1\":{\"192\":1}}],[\"一致性与原子性是密切相关的\",{\"1\":{\"67\":1}}],[\"一致性\",{\"0\":{\"192\":1},\"1\":{\"65\":2,\"66\":1,\"105\":1,\"192\":1}}],[\"一致\",{\"1\":{\"23\":2,\"198\":1}}],[\"一类函数就是表生成函数\",{\"1\":{\"22\":1}}],[\"本博客\",{\"1\":{\"650\":1}}],[\"本身的长度\",{\"1\":{\"618\":1}}],[\"本身提供了不同时区相互转换的内置函数\",{\"1\":{\"25\":1}}],[\"本节接下来的内容将详细对比\",{\"1\":{\"617\":1}}],[\"本\",{\"1\":{\"413\":1}}],[\"本手册明确防止\",{\"1\":{\"413\":1}}],[\"本机ip\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"本来就很小\",{\"1\":{\"317\":1}}],[\"本票\",{\"1\":{\"175\":1}}],[\"本书后续的章节将陆续对这些链表应用进行介绍\",{\"1\":{\"118\":1}}],[\"本质区别\",{\"1\":{\"110\":2}}],[\"本文由翻阅\",{\"1\":{\"825\":1}}],[\"本文主要研究沈昌祥院士的trusted\",{\"1\":{\"684\":1}}],[\"本文中的私钥\",{\"1\":{\"682\":1}}],[\"本文中亦称之为\",{\"1\":{\"140\":1}}],[\"本文介绍了磁盘挂载\",{\"1\":{\"368\":1}}],[\"本文介绍了redis安装\",{\"1\":{\"352\":1}}],[\"本文介绍了nginx安装\",{\"1\":{\"343\":1}}],[\"本文介绍了mysql安装\",{\"1\":{\"318\":1}}],[\"本文尝试使用该系统对k8s里部署的pod进行日志收集并加以图形可视化展示\",{\"1\":{\"265\":1}}],[\"本文使用阿里云私有仓库\",{\"1\":{\"263\":1}}],[\"本文不予以展开\",{\"1\":{\"153\":1}}],[\"本文接下来的内容将对\",{\"1\":{\"118\":1}}],[\"本文做些笔记\",{\"1\":{\"82\":1}}],[\"本文权威指南读书笔记\",{\"1\":{\"15\":1}}],[\"本地内存中存储了该线程以读\",{\"1\":{\"809\":1}}],[\"本地内存中\",{\"1\":{\"722\":1}}],[\"本地变量\",{\"1\":{\"722\":1}}],[\"本地方法栈jni引用的对象\",{\"1\":{\"558\":1}}],[\"本地版本push到远程\",{\"1\":{\"501\":1}}],[\"本地分支push到远程\",{\"1\":{\"500\":1}}],[\"本地主机会自动分配一个端口\",{\"1\":{\"254\":1}}],[\"本地文件读取\",{\"1\":{\"537\":1}}],[\"本地文件复制容器中\",{\"0\":{\"243\":1}}],[\"本地文件上传到hdfs\",{\"0\":{\"7\":1}}],[\"本地生成\",{\"1\":{\"209\":1}}],[\"本地创建文件a\",{\"1\":{\"7\":1}}],[\"供读取时进行完整性校验\",{\"1\":{\"14\":1}}],[\"同理\",{\"1\":{\"751\":1}}],[\"同样的盐值页面中也存在一份\",{\"1\":{\"897\":1}}],[\"同样支持一对多\",{\"1\":{\"640\":1}}],[\"同样请求\",{\"1\":{\"317\":1}}],[\"同样受限于其整型数组\",{\"1\":{\"158\":1}}],[\"同步与释放本身会带来性能损耗\",{\"1\":{\"924\":1}}],[\"同步与释放\",{\"1\":{\"924\":2}}],[\"同步状态减去写状态\",{\"1\":{\"821\":1}}],[\"同步块\",{\"1\":{\"661\":2}}],[\"同步块中\",{\"1\":{\"660\":1}}],[\"同步是协调多个相互关联线程合作完synchronized不同用法锁对象说明\",{\"1\":{\"659\":1}}],[\"同步关系中往往包含互斥\",{\"1\":{\"659\":1}}],[\"同步器的tryacquireshared的结果为1\",{\"1\":{\"446\":1}}],[\"同步到\",{\"1\":{\"155\":1}}],[\"同步\",{\"0\":{\"659\":1},\"1\":{\"143\":1,\"659\":2,\"924\":3}}],[\"同的字符集\",{\"1\":{\"99\":1}}],[\"同时将node的lock状态职位false\",{\"1\":{\"929\":1}}],[\"同时将确认序号\",{\"1\":{\"648\":1}}],[\"同时将确认结果反馈给承办担保机构和银行分行\",{\"1\":{\"189\":1}}],[\"同时修改偏向锁的标志位\",{\"1\":{\"673\":1}}],[\"同时对临界区的资源会按照某种逻辑顺序进行访问\",{\"1\":{\"659\":1}}],[\"同时序号也保证了传送到接收端实体的包的按序接收\",{\"1\":{\"644\":1}}],[\"同时课程设计过程完全公开\",{\"1\":{\"489\":1}}],[\"同时扩展了dataprovider\",{\"1\":{\"472\":2}}],[\"同时由于ringbuffer可以实现为无锁的队列\",{\"1\":{\"452\":1}}],[\"同时确定好发往哪个partition\",{\"1\":{\"433\":1}}],[\"同时为发布和订阅提供高吞吐量\",{\"1\":{\"428\":1}}],[\"同时为dataid的后缀\",{\"1\":{\"401\":1}}],[\"同时为了防止数据丢失\",{\"1\":{\"19\":1}}],[\"同时整合了熔断器\",{\"1\":{\"394\":1,\"416\":1}}],[\"同时使用\",{\"1\":{\"221\":1}}],[\"同时也能够获取读锁\",{\"1\":{\"819\":1}}],[\"同时也可以看到\",{\"1\":{\"673\":1}}],[\"同时也可以设置您域名的二级域名\",{\"1\":{\"222\":1}}],[\"同时也可能涉及培训\",{\"1\":{\"167\":1}}],[\"同时也包含它们的\",{\"1\":{\"214\":1}}],[\"同时也支持续约\",{\"1\":{\"214\":1}}],[\"同时下单的并发很高\",{\"1\":{\"202\":1}}],[\"同时系统对网络分割具备容错性\",{\"1\":{\"198\":1}}],[\"同时报送银行总行\",{\"1\":{\"189\":1}}],[\"同时反馈给银行分行和承办担保机构\",{\"1\":{\"189\":1}}],[\"同时可能获得更低的融资成本\",{\"1\":{\"166\":1}}],[\"同时\",{\"1\":{\"153\":1,\"221\":1}}],[\"同时一致性还能保证账户余额不会变成负数等\",{\"1\":{\"66\":1}}],[\"同时提供了数据库即使在异常状态下仍能保持一致性的方法\",{\"1\":{\"65\":1}}],[\"同时还会根据namenode的指示来进行创建\",{\"1\":{\"17\":1}}],[\"同时namenode会被告知待备份状态\",{\"1\":{\"14\":1}}],[\"同一线程在某地方进行设置\",{\"1\":{\"650\":1}}],[\"同一分区的不同副本中保存的是相同的消息\",{\"1\":{\"432\":1}}],[\"同一级节点需要左对齐\",{\"1\":{\"414\":1}}],[\"同一时间截\",{\"1\":{\"205\":1}}],[\"同一时间一个region只分配给一个region服务器\",{\"1\":{\"199\":1}}],[\"同一机器\",{\"1\":{\"205\":1}}],[\"同一机架上的不同节点\",{\"1\":{\"14\":1}}],[\"同一个类的两个函数含有相同的表达式\",{\"1\":{\"909\":1}}],[\"同一个\",{\"1\":{\"448\":1}}],[\"同一个topic可以被多个消费者订阅\",{\"1\":{\"431\":1}}],[\"同一个资源多次请求\",{\"1\":{\"305\":1}}],[\"同一个数据库\",{\"1\":{\"99\":1}}],[\"同一个节点中的进程\",{\"1\":{\"14\":1}}],[\"同一台服务器\",{\"1\":{\"99\":1}}],[\"同一份数据多种处理\",{\"0\":{\"27\":1}}],[\"同一语句多次执行的返回值是相同的\",{\"1\":{\"24\":1}}],[\"同一数据中心不同机架\",{\"1\":{\"14\":1}}],[\"期待研究源码\",{\"1\":{\"14\":1}}],[\"感觉不错\",{\"1\":{\"626\":1}}],[\"感觉像\",{\"1\":{\"41\":1}}],[\"感觉和文件上传很类似\",{\"1\":{\"14\":1}}],[\"感觉这个ack和tcp\",{\"1\":{\"14\":1}}],[\"还免不了有一些缺陷需要修改\",{\"1\":{\"898\":1}}],[\"还需要一份盐值作为网络请求的身份参照物\",{\"1\":{\"897\":1}}],[\"还没有返回一个可读写的mask掩码\",{\"1\":{\"799\":1}}],[\"还会为\",{\"1\":{\"621\":1}}],[\"还不能直接对文件进行读写操作\",{\"1\":{\"537\":1}}],[\"还要加上\",{\"1\":{\"522\":1}}],[\"还要提供额外的方法读取\",{\"1\":{\"475\":1}}],[\"还原与恢复的关系\",{\"0\":{\"890\":1}}],[\"还原一个版本的修改\",{\"1\":{\"503\":1}}],[\"还原\",{\"1\":{\"503\":1}}],[\"还可以只修改当前会话的值\",{\"1\":{\"854\":1}}],[\"还可以保存任意格式的二进制数据\",{\"1\":{\"623\":1}}],[\"还可以为数字字面量加下划线\",{\"1\":{\"549\":1}}],[\"还可以表示一个目录\",{\"1\":{\"537\":1}}],[\"还可以配置公钥免输入密码\",{\"1\":{\"497\":1}}],[\"还可以进行计算\",{\"1\":{\"388\":1}}],[\"还可以使用finalname来自定义该文件的名称\",{\"1\":{\"582\":1}}],[\"还可以使用\",{\"1\":{\"254\":1}}],[\"还可以是字符号串\",{\"1\":{\"25\":1}}],[\"还是没人唤醒\",{\"1\":{\"799\":1}}],[\"还是没有\",{\"1\":{\"381\":1}}],[\"还是个不错的解决方法\",{\"1\":{\"626\":1}}],[\"还是与消费端一样提供了一个\",{\"1\":{\"454\":1}}],[\"还是要保证最终一致性的\",{\"1\":{\"202\":1}}],[\"还是像zookeeper这种分布式协调组件\",{\"1\":{\"197\":1}}],[\"还是最后检验程序完整性\",{\"1\":{\"14\":1}}],[\"还有的需求已经消失了\",{\"1\":{\"898\":1}}],[\"还有阿里开源的\",{\"1\":{\"706\":1}}],[\"还有其他一些解释\",{\"1\":{\"684\":1}}],[\"还有一个保存数组长度的空间\",{\"1\":{\"672\":1}}],[\"还有比如spring的事务管理\",{\"1\":{\"650\":1}}],[\"还有6位可用\",{\"1\":{\"526\":1}}],[\"还有分布式系统中常用的zookeeper也是在cap三者之中选择优先保证cp的\",{\"1\":{\"197\":1}}],[\"还有可能利用到覆盖索引\",{\"1\":{\"82\":1}}],[\"还有有一个seq\",{\"1\":{\"14\":1}}],[\"还避免了幻象读\",{\"1\":{\"71\":1}}],[\"每当为某个类增加一个子类\",{\"1\":{\"917\":1}}],[\"每当感觉需要用注释来说明点什么的时候\",{\"1\":{\"910\":1}}],[\"每当从客户端收到新的数据时\",{\"1\":{\"613\":1}}],[\"每条日志记录通常表示\",{\"1\":{\"786\":1}}],[\"每条tcp传输连接只能有两个端点\",{\"1\":{\"644\":1}}],[\"每部分使用\",{\"1\":{\"749\":1}}],[\"每人一把\",{\"1\":{\"705\":1}}],[\"每调用一次\",{\"1\":{\"435\":1}}],[\"每1秒进行1次监测计算\",{\"1\":{\"402\":1}}],[\"每台服务器\",{\"1\":{\"234\":1}}],[\"每台的初始值依次为0\",{\"1\":{\"211\":1}}],[\"每进行一次事务加一\",{\"1\":{\"214\":1}}],[\"每一次读写操作都循环利用这个内存环\",{\"1\":{\"452\":1}}],[\"每一条消息只能分发给集群中的一个消费者进行处理\",{\"1\":{\"431\":1}}],[\"每一级退格必须为两个或四个空格\",{\"1\":{\"414\":1}}],[\"每一个步骤都成功\",{\"1\":{\"245\":1}}],[\"每一个非故障的节点必须对每一个请求作出响应\",{\"1\":{\"194\":1}}],[\"每一张图片用vgg16提取特征值并存入milvus数据库\",{\"1\":{\"58\":1}}],[\"每秒进行一次\",{\"1\":{\"148\":1}}],[\"每秒建立一个分区\",{\"1\":{\"22\":1}}],[\"每次读写操作都必须在多个处理器缓存之间进行缓存同步\",{\"1\":{\"929\":1}}],[\"每次处理器和内存之间的数据传递都是通过一系列步骤来完成的\",{\"1\":{\"809\":1}}],[\"每次value变更时\",{\"1\":{\"665\":1}}],[\"每次我们都new一个simpledateformat对象\",{\"1\":{\"626\":1}}],[\"每次使用其中的一块\",{\"1\":{\"557\":1}}],[\"每次更新或切换分支后都需要运行一下\",{\"1\":{\"502\":1}}],[\"每次都有不同的结果\",{\"1\":{\"440\":2}}],[\"每次都有ack吧应该\",{\"1\":{\"14\":1}}],[\"每次批量发送消息的数量\",{\"1\":{\"435\":1}}],[\"每次修改需要重启logstash\",{\"1\":{\"281\":1}}],[\"每次写入\",{\"1\":{\"148\":1}}],[\"每个进程\",{\"1\":{\"929\":1}}],[\"每个类只因一种原因而修改\",{\"1\":{\"911\":1}}],[\"每个类或接口都对应一个\",{\"1\":{\"563\":1}}],[\"每个方法抽象层级不能多于两层\",{\"1\":{\"906\":1}}],[\"每个方法只做一件事\",{\"1\":{\"906\":1}}],[\"每个会话\",{\"1\":{\"857\":1}}],[\"每个参加游戏的人有两个行为\",{\"1\":{\"825\":1}}],[\"每个事务会读\",{\"1\":{\"809\":1}}],[\"每个事件关联上fd\",{\"1\":{\"806\":1}}],[\"每个对象的属性指针\",{\"1\":{\"722\":1}}],[\"每个class的属性指针\",{\"1\":{\"722\":1}}],[\"每个内核都有自己的高速缓存\",{\"1\":{\"662\":1}}],[\"每个应用对应的\",{\"1\":{\"653\":1}}],[\"每个应用的任务控制节点\",{\"1\":{\"627\":1}}],[\"每个应用的resource里需要配置一个registry\",{\"1\":{\"424\":1}}],[\"每个单词为\",{\"1\":{\"652\":1}}],[\"每个tcpsocket的内核中都有一个发送缓冲区和一个接收缓冲区\",{\"1\":{\"637\":1}}],[\"每个topic又有哪些partition等\",{\"1\":{\"433\":1}}],[\"每个机器节点上有具有任务的执行进程\",{\"1\":{\"627\":1}}],[\"每个网段有254个ip地址\",{\"1\":{\"526\":1}}],[\"每个子公司都分配在同一个网段\",{\"1\":{\"526\":1}}],[\"每个子网32台\",{\"1\":{\"526\":1}}],[\"每个子网的主机数量\",{\"1\":{\"526\":1}}],[\"每个子网实际可分配的ip地址数\",{\"1\":{\"526\":1}}],[\"每个子网可分配的ip地址块大小\",{\"1\":{\"526\":1}}],[\"每个哈希表节点都有一个next指针\",{\"1\":{\"513\":1}}],[\"每个元素占一行即可\",{\"1\":{\"504\":1}}],[\"每个核心类怎么用\",{\"1\":{\"458\":1}}],[\"每个线程都有一个私有的本地内存\",{\"1\":{\"809\":1}}],[\"每个线程调用await方法告诉cyclicbarrier我已经到达屏障\",{\"1\":{\"552\":1}}],[\"每个线程等待1s\",{\"1\":{\"446\":1}}],[\"每个线程从内存中读取a的值\",{\"1\":{\"440\":1}}],[\"每个消费者都需要找到下一个它要访问的序号\",{\"1\":{\"452\":1}}],[\"每个消费者都有一个对应的消费组\",{\"1\":{\"431\":1}}],[\"每个消费者仅需处理1个partition\",{\"1\":{\"431\":1}}],[\"每个partition都有多个副本\",{\"1\":{\"432\":1}}],[\"每个partition只能由消费组中的一个消费者进行消费\",{\"1\":{\"431\":1}}],[\"每个pod启动一个日志收集代理\",{\"1\":{\"265\":1}}],[\"每个车道上的车都是通往一个目的地的\",{\"1\":{\"430\":1}}],[\"每个人用不同的namespace或者group\",{\"1\":{\"410\":1}}],[\"每个buckets\",{\"1\":{\"402\":1}}],[\"每个请求会按时间顺序逐一分配到不同的后端服务器\",{\"1\":{\"299\":1}}],[\"每个预应用程序的pod中增加一个日志收集容器\",{\"1\":{\"265\":1}}],[\"每个分割的库存使用商品\",{\"1\":{\"221\":1}}],[\"每个服务器的时钟不可能完全同步\",{\"1\":{\"207\":1}}],[\"每个值只出现在一个region\",{\"1\":{\"199\":1}}],[\"每个店铺平均150个不同规格的商品\",{\"1\":{\"131\":1}}],[\"每个库可以放在不同的服务器上\",{\"1\":{\"130\":1,\"131\":1}}],[\"每个表存储其中一部分字段\",{\"1\":{\"129\":1}}],[\"每个\",{\"1\":{\"124\":1,\"125\":1,\"126\":1,\"214\":1,\"616\":1}}],[\"每个链表使用一个\",{\"1\":{\"121\":1}}],[\"每个链表节点由一个\",{\"1\":{\"121\":1}}],[\"每个链表节点使用一个\",{\"1\":{\"119\":1}}],[\"每个节点都有一个指向前置节点和后置节点的指针\",{\"1\":{\"121\":1}}],[\"每个额外的索引都要占用额外的磁盘空间\",{\"1\":{\"100\":1}}],[\"每个myisam\",{\"1\":{\"91\":1}}],[\"每个session将会分配参数设置的内存大小\",{\"1\":{\"74\":1}}],[\"每个桶就会有多个用户的记录\",{\"1\":{\"27\":1}}],[\"每个步骤可能会产生一到多个临时表\",{\"1\":{\"27\":1}}],[\"每个reducer有序\",{\"1\":{\"23\":1}}],[\"每个文件块的名及文件有哪些块组成\",{\"1\":{\"16\":1}}],[\"每个客户端就是一个datanode节点\",{\"1\":{\"14\":1}}],[\"当获得相应的信号\",{\"1\":{\"926\":1}}],[\"当获取到锁的时候需要从内核态恢复\",{\"1\":{\"812\":1}}],[\"当变量在未被使用的情况下去猜测其当初设置的目的\",{\"1\":{\"920\":1}}],[\"当大量的数据排序或创建索引等占用临时表空间\",{\"1\":{\"864\":1}}],[\"当大家听到京广高速的时候\",{\"1\":{\"429\":1}}],[\"当创建用户时\",{\"1\":{\"864\":1}}],[\"当创建了\",{\"1\":{\"537\":1}}],[\"当数据库执行检查点时\",{\"1\":{\"863\":1}}],[\"当客户端发起请求\",{\"1\":{\"863\":1}}],[\"当客户端收到数据块的确认之后\",{\"1\":{\"14\":1}}],[\"当出现有两个线程来竞争锁的话\",{\"1\":{\"829\":1}}],[\"当出现某一个参与者失败则补偿前面已经成功的参与者\",{\"1\":{\"423\":1}}],[\"当处理一个请求的处理者对象集合需要动态地指定时\",{\"1\":{\"825\":1}}],[\"当处理器正在寻找执行操作的数据时\",{\"1\":{\"662\":1}}],[\"当系统想发出一个请求给多个处理者对象中的某一个\",{\"1\":{\"825\":1}}],[\"当有多于一个的处理者对象会处理一个请求\",{\"1\":{\"825\":1}}],[\"当有服务器需要剔除\",{\"1\":{\"301\":1}}],[\"当写锁被其他线程获取后\",{\"1\":{\"822\":1}}],[\"当写测试的时候\",{\"1\":{\"4\":1}}],[\"当读锁已经被读线程获取或者写锁已经被其他写线程获取\",{\"1\":{\"820\":1}}],[\"当设备驱动发生自身资源可读写后\",{\"1\":{\"799\":1}}],[\"当设置了以下的属性\",{\"1\":{\"23\":1}}],[\"当初始maximumpool为空或者maximumpool中当前没有空闲线程时\",{\"1\":{\"773\":1}}],[\"当任务越来越多时很容易造成oom\",{\"1\":{\"771\":1}}],[\"当任务到达时\",{\"1\":{\"752\":1}}],[\"当所有任务都已关闭\",{\"1\":{\"764\":1}}],[\"当所有数据处理完成后\",{\"1\":{\"43\":1}}],[\"当队列和线程池都满了\",{\"1\":{\"761\":1}}],[\"当队列满时\",{\"1\":{\"530\":1}}],[\"当提交一个任务时\",{\"1\":{\"755\":1}}],[\"当工作完成后\",{\"1\":{\"751\":1}}],[\"当程序退出\",{\"1\":{\"751\":1}}],[\"当程序释放内存的时候\",{\"1\":{\"751\":1}}],[\"当程序中需要申请内存的时候\",{\"1\":{\"751\":1}}],[\"当程序中需要频繁的进行内存申请释放\",{\"1\":{\"751\":1}}],[\"当程序启动时\",{\"1\":{\"563\":1}}],[\"当没有竞争出现时\",{\"1\":{\"723\":1}}],[\"当jvm检测到不同的竞争状况时\",{\"1\":{\"723\":1}}],[\"当计数器为o时\",{\"1\":{\"723\":1}}],[\"当计算器为0时\",{\"1\":{\"703\":1}}],[\"当计算某一天的数据时会导致前一天数据被\",{\"1\":{\"27\":1}}],[\"当执行monitorexit指令时将锁计数器\",{\"1\":{\"723\":1}}],[\"当执行dml语句操作时\",{\"1\":{\"82\":1}}],[\"当第二个实体符合第一个实体的期望行为时\",{\"1\":{\"684\":1}}],[\"当线程数等于corepoolsize时\",{\"1\":{\"771\":1}}],[\"当线程数达到一定数量时\",{\"1\":{\"751\":1}}],[\"当线程池中的线程数大于corepoolsize\",{\"1\":{\"771\":1}}],[\"当线程调用lock方法时\",{\"1\":{\"723\":1}}],[\"当线程执行到临界区\",{\"1\":{\"673\":1}}],[\"当线程可以绑定到指定cpu\",{\"1\":{\"465\":1,\"472\":1}}],[\"当上面的对象需要由多个线程同时的访问时\",{\"1\":{\"665\":1}}],[\"当value变量改变时\",{\"1\":{\"665\":1}}],[\"当web应用程序向要记录客户端的信息时\",{\"1\":{\"651\":1}}],[\"当应用程序需要的内存超出堆的最大值时虚拟机就会提示内存溢出\",{\"1\":{\"651\":1}}],[\"当仅仅只有\",{\"1\":{\"650\":1}}],[\"当服务器端接收到这个包时\",{\"1\":{\"648\":1}}],[\"当网络出现拥塞的时候\",{\"1\":{\"644\":1}}],[\"当报文发送之后\",{\"1\":{\"638\":1}}],[\"当并发环境下\",{\"1\":{\"626\":1}}],[\"当项目在进行了局部修改或\",{\"1\":{\"605\":1}}],[\"当项目在原有的基础上增加了部分功能时\",{\"1\":{\"605\":1}}],[\"当整体框架结构发生变化时\",{\"1\":{\"605\":1}}],[\"当编码完毕\",{\"1\":{\"580\":1}}],[\"当运行指定程序时\",{\"1\":{\"558\":1,\"563\":1}}],[\"当这一块的内存使用完后\",{\"1\":{\"557\":1}}],[\"当两个线程都到同步点\",{\"1\":{\"555\":1}}],[\"当为0时\",{\"1\":{\"551\":1}}],[\"当期时区\",{\"1\":{\"527\":1}}],[\"当发生冲突时\",{\"1\":{\"512\":1}}],[\"当锁无效时\",{\"1\":{\"467\":1,\"472\":1}}],[\"当要求节省cpu资源\",{\"1\":{\"464\":1,\"472\":1}}],[\"当要将一个新的键值对添加到字典里面时\",{\"1\":{\"127\":1}}],[\"当然不是所有的需求变化都要在软件系统中实现\",{\"1\":{\"898\":1}}],[\"当然不止这些安全软件\",{\"1\":{\"897\":1}}],[\"当然会会有不同的分类\",{\"1\":{\"897\":1}}],[\"当然可以根据自己的应用场景\",{\"1\":{\"761\":1}}],[\"当然现在你可以多次调用bind\",{\"1\":{\"612\":1}}],[\"当然现在已经到了\",{\"1\":{\"458\":1}}],[\"当然\",{\"1\":{\"549\":1,\"644\":1,\"722\":1}}],[\"当然也考虑了获取mac的难度\",{\"1\":{\"208\":1}}],[\"当然也可以使用\",{\"1\":{\"82\":1}}],[\"当生产者结束向\",{\"1\":{\"456\":1}}],[\"当生产者向节点写完数据\",{\"1\":{\"454\":1}}],[\"当double必须用作bigdecimal的源时\",{\"1\":{\"445\":1}}],[\"当ref为null的时候compareandset返回true\",{\"1\":{\"814\":1}}],[\"当retris为0时\",{\"1\":{\"435\":1}}],[\"当redis\",{\"1\":{\"367\":1}}],[\"当leader副本发生故障时\",{\"1\":{\"432\":1}}],[\"当增加到4个消费者时\",{\"1\":{\"431\":1}}],[\"当消费者本身也是集群时\",{\"1\":{\"431\":1}}],[\"当你看着一个类说\",{\"1\":{\"911\":1}}],[\"当你本地创建了一个工作目录\",{\"1\":{\"497\":1}}],[\"当你已经有一个远程的git版本库\",{\"1\":{\"497\":1}}],[\"当你拿到的数字比我这个要大的时候请告诉我\",{\"1\":{\"453\":1}}],[\"当你重启\",{\"0\":{\"373\":1}}],[\"当你购买的时候提示你是有票的\",{\"1\":{\"202\":1}}],[\"当从库升级为主库时\",{\"1\":{\"342\":1}}],[\"当值为0时\",{\"1\":{\"317\":1}}],[\"当返回内容大于此值时才会使用gzip进行压缩\",{\"1\":{\"317\":1}}],[\"当过期之后\",{\"1\":{\"294\":1}}],[\"当探测无响应几次后将自动重启该容器\",{\"1\":{\"263\":1}}],[\"当业务代码执行完毕后\",{\"1\":{\"220\":1}}],[\"当业务执行完毕后\",{\"1\":{\"217\":1}}],[\"当释放锁时则需要根据重入的次数\",{\"1\":{\"218\":1}}],[\"当单实例不可用时\",{\"1\":{\"214\":1}}],[\"当会话失效的时候\",{\"1\":{\"214\":1}}],[\"当被\",{\"1\":{\"214\":1}}],[\"当被担保人不履行对债权人负有的合同义务时\",{\"1\":{\"180\":1}}],[\"当租约到期\",{\"1\":{\"214\":1}}],[\"当多个进程在同一个系统中\",{\"1\":{\"212\":1}}],[\"当多个应用程序在并发访问数据库时\",{\"1\":{\"65\":1}}],[\"当需要一个开辟一个线程去做具体的工作时\",{\"1\":{\"751\":1}}],[\"当需要将节点之间在不同时间的交互做唯一标识\",{\"1\":{\"204\":1}}],[\"当需要把\",{\"1\":{\"25\":1}}],[\"当某台region\",{\"1\":{\"199\":1}}],[\"当某个键值存在大量重复的时候\",{\"1\":{\"102\":1}}],[\"当债权人担心债务人可能无法按时履行其还款义务时\",{\"1\":{\"168\":1}}],[\"当债务人及担保机构均无力偿付\",{\"1\":{\"163\":1}}],[\"当前\",{\"1\":{\"822\":1}}],[\"当前写状态是否为0\",{\"1\":{\"821\":1}}],[\"当前的同步状态\",{\"1\":{\"820\":1}}],[\"当前进程\",{\"1\":{\"799\":1}}],[\"当前运行线程等于corepoolsize\",{\"1\":{\"771\":1}}],[\"当前工作空间的修改内容\",{\"1\":{\"503\":1}}],[\"当前调用者线程为\",{\"1\":{\"475\":2}}],[\"当前线程可获取\",{\"1\":{\"820\":1}}],[\"当前线程\",{\"1\":{\"820\":1}}],[\"当前线程获取读锁\",{\"1\":{\"822\":1}}],[\"当前线程获取\",{\"1\":{\"820\":1}}],[\"当前线程不是已经获取\",{\"1\":{\"820\":1}}],[\"当前线程少于corepoolsize\",{\"1\":{\"771\":1}}],[\"当前线程所执行的行号指示器\",{\"1\":{\"556\":1}}],[\"当前线程会阻塞\",{\"1\":{\"475\":1}}],[\"当前线程就会等待join线程执行完之后才继续执行\",{\"1\":{\"446\":1}}],[\"当前游标的下一个节点\",{\"1\":{\"454\":1}}],[\"当前数据源\",{\"1\":{\"427\":1}}],[\"当前数据提供服务\",{\"1\":{\"155\":1}}],[\"当前服务\",{\"1\":{\"427\":1}}],[\"当前状态\",{\"1\":{\"412\":1}}],[\"当前环境\",{\"1\":{\"410\":1}}],[\"当前锁是公平锁的一种实现\",{\"1\":{\"214\":1}}],[\"当前时间截\",{\"1\":{\"205\":1}}],[\"当前我国主流的再担保模式是分险类型的比例再担保模式\",{\"1\":{\"162\":1}}],[\"当担保人不能独立承担担保责任时\",{\"1\":{\"162\":1}}],[\"当内存使用率过高时\",{\"1\":{\"156\":1}}],[\"当配置选项中任意的\",{\"1\":{\"144\":1}}],[\"当我们创建一个对象lockobject时\",{\"1\":{\"673\":1}}],[\"当我们没有加任何措施时\",{\"1\":{\"665\":1}}],[\"当我们编写一个main调用sayhello\",{\"1\":{\"580\":1}}],[\"当我们要划分子网用到子网掩码m时\",{\"1\":{\"526\":1}}],[\"当我们提交一个callable任务后\",{\"1\":{\"475\":1}}],[\"当我们使用springcloud+nacos架构时\",{\"1\":{\"410\":1}}],[\"当我们说一个键\",{\"1\":{\"139\":1}}],[\"当我们查询美国伊利诺斯州所有雇员\",{\"1\":{\"21\":1}}],[\"当core2发起写操作时\",{\"1\":{\"663\":1}}],[\"当countdownlatch使用完毕后\",{\"1\":{\"446\":1}}],[\"当count为负数时\",{\"1\":{\"135\":1}}],[\"当count为正数时\",{\"1\":{\"135\":1}}],[\"当cpu切换分片\",{\"1\":{\"440\":1}}],[\"当create创建新表时\",{\"1\":{\"91\":1}}],[\"当一个对象被锁住时\",{\"1\":{\"723\":1}}],[\"当一个线程从上到下执行一个需要加分布式锁的业务时\",{\"1\":{\"217\":1}}],[\"当一个客户端持有锁期间\",{\"1\":{\"214\":1}}],[\"当一个事务执行完毕之后\",{\"1\":{\"139\":1}}],[\"当一个应用难以再细粒度的垂直拆分\",{\"1\":{\"131\":1}}],[\"当一个列表键包含了数量比较多的元素\",{\"1\":{\"118\":1}}],[\"当表数据量大时\",{\"1\":{\"129\":1}}],[\"当硬件达到瓶颈无法提升\",{\"1\":{\"128\":1}}],[\"当字典被用作数据库的底层实现\",{\"1\":{\"127\":1}}],[\"当使用该选项时\",{\"1\":{\"251\":1}}],[\"当使用联合索引\",{\"1\":{\"112\":1}}],[\"当使用web页面显示搜图网页\",{\"1\":{\"58\":1}}],[\"当mysql分析全表扫描比使用索引快的时候不使用索引\",{\"1\":{\"112\":1}}],[\"当存文件的时候\",{\"1\":{\"87\":1}}],[\"当在执行计划中的\",{\"1\":{\"82\":1}}],[\"当事务方法被另一个事务方法调用时\",{\"1\":{\"72\":1}}],[\"当用户拿测试集图片进行比对\",{\"1\":{\"58\":1}}],[\"当\",{\"1\":{\"25\":1,\"126\":1,\"141\":1,\"152\":1,\"155\":1,\"475\":3,\"619\":1,\"621\":1,\"622\":1,\"650\":1,\"809\":1,\"820\":1}}],[\"当salary字段的值是不合法的浮点数字符串的话\",{\"1\":{\"24\":1}}],[\"当只有一个reducer时上述结果相同\",{\"1\":{\"23\":1}}],[\"当满足这些条件时\",{\"1\":{\"23\":1}}],[\"当右边表根据连接条件没有对应的记录时\",{\"1\":{\"23\":1}}],[\"当查询长且复杂\",{\"1\":{\"20\":1}}],[\"当副本数满足最小副本数\",{\"1\":{\"19\":1}}],[\"当hadoop的namenode节点启动时\",{\"1\":{\"19\":1}}],[\"当指定的时间到达\",{\"1\":{\"14\":1}}],[\"此过程同上\",{\"1\":{\"863\":1}}],[\"此四个文件必不可少\",{\"1\":{\"853\":1}}],[\"此篇文章为\",{\"1\":{\"789\":1}}],[\"此类线程任务代码必须进行中断信号的处理\",{\"1\":{\"764\":1}}],[\"此后\",{\"1\":{\"751\":1}}],[\"此方法为打印jvm信息喝gc信息\",{\"1\":{\"721\":1}}],[\"此版本号由项目决定是否修改\",{\"1\":{\"605\":1}}],[\"此版本号增加\",{\"1\":{\"605\":1}}],[\"此设置是为了maven执行java时分配给大点的内存\",{\"1\":{\"575\":1}}],[\"此异步方法无法返回值\",{\"1\":{\"475\":1}}],[\"此接口最常见的用例之一是推迟某些代码的执行\",{\"1\":{\"475\":1}}],[\"此接口有两个实现类\",{\"1\":{\"450\":1}}],[\"此构造方法提供了一个准确转换\",{\"1\":{\"445\":1}}],[\"此处前端上传的base64后端无法直接解开\",{\"1\":{\"749\":1}}],[\"此处只介绍compatator\",{\"1\":{\"735\":1}}],[\"此处私钥\",{\"1\":{\"682\":1}}],[\"此处固定为\",{\"1\":{\"652\":1}}],[\"此处为json方式文件上传后端接收demo\",{\"1\":{\"749\":1}}],[\"此处为form方式文件上传后端接收demo\",{\"1\":{\"749\":1}}],[\"此处为相同单词词频累加之后的值\",{\"1\":{\"652\":1}}],[\"此处为一段字符串\",{\"1\":{\"652\":1}}],[\"此处为一段具体的文本数据\",{\"1\":{\"652\":1}}],[\"此处为一个单词\",{\"1\":{\"652\":3}}],[\"此处为文本数据的起始位置的偏移量\",{\"1\":{\"652\":1}}],[\"此处介绍mvn\",{\"1\":{\"579\":1}}],[\"此处的请求方式同服务端提供的访问方式相同\",{\"1\":{\"409\":1}}],[\"此处的roundrobinrule\",{\"1\":{\"404\":1}}],[\"此处主要为nacos服务端地址配置\",{\"1\":{\"409\":1}}],[\"此处\",{\"1\":{\"408\":1}}],[\"此处表示ie6及以下不启用gzip\",{\"1\":{\"317\":1}}],[\"此处设置为4个16k内存作为压缩结果流缓存\",{\"1\":{\"317\":1}}],[\"此策略适合有状态服务\",{\"1\":{\"301\":1}}],[\"此策略适合服务器配置相当\",{\"1\":{\"299\":1}}],[\"此策略比较适合服务器的硬件配置差别比较大的情况\",{\"1\":{\"300\":1}}],[\"此策略可以与least\",{\"1\":{\"300\":1}}],[\"此参数确定数据日志文件的大小\",{\"1\":{\"74\":1}}],[\"此参数确定写日志文件所用的内存大小\",{\"1\":{\"74\":1}}],[\"此指标通常用于搜索分子的类似子结构\",{\"1\":{\"54\":1}}],[\"此指标通常用于搜索分子的类似上层结构\",{\"1\":{\"54\":1}}],[\"此属性强制hive为目标表初始化过程设置一个正确的\",{\"1\":{\"27\":1}}],[\"此语句会剥夺\",{\"1\":{\"23\":1}}],[\"此外\",{\"1\":{\"17\":1,\"100\":1,\"214\":1,\"431\":1,\"563\":1,\"714\":1}}],[\"此时如果没有开启数据库归档\",{\"1\":{\"868\":1}}],[\"此时需要将部分脏数据块写入磁盘\",{\"1\":{\"859\":1}}],[\"此时需要将相关数据块读入缓冲区\",{\"1\":{\"859\":1}}],[\"此时需将从库数据同步到主库\",{\"1\":{\"342\":1}}],[\"此时占用排序区\",{\"1\":{\"855\":1}}],[\"此时数据库提供正常的服务\",{\"1\":{\"843\":1}}],[\"此时数据库不能对外正常提供务\",{\"1\":{\"843\":1}}],[\"此时可以修改数据库归档配置\",{\"1\":{\"843\":1}}],[\"此时可能就要根据另外线程的情况\",{\"1\":{\"673\":1}}],[\"此时锁就会膨胀\",{\"1\":{\"829\":1}}],[\"此时对这个\",{\"1\":{\"809\":1}}],[\"此时cachedthreadpool会创建一个新线程执行任务\",{\"1\":{\"773\":1}}],[\"此时偏向锁的状态为\",{\"1\":{\"673\":1}}],[\"此时的mark\",{\"1\":{\"673\":1}}],[\"此时会利用cas\",{\"1\":{\"673\":1}}],[\"此时我们对这些流的操作都是有意义的\",{\"1\":{\"806\":1}}],[\"此时我们则需要将共享在多线程间的数据进行隔离\",{\"1\":{\"664\":1}}],[\"此时我们线程就读相当于脏数据\",{\"1\":{\"440\":1}}],[\"此时a城就会明白\",{\"1\":{\"647\":1}}],[\"此时b城就会明白\",{\"1\":{\"647\":2}}],[\"此时你就可以利用\",{\"1\":{\"497\":1}}],[\"此时负责人会看到\",{\"1\":{\"488\":1}}],[\"此时repli节点完全成为leader节点\",{\"1\":{\"435\":1}}],[\"此时还没有初始化\",{\"1\":{\"381\":1}}],[\"此时禅道相关的session\",{\"1\":{\"367\":1}}],[\"此时业务数据都会存储到从库\",{\"1\":{\"342\":1}}],[\"此时就更需要使用gtm帮你找到网络节点中适合你的cdn缓存服务器\",{\"1\":{\"222\":1}}],[\"此时映射关系的\",{\"1\":{\"221\":1}}],[\"此时一个能够生成全局唯一id的系统是非常必要的\",{\"1\":{\"204\":1}}],[\"此时效率可能极差\",{\"1\":{\"102\":1}}],[\"此时namenode把失败节点的数据备份到另一个健康的节点\",{\"1\":{\"19\":1}}],[\"此时\",{\"1\":{\"14\":1,\"23\":1,\"221\":3,\"381\":1,\"705\":1,\"730\":1}}],[\"此站是郑天祺的个人站\",{\"1\":{\"1\":1}}],[\"第四次挥手\",{\"1\":{\"649\":1}}],[\"第四部分为日期版本号\",{\"1\":{\"605\":1}}],[\"第四种\",{\"1\":{\"419\":1}}],[\"第\",{\"1\":{\"552\":1,\"843\":1}}],[\"第五种\",{\"1\":{\"419\":1}}],[\"第一步\",{\"1\":{\"902\":1,\"903\":1,\"904\":1}}],[\"第一次启动虚拟机\",{\"1\":{\"834\":1}}],[\"第一次出现这样的的问题以后\",{\"1\":{\"651\":1}}],[\"第一次挥手\",{\"1\":{\"649\":1}}],[\"第一次握手\",{\"1\":{\"648\":1}}],[\"第一次\",{\"1\":{\"647\":1,\"648\":1}}],[\"第一部分为主版本号\",{\"1\":{\"605\":1}}],[\"第一行省略了前面的\",{\"1\":{\"544\":1}}],[\"第一是这个event对象需要被生产者获取往里面填充数据\",{\"1\":{\"472\":1}}],[\"第一种\",{\"1\":{\"419\":1}}],[\"第一个参数是\",{\"1\":{\"712\":1}}],[\"第一个参数值存在\",{\"1\":{\"527\":1}}],[\"第一个实体可假设第二个实体是可信的\",{\"1\":{\"684\":1}}],[\"第一个线程\",{\"1\":{\"650\":1}}],[\"第一个经常被叫做\",{\"1\":{\"612\":1}}],[\"第一个容器服务部署成功了\",{\"1\":{\"241\":1}}],[\"第一个datanode会向客户端发回一个ack\",{\"1\":{\"14\":1}}],[\"第一个datanode是以数据包\",{\"1\":{\"14\":1}}],[\"第三次挥手\",{\"1\":{\"649\":1}}],[\"第三次握手\",{\"1\":{\"648\":1}}],[\"第三次\",{\"1\":{\"647\":1}}],[\"第三部分为修订版本号\",{\"1\":{\"605\":1}}],[\"第三个\",{\"1\":{\"512\":1}}],[\"第三个datanode开始向本地磁盘写入数据包\",{\"1\":{\"14\":1}}],[\"第三步\",{\"1\":{\"440\":1}}],[\"第三步若判定失败\",{\"1\":{\"214\":1}}],[\"第三种\",{\"1\":{\"419\":1}}],[\"第三方工具可以快速构建pom\",{\"1\":{\"578\":1}}],[\"第三方策略\",{\"0\":{\"303\":1}}],[\"第三方不多描述\",{\"1\":{\"298\":1}}],[\"第十五条\",{\"1\":{\"188\":1}}],[\"第十条\",{\"1\":{\"188\":1}}],[\"第二步\",{\"1\":{\"902\":1,\"903\":1,\"904\":1}}],[\"第二天下午\",{\"1\":{\"868\":1}}],[\"第二次也是应该能够成功获取到的\",{\"1\":{\"815\":1}}],[\"第二次就不能成功获取到\",{\"1\":{\"815\":1}}],[\"第二次挥手\",{\"1\":{\"649\":1}}],[\"第二次握手\",{\"1\":{\"648\":1}}],[\"第二次\",{\"1\":{\"647\":1}}],[\"第二次读会增加一数据行\",{\"1\":{\"72\":1}}],[\"第二部分为次版本号\",{\"1\":{\"605\":1}}],[\"第二个参数为传入\",{\"1\":{\"712\":1}}],[\"第二个参数值存在\",{\"1\":{\"527\":1}}],[\"第二个线程\",{\"1\":{\"650\":1}}],[\"第二个经常被叫做\",{\"1\":{\"612\":1}}],[\"第二个是在消费时\",{\"1\":{\"472\":1}}],[\"第二个消费者\",{\"1\":{\"454\":1}}],[\"第二个为\",{\"1\":{\"214\":1}}],[\"第二种\",{\"1\":{\"419\":1}}],[\"第二类丢失更新的问题\",{\"1\":{\"106\":3}}],[\"的函数只有少数几个\",{\"1\":{\"922\":1}}],[\"的技术\",{\"1\":{\"913\":1}}],[\"的步伐修改程序\",{\"1\":{\"900\":1}}],[\"的程度\",{\"1\":{\"898\":1}}],[\"的还原与恢复演示\",{\"1\":{\"893\":1}}],[\"的不定时繁忙\",{\"1\":{\"872\":1}}],[\"的快照过旧的错误\",{\"1\":{\"864\":1}}],[\"的核心线程\",{\"1\":{\"858\":1}}],[\"的核心概念是弹性分布式数据集\",{\"1\":{\"627\":1}}],[\"的密码\",{\"1\":{\"831\":1}}],[\"的线程的话\",{\"1\":{\"820\":1}}],[\"的线性函数值作为\",{\"1\":{\"507\":1}}],[\"的阻塞复用到同一个select的阻塞上\",{\"1\":{\"808\":1}}],[\"的关系\",{\"0\":{\"787\":1}}],[\"的处理策略\",{\"1\":{\"779\":1}}],[\"的本质其实是monitorenter和monitorexit字节码指令的一个reference类型的参数\",{\"1\":{\"723\":1}}],[\"的class对象指针\",{\"1\":{\"722\":1}}],[\"的cd\",{\"1\":{\"234\":1}}],[\"的基础上增加\",{\"1\":{\"720\":1}}],[\"的也是一个独立的java进程\",{\"1\":{\"712\":1}}],[\"的实现位于\",{\"1\":{\"712\":1}}],[\"的实例\",{\"1\":{\"705\":1}}],[\"的实例生成\",{\"1\":{\"381\":1}}],[\"的参数\",{\"1\":{\"711\":1}}],[\"的启动类等\",{\"1\":{\"709\":1}}],[\"的特殊性\",{\"1\":{\"709\":1}}],[\"的特性还包括\",{\"1\":{\"161\":1}}],[\"的特性\",{\"1\":{\"140\":1}}],[\"的标准\",{\"1\":{\"687\":1}}],[\"的计算机系统\",{\"1\":{\"684\":1}}],[\"的内存地址\",{\"1\":{\"672\":1}}],[\"的内容修改为\",{\"1\":{\"619\":1}}],[\"的资源管理和作业的调度\",{\"1\":{\"653\":1}}],[\"的进一步封装\",{\"1\":{\"652\":1}}],[\"的时间是用于gc且可用的heap\",{\"1\":{\"651\":1}}],[\"的时候将抛出此异常信息\",{\"1\":{\"651\":1}}],[\"的时候将小表完全放到内存中\",{\"1\":{\"23\":1}}],[\"的时候可以使用这个策略\",{\"1\":{\"458\":1}}],[\"的时候可以只通过索引完成查询\",{\"1\":{\"102\":1}}],[\"的时候暂停了\",{\"1\":{\"458\":1}}],[\"的时候\",{\"1\":{\"116\":1,\"465\":1,\"472\":1,\"650\":1}}],[\"的时候会直接返回这个数\",{\"1\":{\"116\":1}}],[\"的heap区域不同\",{\"1\":{\"651\":1}}],[\"的键值会变成null\",{\"1\":{\"650\":1}}],[\"的话\",{\"1\":{\"650\":1}}],[\"的rfc\",{\"1\":{\"642\":1}}],[\"的至少二十字节要少得多\",{\"1\":{\"642\":1}}],[\"的头部开销小\",{\"1\":{\"642\":1}}],[\"的一个抽象概念\",{\"1\":{\"809\":1}}],[\"的一部分\",{\"1\":{\"627\":1}}],[\"的一种保证承担支付货款责任的书面凭证\",{\"1\":{\"176\":1}}],[\"的配合关系\",{\"1\":{\"627\":1}}],[\"的未使用空间同样修改为\",{\"1\":{\"621\":1}}],[\"的未使用空间\",{\"1\":{\"621\":2}}],[\"的空间分配策略有关\",{\"1\":{\"619\":1}}],[\"的空间分配策略完全杜绝了发生缓冲区溢出的可能性\",{\"1\":{\"619\":1}}],[\"的空间\",{\"1\":{\"619\":2,\"620\":2}}],[\"的空间是否足够\",{\"1\":{\"619\":1}}],[\"的空间是否满足修改所需的要求\",{\"1\":{\"619\":1}}],[\"的空间大小\",{\"1\":{\"619\":1}}],[\"的空间扩展至执行修改所需的大小\",{\"1\":{\"619\":1}}],[\"的空哈希表\",{\"1\":{\"124\":1}}],[\"的性能瓶颈\",{\"1\":{\"618\":1}}],[\"的性能损耗也是问题\",{\"1\":{\"413\":1}}],[\"的长度修改为\",{\"1\":{\"621\":1}}],[\"的长度将大于等于\",{\"1\":{\"621\":1}}],[\"的长度\",{\"1\":{\"621\":1}}],[\"的长度是否足够\",{\"1\":{\"619\":1}}],[\"的长度为\",{\"1\":{\"618\":2}}],[\"的长度限制\",{\"1\":{\"484\":1}}],[\"的区别在于\",{\"1\":{\"616\":1}}],[\"的指针\",{\"1\":{\"616\":1}}],[\"的使用者来说是完全透明的\",{\"1\":{\"616\":1}}],[\"的高性能通信和序列化组件\",{\"1\":{\"610\":1}}],[\"的扩展库\",{\"1\":{\"558\":1}}],[\"的扩展功能\",{\"1\":{\"475\":1}}],[\"的对象有以下几种\",{\"1\":{\"558\":1}}],[\"的操作\",{\"1\":{\"544\":1,\"619\":1}}],[\"的三个包\",{\"1\":{\"522\":1}}],[\"的文件信息\",{\"1\":{\"627\":1}}],[\"的文件\",{\"1\":{\"504\":1}}],[\"的分支与当前分支合并\",{\"1\":{\"500\":1}}],[\"的分支\",{\"1\":{\"493\":1}}],[\"的分支事务纳入到全局事务的管理中\",{\"1\":{\"422\":1}}],[\"的管道里有两种典型的\",{\"1\":{\"475\":1}}],[\"的方法或构造器\",{\"1\":{\"527\":1}}],[\"的方法\",{\"1\":{\"475\":1}}],[\"的方式管理\",{\"1\":{\"853\":1}}],[\"的方式接收和发送数据\",{\"1\":{\"538\":1}}],[\"的方式来处理\",{\"1\":{\"413\":1}}],[\"的方式\",{\"1\":{\"140\":1}}],[\"的任务安排\",{\"1\":{\"475\":1}}],[\"的任意端口到容器的\",{\"1\":{\"254\":1}}],[\"的异常处理程序的便捷实\",{\"1\":{\"472\":1}}],[\"的功能\",{\"1\":{\"472\":2}}],[\"的功能更多\",{\"1\":{\"446\":1}}],[\"的初始调用顺序\",{\"1\":{\"458\":1}}],[\"的位置\",{\"1\":{\"457\":1}}],[\"的游标到达序号\",{\"1\":{\"458\":1}}],[\"的游标到刚才写入的\",{\"1\":{\"456\":1}}],[\"的游标指向\",{\"1\":{\"457\":1}}],[\"的序号\",{\"1\":{\"455\":1}}],[\"的消费者列表\",{\"1\":{\"454\":1}}],[\"的过程涉及到两阶段提交\",{\"1\":{\"454\":1}}],[\"的所有数据\",{\"1\":{\"452\":1}}],[\"的真正核心\",{\"1\":{\"450\":1}}],[\"的设置一致\",{\"1\":{\"417\":1}}],[\"的值从\",{\"1\":{\"620\":1}}],[\"的值改为\",{\"1\":{\"620\":1}}],[\"的值为\",{\"1\":{\"549\":1}}],[\"的值的时候做好准备\",{\"1\":{\"475\":1}}],[\"的值\",{\"1\":{\"417\":1}}],[\"的完整格式如下\",{\"1\":{\"417\":1}}],[\"的情况下创建一个null对象\",{\"1\":{\"920\":1}}],[\"的情况下对多个键执行操作\",{\"1\":{\"139\":1}}],[\"的情况\",{\"1\":{\"413\":1,\"789\":1}}],[\"的注解\",{\"1\":{\"401\":1}}],[\"的规则\",{\"0\":{\"385\":1}}],[\"的优先级要大于\",{\"1\":{\"384\":1}}],[\"的定义\",{\"1\":{\"381\":2}}],[\"的类\",{\"1\":{\"381\":1}}],[\"的nfs共享目录中\",{\"1\":{\"367\":1}}],[\"的安装包\",{\"1\":{\"318\":2}}],[\"的差别\",{\"1\":{\"307\":1}}],[\"的域名\",{\"1\":{\"222\":1}}],[\"的dns解析需求在这一步就满足了\",{\"1\":{\"222\":1}}],[\"的解析和域名服务器的地址信息\",{\"1\":{\"222\":1}}],[\"的映射关系\",{\"1\":{\"221\":1}}],[\"的同一个槽位中\",{\"1\":{\"221\":1}}],[\"的读写并发量\",{\"1\":{\"221\":1}}],[\"的读写并发量约合\",{\"1\":{\"221\":1}}],[\"的并发机制中有三个特性\",{\"1\":{\"440\":1}}],[\"的并发请求\",{\"1\":{\"433\":1}}],[\"的并发量\",{\"1\":{\"221\":1}}],[\"的并发处理能力\",{\"1\":{\"221\":1}}],[\"的并行性\",{\"1\":{\"23\":1}}],[\"的提示信息的\",{\"1\":{\"219\":1}}],[\"的删除事件\",{\"1\":{\"214\":1}}],[\"的唯一性\",{\"1\":{\"214\":1}}],[\"的锁\",{\"1\":{\"214\":1}}],[\"的两个\",{\"1\":{\"191\":1}}],[\"的风险责任\",{\"1\":{\"189\":1}}],[\"的请求\",{\"1\":{\"176\":1,\"458\":1}}],[\"的信用等级或信用形象\",{\"1\":{\"166\":1}}],[\"的接入是透明的\",{\"1\":{\"161\":1}}],[\"的原因\",{\"1\":{\"161\":3,\"617\":1}}],[\"的业务数据量\",{\"1\":{\"161\":1}}],[\"的限制条件\",{\"1\":{\"158\":5}}],[\"的思想\",{\"1\":{\"155\":1}}],[\"的连接情况\",{\"1\":{\"155\":1}}],[\"的工作机制\",{\"1\":{\"147\":1}}],[\"的事务不同\",{\"1\":{\"139\":1}}],[\"的排序操作和其他编程语言的排序操作一样\",{\"1\":{\"139\":1}}],[\"的元素也会包含在被返回的元素之内\",{\"1\":{\"135\":1}}],[\"的节点应该被放置到哈希表数组的索引\",{\"1\":{\"127\":1}}],[\"的索引值\",{\"1\":{\"127\":1}}],[\"的哈希值\",{\"1\":{\"127\":2}}],[\"的哈希表\",{\"1\":{\"123\":1}}],[\"的问题\",{\"1\":{\"125\":1}}],[\"的数据写入到第一步创建的目录下\",{\"1\":{\"627\":1}}],[\"的数据将溢出到\",{\"1\":{\"619\":1}}],[\"的数据\",{\"1\":{\"456\":1,\"458\":1}}],[\"的数据结构\",{\"1\":{\"157\":3,\"528\":1}}],[\"的数据同步\",{\"1\":{\"155\":1}}],[\"的数据副本\",{\"1\":{\"153\":1}}],[\"的数据复制\",{\"1\":{\"153\":1}}],[\"的数据持久化\",{\"1\":{\"140\":1}}],[\"的数据装载操作\",{\"1\":{\"22\":1}}],[\"的数量\",{\"1\":{\"124\":1}}],[\"的字符串缩短操作\",{\"1\":{\"622\":1}}],[\"的字符串增长操作\",{\"1\":{\"621\":1}}],[\"的字符串\",{\"1\":{\"617\":1}}],[\"的字符数组来表示长度为\",{\"1\":{\"617\":1}}],[\"的字符集\",{\"1\":{\"99\":1}}],[\"的字典\",{\"1\":{\"126\":1}}],[\"的字典使用哈希表作为底层实现\",{\"1\":{\"123\":1}}],[\"的链表可以用于保存各种不同类型的值\",{\"1\":{\"121\":1}}],[\"的链表实现是无环链表\",{\"1\":{\"121\":1}}],[\"的链表实现是双端链表\",{\"1\":{\"121\":1}}],[\"的链表实现的特性可以总结如下\",{\"1\":{\"119\":1}}],[\"的链表实现进行介绍\",{\"1\":{\"118\":1}}],[\"的各种功能\",{\"1\":{\"121\":1}}],[\"的查询时\",{\"1\":{\"103\":1}}],[\"的\",{\"1\":{\"100\":1,\"155\":2,\"160\":1,\"214\":4,\"413\":1,\"421\":1,\"422\":3,\"433\":2,\"445\":1,\"454\":1,\"515\":1,\"522\":1,\"608\":1,\"610\":1,\"616\":1,\"617\":1,\"618\":3,\"619\":1,\"620\":2,\"621\":5,\"622\":1,\"623\":2,\"624\":1,\"650\":1,\"652\":3,\"684\":1,\"705\":1,\"711\":1,\"712\":2,\"806\":1,\"864\":1,\"866\":1,\"868\":2,\"887\":1,\"911\":1}}],[\"的存储引擎\",{\"1\":{\"91\":1}}],[\"的语句不要出现在数据库中\",{\"1\":{\"82\":1}}],[\"的语句必须有limit\",{\"1\":{\"29\":1}}],[\"的大小就可以知道进行写操作的顺序\",{\"1\":{\"214\":2}}],[\"的大小\",{\"1\":{\"74\":1}}],[\"的例子来说明如何通过数据库事务保证数据的准确性和完整性\",{\"1\":{\"66\":1}}],[\"的最终输出结果\",{\"1\":{\"36\":1}}],[\"的输入阶段\",{\"1\":{\"34\":1}}],[\"的输出数据都是有序的\",{\"1\":{\"23\":1}}],[\"的概念\",{\"0\":{\"659\":1},\"1\":{\"25\":1}}],[\"的正则表达式来指定匹配条件\",{\"1\":{\"22\":1}}],[\"的形式从客户端接收数据的\",{\"1\":{\"14\":1}}],[\"的近实时的性质\",{\"1\":{\"4\":1}}],[\"首先他们希望以html格式\",{\"1\":{\"898\":1}}],[\"首先要知道一个完美得可以预见未来任何变化的设计\",{\"1\":{\"898\":1}}],[\"首先要尝试获取对象的锁\",{\"1\":{\"723\":1}}],[\"首先要尝试获取对象锁\",{\"1\":{\"703\":1}}],[\"首先到达监听线程\",{\"1\":{\"863\":1}}],[\"首先执行synchronousqueue\",{\"1\":{\"773\":1}}],[\"首先写一个controller和service\",{\"1\":{\"733\":1}}],[\"首先尝试在代理类上调用以下方法\",{\"1\":{\"709\":1,\"717\":1,\"721\":1}}],[\"首先使用私钥解密密钥\",{\"1\":{\"680\":1}}],[\"首先利用对称加密技术加密索要安全传输的消息\",{\"1\":{\"679\":1}}],[\"首先导致core1将x写回主存\",{\"1\":{\"663\":1}}],[\"首先检查程序有没有限入死循环\",{\"1\":{\"651\":1}}],[\"首先配置好distributionmanagement配置\",{\"1\":{\"604\":1}}],[\"首先cmd到kafka的bin下\",{\"1\":{\"564\":1}}],[\"首先一个c类的子网掩码为255\",{\"1\":{\"526\":1}}],[\"首先会验证公钥是否有效\",{\"1\":{\"522\":1}}],[\"首先会加载fsimage到内存中\",{\"1\":{\"19\":1}}],[\"首先说明一点\",{\"1\":{\"484\":1}}],[\"首先在\",{\"1\":{\"863\":1}}],[\"首先在代码里配置commandkey\",{\"1\":{\"402\":1}}],[\"首先在分布式环境下\",{\"1\":{\"196\":1}}],[\"首先我们知道600个点位\",{\"1\":{\"526\":1}}],[\"首先我们使用openfeign且使用gateway\",{\"1\":{\"410\":1}}],[\"首先我们使用docker默认创建的网桥\",{\"1\":{\"251\":1}}],[\"首先我们解释一下什么叫做加锁和解锁的归一化\",{\"1\":{\"217\":1}}],[\"首先\",{\"1\":{\"14\":1,\"445\":1,\"454\":1,\"639\":1,\"705\":1,\"809\":1}}],[\"若1为正常由小到大顺序\",{\"1\":{\"735\":1}}],[\"若右子树已经存在\",{\"1\":{\"734\":1}}],[\"若左子树已经存在\",{\"1\":{\"734\":1}}],[\"若synchronized修饰的方法为静态方法\",{\"1\":{\"723\":1}}],[\"若synchronized修饰的方法为非静态方法\",{\"1\":{\"723\":1}}],[\"若为数组对象\",{\"1\":{\"722\":1}}],[\"若为全局变量\",{\"1\":{\"683\":1}}],[\"若与channelread0\",{\"1\":{\"613\":1}}],[\"若要加快消息处理速度\",{\"1\":{\"431\":1}}],[\"若有更好的方法\",{\"1\":{\"410\":1}}],[\"若宿主机或其它容器需要和其通信\",{\"1\":{\"257\":1}}],[\"若某一个窗口发生阻塞\",{\"1\":{\"255\":1}}],[\"若端口被占用\",{\"1\":{\"241\":1}}],[\"若承办银行对承办担保机构的审核结果有异议\",{\"1\":{\"189\":1}}],[\"若因企业提前还贷或其他情形\",{\"1\":{\"189\":1}}],[\"若干方便的能力\",{\"1\":{\"161\":1}}],[\"若连接中断\",{\"1\":{\"154\":1}}],[\"若开启\",{\"1\":{\"141\":1}}],[\"若能够通过其他的运维手段进行及时处理\",{\"1\":{\"141\":1}}],[\"若无法进行\",{\"1\":{\"154\":1}}],[\"若无\",{\"1\":{\"141\":1}}],[\"若\",{\"1\":{\"140\":1,\"146\":1,\"151\":2,\"161\":1}}],[\"若期望将数据丢失的可能性最小化\",{\"1\":{\"140\":1}}],[\"若想永久使用\",{\"1\":{\"63\":1}}],[\"若剔除所有的okhttp3还是不能运行\",{\"1\":{\"63\":1}}],[\"若hive\",{\"1\":{\"23\":1}}],[\"若namenode在指定时间间隔内没有收到心跳\",{\"1\":{\"19\":1}}],[\"若不通过会向客户端抛出ioexception\",{\"1\":{\"14\":1}}],[\"若检查通过\",{\"1\":{\"14\":1}}],[\"不干实事\",{\"1\":{\"922\":1}}],[\"不但很难找到它们\",{\"1\":{\"912\":1}}],[\"不熟悉面向对象技术的人\",{\"1\":{\"910\":1}}],[\"不管是哪种原因\",{\"1\":{\"918\":1}}],[\"不管怎么说\",{\"1\":{\"898\":1}}],[\"不管什么字符集\",{\"1\":{\"836\":1}}],[\"不犯错的机会也越来越少\",{\"1\":{\"898\":1}}],[\"不断的修改和不断的复制粘贴\",{\"1\":{\"898\":1}}],[\"不断的调整系统的结构\",{\"1\":{\"898\":1}}],[\"不断地将命令发送到\",{\"1\":{\"154\":1}}],[\"不改变系统的外部功能\",{\"1\":{\"898\":1}}],[\"不相同\",{\"1\":{\"896\":1}}],[\"不在\",{\"1\":{\"874\":1}}],[\"不在进行时\",{\"1\":{\"126\":1}}],[\"不定时繁忙的情况\",{\"1\":{\"872\":1}}],[\"不完全恢复的使用场景\",{\"1\":{\"893\":1}}],[\"不完全恢复\",{\"1\":{\"868\":1}}],[\"不推荐使用\",{\"1\":{\"831\":1}}],[\"不推荐使用text和blob类型\",{\"1\":{\"87\":1}}],[\"不答应出现某一个具体处理者对象在承担了一部分责任后又把责任向下传的情况\",{\"1\":{\"825\":1}}],[\"不为0则更新同步状态\",{\"1\":{\"821\":1}}],[\"不保证对\",{\"1\":{\"809\":1}}],[\"不保证所有线程能看到一致的操作执行顺序\",{\"1\":{\"809\":1}}],[\"不保证单线程内的操作会按程序的顺序执行\",{\"1\":{\"809\":1}}],[\"不允许登录\",{\"1\":{\"873\":1}}],[\"不允许临界区内的代码\",{\"1\":{\"809\":1}}],[\"不允许drop\",{\"1\":{\"28\":1}}],[\"不处理\",{\"1\":{\"761\":1}}],[\"不受锁影响\",{\"1\":{\"723\":1}}],[\"不受限制\",{\"1\":{\"64\":1}}],[\"不错\",{\"1\":{\"704\":1}}],[\"不适用于变化对象\",{\"1\":{\"683\":1}}],[\"不小于一个cache\",{\"1\":{\"667\":1}}],[\"不止支持一对一的传输方式\",{\"1\":{\"640\":1}}],[\"不提供重新初始化或修改内部计数器的值的功能\",{\"1\":{\"551\":1}}],[\"不提供任何方式的数据加密\",{\"1\":{\"520\":1}}],[\"不使用float\",{\"1\":{\"549\":1}}],[\"不使用openfeign不使用gateway\",{\"1\":{\"410\":1}}],[\"不建议使用\",{\"1\":{\"549\":1}}],[\"不刪除该元素\",{\"1\":{\"530\":1}}],[\"不是轮询的方式\",{\"1\":{\"806\":1}}],[\"不是直接向操作系统申请\",{\"1\":{\"751\":1}}],[\"不是深度学习中的卷积和赤化\",{\"1\":{\"751\":1}}],[\"不是真正的锁\",{\"1\":{\"729\":1}}],[\"不是用这个数组来保存字符\",{\"1\":{\"623\":1}}],[\"不是立即从队列中添加或者删除元素\",{\"1\":{\"530\":1}}],[\"不是浏览器\",{\"1\":{\"515\":1}}],[\"不然无法获取内容\",{\"1\":{\"522\":1}}],[\"不然看不到被锁住的内容\",{\"1\":{\"522\":1}}],[\"不带请求参数\",{\"1\":{\"518\":2}}],[\"不带请求头和请求参数\",{\"1\":{\"518\":2}}],[\"不带任何修饰符\",{\"1\":{\"306\":1}}],[\"不易使用\",{\"1\":{\"910\":1}}],[\"不易发生聚集\",{\"1\":{\"512\":1}}],[\"不易于存储\",{\"1\":{\"210\":1}}],[\"不属于\",{\"1\":{\"486\":1}}],[\"不安全\",{\"1\":{\"485\":1}}],[\"不行再短暂的阻塞等待\",{\"1\":{\"469\":1,\"472\":1}}],[\"不行再使用其他的策略进行等待\",{\"1\":{\"458\":1,\"468\":1,\"472\":1}}],[\"不行再临时让出调度\",{\"1\":{\"458\":2,\"468\":1,\"469\":1,\"472\":2}}],[\"不仅可以保存文本数据\",{\"1\":{\"623\":1}}],[\"不仅对这个\",{\"1\":{\"619\":1}}],[\"不仅代码实现起来可以更加安全和简单\",{\"1\":{\"453\":1}}],[\"不仅减少了\",{\"1\":{\"23\":1}}],[\"不删除buffer中的数据\",{\"1\":{\"452\":1}}],[\"不足\",{\"1\":{\"834\":1}}],[\"不足的解决方法\",{\"1\":{\"834\":1}}],[\"不足则补0\",{\"1\":{\"445\":1}}],[\"不足10位以0填充\",{\"1\":{\"115\":1}}],[\"不正确使用unsafe类会使得程序出错的概率变大\",{\"1\":{\"442\":1}}],[\"不依赖于底层数据资源的事务支持\",{\"1\":{\"422\":1}}],[\"不依赖数据库等第三方系统\",{\"1\":{\"206\":1}}],[\"不超过128字节\",{\"1\":{\"417\":1}}],[\"不超过\",{\"1\":{\"417\":1}}],[\"不强制返回空集合\",{\"1\":{\"413\":1}}],[\"不得不通过\",{\"1\":{\"413\":1}}],[\"不得为地方政府\",{\"1\":{\"189\":1}}],[\"不得为追求稳定回报而偏离主业\",{\"1\":{\"165\":1}}],[\"不得为防止资金闲置而降低合作条件标准\",{\"1\":{\"165\":1}}],[\"不将\",{\"1\":{\"408\":1}}],[\"不设置默认取方法名为commandkey\",{\"1\":{\"402\":1}}],[\"不再做那么多工作\",{\"1\":{\"918\":1}}],[\"不再做重复性尽职调查\",{\"1\":{\"189\":1}}],[\"不再进行重新查找\",{\"1\":{\"309\":1}}],[\"不会导致\",{\"1\":{\"927\":1}}],[\"不会使线程进入阻塞状态\",{\"1\":{\"812\":1}}],[\"不会随着fd数目的增加效率下降\",{\"1\":{\"806\":1}}],[\"不会在主程序运行期对permgen\",{\"1\":{\"651\":1}}],[\"不会任何拼接操作\",{\"1\":{\"639\":1}}],[\"不会对数据报文进行任何拆分和拼接操作\",{\"1\":{\"639\":1}}],[\"不会自己先去加载这个类\",{\"1\":{\"558\":1}}],[\"不会\",{\"1\":{\"558\":1}}],[\"不会关心\",{\"1\":{\"515\":1}}],[\"不会进行\",{\"1\":{\"515\":1}}],[\"不会处理\",{\"1\":{\"515\":1}}],[\"不会分开发送\",{\"1\":{\"486\":1}}],[\"不会产生消息丢失\",{\"1\":{\"435\":1}}],[\"不会跳出location作用域\",{\"1\":{\"309\":1}}],[\"不会再执行\",{\"1\":{\"413\":1}}],[\"不会再虚拟出自己的网卡\",{\"1\":{\"250\":2}}],[\"不会再次进行回表查询\",{\"1\":{\"103\":1}}],[\"不对\",{\"1\":{\"306\":1}}],[\"不需要扫描全部\",{\"1\":{\"734\":1}}],[\"不需要释放msg\",{\"1\":{\"613\":1}}],[\"不需要加锁\",{\"1\":{\"453\":1}}],[\"不需要括号\",{\"1\":{\"402\":2}}],[\"不需要等待锁释放后再去加锁\",{\"1\":{\"218\":1}}],[\"不需要先获取到表中所有的内容\",{\"1\":{\"23\":1}}],[\"不一样\",{\"1\":{\"214\":1}}],[\"不一定是实际存在的表名\",{\"1\":{\"113\":1}}],[\"不一定\",{\"1\":{\"103\":1}}],[\"不能修改内存中的值\",{\"1\":{\"854\":1}}],[\"不能通过\",{\"1\":{\"854\":1}}],[\"不能读写数据\",{\"1\":{\"843\":1}}],[\"不能写\",{\"1\":{\"843\":1}}],[\"不能进行数据文件的读写\",{\"1\":{\"843\":1}}],[\"不能继承扩展很难\",{\"1\":{\"683\":1}}],[\"不能直接定义\",{\"0\":{\"591\":1}}],[\"不能完全避免\",{\"1\":{\"506\":1}}],[\"不能表示为任何有限长度的二进制小数\",{\"1\":{\"445\":1}}],[\"不能使用0\",{\"1\":{\"414\":1}}],[\"不能在ip\",{\"1\":{\"301\":1}}],[\"不能出现重复的id\",{\"1\":{\"204\":1}}],[\"不能支持范围查询\",{\"1\":{\"102\":1}}],[\"不用每一次下单都减库存\",{\"1\":{\"202\":1}}],[\"不用主机名\",{\"1\":{\"74\":1}}],[\"不出现用户操作失败或者访问超时等用户体验不好的情况\",{\"1\":{\"194\":1}}],[\"不退担保费\",{\"1\":{\"189\":1}}],[\"不进行线程状态的改变\",{\"1\":{\"813\":1}}],[\"不进行\",{\"1\":{\"148\":1}}],[\"不影响表结构\",{\"1\":{\"131\":1,\"132\":1}}],[\"不记录日志\",{\"1\":{\"109\":1}}],[\"不可避免的要违反最初的设计构架\",{\"1\":{\"898\":1}}],[\"不可靠性\",{\"0\":{\"641\":1}}],[\"不可缓存\",{\"1\":{\"481\":1}}],[\"不可能重新初始化或者修改其内部计数器的值\",{\"1\":{\"446\":1}}],[\"不可能同时满足的这个一致性指的是强一致性\",{\"1\":{\"193\":1}}],[\"不可以有null\",{\"1\":{\"101\":1}}],[\"不可重复读之外\",{\"1\":{\"71\":1}}],[\"不可重复读\",{\"0\":{\"72\":1},\"1\":{\"70\":2,\"72\":1,\"106\":3}}],[\"不要嫌麻烦\",{\"1\":{\"910\":1}}],[\"不要直接操作对象的属性\",{\"1\":{\"906\":1}}],[\"不要依赖具体实现类\",{\"1\":{\"906\":1}}],[\"不要在\",{\"1\":{\"413\":1}}],[\"不要捕获了却什么都不处理而抛弃之\",{\"1\":{\"413\":1}}],[\"不要太繁杂的算法\",{\"1\":{\"204\":1}}],[\"不要过度索引\",{\"1\":{\"100\":1}}],[\"不要交给数据库判断\",{\"1\":{\"82\":1}}],[\"不\",{\"1\":{\"100\":1,\"887\":1}}],[\"不写本行表示同步所有数据库\",{\"1\":{\"79\":1}}],[\"不同于忙轮询和无差别轮询\",{\"1\":{\"806\":1}}],[\"不同站点下一周用户的登录情况\",{\"1\":{\"789\":1}}],[\"不同平台下一周用户的登录情况\",{\"1\":{\"789\":1}}],[\"不同点本地方法栈为\",{\"1\":{\"556\":1}}],[\"不同的设备有不同的等待队列\",{\"1\":{\"799\":1}}],[\"不同的\",{\"1\":{\"456\":1}}],[\"不同名字空间中的uuid的唯一性\",{\"1\":{\"208\":1}}],[\"不同\",{\"1\":{\"25\":2,\"843\":1}}],[\"不同数据中心的节点\",{\"1\":{\"14\":1}}],[\"不支持锁升级\",{\"1\":{\"824\":1}}],[\"不支持重入\",{\"1\":{\"723\":1}}],[\"不支持多播和广播传输方式\",{\"1\":{\"644\":1}}],[\"不支持事务\",{\"1\":{\"161\":1}}],[\"不支持回滚\",{\"1\":{\"109\":1}}],[\"不支持条件过滤\",{\"1\":{\"109\":1}}],[\"不支持此优化\",{\"1\":{\"23\":1}}],[\"不支持以下查询\",{\"1\":{\"23\":1}}],[\"不支持\",{\"1\":{\"23\":1,\"419\":1}}],[\"不过与modifytime和value变量毫无关联\",{\"1\":{\"665\":1}}],[\"不过8个子网块中首尾两块不能用\",{\"1\":{\"526\":1}}],[\"不过\",{\"1\":{\"27\":1,\"549\":1,\"673\":1}}],[\"不过这个设置会需要更多的内存\",{\"1\":{\"22\":1}}],[\"不过只要文件已经在缓存中\",{\"1\":{\"4\":1}}],[\"衡量两个节点之间的带宽往往很难实现\",{\"1\":{\"14\":1}}],[\"最单纯的重复代码就是\",{\"1\":{\"909\":1}}],[\"最近一直听大佬说责任链模式\",{\"1\":{\"825\":1}}],[\"最近100个http\",{\"1\":{\"418\":1}}],[\"最重要的是groupid\",{\"1\":{\"578\":1}}],[\"最重要的协议了\",{\"1\":{\"515\":1}}],[\"最新移出的对象是头部\",{\"1\":{\"531\":1,\"532\":1}}],[\"最新插入的对象是尾部\",{\"1\":{\"531\":1,\"532\":1}}],[\"最新的\",{\"1\":{\"515\":1}}],[\"最为简单的理解就是两台计算机各自的ip地址与子网掩码进行and运算后\",{\"1\":{\"526\":1}}],[\"最常用的利用get和post请求后端数据\",{\"1\":{\"476\":1}}],[\"最外层的业务使用者\",{\"1\":{\"413\":1}}],[\"最简单的方案是把多余的东西消弭于类内部\",{\"1\":{\"910\":1}}],[\"最简单的方法就是使用数据卷容器\",{\"1\":{\"262\":1}}],[\"最简单的ribbon负载均衡实现\",{\"1\":{\"408\":1}}],[\"最小值将不\",{\"1\":{\"866\":1}}],[\"最小为1\",{\"1\":{\"317\":1}}],[\"最小的压缩最快\",{\"1\":{\"317\":1}}],[\"最小的执行单位\",{\"1\":{\"105\":1}}],[\"最基本的配置方法\",{\"1\":{\"299\":1}}],[\"最基本的要求\",{\"1\":{\"204\":1}}],[\"最高位是0\",{\"1\":{\"205\":1}}],[\"最高位是符号位\",{\"1\":{\"205\":1}}],[\"最少有\",{\"1\":{\"155\":1}}],[\"最后新需求的开发成本会超过开发一个新的软件的成本\",{\"1\":{\"898\":1}}],[\"最后结果可以存储在oracle\",{\"1\":{\"788\":1}}],[\"最后进行修改y操作\",{\"1\":{\"663\":1}}],[\"最后是l1\",{\"1\":{\"662\":1}}],[\"最后执行compiler\",{\"1\":{\"580\":1}}],[\"最后利用bigdecimal对象作为format\",{\"1\":{\"445\":1}}],[\"最后\",{\"1\":{\"130\":1}}],[\"最后介绍的完全外连接\",{\"1\":{\"23\":1}}],[\"最好不要在另一个对象的属性基础上运用switch语句\",{\"1\":{\"905\":1}}],[\"最好不使用char类型\",{\"1\":{\"549\":1}}],[\"最好的方式是多设置几次并且进行测试\",{\"1\":{\"651\":1}}],[\"最好使用这个策略\",{\"1\":{\"465\":1,\"472\":1}}],[\"最好使用固定长度的数据列代替可变长度的数据列\",{\"1\":{\"95\":1}}],[\"最好索引\",{\"1\":{\"100\":1}}],[\"最大值为\",{\"1\":{\"866\":1}}],[\"最大值为页大小的\",{\"1\":{\"866\":1}}],[\"最大值不能低于页大小的\",{\"1\":{\"866\":1}}],[\"最大可创建的线程数\",{\"1\":{\"779\":1}}],[\"最大空间\",{\"1\":{\"651\":1}}],[\"最大的数据段大小取决于mss\",{\"1\":{\"644\":1}}],[\"最大的一个子公司有26台计算机\",{\"1\":{\"526\":1}}],[\"最大的信号量值\",{\"1\":{\"402\":1}}],[\"最大线程数\",{\"1\":{\"440\":2,\"446\":1,\"754\":1}}],[\"最大就是\",{\"1\":{\"433\":1}}],[\"最大不超过\",{\"1\":{\"417\":1}}],[\"最大支持的并发数\",{\"1\":{\"402\":1}}],[\"最大前缀\",{\"1\":{\"307\":1}}],[\"最大内存占用的成员\",{\"1\":{\"158\":1}}],[\"最大错误连接数\",{\"1\":{\"74\":1}}],[\"最大连接数\",{\"1\":{\"3\":1,\"74\":1}}],[\"最适合索引的列是出现在where子句中的列\",{\"1\":{\"100\":1}}],[\"最适合寻求高召回率的方案\",{\"1\":{\"52\":1}}],[\"最适合寻求显著减少磁盘\",{\"1\":{\"52\":1}}],[\"最适合对搜索效率有较高要求的场景\",{\"1\":{\"52\":1}}],[\"最适合以准确性为代价寻求高查询速度的方案\",{\"1\":{\"52\":1}}],[\"最适合在准确性和查询速度之间寻求理想平衡的场景\",{\"1\":{\"52\":1}}],[\"最有名的是count\",{\"1\":{\"22\":1}}],[\"最终能够降低代码重复和扩展\",{\"1\":{\"900\":1}}],[\"最终的retained\",{\"1\":{\"722\":1}}],[\"最终占用大小为16个字节\",{\"1\":{\"722\":1}}],[\"最终这两个消费组将平分整个负载\",{\"1\":{\"431\":1}}],[\"最终多个partition均匀地分布在集群中的每台机器上\",{\"1\":{\"430\":1}}],[\"最终会遇到容量和性能瓶颈\",{\"1\":{\"158\":1}}],[\"最终\",{\"1\":{\"14\":1,\"475\":1}}],[\"最理想的情况是数据块就储存在客户端所在的节点上\",{\"1\":{\"14\":1}}],[\"f05423a21e78\",{\"1\":{\"924\":1}}],[\"f0df350\",{\"1\":{\"229\":1}}],[\"ftp\",{\"1\":{\"638\":1}}],[\"f的浮点数值\",{\"1\":{\"549\":1}}],[\"fxl\",{\"1\":{\"545\":1}}],[\"f2\",{\"1\":{\"544\":2}}],[\"f2=new\",{\"1\":{\"544\":1}}],[\"f2=null\",{\"1\":{\"544\":1}}],[\"f2中列number为135\",{\"1\":{\"13\":1}}],[\"f=new\",{\"1\":{\"541\":1,\"542\":1,\"545\":1}}],[\"f=null\",{\"1\":{\"541\":1,\"542\":1,\"545\":1}}],[\"f1=null\",{\"1\":{\"541\":1,\"542\":1,\"544\":1,\"545\":1}}],[\"f1=new\",{\"1\":{\"537\":1,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1}}],[\"f1\",{\"1\":{\"537\":2,\"539\":4,\"541\":3,\"542\":1,\"544\":2,\"545\":2}}],[\"f1中列name为lisi\",{\"1\":{\"13\":1}}],[\"f1中列name为zhangsan\",{\"1\":{\"13\":1}}],[\"fn\",{\"1\":{\"475\":1}}],[\"f6d0d0c2a647\",{\"1\":{\"458\":1}}],[\"f或者fdisk\",{\"1\":{\"369\":1}}],[\"fdx\",{\"1\":{\"500\":1}}],[\"fdisk\",{\"1\":{\"370\":1}}],[\"fd\",{\"1\":{\"230\":2}}],[\"framework\",{\"1\":{\"529\":1}}],[\"free\",{\"1\":{\"119\":4,\"412\":1,\"616\":3,\"620\":1,\"621\":1,\"622\":1,\"821\":3,\"823\":1}}],[\"frm\",{\"1\":{\"91\":1}}],[\"from子句标识了从哪个表\",{\"1\":{\"22\":1}}],[\"from\",{\"1\":{\"20\":6,\"21\":2,\"22\":17,\"23\":5,\"24\":11,\"25\":1,\"26\":2,\"27\":11,\"29\":1,\"58\":1,\"59\":4,\"60\":4,\"61\":5,\"62\":6,\"73\":1,\"74\":1,\"78\":1,\"82\":2,\"103\":1,\"104\":1,\"109\":1,\"111\":1,\"214\":2,\"230\":1,\"243\":1,\"262\":2,\"263\":1,\"727\":1,\"728\":1,\"732\":1,\"789\":6,\"834\":1,\"838\":2,\"841\":4,\"843\":9,\"865\":1,\"869\":4,\"872\":1,\"874\":1,\"877\":2,\"883\":2,\"886\":1,\"887\":6,\"888\":2,\"890\":1,\"893\":10,\"894\":4}}],[\"future2\",{\"1\":{\"475\":3}}],[\"future1\",{\"1\":{\"475\":3}}],[\"future<string>\",{\"1\":{\"475\":1}}],[\"future使用\",{\"0\":{\"473\":1}}],[\"future\",{\"1\":{\"437\":2,\"474\":2,\"475\":17}}],[\"fund\",{\"1\":{\"167\":1}}],[\"functionalinterface\",{\"1\":{\"527\":1}}],[\"function\",{\"1\":{\"73\":3,\"389\":4,\"444\":2}}],[\"fulltryacquireshared\",{\"1\":{\"822\":1}}],[\"fulltext\",{\"1\":{\"101\":1,\"113\":1}}],[\"full\",{\"1\":{\"23\":3,\"74\":1,\"892\":1,\"893\":7,\"894\":6}}],[\"following\",{\"1\":{\"527\":1}}],[\"follow\",{\"1\":{\"527\":2}}],[\"follower副本只负责和leader副本同步消息\",{\"1\":{\"432\":1}}],[\"found\",{\"1\":{\"63\":2,\"837\":1,\"845\":1,\"892\":1,\"893\":1}}],[\"fork项目\",{\"1\":{\"493\":1}}],[\"fork\",{\"1\":{\"488\":1}}],[\"forbidden\",{\"1\":{\"419\":1}}],[\"formupload\",{\"1\":{\"749\":1}}],[\"form表单可以定义enctype属性\",{\"0\":{\"749\":1}}],[\"form\",{\"1\":{\"410\":1,\"479\":2,\"480\":3,\"748\":2,\"749\":3}}],[\"formattonumber\",{\"1\":{\"445\":7}}],[\"formatted\",{\"1\":{\"28\":1}}],[\"format=row\",{\"1\":{\"321\":1}}],[\"format=org\",{\"1\":{\"23\":1}}],[\"format\",{\"1\":{\"25\":1,\"27\":1,\"74\":2,\"445\":5,\"564\":1,\"626\":11}}],[\"forwarded\",{\"1\":{\"315\":1,\"317\":4}}],[\"forname\",{\"1\":{\"214\":1,\"558\":1,\"563\":1}}],[\"foreach\",{\"1\":{\"63\":2,\"527\":8,\"733\":1}}],[\"for\",{\"1\":{\"3\":2,\"27\":4,\"32\":2,\"58\":4,\"61\":2,\"62\":4,\"63\":2,\"74\":1,\"155\":1,\"213\":2,\"214\":3,\"217\":1,\"219\":1,\"267\":1,\"315\":1,\"317\":4,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"427\":2,\"439\":1,\"440\":2,\"444\":2,\"446\":1,\"518\":3,\"539\":1,\"541\":1,\"548\":1,\"552\":1,\"554\":1,\"564\":1,\"626\":1,\"650\":2,\"652\":2,\"727\":5,\"728\":2,\"734\":1,\"768\":1,\"776\":1,\"802\":1,\"805\":1,\"814\":1,\"823\":1,\"924\":2,\"930\":1}}],[\"fatalexceptionhandler\",{\"1\":{\"472\":1}}],[\"fatal\",{\"1\":{\"435\":1}}],[\"fallbackmethod\",{\"1\":{\"402\":2}}],[\"fallbackfactory<remoteclient>\",{\"1\":{\"404\":1}}],[\"fallbackfactory<consumerservice>\",{\"1\":{\"399\":1}}],[\"fallbackfactory\",{\"1\":{\"398\":3,\"404\":1,\"410\":1,\"416\":3}}],[\"fallback\",{\"1\":{\"398\":2,\"399\":1,\"402\":1,\"416\":2}}],[\"false\",{\"1\":{\"61\":1,\"64\":4,\"218\":2,\"219\":1,\"229\":1,\"263\":2,\"270\":1,\"435\":2,\"444\":2,\"446\":1,\"549\":1,\"564\":2,\"820\":2}}],[\"fair\",{\"0\":{\"304\":1},\"1\":{\"304\":1}}],[\"failed\",{\"1\":{\"883\":2}}],[\"fail\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"fails=3\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"failover到其他region\",{\"1\":{\"199\":1}}],[\"fail的时候\",{\"1\":{\"199\":1}}],[\"failurethreshold\",{\"1\":{\"263\":1}}],[\"failure\",{\"1\":{\"195\":1}}],[\"fastdateformat\",{\"1\":{\"626\":1}}],[\"fastcgi\",{\"1\":{\"317\":8}}],[\"fast\",{\"1\":{\"227\":1,\"837\":1,\"845\":2,\"892\":1,\"893\":5}}],[\"factory\",{\"1\":{\"213\":1,\"218\":1,\"437\":1,\"439\":1}}],[\"facebook\",{\"1\":{\"50\":1}}],[\"fetch\",{\"1\":{\"503\":1,\"564\":3}}],[\"feignclient中参数的url若不指定\",{\"1\":{\"410\":1}}],[\"feignclient注解\",{\"1\":{\"409\":1}}],[\"feignclient注解声明服务调用的代理类\",{\"1\":{\"398\":1,\"416\":1}}],[\"feignclient\",{\"1\":{\"398\":1,\"404\":1,\"408\":1,\"409\":1,\"410\":1,\"416\":1}}],[\"feign\",{\"1\":{\"396\":1,\"400\":1,\"404\":2,\"408\":1,\"409\":1,\"416\":1}}],[\"fe\",{\"1\":{\"161\":1}}],[\"federated\",{\"1\":{\"90\":1}}],[\"federal\",{\"1\":{\"22\":2}}],[\"feat\",{\"1\":{\"59\":6,\"61\":1,\"62\":1}}],[\"feature\",{\"1\":{\"59\":1,\"907\":1}}],[\"features\",{\"1\":{\"59\":1,\"527\":1}}],[\"flink等\",{\"1\":{\"783\":1}}],[\"fly\",{\"1\":{\"674\":1}}],[\"flyway\",{\"1\":{\"418\":1}}],[\"flv\",{\"1\":{\"243\":1}}],[\"flannel\",{\"1\":{\"295\":6}}],[\"flag也经常会变化\",{\"1\":{\"665\":1}}],[\"flag=this\",{\"1\":{\"214\":2}}],[\"flag\",{\"1\":{\"214\":4,\"837\":1}}],[\"flat是基于量化的索引\",{\"1\":{\"52\":1}}],[\"flat最适合在百万规模的小型数据集上寻求完全准确和准确的搜索结果的方案\",{\"1\":{\"52\":1}}],[\"flat\",{\"1\":{\"52\":2,\"58\":1}}],[\"flush\",{\"1\":{\"74\":1,\"78\":1,\"322\":1,\"324\":1,\"342\":1,\"870\":1}}],[\"floatingdecimal\",{\"1\":{\"626\":4}}],[\"floatvalue\",{\"1\":{\"445\":1}}],[\"float对比时\",{\"1\":{\"25\":1}}],[\"float>\",{\"1\":{\"21\":1,\"28\":1}}],[\"float\",{\"1\":{\"21\":1,\"24\":1,\"25\":4,\"28\":1,\"58\":2,\"60\":1,\"549\":4}}],[\"fffffffff\",{\"1\":{\"25\":1}}],[\"f\",{\"0\":{\"504\":1,\"693\":1},\"1\":{\"21\":1,\"58\":1,\"73\":1,\"104\":1,\"263\":1,\"276\":2,\"282\":1,\"295\":1,\"413\":1,\"506\":2,\"511\":1,\"541\":2,\"542\":2,\"545\":2,\"549\":3,\"789\":1}}],[\"fix\",{\"1\":{\"907\":1}}],[\"fixedthreadpool\",{\"0\":{\"771\":1}}],[\"fixedsequencegroup\",{\"1\":{\"472\":1}}],[\"fight\",{\"1\":{\"734\":2}}],[\"fifo\",{\"1\":{\"528\":1,\"530\":1}}],[\"finished\",{\"1\":{\"845\":3}}],[\"fin置为1\",{\"1\":{\"649\":1}}],[\"fin=1\",{\"1\":{\"649\":2}}],[\"find\",{\"1\":{\"527\":1}}],[\"finduserbyid\",{\"1\":{\"523\":1,\"733\":1}}],[\"financing\",{\"1\":{\"167\":1}}],[\"financials\",{\"1\":{\"21\":7}}],[\"final<\",{\"1\":{\"611\":1}}],[\"finalizabledelegatedexecutorservice\",{\"1\":{\"772\":2}}],[\"finali\",{\"1\":{\"552\":2}}],[\"finalname>\",{\"1\":{\"389\":1}}],[\"finalname\",{\"1\":{\"230\":1}}],[\"finally\",{\"1\":{\"213\":2,\"214\":3,\"413\":3,\"518\":4,\"539\":1,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"564\":1,\"612\":1,\"650\":2,\"712\":1,\"716\":1,\"777\":1,\"824\":2}}],[\"final\",{\"1\":{\"63\":1,\"213\":2,\"214\":3,\"218\":2,\"297\":4,\"419\":1,\"436\":2,\"441\":3,\"442\":1,\"443\":2,\"444\":17,\"446\":3,\"452\":1,\"517\":1,\"518\":3,\"527\":9,\"552\":1,\"564\":2,\"626\":8,\"650\":1,\"652\":1,\"661\":1,\"820\":2,\"821\":1,\"822\":1,\"823\":1,\"929\":2}}],[\"fi\",{\"1\":{\"332\":4,\"337\":2,\"345\":2,\"349\":2,\"357\":4,\"362\":2,\"389\":5,\"511\":1}}],[\"firewall\",{\"1\":{\"839\":3}}],[\"firewalld\",{\"1\":{\"288\":2,\"839\":2}}],[\"firstreaderholdcount++\",{\"1\":{\"822\":1}}],[\"firstreaderholdcount\",{\"1\":{\"822\":1,\"823\":3}}],[\"firstreader\",{\"1\":{\"822\":2,\"823\":2}}],[\"first\",{\"1\":{\"25\":1,\"73\":9,\"217\":1}}],[\"firstname\",{\"1\":{\"20\":2}}],[\"firstname=bob\",{\"1\":{\"29\":1}}],[\"firstname=\",{\"1\":{\"20\":2}}],[\"filtered\",{\"1\":{\"527\":2}}],[\"filters\",{\"1\":{\"410\":2,\"626\":1}}],[\"filtertype\",{\"1\":{\"408\":1}}],[\"filter\",{\"1\":{\"243\":1,\"280\":1,\"408\":1,\"527\":6}}],[\"fill\",{\"1\":{\"64\":4,\"845\":1}}],[\"filedata\",{\"1\":{\"749\":6}}],[\"filedemo\",{\"1\":{\"537\":1}}],[\"fileutils\",{\"1\":{\"546\":1,\"547\":1,\"548\":2}}],[\"filebytes\",{\"1\":{\"546\":1,\"547\":1}}],[\"filebeat\",{\"1\":{\"265\":1,\"275\":13,\"276\":2,\"277\":4,\"280\":1,\"282\":2}}],[\"filereader\",{\"1\":{\"542\":2}}],[\"filereaderdemo\",{\"1\":{\"542\":1}}],[\"filereader和bufferedreader类使用\",{\"0\":{\"542\":1}}],[\"filewriter\",{\"1\":{\"541\":2}}],[\"filewriterdemo\",{\"1\":{\"541\":1}}],[\"filewriter类\",{\"0\":{\"541\":1}}],[\"filenotfoundexception\",{\"1\":{\"539\":1}}],[\"filename\",{\"1\":{\"315\":1,\"546\":1,\"547\":1,\"749\":2}}],[\"filenames\",{\"1\":{\"63\":3}}],[\"filename和directory\",{\"1\":{\"63\":1}}],[\"fileouputdemo\",{\"1\":{\"539\":1}}],[\"fileoutputstream类总是成对出现的\",{\"1\":{\"539\":1}}],[\"fileoutputstream类称为文件输出流\",{\"1\":{\"539\":1}}],[\"fileoutputstream\",{\"1\":{\"539\":2,\"544\":2}}],[\"fileoutputformat\",{\"1\":{\"32\":1,\"652\":2}}],[\"file类可以表示一个文件\",{\"1\":{\"537\":1}}],[\"file类\",{\"0\":{\"537\":1}}],[\"file或者logging\",{\"1\":{\"418\":1}}],[\"file中的内容\",{\"1\":{\"418\":1}}],[\"filepath\",{\"1\":{\"410\":2}}],[\"file和master\",{\"1\":{\"329\":1,\"342\":1}}],[\"file>\",{\"1\":{\"230\":1}}],[\"file>target\",{\"1\":{\"230\":1}}],[\"file=new\",{\"1\":{\"539\":2,\"541\":1,\"542\":1}}],[\"file=\",{\"1\":{\"80\":1,\"321\":1,\"329\":1,\"342\":1}}],[\"fileinputstream类\",{\"1\":{\"539\":1}}],[\"fileinputstream\",{\"1\":{\"63\":2,\"539\":2,\"545\":2}}],[\"fileinputformat\",{\"1\":{\"32\":1,\"652\":2}}],[\"file\",{\"1\":{\"61\":3,\"63\":5,\"74\":4,\"140\":1,\"189\":1,\"243\":1,\"270\":1,\"317\":1,\"328\":1,\"331\":1,\"336\":1,\"342\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"401\":1,\"410\":12,\"417\":4,\"537\":8,\"539\":8,\"541\":2,\"542\":3,\"544\":4,\"546\":1,\"547\":1,\"548\":2,\"566\":1,\"627\":1,\"749\":3,\"837\":4,\"845\":2,\"854\":1,\"865\":1,\"869\":1,\"870\":2,\"892\":2,\"893\":5}}],[\"filestreamdemo\",{\"1\":{\"539\":1}}],[\"filesort\",{\"1\":{\"82\":1}}],[\"files\",{\"1\":{\"61\":2,\"63\":3,\"74\":1,\"321\":1}}],[\"filesize=25000000\",{\"1\":{\"23\":1}}],[\"fileformat\",{\"1\":{\"21\":1}}],[\"fieldfill\",{\"1\":{\"64\":5}}],[\"field=\",{\"1\":{\"62\":1}}],[\"field\",{\"1\":{\"58\":3,\"523\":2,\"733\":7}}],[\"fields=\",{\"1\":{\"58\":3,\"60\":1}}],[\"fieldschema\",{\"1\":{\"58\":4,\"60\":6}}],[\"fields\",{\"1\":{\"25\":1,\"27\":1,\"58\":2,\"275\":2,\"277\":2}}],[\"fstab文件\",{\"1\":{\"373\":1}}],[\"fstab打开\",{\"1\":{\"373\":1}}],[\"fstab\",{\"1\":{\"288\":1,\"373\":1}}],[\"fstime\",{\"1\":{\"19\":1}}],[\"fsync\",{\"1\":{\"147\":2,\"148\":3,\"149\":2}}],[\"fs\",{\"1\":{\"22\":1,\"32\":2,\"353\":1,\"652\":1}}],[\"fsimage\",{\"1\":{\"19\":1}}],[\"使系统对于需求的变更始终具有较强的适应能力\",{\"1\":{\"898\":1}}],[\"使不相关的变量分开\",{\"1\":{\"667\":1}}],[\"使他们不在同一个cache\",{\"1\":{\"664\":1}}],[\"使空闲时间保持最低\",{\"1\":{\"651\":1}}],[\"使调用继续运行或返回\",{\"1\":{\"473\":1}}],[\"使当前线程在锁存器倒计数至零之前一直等待\",{\"1\":{\"446\":2}}],[\"使得\",{\"1\":{\"623\":1}}],[\"使得java这种安全的语言变得不再\",{\"1\":{\"442\":1}}],[\"使得单一数据库\",{\"1\":{\"128\":1}}],[\"使得单一数据库的数据量变小来缓解单一数据库的性能问题\",{\"1\":{\"128\":1}}],[\"使程序无法根据不同的异常做出正确的应激反应\",{\"1\":{\"413\":1}}],[\"使每个url定向到同一个后端服务器\",{\"1\":{\"305\":1}}],[\"使它们的负载大致相同\",{\"1\":{\"302\":1}}],[\"使它们能够承担更大的担保额度\",{\"1\":{\"167\":1}}],[\"使单机部署情况下的并发控制锁策略失效\",{\"1\":{\"212\":1}}],[\"使其程序的设计模式和架构更趋合理\",{\"1\":{\"898\":1}}],[\"使其变成无锁状态\",{\"1\":{\"828\":1}}],[\"使其可以进行序列化\",{\"1\":{\"652\":1}}],[\"使其更易于理解和修改\",{\"1\":{\"475\":1}}],[\"使其在金融市场上的信用评价得到提升\",{\"1\":{\"166\":1}}],[\"使其包含的文档在未进行一次完整提交时便对搜索可见\",{\"1\":{\"4\":1}}],[\"使查询效率更高效\",{\"1\":{\"82\":1}}],[\"使用自旋锁\",{\"1\":{\"928\":1}}],[\"使用查询函数来替代\",{\"1\":{\"904\":1}}],[\"使用了来自rental类的信息\",{\"1\":{\"902\":1}}],[\"使用重构的方式\",{\"1\":{\"898\":1}}],[\"使用全量备份集或增量备份集进行还原和恢复步骤相同\",{\"1\":{\"893\":1}}],[\"使用时申请\",{\"1\":{\"855\":1}}],[\"使用这种锁会造成busy\",{\"1\":{\"811\":1}}],[\"使用这个插件\",{\"1\":{\"583\":1}}],[\"使用脚本\",{\"1\":{\"788\":1}}],[\"使用计算模型进行分析\",{\"1\":{\"783\":1}}],[\"使用方式二\",{\"1\":{\"779\":1}}],[\"使用方式一\",{\"1\":{\"779\":1}}],[\"使用方法\",{\"1\":{\"734\":1}}],[\"使用方法与github类似\",{\"1\":{\"488\":1}}],[\"使用键值方式上传\",{\"1\":{\"749\":1}}],[\"使用表单上传文件时必须指定enctype属性值为multipart\",{\"1\":{\"749\":1}}],[\"使用对应的公钥p验证其签名\",{\"1\":{\"739\":1}}],[\"使用rfc6979协议\",{\"1\":{\"738\":1}}],[\"使用resttemplate进行服务调用\",{\"1\":{\"410\":1,\"411\":1}}],[\"使用resttemplate\",{\"1\":{\"410\":1}}],[\"使用redirect和permanent则会改变\",{\"1\":{\"309\":1}}],[\"使用比较多\",{\"1\":{\"735\":1}}],[\"使用场景举例\",{\"0\":{\"728\":1}}],[\"使用偏斜锁可以降低无竞争开销\",{\"1\":{\"723\":1}}],[\"使用synchronized可以修饰不同的对象\",{\"1\":{\"723\":1}}],[\"使用scheduledexecutorservice创建定时任务\",{\"1\":{\"721\":1}}],[\"使用javaagent做字节码植入\",{\"1\":{\"706\":1}}],[\"使用java标准库提供的线程池是非常方便的\",{\"1\":{\"475\":1}}],[\"使用到了javaagent技术作为节点的探针\",{\"1\":{\"706\":1}}],[\"使用以上多种技术混合\",{\"1\":{\"704\":1}}],[\"使用成熟的设计方法论\",{\"1\":{\"704\":1}}],[\"使用缺陷避免技术来避一些错误\",{\"1\":{\"704\":1}}],[\"使用线程来处理接收的每个请求\",{\"1\":{\"651\":1}}],[\"使用线程池加速响应速度来处理请求\",{\"1\":{\"651\":1}}],[\"使用不当会导致内存泄露\",{\"1\":{\"650\":1}}],[\"使用不等于查询\",{\"1\":{\"112\":1}}],[\"使用协议进行通讯\",{\"0\":{\"636\":1}}],[\"使用case\",{\"1\":{\"789\":1}}],[\"使用calendarbuilder日历创建者类创建日期\",{\"1\":{\"626\":1}}],[\"使用completablefuture\",{\"1\":{\"475\":1}}],[\"使用configmap的形式来存储filebeat的配置\",{\"1\":{\"273\":1}}],[\"使用它可以实现虚拟机级别的\",{\"1\":{\"706\":1}}],[\"使用它可以简单快速地开发网络应用程序\",{\"1\":{\"607\":1}}],[\"使用它来对比\",{\"1\":{\"624\":1}}],[\"使用maven运行带main方法的类\",{\"0\":{\"583\":1}}],[\"使用maven将项目打包和运行\",{\"0\":{\"582\":1}}],[\"使用maven编译测试类\",{\"0\":{\"581\":1}}],[\"使用maven进行编译\",{\"1\":{\"580\":1}}],[\"使用mac地址会带来安全性问题\",{\"1\":{\"208\":1}}],[\"使用入门\",{\"0\":{\"577\":1}}],[\"使用静态的valueof\",{\"1\":{\"549\":1}}],[\"使用fileinputstream和fileoutputstream类\",{\"0\":{\"539\":1}}],[\"使用第二个\",{\"1\":{\"512\":1}}],[\"使用application\",{\"1\":{\"479\":1}}],[\"使用attach会有同步阻塞的问题\",{\"1\":{\"255\":1}}],[\"使用指定线程池\",{\"1\":{\"475\":1}}],[\"使用指定的线程池执行异步代码\",{\"1\":{\"475\":1}}],[\"使用问题分析\",{\"1\":{\"445\":1}}],[\"使用应用给定函数的结果以原子方式更新当前值\",{\"1\":{\"444\":2}}],[\"使用给定的初始值创建新的atomicinteger\",{\"1\":{\"444\":1}}],[\"使用抛异常返回方式\",{\"1\":{\"413\":1}}],[\"使用openfeign的请求\",{\"1\":{\"410\":1}}],[\"使用nacos的namingservice配合resttemplate的实现服务的发现及调用\",{\"1\":{\"410\":1,\"411\":1}}],[\"使用者提供的hystrix的断路器工厂类实现\",{\"1\":{\"398\":1,\"416\":1}}],[\"使用者提供的断路器实现\",{\"1\":{\"398\":1,\"416\":1}}],[\"使用注解\",{\"0\":{\"383\":1}}],[\"使用执行版本的mysql\",{\"1\":{\"320\":1}}],[\"使用wget下载mysql\",{\"1\":{\"319\":1}}],[\"使用last和break时浏览器中的地址不会改变\",{\"1\":{\"309\":1}}],[\"使用kubectl工具\",{\"1\":{\"293\":1}}],[\"使用daemonset方式将filebeat部署到集群每个节点上\",{\"1\":{\"275\":1}}],[\"使用emptydir共享日志目录\",{\"1\":{\"265\":1}}],[\"使用打包时使用的启动命令\",{\"1\":{\"263\":1}}],[\"使用如下命令进入容器\",{\"1\":{\"255\":1}}],[\"使用该参数可以指定要映射的ip和端口\",{\"1\":{\"251\":1}}],[\"使用远程api来管理和创建\",{\"1\":{\"234\":1}}],[\"使用请求数量对从redis\",{\"1\":{\"221\":1}}],[\"使用和收益权转让给承租人\",{\"1\":{\"187\":1}}],[\"使用一个\",{\"1\":{\"161\":1}}],[\"使用整型数组作为存储的数据结构\",{\"1\":{\"158\":1}}],[\"使用哈希表的\",{\"1\":{\"127\":1}}],[\"使用字典设置的哈希函数\",{\"1\":{\"127\":1}}],[\"使用的是字节流\",{\"1\":{\"541\":1}}],[\"使用的是完全不同的连接方式\",{\"1\":{\"522\":1}}],[\"使用的是\",{\"1\":{\"127\":1}}],[\"使用的\",{\"1\":{\"118\":1}}],[\"使用的检查点\",{\"1\":{\"19\":1}}],[\"使用短索引\",{\"1\":{\"100\":1}}],[\"使用惟一索引\",{\"1\":{\"100\":1}}],[\"使用固定长度的char列不一定比使\",{\"1\":{\"97\":1}}],[\"使用适合存储引擎\",{\"1\":{\"94\":1}}],[\"使用hdfs来存储文件\",{\"1\":{\"87\":1}}],[\"使用hbase\",{\"1\":{\"13\":1}}],[\"使用int来存储\",{\"1\":{\"82\":1}}],[\"使用\",{\"0\":{\"382\":1,\"386\":1},\"1\":{\"63\":1,\"127\":1,\"157\":1,\"158\":4,\"161\":1,\"217\":1,\"388\":1,\"398\":1,\"401\":2,\"408\":1,\"413\":1,\"416\":1,\"427\":1,\"475\":1,\"497\":1,\"522\":2,\"558\":2,\"618\":1,\"623\":2,\"844\":1,\"866\":1,\"892\":1}}],[\"使用嵌入技术将这些数据转换为向量\",{\"1\":{\"50\":1}}],[\"列表中最小的数\",{\"1\":{\"527\":1}}],[\"列表中最大的数\",{\"1\":{\"527\":1}}],[\"列表获得\",{\"1\":{\"214\":1}}],[\"列表\",{\"1\":{\"139\":1,\"214\":2,\"705\":1}}],[\"列表键的底层实现就是一个链表\",{\"1\":{\"118\":1}}],[\"列表键包含了从\",{\"1\":{\"118\":1}}],[\"列参与了数学运算或者函数\",{\"1\":{\"112\":1}}],[\"列值唯一\",{\"1\":{\"101\":2}}],[\"列的索引时\",{\"1\":{\"100\":1}}],[\"列的值\",{\"1\":{\"13\":2}}],[\"列\",{\"1\":{\"100\":2}}],[\"列出本地所有的分支\",{\"1\":{\"500\":1}}],[\"列出了所有用于操作链表和链表节点的\",{\"1\":{\"120\":1}}],[\"列出一个桶中的所有文件和目录\",{\"1\":{\"63\":1}}],[\"列出所有的桶\",{\"1\":{\"63\":1}}],[\"列数据将会被省略掉\",{\"1\":{\"25\":1}}],[\"列长度不重要\",{\"1\":{\"25\":1}}],[\"列族中\",{\"1\":{\"13\":2}}],[\"列族\",{\"1\":{\"13\":1}}],[\"行附近出现错误\",{\"1\":{\"843\":1}}],[\"行号\",{\"1\":{\"838\":2,\"841\":4,\"843\":7,\"869\":1,\"893\":4}}],[\"行为学模型\",{\"1\":{\"684\":1}}],[\"行为\",{\"1\":{\"421\":3,\"422\":3}}],[\"行内的mutation操作都是原子的\",{\"1\":{\"199\":1}}],[\"行\",{\"1\":{\"13\":2}}],[\"北京市\",{\"1\":{\"13\":2}}],[\"女\",{\"1\":{\"13\":2}}],[\"8转为二进制是1000\",{\"1\":{\"896\":1}}],[\"8^11\",{\"1\":{\"896\":1}}],[\"8k\",{\"1\":{\"866\":2}}],[\"84303518\",{\"1\":{\"789\":1}}],[\"8引入lambda表达式\",{\"1\":{\"735\":1}}],[\"8废弃\",{\"1\":{\"722\":1}}],[\"8中\",{\"1\":{\"669\":1}}],[\"8以前\",{\"1\":{\"667\":1}}],[\"83684568\",{\"1\":{\"626\":1}}],[\"8的接口\",{\"1\":{\"527\":1}}],[\"8个子网的主机块地址分别为\",{\"1\":{\"526\":1}}],[\"87\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"872\",{\"1\":{\"263\":1}}],[\"8u351\",{\"1\":{\"376\":1}}],[\"8u251\",{\"1\":{\"263\":1}}],[\"81\",{\"1\":{\"297\":1}}],[\"8<\",{\"1\":{\"297\":3,\"389\":1,\"414\":1,\"707\":3,\"712\":1,\"715\":3}}],[\"86474\",{\"1\":{\"891\":1}}],[\"863\",{\"1\":{\"883\":1}}],[\"86\",{\"1\":{\"287\":1}}],[\"8678\",{\"1\":{\"263\":1}}],[\"829\",{\"1\":{\"841\":1}}],[\"82790372\",{\"1\":{\"818\":1}}],[\"825d7f3967cf\",{\"1\":{\"230\":2}}],[\"82194495\",{\"1\":{\"211\":1}}],[\"8m之间\",{\"1\":{\"74\":1}}],[\"8m\",{\"1\":{\"74\":2}}],[\"88行\",{\"1\":{\"352\":1}}],[\"8848\",{\"1\":{\"297\":2,\"392\":1,\"396\":1}}],[\"88\",{\"1\":{\"23\":1,\"331\":1,\"336\":1}}],[\"88923482352342\",{\"1\":{\"22\":1}}],[\"8\",{\"0\":{\"90\":1,\"770\":1,\"808\":1,\"916\":1},\"1\":{\"21\":2,\"24\":1,\"58\":1,\"59\":1,\"63\":1,\"82\":3,\"118\":2,\"127\":2,\"155\":1,\"214\":1,\"222\":1,\"227\":1,\"230\":2,\"236\":4,\"266\":1,\"277\":1,\"297\":2,\"331\":3,\"332\":2,\"336\":3,\"344\":3,\"348\":3,\"356\":3,\"361\":3,\"367\":1,\"377\":1,\"413\":1,\"444\":2,\"445\":1,\"457\":1,\"475\":1,\"477\":2,\"478\":1,\"479\":2,\"480\":2,\"518\":2,\"522\":1,\"533\":1,\"549\":2,\"563\":2,\"613\":2,\"619\":1,\"622\":3,\"626\":10,\"705\":1,\"715\":3,\"722\":5,\"749\":1,\"799\":1,\"833\":3,\"834\":2,\"836\":1,\"837\":3,\"838\":1,\"841\":1,\"874\":1,\"893\":1}}],[\"89966303\",{\"1\":{\"631\":1}}],[\"898\",{\"1\":{\"67\":1}}],[\"89\",{\"1\":{\"13\":2}}],[\"85\",{\"1\":{\"13\":2,\"23\":1}}],[\"80546917\",{\"1\":{\"924\":1}}],[\"80915509\",{\"1\":{\"576\":1}}],[\"8090\",{\"0\":{\"405\":1}}],[\"806行\",{\"1\":{\"352\":1}}],[\"80端口\",{\"1\":{\"252\":1}}],[\"80端口映射到容器的\",{\"1\":{\"252\":1}}],[\"8088\",{\"1\":{\"477\":1,\"479\":3,\"480\":3}}],[\"8086\",{\"1\":{\"404\":1,\"408\":1}}],[\"8083\",{\"1\":{\"298\":1,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1}}],[\"8082\",{\"1\":{\"298\":1,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1,\"317\":1}}],[\"8081\",{\"1\":{\"241\":2,\"298\":1,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1,\"392\":1,\"396\":1,\"409\":1,\"411\":1}}],[\"8080\",{\"1\":{\"230\":3,\"241\":1,\"293\":1,\"297\":1,\"298\":1,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1,\"315\":1,\"412\":1,\"414\":2,\"418\":2}}],[\"80000\",{\"1\":{\"22\":1,\"712\":2}}],[\"80\",{\"1\":{\"13\":4,\"23\":1,\"189\":1,\"222\":1,\"243\":1,\"247\":1,\"252\":2,\"253\":2,\"254\":4,\"263\":3,\"307\":2,\"317\":1,\"520\":1,\"522\":1,\"893\":1}}],[\"山东省济南市\",{\"1\":{\"13\":4}}],[\"男\",{\"1\":{\"13\":4}}],[\"946534466\",{\"1\":{\"834\":1}}],[\"94\",{\"1\":{\"526\":2}}],[\"9中\",{\"1\":{\"442\":1}}],[\"93\",{\"1\":{\"344\":1,\"348\":1,\"893\":1}}],[\"9300\",{\"1\":{\"273\":1,\"282\":1,\"410\":2}}],[\"95\",{\"1\":{\"331\":1,\"336\":1,\"526\":1}}],[\"95003\",{\"1\":{\"13\":9}}],[\"95002\",{\"1\":{\"13\":9}}],[\"95001\",{\"1\":{\"13\":9}}],[\"9为最大压缩比\",{\"1\":{\"317\":1}}],[\"997\",{\"1\":{\"549\":1}}],[\"9936472\",{\"1\":{\"433\":1}}],[\"99\",{\"1\":{\"315\":1,\"336\":1,\"893\":1}}],[\"99999\",{\"1\":{\"194\":1}}],[\"999\",{\"1\":{\"194\":1}}],[\"927088\",{\"1\":{\"834\":1}}],[\"92\",{\"1\":{\"230\":1}}],[\"9200\",{\"1\":{\"3\":1,\"270\":1,\"272\":1,\"273\":1,\"280\":1,\"282\":1,\"410\":1}}],[\"9<\",{\"1\":{\"230\":1}}],[\"9个月一1年\",{\"1\":{\"178\":1}}],[\"913\",{\"1\":{\"841\":1}}],[\"91340383\",{\"1\":{\"825\":1}}],[\"91\",{\"1\":{\"62\":1,\"893\":1}}],[\"90705205\",{\"1\":{\"825\":1}}],[\"90487984\",{\"1\":{\"825\":1}}],[\"90547215\",{\"1\":{\"683\":1,\"825\":1}}],[\"9098\",{\"1\":{\"612\":1}}],[\"9092\",{\"1\":{\"435\":1,\"564\":1}}],[\"9013663\",{\"1\":{\"211\":1}}],[\"900\",{\"1\":{\"141\":2,\"352\":1}}],[\"9001是管理页\",{\"1\":{\"63\":1}}],[\"9001\",{\"1\":{\"63\":3}}],[\"9000\",{\"1\":{\"32\":1,\"63\":4}}],[\"90之间的相关数据\",{\"1\":{\"13\":2}}],[\"9600\",{\"1\":{\"282\":1}}],[\"96\",{\"1\":{\"27\":1,\"293\":1,\"356\":1,\"361\":1,\"526\":1}}],[\"972\",{\"1\":{\"893\":2}}],[\"9739231\",{\"1\":{\"211\":1}}],[\"97\",{\"1\":{\"23\":1,\"526\":2}}],[\"9\",{\"0\":{\"91\":1,\"775\":1,\"917\":1},\"1\":{\"21\":1,\"82\":1,\"104\":1,\"118\":2,\"222\":1,\"297\":1,\"317\":1,\"388\":1,\"413\":1,\"414\":2,\"444\":1,\"457\":1,\"477\":1,\"479\":1,\"480\":1,\"522\":1,\"549\":3,\"619\":1,\"621\":1,\"705\":1,\"734\":1,\"843\":1,\"874\":1}}],[\"792\",{\"1\":{\"887\":1}}],[\"793定义\",{\"1\":{\"642\":1}}],[\"744\",{\"1\":{\"843\":1}}],[\"739440\",{\"1\":{\"833\":1,\"834\":1}}],[\"73aaec23009d\",{\"1\":{\"475\":1}}],[\"7个阶段\",{\"1\":{\"558\":1}}],[\"752\",{\"1\":{\"843\":1}}],[\"754402133\",{\"1\":{\"833\":1,\"834\":1}}],[\"754\",{\"1\":{\"549\":1}}],[\"75306958\",{\"1\":{\"263\":1}}],[\"78486220\",{\"1\":{\"664\":1}}],[\"789\",{\"1\":{\"548\":1}}],[\"78099114\",{\"1\":{\"82\":1}}],[\"72s\",{\"1\":{\"295\":1}}],[\"7d7dfcff76\",{\"1\":{\"278\":1}}],[\"7wwlx\",{\"1\":{\"276\":1,\"277\":3}}],[\"7基本已经废弃\",{\"1\":{\"82\":1}}],[\"704\",{\"1\":{\"887\":1}}],[\"70\",{\"1\":{\"74\":1,\"611\":1}}],[\"70000\",{\"1\":{\"22\":2}}],[\"7+\",{\"1\":{\"23\":1}}],[\"775\",{\"1\":{\"321\":1}}],[\"777\",{\"1\":{\"321\":2,\"334\":1,\"341\":1,\"347\":1,\"351\":1,\"352\":1,\"359\":1,\"366\":1,\"834\":1}}],[\"77\",{\"1\":{\"23\":1}}],[\"7170\",{\"1\":{\"891\":1}}],[\"714\",{\"1\":{\"869\":1}}],[\"7136416\",{\"1\":{\"816\":1}}],[\"710\",{\"1\":{\"282\":2}}],[\"71\",{\"1\":{\"13\":2,\"241\":1}}],[\"7\",{\"0\":{\"12\":1,\"89\":1,\"221\":1,\"296\":1,\"761\":1,\"769\":1,\"797\":1,\"824\":1,\"915\":1},\"1\":{\"21\":1,\"63\":1,\"74\":1,\"77\":5,\"82\":1,\"118\":2,\"222\":1,\"227\":1,\"229\":2,\"263\":2,\"267\":3,\"300\":1,\"320\":2,\"352\":3,\"413\":1,\"446\":1,\"457\":1,\"522\":1,\"527\":2,\"533\":1,\"549\":2,\"558\":1,\"619\":1,\"626\":1,\"705\":1,\"799\":1}}],[\"672\",{\"1\":{\"843\":1}}],[\"6之前\",{\"1\":{\"723\":1}}],[\"6之后\",{\"1\":{\"673\":1}}],[\"62\",{\"1\":{\"526\":2}}],[\"6214790243416807050l\",{\"1\":{\"444\":1}}],[\"66\",{\"1\":{\"356\":1,\"361\":1}}],[\"666\",{\"1\":{\"352\":1}}],[\"66717\",{\"1\":{\"263\":1}}],[\"68\",{\"1\":{\"318\":1,\"893\":1}}],[\"6>\",{\"1\":{\"307\":1}}],[\"6kqwt\",{\"1\":{\"278\":1}}],[\"6s\",{\"1\":{\"276\":1}}],[\"613009\",{\"1\":{\"222\":1}}],[\"63\",{\"1\":{\"526\":1}}],[\"6381\",{\"1\":{\"213\":1}}],[\"6380\",{\"1\":{\"213\":1}}],[\"6379\",{\"1\":{\"213\":2,\"353\":1,\"355\":1,\"357\":2,\"362\":2,\"364\":1}}],[\"6379>\",{\"1\":{\"134\":11,\"135\":9,\"139\":2,\"355\":2,\"366\":1}}],[\"6941010435512467493\",{\"1\":{\"475\":1}}],[\"6995888\",{\"1\":{\"458\":1}}],[\"699行\",{\"1\":{\"352\":1}}],[\"69行\",{\"1\":{\"352\":1}}],[\"69\",{\"1\":{\"205\":1}}],[\"6号\",{\"1\":{\"189\":1}}],[\"6或以上版本可用\",{\"1\":{\"139\":3}}],[\"6或以上的版本可用\",{\"1\":{\"134\":1}}],[\"6所有过程要么都执行\",{\"1\":{\"66\":1}}],[\"654\",{\"1\":{\"869\":1}}],[\"65535\",{\"1\":{\"270\":5}}],[\"65\",{\"1\":{\"13\":2,\"526\":2}}],[\"6013\",{\"1\":{\"845\":1}}],[\"6012\",{\"1\":{\"845\":1}}],[\"60l\",{\"1\":{\"773\":2}}],[\"60000l\",{\"1\":{\"774\":5}}],[\"60000\",{\"1\":{\"270\":1}}],[\"6000\",{\"1\":{\"135\":1,\"518\":2}}],[\"600\",{\"1\":{\"66\":1,\"893\":1}}],[\"60\",{\"1\":{\"13\":2,\"76\":1,\"156\":1,\"194\":1,\"205\":2,\"317\":1,\"352\":1}}],[\"6\",{\"0\":{\"11\":1,\"88\":1,\"220\":1,\"229\":1,\"295\":1,\"374\":1,\"400\":1,\"439\":1,\"576\":1,\"598\":1,\"599\":1,\"600\":1,\"601\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"665\":1,\"666\":1,\"668\":1,\"719\":1,\"760\":1,\"763\":1,\"796\":1,\"816\":1,\"823\":1,\"914\":1},\"1\":{\"14\":1,\"15\":1,\"21\":1,\"66\":1,\"82\":1,\"118\":2,\"135\":2,\"214\":1,\"218\":1,\"222\":1,\"229\":1,\"241\":1,\"255\":1,\"256\":2,\"257\":1,\"263\":2,\"275\":1,\"317\":3,\"389\":1,\"413\":1,\"433\":1,\"444\":1,\"457\":1,\"477\":1,\"479\":1,\"480\":1,\"522\":1,\"549\":2,\"558\":2,\"618\":1,\"622\":1,\"627\":1,\"637\":1,\"673\":1,\"683\":1,\"684\":3,\"705\":1,\"722\":2,\"723\":1,\"799\":1,\"832\":2,\"834\":2,\"883\":1}}],[\"64位jvm消耗的内存会比32位的要多大约1\",{\"1\":{\"722\":1}}],[\"64位的jvm正式支持了\",{\"1\":{\"722\":1}}],[\"64位开启指针压缩\",{\"1\":{\"722\":1}}],[\"64位系统中是8个字节\",{\"1\":{\"722\":1}}],[\"64位系统\",{\"1\":{\"722\":1}}],[\"64位有符号数\",{\"1\":{\"452\":1}}],[\"64k\",{\"1\":{\"317\":2}}],[\"6443\",{\"1\":{\"294\":1}}],[\"64mb\",{\"1\":{\"146\":1}}],[\"64m\",{\"1\":{\"74\":1}}],[\"64\",{\"1\":{\"3\":1,\"76\":1,\"77\":5,\"158\":4,\"291\":1,\"318\":1,\"526\":1,\"651\":1,\"809\":5,\"833\":1,\"837\":1,\"870\":1}}],[\"57\",{\"1\":{\"893\":1}}],[\"589\",{\"1\":{\"883\":1}}],[\"587\",{\"1\":{\"843\":1}}],[\"595\",{\"1\":{\"893\":1}}],[\"599\",{\"1\":{\"843\":1}}],[\"59\",{\"1\":{\"837\":1}}],[\"592d\",{\"1\":{\"278\":1}}],[\"5倍\",{\"1\":{\"722\":1}}],[\"5d\",{\"1\":{\"435\":1}}],[\"5和ie6\",{\"1\":{\"317\":1}}],[\"5>\",{\"1\":{\"307\":1}}],[\"5m\",{\"1\":{\"276\":2,\"317\":1}}],[\"5s\",{\"1\":{\"276\":1}}],[\"52103\",{\"1\":{\"843\":1}}],[\"52102\",{\"1\":{\"843\":1}}],[\"52101\",{\"1\":{\"843\":1}}],[\"52100\",{\"1\":{\"843\":1}}],[\"5238\",{\"1\":{\"838\":2,\"841\":2,\"842\":1}}],[\"5236\",{\"1\":{\"837\":1,\"841\":2,\"842\":1,\"843\":1,\"883\":3,\"893\":1}}],[\"52\",{\"1\":{\"262\":3,\"272\":2,\"273\":1,\"478\":1,\"525\":1}}],[\"520\",{\"1\":{\"132\":1}}],[\"54\",{\"1\":{\"229\":1,\"533\":1,\"834\":1}}],[\"563\",{\"1\":{\"838\":1,\"841\":1}}],[\"569bf65846\",{\"1\":{\"278\":3}}],[\"5601\",{\"1\":{\"272\":1,\"273\":1}}],[\"56\",{\"1\":{\"229\":1,\"837\":1,\"845\":1}}],[\"519\",{\"1\":{\"869\":1}}],[\"510\",{\"1\":{\"843\":2}}],[\"514\",{\"1\":{\"843\":1}}],[\"51601\",{\"1\":{\"841\":1}}],[\"51600\",{\"1\":{\"841\":1}}],[\"51cto技术栈|2020\",{\"1\":{\"222\":1}}],[\"51cto\",{\"1\":{\"222\":1,\"427\":1,\"534\":1}}],[\"512\",{\"1\":{\"158\":3,\"317\":1}}],[\"5位机器id\",{\"1\":{\"205\":1}}],[\"5位机房id\",{\"1\":{\"205\":1}}],[\"535\",{\"1\":{\"885\":1}}],[\"538\",{\"1\":{\"626\":1}}],[\"537\",{\"1\":{\"477\":2,\"479\":2,\"480\":2}}],[\"53\",{\"1\":{\"22\":1,\"263\":1,\"845\":1}}],[\"559\",{\"1\":{\"869\":1}}],[\"551\",{\"1\":{\"23\":1}}],[\"55\",{\"1\":{\"13\":2,\"477\":1,\"479\":1,\"480\":1}}],[\"5\",{\"0\":{\"10\":1,\"72\":1,\"87\":1,\"156\":1,\"219\":1,\"228\":1,\"273\":1,\"283\":1,\"284\":1,\"285\":1,\"294\":1,\"303\":1,\"373\":1,\"399\":1,\"433\":1,\"438\":1,\"494\":1,\"505\":1,\"575\":1,\"584\":1,\"591\":1,\"592\":1,\"593\":1,\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"637\":1,\"718\":1,\"759\":1,\"762\":1,\"768\":1,\"795\":1,\"815\":1,\"822\":1,\"835\":1,\"913\":1,\"930\":1},\"1\":{\"14\":1,\"15\":1,\"21\":1,\"23\":3,\"24\":1,\"25\":2,\"66\":1,\"74\":3,\"76\":3,\"77\":5,\"82\":2,\"104\":2,\"118\":2,\"127\":1,\"133\":1,\"135\":1,\"176\":1,\"194\":1,\"208\":1,\"214\":3,\"221\":1,\"222\":1,\"263\":2,\"293\":1,\"305\":1,\"318\":2,\"332\":2,\"337\":1,\"345\":1,\"349\":1,\"352\":3,\"357\":1,\"413\":1,\"427\":1,\"428\":1,\"433\":2,\"435\":1,\"440\":7,\"457\":1,\"477\":1,\"479\":1,\"480\":1,\"516\":1,\"522\":2,\"527\":2,\"549\":1,\"558\":1,\"572\":1,\"616\":2,\"618\":2,\"626\":2,\"627\":1,\"651\":1,\"657\":1,\"673\":1,\"675\":1,\"683\":1,\"684\":3,\"705\":1,\"723\":1,\"754\":1,\"771\":1,\"776\":1,\"799\":1,\"834\":1,\"843\":1,\"883\":2}}],[\"503\",{\"1\":{\"893\":2}}],[\"501\",{\"1\":{\"893\":1}}],[\"50601\",{\"1\":{\"838\":1,\"841\":1}}],[\"50600\",{\"1\":{\"838\":1,\"841\":1}}],[\"502\",{\"1\":{\"317\":2,\"893\":2}}],[\"504\",{\"1\":{\"317\":2,\"893\":1}}],[\"5044\",{\"1\":{\"275\":1,\"277\":1,\"280\":1,\"282\":1}}],[\"50m\",{\"1\":{\"317\":1}}],[\"500mi\",{\"1\":{\"275\":1}}],[\"500m\",{\"1\":{\"275\":1}}],[\"5000\",{\"1\":{\"214\":1,\"396\":1,\"552\":1}}],[\"50000\",{\"1\":{\"22\":2}}],[\"500+100\",{\"1\":{\"66\":1}}],[\"500\",{\"1\":{\"64\":1,\"66\":3,\"74\":1,\"317\":2,\"440\":2,\"564\":1,\"776\":1}}],[\"50\",{\"1\":{\"3\":1,\"22\":2,\"74\":1,\"189\":1,\"348\":1,\"402\":2,\"440\":2,\"475\":1,\"527\":1,\"626\":2,\"776\":1,\"779\":1,\"832\":2}}],[\"4的\",{\"1\":{\"651\":1}}],[\"4k\",{\"1\":{\"626\":1}}],[\"4kb\",{\"1\":{\"14\":1}}],[\"4a202ef547cc\",{\"1\":{\"458\":1}}],[\"497\",{\"1\":{\"843\":1}}],[\"4982264981922014374l\",{\"1\":{\"446\":1}}],[\"499963174912\",{\"1\":{\"412\":1}}],[\"431\",{\"1\":{\"884\":1}}],[\"438\",{\"1\":{\"869\":1}}],[\"434\",{\"1\":{\"841\":1}}],[\"43437874\",{\"1\":{\"427\":1}}],[\"43\",{\"1\":{\"834\":1}}],[\"435\",{\"1\":{\"189\":1,\"445\":1}}],[\"4<\",{\"1\":{\"389\":2}}],[\"4096\",{\"1\":{\"866\":1}}],[\"403\",{\"1\":{\"843\":1}}],[\"40\",{\"1\":{\"833\":1,\"834\":1}}],[\"404\",{\"1\":{\"310\":1}}],[\"4000000000\",{\"1\":{\"549\":1}}],[\"4000\",{\"1\":{\"241\":2}}],[\"400\",{\"1\":{\"66\":1,\"74\":1,\"402\":1,\"403\":2}}],[\"4>\",{\"1\":{\"307\":1}}],[\"4过程也可以进入k8s管理页面\",{\"1\":{\"278\":1}}],[\"445\",{\"1\":{\"869\":1}}],[\"443\",{\"1\":{\"317\":2,\"522\":2}}],[\"4430\",{\"1\":{\"63\":1}}],[\"444\",{\"1\":{\"297\":1}}],[\"44\",{\"1\":{\"277\":1,\"445\":1,\"834\":1}}],[\"47\",{\"1\":{\"263\":1,\"893\":2}}],[\"4月\",{\"1\":{\"263\":3}}],[\"480\",{\"1\":{\"842\":1}}],[\"480787\",{\"1\":{\"132\":1}}],[\"48\",{\"1\":{\"229\":1,\"297\":1,\"445\":2,\"478\":1}}],[\"414\",{\"1\":{\"893\":1}}],[\"412\",{\"1\":{\"843\":1}}],[\"418\",{\"1\":{\"838\":1,\"841\":1}}],[\"41\",{\"1\":{\"205\":1,\"229\":2,\"869\":1}}],[\"41位时间截不是存储当前时间的时间截\",{\"1\":{\"205\":1}}],[\"41位时间戳\",{\"1\":{\"205\":1}}],[\"4220188\",{\"1\":{\"626\":1}}],[\"422\",{\"1\":{\"189\":1}}],[\"4~5个\",{\"1\":{\"82\":1}}],[\"46002\",{\"1\":{\"893\":2}}],[\"464\",{\"1\":{\"893\":1}}],[\"46292\",{\"1\":{\"892\":2,\"893\":2}}],[\"463\",{\"1\":{\"843\":1}}],[\"468\",{\"1\":{\"626\":1}}],[\"46\",{\"1\":{\"23\":1,\"893\":1}}],[\"453\",{\"1\":{\"843\":1}}],[\"456\",{\"1\":{\"548\":1}}],[\"459\",{\"1\":{\"23\":1}}],[\"45\",{\"1\":{\"23\":1,\"626\":1,\"893\":1}}],[\"4\",{\"0\":{\"9\":1,\"19\":1,\"37\":1,\"62\":1,\"71\":1,\"132\":1,\"153\":1,\"218\":1,\"227\":1,\"269\":1,\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":2,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"293\":1,\"302\":1,\"372\":1,\"378\":1,\"394\":1,\"398\":1,\"432\":1,\"437\":1,\"486\":1,\"491\":1,\"498\":1,\"510\":1,\"514\":1,\"534\":1,\"543\":1,\"563\":1,\"574\":1,\"583\":1,\"585\":1,\"586\":1,\"587\":1,\"588\":1,\"589\":1,\"590\":2,\"591\":1,\"602\":1,\"603\":1,\"604\":1,\"605\":1,\"636\":1,\"642\":1,\"645\":1,\"657\":1,\"681\":1,\"710\":1,\"717\":1,\"728\":1,\"754\":1,\"758\":1,\"767\":1,\"794\":1,\"814\":1,\"821\":1,\"834\":1,\"912\":1,\"929\":1},\"1\":{\"14\":2,\"15\":1,\"21\":1,\"25\":1,\"26\":1,\"27\":1,\"56\":1,\"61\":1,\"63\":1,\"66\":1,\"74\":2,\"82\":1,\"86\":1,\"113\":1,\"118\":2,\"124\":2,\"125\":1,\"126\":1,\"127\":3,\"133\":1,\"135\":10,\"139\":2,\"172\":1,\"176\":1,\"208\":1,\"214\":1,\"221\":3,\"222\":1,\"229\":1,\"230\":1,\"263\":2,\"275\":1,\"277\":1,\"278\":1,\"297\":1,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":2,\"317\":5,\"413\":1,\"417\":2,\"427\":1,\"428\":1,\"433\":2,\"440\":3,\"457\":1,\"475\":1,\"502\":1,\"522\":2,\"549\":1,\"558\":3,\"605\":1,\"618\":1,\"626\":1,\"627\":1,\"651\":2,\"657\":1,\"673\":1,\"675\":1,\"683\":2,\"684\":4,\"705\":1,\"707\":1,\"715\":4,\"722\":5,\"723\":1,\"735\":1,\"753\":1,\"759\":1,\"761\":1,\"771\":1,\"799\":1,\"822\":1,\"825\":1,\"833\":1,\"834\":3,\"837\":1,\"843\":4,\"845\":1,\"874\":2,\"891\":1,\"893\":1,\"906\":1}}],[\"rh6\",{\"1\":{\"833\":1}}],[\"rh\",{\"1\":{\"822\":7,\"823\":6}}],[\"r50\",{\"1\":{\"744\":1}}],[\"rdd\",{\"1\":{\"627\":6}}],[\"rdbchecksum\",{\"1\":{\"141\":2}}],[\"rdbcompression\",{\"1\":{\"141\":2}}],[\"rdb\",{\"0\":{\"142\":1},\"1\":{\"140\":10,\"141\":15,\"143\":2,\"144\":2,\"145\":1,\"146\":1,\"149\":1,\"151\":2,\"155\":3,\"352\":1}}],[\"rb文件到git的索引中\",{\"1\":{\"503\":1}}],[\"rb文件从上一个已提交的版本中更新回来\",{\"1\":{\"500\":1}}],[\"rb\",{\"1\":{\"500\":1,\"503\":2}}],[\"r<sysfile>\",{\"1\":{\"410\":1}}],[\"rtt\",{\"1\":{\"644\":1}}],[\"rt\",{\"1\":{\"377\":1,\"845\":1}}],[\"rcvd\",{\"1\":{\"648\":1}}],[\"rc\",{\"1\":{\"380\":2}}],[\"rc4\",{\"1\":{\"317\":1}}],[\"rc95\",{\"1\":{\"229\":1}}],[\"rsa\",{\"1\":{\"317\":1,\"495\":3}}],[\"risk\",{\"1\":{\"898\":1}}],[\"ringbuffer提供了静态工厂方法分别针对单事件发布者和多事件发布者的情况进行ringbuffer实例创建\",{\"1\":{\"472\":1}}],[\"ringbuffer本身的序号已经更新\",{\"1\":{\"453\":1}}],[\"ringbuffer和常用的队列之间的区别是\",{\"1\":{\"452\":1}}],[\"ringbuffer没有尾指针\",{\"1\":{\"452\":1}}],[\"ringbuffer中的指针进行按ringbuffer的size取模找出数组的下标来定位入口\",{\"1\":{\"452\":1}}],[\"ringbuffer的内容顺序总是会遵循nextentry\",{\"1\":{\"458\":1}}],[\"ringbuffer的\",{\"1\":{\"452\":1}}],[\"ringbuffer是由一个大数组组成的\",{\"1\":{\"452\":1}}],[\"ringbuffer顾名思义\",{\"1\":{\"452\":1}}],[\"ringbuffer实现\",{\"0\":{\"452\":1}}],[\"ringbuffer仅负责存储和更新通过disruptor的数据\",{\"1\":{\"450\":1}}],[\"ringbuffer\",{\"0\":{\"461\":1},\"1\":{\"450\":1,\"451\":1,\"454\":9,\"455\":1,\"456\":1,\"457\":1,\"458\":5,\"472\":1}}],[\"ribbonclients\",{\"1\":{\"408\":1}}],[\"ribbonclients配置多个\",{\"1\":{\"408\":1}}],[\"ribbonclient可以对具体的服务调用指定特定的负载均衡策略\",{\"1\":{\"408\":1}}],[\"ribbonclient\",{\"1\":{\"403\":1,\"408\":2}}],[\"ribbonrule\",{\"1\":{\"403\":1,\"404\":1,\"408\":1}}],[\"ribbon负载均衡策略为轮询\",{\"1\":{\"403\":1}}],[\"ribbon参数配置\",{\"0\":{\"403\":1}}],[\"ribbon请求连接的超时时间\",{\"1\":{\"396\":1}}],[\"ribbon\",{\"1\":{\"396\":1,\"403\":1,\"408\":1}}],[\"ribbon<\",{\"1\":{\"395\":1,\"408\":1,\"416\":1}}],[\"ri\",{\"1\":{\"288\":1}}],[\"right\",{\"1\":{\"23\":2,\"293\":1,\"734\":6}}],[\"rubydebug\",{\"1\":{\"280\":1}}],[\"ruoyi\",{\"1\":{\"263\":4}}],[\"runtimetype\",{\"1\":{\"716\":2}}],[\"runtime\",{\"1\":{\"593\":1,\"733\":1}}],[\"runtimeexception\",{\"1\":{\"214\":6,\"413\":1,\"419\":2}}],[\"runoob\",{\"1\":{\"527\":1}}],[\"runoobkey\",{\"1\":{\"355\":2}}],[\"runhua\",{\"1\":{\"526\":1}}],[\"runasync\",{\"1\":{\"475\":1}}],[\"runasuser\",{\"1\":{\"275\":1}}],[\"run=client\",{\"1\":{\"263\":2}}],[\"run创建docker容器时\",{\"1\":{\"250\":1}}],[\"running\",{\"1\":{\"243\":1,\"276\":2,\"278\":4,\"295\":1,\"389\":3,\"845\":1}}],[\"runnable接口有个问题\",{\"1\":{\"475\":1}}],[\"runnable\",{\"1\":{\"214\":1,\"475\":3,\"552\":2,\"554\":1,\"703\":2,\"773\":1,\"776\":1}}],[\"runc\",{\"1\":{\"229\":1}}],[\"run\",{\"1\":{\"61\":2,\"63\":1,\"214\":1,\"229\":1,\"230\":3,\"241\":2,\"243\":4,\"247\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"255\":1,\"256\":2,\"257\":1,\"262\":1,\"263\":2,\"297\":2,\"321\":9,\"322\":1,\"353\":1,\"393\":1,\"397\":1,\"408\":1,\"409\":1,\"415\":1,\"416\":1,\"446\":1,\"475\":1,\"552\":2,\"554\":1,\"566\":2,\"612\":2,\"703\":2,\"776\":1}}],[\"rwxr\",{\"1\":{\"845\":6}}],[\"rwl\",{\"1\":{\"824\":6}}],[\"rw\",{\"1\":{\"263\":3}}],[\"rlock\",{\"1\":{\"213\":1}}],[\"rlike\",{\"1\":{\"22\":3}}],[\"rpc\",{\"1\":{\"413\":2,\"608\":3,\"610\":1}}],[\"rpoplpush\",{\"1\":{\"135\":1}}],[\"rpop\",{\"1\":{\"135\":1}}],[\"rpush\",{\"1\":{\"135\":2}}],[\"rpm\",{\"1\":{\"76\":2,\"77\":9,\"291\":1,\"318\":3,\"319\":2}}],[\"rnd\",{\"1\":{\"74\":1,\"321\":1}}],[\"rf\",{\"1\":{\"56\":1,\"367\":1}}],[\"rank\",{\"1\":{\"63\":2}}],[\"range\",{\"1\":{\"58\":4,\"113\":1,\"133\":1}}],[\"randrange\",{\"1\":{\"58\":1}}],[\"randomrule\",{\"1\":{\"403\":2}}],[\"randomuuid\",{\"1\":{\"213\":1,\"217\":1,\"218\":1,\"219\":1,\"439\":1}}],[\"random\",{\"1\":{\"58\":11,\"243\":1,\"527\":6,\"552\":1,\"554\":1,\"564\":1}}],[\"rand\",{\"1\":{\"24\":4}}],[\"raw\",{\"1\":{\"27\":2,\"295\":2}}],[\"robustness\",{\"1\":{\"898\":1}}],[\"roles\",{\"1\":{\"888\":1}}],[\"role\",{\"1\":{\"650\":2,\"887\":1,\"888\":2}}],[\"roll\",{\"1\":{\"837\":1,\"843\":1,\"845\":1,\"864\":5,\"892\":1,\"893\":5}}],[\"rolling\",{\"1\":{\"433\":1}}],[\"rollingstats\",{\"1\":{\"402\":1}}],[\"rollbackfor\",{\"1\":{\"427\":1}}],[\"rollback\",{\"1\":{\"139\":1,\"421\":1,\"422\":2,\"845\":6}}],[\"routes\",{\"1\":{\"410\":1}}],[\"router\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"routines\",{\"1\":{\"326\":1,\"342\":1}}],[\"roundrobinrule\",{\"1\":{\"404\":1}}],[\"round\",{\"1\":{\"22\":1}}],[\"roots\",{\"1\":{\"558\":1}}],[\"roots没有任何引用链相连时\",{\"1\":{\"558\":1}}],[\"roots的对象开始向下搜索\",{\"1\":{\"558\":1}}],[\"root\",{\"0\":{\"316\":1,\"844\":1},\"1\":{\"61\":2,\"63\":1,\"74\":1,\"78\":4,\"80\":2,\"222\":2,\"229\":1,\"230\":2,\"263\":7,\"267\":1,\"268\":3,\"270\":4,\"271\":1,\"272\":1,\"273\":5,\"275\":2,\"276\":3,\"277\":6,\"278\":6,\"280\":1,\"281\":2,\"282\":4,\"315\":1,\"316\":1,\"317\":1,\"322\":4,\"329\":1,\"342\":1,\"343\":4,\"734\":5,\"831\":4,\"832\":6,\"833\":7,\"834\":20,\"835\":3,\"836\":4,\"838\":8,\"839\":5,\"844\":2}}],[\"row模式时\",{\"1\":{\"74\":1}}],[\"row\",{\"1\":{\"25\":1,\"27\":1,\"74\":3,\"107\":1,\"328\":1,\"342\":1}}],[\"rowkey\",{\"1\":{\"13\":1,\"548\":1}}],[\"r3\",{\"1\":{\"14\":1}}],[\"r2\",{\"1\":{\"14\":1,\"888\":1}}],[\"r1\",{\"1\":{\"14\":7,\"744\":1,\"888\":5}}],[\"rk002\",{\"1\":{\"13\":1}}],[\"rk001\",{\"1\":{\"13\":1}}],[\"rman>\",{\"1\":{\"892\":1,\"893\":8}}],[\"rm\",{\"1\":{\"12\":1,\"56\":1,\"499\":1,\"502\":1,\"503\":2,\"893\":1}}],[\"r\",{\"1\":{\"8\":1,\"12\":1,\"63\":2,\"73\":1,\"101\":1,\"263\":6,\"318\":1,\"321\":5,\"334\":1,\"341\":1,\"347\":1,\"351\":1,\"359\":1,\"366\":1,\"500\":1,\"501\":1,\"616\":1,\"738\":1,\"739\":2,\"740\":7,\"743\":3,\"744\":2,\"745\":5,\"822\":3,\"833\":2,\"834\":4}}],[\"reusability\",{\"1\":{\"898\":1}}],[\"remaining\",{\"1\":{\"892\":1,\"893\":4}}],[\"remotename\",{\"1\":{\"499\":2}}],[\"remotefilefallbackfactory\",{\"1\":{\"410\":1}}],[\"remotefileservice\",{\"1\":{\"410\":2}}],[\"remoteclient\",{\"1\":{\"404\":2,\"408\":1,\"409\":1,\"416\":1}}],[\"remote\",{\"1\":{\"317\":1,\"353\":1,\"497\":3,\"499\":4}}],[\"removed\",{\"1\":{\"835\":1}}],[\"remove\",{\"1\":{\"214\":1,\"218\":2,\"225\":2,\"650\":6,\"823\":1,\"893\":2}}],[\"removeobjectargs\",{\"1\":{\"63\":1}}],[\"removeobject\",{\"1\":{\"63\":1}}],[\"removebucketargs\",{\"1\":{\"63\":1}}],[\"removebucket\",{\"1\":{\"63\":1}}],[\"reentrant\",{\"1\":{\"820\":1}}],[\"reentrantlock实现原理的不同\",{\"1\":{\"723\":1}}],[\"reentrantlocktest\",{\"1\":{\"703\":3}}],[\"reentrantlock提供了一个condition\",{\"1\":{\"703\":1}}],[\"reentrantlock默认的构造函数是创建的非公平锁\",{\"1\":{\"703\":1}}],[\"reentrantlock类提供了一些高级功能\",{\"1\":{\"703\":1}}],[\"reentrantlock\",{\"1\":{\"702\":1,\"703\":3,\"723\":1,\"777\":1,\"926\":1}}],[\"reentry\",{\"1\":{\"218\":2}}],[\"rental类中添加方法\",{\"1\":{\"902\":1}}],[\"rental\",{\"1\":{\"898\":1}}],[\"rendezvous\",{\"1\":{\"530\":1}}],[\"rename\",{\"1\":{\"21\":1,\"867\":1}}],[\"rebase\",{\"1\":{\"505\":1}}],[\"reboot\",{\"1\":{\"343\":1,\"380\":1}}],[\"rebuild\",{\"1\":{\"28\":3}}],[\"reactor模式中的worker线程池\",{\"1\":{\"433\":1}}],[\"reason\",{\"1\":{\"399\":1}}],[\"real\",{\"1\":{\"317\":2}}],[\"realip\",{\"1\":{\"243\":1}}],[\"readlock\",{\"1\":{\"824\":4}}],[\"readlines\",{\"1\":{\"548\":1}}],[\"readline\",{\"1\":{\"542\":1}}],[\"readers\",{\"1\":{\"823\":1}}],[\"readershouldblock\",{\"1\":{\"822\":1}}],[\"readholds\",{\"1\":{\"822\":2,\"823\":2}}],[\"readwritelock同lock一样也是一个接口\",{\"1\":{\"818\":1}}],[\"readwritelock\",{\"1\":{\"723\":1}}],[\"readjavaformatstring\",{\"1\":{\"626\":1}}],[\"readbyte\",{\"1\":{\"613\":1}}],[\"readfile\",{\"1\":{\"548\":1}}],[\"readfiletobytearray\",{\"1\":{\"546\":1}}],[\"readobject\",{\"1\":{\"545\":1}}],[\"readonly\",{\"1\":{\"263\":1}}],[\"readme\",{\"1\":{\"497\":1,\"572\":1}}],[\"readtimeout\",{\"1\":{\"396\":1,\"403\":1}}],[\"ready\",{\"1\":{\"276\":1,\"278\":1,\"295\":1,\"845\":1}}],[\"reads\",{\"1\":{\"194\":1}}],[\"read\",{\"0\":{\"39\":1,\"68\":1,\"69\":1,\"70\":1},\"1\":{\"74\":4,\"79\":1,\"106\":3,\"107\":2,\"155\":1,\"317\":1,\"321\":1,\"324\":1,\"339\":1,\"342\":1,\"539\":1,\"613\":1,\"802\":1,\"805\":1,\"809\":1,\"818\":1,\"823\":2,\"824\":3,\"833\":1,\"854\":1}}],[\"registry\",{\"0\":{\"424\":1},\"1\":{\"234\":1,\"236\":2,\"263\":5,\"290\":1,\"293\":1}}],[\"region\",{\"1\":{\"63\":2}}],[\"retentionpolicy\",{\"1\":{\"733\":2}}],[\"retention\",{\"1\":{\"733\":2,\"864\":1}}],[\"retries\",{\"1\":{\"435\":1}}],[\"retryntimes\",{\"1\":{\"214\":1}}],[\"retirs重发\",{\"1\":{\"435\":1}}],[\"returns\",{\"1\":{\"73\":1,\"217\":1}}],[\"returned\",{\"1\":{\"27\":2,\"217\":1}}],[\"return\",{\"1\":{\"3\":7,\"59\":1,\"61\":1,\"62\":1,\"63\":11,\"64\":5,\"73\":5,\"213\":4,\"214\":9,\"216\":1,\"217\":6,\"218\":1,\"219\":1,\"297\":5,\"310\":1,\"311\":1,\"312\":1,\"313\":1,\"314\":1,\"315\":1,\"317\":3,\"399\":3,\"400\":1,\"401\":1,\"402\":2,\"403\":1,\"404\":2,\"408\":2,\"410\":2,\"411\":2,\"413\":5,\"415\":1,\"419\":7,\"441\":2,\"443\":1,\"444\":24,\"445\":4,\"446\":4,\"475\":5,\"517\":3,\"518\":23,\"523\":2,\"527\":2,\"533\":4,\"564\":3,\"650\":9,\"716\":1,\"717\":1,\"733\":1,\"734\":1,\"735\":1,\"771\":1,\"772\":2,\"773\":2,\"779\":1,\"820\":6,\"821\":1,\"822\":3,\"823\":1}}],[\"review\",{\"1\":{\"907\":1}}],[\"revision功能可通过\",{\"1\":{\"214\":1}}],[\"revision\",{\"1\":{\"214\":13}}],[\"revision机制\",{\"1\":{\"214\":1}}],[\"revert\",{\"1\":{\"501\":2,\"503\":2}}],[\"revoke\",{\"1\":{\"214\":1,\"887\":2,\"888\":1}}],[\"re\",{\"1\":{\"214\":1}}],[\"rewrite会轻微增加服务器负担\",{\"1\":{\"308\":1}}],[\"rewrite使用场景\",{\"0\":{\"308\":1}}],[\"rewrite\",{\"0\":{\"149\":1,\"150\":1,\"152\":2},\"1\":{\"146\":4,\"149\":2,\"150\":1,\"151\":4,\"152\":7}}],[\"rehashing\",{\"1\":{\"126\":1}}],[\"rehashidx\",{\"1\":{\"126\":3}}],[\"rehash\",{\"1\":{\"126\":7}}],[\"redo\",{\"1\":{\"860\":1,\"861\":1,\"862\":1,\"863\":2,\"864\":2,\"868\":3,\"889\":1}}],[\"redolog\",{\"1\":{\"199\":1}}],[\"redefine\",{\"1\":{\"708\":1,\"718\":1}}],[\"redeploy\",{\"1\":{\"566\":1}}],[\"redirect\",{\"1\":{\"309\":1}}],[\"redis从库是否升级为主库\",{\"1\":{\"366\":1}}],[\"redis的分布式锁中redisson一般为单实例\",{\"1\":{\"214\":1}}],[\"redis的基本事务\",{\"1\":{\"139\":1}}],[\"redis分布式锁\",{\"1\":{\"213\":1}}],[\"redis分布式锁的实现\",{\"0\":{\"213\":1}}],[\"redisredlock\",{\"1\":{\"213\":2}}],[\"redislockimpl\",{\"1\":{\"216\":1,\"217\":1,\"218\":2,\"219\":1}}],[\"redislock\",{\"1\":{\"213\":9,\"215\":2,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"redissonredlock\",{\"1\":{\"213\":4}}],[\"redisson\",{\"1\":{\"213\":2}}],[\"redissonclient\",{\"1\":{\"213\":8}}],[\"redis中间件\",{\"1\":{\"207\":1}}],[\"redis有5个命令可以让用户在不被打断\",{\"1\":{\"139\":1}}],[\"redis>\",{\"1\":{\"118\":2}}],[\"redis\",{\"1\":{\"118\":6,\"119\":1,\"121\":4,\"123\":2,\"124\":1,\"126\":2,\"127\":3,\"139\":3,\"140\":7,\"141\":2,\"143\":2,\"144\":2,\"146\":2,\"149\":2,\"150\":3,\"151\":2,\"152\":1,\"153\":6,\"154\":4,\"155\":39,\"156\":1,\"158\":6,\"159\":1,\"160\":1,\"161\":12,\"213\":8,\"218\":2,\"221\":20,\"352\":21,\"353\":6,\"355\":13,\"356\":5,\"357\":6,\"358\":1,\"360\":2,\"361\":5,\"362\":6,\"363\":1,\"364\":2,\"366\":2,\"367\":3,\"616\":2,\"617\":3,\"618\":2,\"619\":2,\"620\":5,\"621\":1,\"622\":2,\"623\":4,\"624\":2}}],[\"redis数据结构与对象\",{\"0\":{\"118\":1,\"122\":1,\"614\":1}}],[\"red\",{\"1\":{\"222\":1}}],[\"redlock一般要求至少3台以上的redis主从实例\",{\"1\":{\"214\":1}}],[\"redlock\",{\"1\":{\"213\":4}}],[\"reduce阶段\",{\"1\":{\"652\":1}}],[\"reduce负责把分解后多任务处理的结果汇总起来\",{\"1\":{\"33\":1}}],[\"reducer<text\",{\"1\":{\"32\":2,\"652\":1}}],[\"reducer\",{\"1\":{\"23\":3,\"27\":1,\"32\":1,\"37\":1,\"652\":1}}],[\"reduce\",{\"0\":{\"37\":1,\"44\":1,\"48\":1},\"1\":{\"23\":2,\"32\":3,\"33\":1,\"37\":1,\"45\":1,\"46\":1,\"47\":2,\"48\":2,\"527\":1,\"652\":2,\"781\":2}}],[\"reflect\",{\"1\":{\"523\":2,\"716\":1}}],[\"refs\",{\"1\":{\"500\":1,\"501\":1}}],[\"referer\",{\"1\":{\"315\":1,\"479\":1,\"480\":1}}],[\"reference是4个字节\",{\"1\":{\"722\":1}}],[\"reference\",{\"1\":{\"211\":1}}],[\"refused\",{\"1\":{\"293\":1}}],[\"ref\",{\"1\":{\"113\":3,\"500\":1,\"814\":4}}],[\"refreshscope\",{\"1\":{\"401\":2}}],[\"refresh\",{\"1\":{\"4\":1}}],[\"releasing\",{\"1\":{\"823\":1,\"824\":1}}],[\"release版本\",{\"1\":{\"414\":1}}],[\"release对应于spring\",{\"1\":{\"414\":1}}],[\"release及0\",{\"1\":{\"414\":1}}],[\"release<\",{\"1\":{\"297\":2,\"414\":1}}],[\"releaselock\",{\"1\":{\"215\":1,\"216\":1,\"217\":2,\"218\":1,\"219\":1}}],[\"release\",{\"1\":{\"60\":1,\"62\":1,\"214\":1,\"319\":2,\"518\":5,\"554\":2,\"824\":1}}],[\"releases\",{\"1\":{\"56\":1,\"352\":1,\"446\":1,\"821\":3}}],[\"reload\",{\"1\":{\"321\":1,\"345\":1,\"349\":1,\"354\":1,\"839\":2}}],[\"relying\",{\"1\":{\"217\":1}}],[\"relay\",{\"1\":{\"79\":2,\"321\":3}}],[\"repaired\",{\"1\":{\"527\":1}}],[\"repair\",{\"1\":{\"527\":2}}],[\"repackage\",{\"1\":{\"389\":1}}],[\"representable\",{\"1\":{\"445\":2}}],[\"repsponse\",{\"1\":{\"418\":1}}],[\"repeat\",{\"1\":{\"413\":1}}],[\"repeatable\",{\"0\":{\"70\":1},\"1\":{\"106\":1,\"107\":2}}],[\"repolist\",{\"1\":{\"320\":3}}],[\"reporting\",{\"1\":{\"297\":2,\"707\":2,\"715\":2}}],[\"repos\",{\"1\":{\"267\":1,\"290\":1,\"291\":2}}],[\"repository\",{\"1\":{\"230\":1,\"267\":1,\"293\":1}}],[\"repository>\",{\"1\":{\"230\":1}}],[\"repo\",{\"1\":{\"226\":2,\"267\":1,\"290\":2,\"291\":2}}],[\"replay\",{\"1\":{\"897\":1}}],[\"replace\",{\"1\":{\"21\":1}}],[\"replicaof\",{\"1\":{\"355\":1}}],[\"replicas\",{\"1\":{\"263\":1}}],[\"replicas=3\",{\"1\":{\"263\":1}}],[\"replicate\",{\"1\":{\"79\":1}}],[\"requirepass\",{\"1\":{\"352\":1}}],[\"required\",{\"1\":{\"64\":4,\"243\":1}}],[\"requestconfig\",{\"1\":{\"518\":17}}],[\"requestconfigbuilder\",{\"1\":{\"3\":3}}],[\"requesturi\",{\"1\":{\"419\":8}}],[\"requestparams\",{\"1\":{\"626\":1}}],[\"requestparam\",{\"1\":{\"410\":1,\"749\":1}}],[\"requestpart\",{\"1\":{\"410\":1}}],[\"requestbody\",{\"1\":{\"410\":1,\"749\":1}}],[\"requestvolumethreshold\",{\"1\":{\"402\":2}}],[\"requestmap\",{\"1\":{\"749\":3}}],[\"requestmapping路径\",{\"1\":{\"418\":1}}],[\"requestmapping\",{\"1\":{\"400\":1,\"401\":1,\"402\":2,\"410\":1,\"411\":1,\"415\":1}}],[\"requestmethod\",{\"1\":{\"400\":1,\"402\":2,\"410\":1,\"411\":1,\"415\":1}}],[\"requests\",{\"1\":{\"263\":1,\"275\":1,\"477\":1,\"479\":1,\"480\":1}}],[\"request\",{\"0\":{\"657\":1},\"1\":{\"20\":1,\"243\":1,\"418\":1,\"419\":9,\"488\":1,\"493\":1,\"650\":5}}],[\"requestoptions\",{\"1\":{\"3\":6}}],[\"recv\",{\"1\":{\"845\":1}}],[\"recs\",{\"1\":{\"845\":3}}],[\"recycle\",{\"1\":{\"837\":1,\"845\":1,\"892\":1,\"893\":5}}],[\"recheck\",{\"1\":{\"824\":1}}],[\"recall\",{\"1\":{\"626\":1}}],[\"receive\",{\"1\":{\"564\":1}}],[\"received\",{\"1\":{\"438\":1}}],[\"receiveconfiginfo\",{\"1\":{\"297\":2}}],[\"recover\",{\"1\":{\"893\":11}}],[\"recovery\",{\"1\":{\"704\":1}}],[\"recovery=1\",{\"1\":{\"321\":1}}],[\"records\",{\"1\":{\"564\":3}}],[\"record\",{\"1\":{\"438\":2,\"564\":6}}],[\"recordreader\",{\"1\":{\"39\":1}}],[\"recursive\",{\"1\":{\"63\":1}}],[\"response\",{\"1\":{\"650\":2}}],[\"reset\",{\"1\":{\"339\":1,\"435\":1,\"503\":1,\"564\":2}}],[\"resource\",{\"0\":{\"654\":1,\"657\":1},\"1\":{\"427\":2,\"653\":3,\"654\":1,\"655\":1,\"707\":1,\"715\":1,\"888\":1}}],[\"resource文件夹\",{\"1\":{\"389\":1}}],[\"resource>\",{\"1\":{\"389\":1}}],[\"resources任务\",{\"1\":{\"580\":1}}],[\"resources>\",{\"1\":{\"389\":1}}],[\"resources<\",{\"1\":{\"389\":4}}],[\"resources\",{\"1\":{\"263\":2,\"275\":1,\"389\":1,\"413\":1,\"707\":1,\"715\":1}}],[\"resolve\",{\"1\":{\"74\":1}}],[\"res\",{\"1\":{\"62\":2}}],[\"result=class\",{\"1\":{\"921\":2}}],[\"result=\",{\"1\":{\"402\":2}}],[\"results\",{\"1\":{\"62\":2,\"63\":2}}],[\"result\",{\"1\":{\"58\":4,\"62\":4,\"63\":1,\"217\":2,\"410\":2,\"411\":2,\"413\":2,\"445\":2,\"475\":3,\"652\":3}}],[\"restore\",{\"1\":{\"893\":6}}],[\"restrictcontended才能开启此功能\",{\"1\":{\"669\":1}}],[\"resttemplate\",{\"1\":{\"402\":2,\"408\":3,\"410\":3,\"411\":3}}],[\"restcontrolleradvice\",{\"1\":{\"419\":2}}],[\"restcontroller\",{\"1\":{\"400\":1,\"401\":1,\"415\":1,\"419\":1}}],[\"restclientbuilder\",{\"1\":{\"3\":4}}],[\"restclient\",{\"1\":{\"3\":2}}],[\"restarts\",{\"1\":{\"278\":1,\"295\":1}}],[\"restartpolicy\",{\"1\":{\"263\":1}}],[\"restart\",{\"1\":{\"230\":1,\"281\":1,\"323\":1,\"325\":1,\"332\":1,\"337\":1,\"355\":1,\"357\":1,\"362\":1,\"389\":4,\"704\":1}}],[\"restart=always\",{\"1\":{\"63\":1}}],[\"resthighlevelclient\",{\"1\":{\"3\":5}}],[\"rest\",{\"1\":{\"3\":2,\"21\":1}}],[\"reilly\",{\"1\":{\"22\":1}}],[\"查其他资料\",{\"1\":{\"749\":1}}],[\"查可能是java的堆栈设置太小的原因\",{\"1\":{\"651\":1}}],[\"查等操作\",{\"1\":{\"500\":1}}],[\"查找到叶子节点方可以获得所查键值\",{\"1\":{\"102\":1}}],[\"查找错误日志位置\",{\"1\":{\"74\":1}}],[\"查找学生地址是山东省的相关数据\",{\"1\":{\"13\":2}}],[\"查找名字为jom的相关数据\",{\"1\":{\"13\":2}}],[\"查找成绩为80\",{\"1\":{\"13\":2}}],[\"查找95002\",{\"1\":{\"13\":2}}],[\"查找95001的相关数据\",{\"1\":{\"13\":2}}],[\"查看各个增量备份集的基础备份集\",{\"1\":{\"894\":1}}],[\"查看备份集\",{\"1\":{\"893\":1,\"894\":1}}],[\"查看归档配置\",{\"1\":{\"869\":1}}],[\"查看源码\",{\"1\":{\"771\":1,\"772\":1,\"773\":1}}],[\"查看解开数字证书的公钥是否在列表之内\",{\"1\":{\"705\":1}}],[\"查看版本\",{\"1\":{\"501\":1}}],[\"查看远程版本\",{\"1\":{\"501\":1}}],[\"查看远程分支\",{\"1\":{\"500\":1}}],[\"查看远程仓库\",{\"1\":{\"499\":1}}],[\"查看本地分支\",{\"1\":{\"500\":1}}],[\"查看历史日志\",{\"1\":{\"497\":1,\"503\":1}}],[\"查看配置\",{\"0\":{\"496\":1}}],[\"查看设备的挂载情况\",{\"0\":{\"369\":1}}],[\"查看是否同步了主库的数据\",{\"1\":{\"355\":1}}],[\"查看nginx欢迎页\",{\"1\":{\"343\":1}}],[\"查看进程是否启动\",{\"1\":{\"343\":1}}],[\"查看keepalived是否会自动拉起服务\",{\"1\":{\"360\":1}}],[\"查看keepalived和mysql是否启动\",{\"1\":{\"342\":1}}],[\"查看kibana日志\",{\"0\":{\"284\":1}}],[\"查看master的binlog的文件名和binlog偏移量\",{\"1\":{\"342\":1}}],[\"查看从库是否升级为主库\",{\"1\":{\"341\":1}}],[\"查看虚拟ip是否已绑定\",{\"1\":{\"367\":1}}],[\"查看虚拟ip是否漂移\",{\"1\":{\"366\":1}}],[\"查看虚拟ip是否漂移到从库服务器上\",{\"1\":{\"341\":1}}],[\"查看虚拟ip是否重新绑定\",{\"1\":{\"342\":1}}],[\"查看虚拟ip是否绑定\",{\"1\":{\"342\":1}}],[\"查看虚拟ip是否出现在网卡上\",{\"1\":{\"341\":1}}],[\"查看虚拟ip是否出现在了网卡上\",{\"1\":{\"334\":1,\"347\":1,\"351\":2,\"359\":1,\"366\":1}}],[\"查看初始化密码\",{\"1\":{\"322\":1}}],[\"查看运行状态\",{\"1\":{\"321\":1}}],[\"查看运行镜像\",{\"1\":{\"63\":1}}],[\"查看当前用户拥有的权限\",{\"0\":{\"886\":1}}],[\"查看当前项目的依赖树\",{\"1\":{\"597\":1}}],[\"查看当前项目已解析的依赖\",{\"1\":{\"597\":1}}],[\"查看当前启用的mysql版本\",{\"1\":{\"320\":1}}],[\"查看当前表有哪些索引\",{\"0\":{\"111\":1}}],[\"查看所有的\",{\"1\":{\"320\":1}}],[\"查看可用的\",{\"1\":{\"320\":1}}],[\"查看创建状态\",{\"1\":{\"263\":1}}],[\"查看yaml文件\",{\"1\":{\"263\":1}}],[\"查看阿里云镜像仓库registry中的镜像\",{\"1\":{\"263\":1}}],[\"查看容器信息\",{\"0\":{\"259\":1}}],[\"查看网络模式\",{\"0\":{\"258\":1}}],[\"查看镜像对外暴露端口号\",{\"0\":{\"248\":1}}],[\"查看有哪些镜像\",{\"0\":{\"240\":1}}],[\"查看资源库有tomcat镜像\",{\"0\":{\"238\":1}}],[\"查看安装版本\",{\"1\":{\"235\":1}}],[\"查看给定键距离过期时间还有多少毫秒\",{\"1\":{\"139\":1}}],[\"查看给定键距离过期还有多少秒\",{\"1\":{\"139\":1}}],[\"查看详情的用户与商品信息浏览互不影响\",{\"1\":{\"129\":1}}],[\"查看结果\",{\"1\":{\"32\":1}}],[\"查看逻辑\",{\"1\":{\"29\":1}}],[\"查看指定分区\",{\"1\":{\"21\":1}}],[\"查看数据库\",{\"1\":{\"21\":1}}],[\"查看rk001的数据\",{\"1\":{\"13\":1}}],[\"查看hdfs上\",{\"0\":{\"9\":1}}],[\"查看\",{\"0\":{\"8\":1,\"374\":1,\"891\":1},\"1\":{\"107\":1,\"263\":1,\"278\":1,\"318\":1,\"834\":1}}],[\"查询用户使用的profile资源限制文件\",{\"1\":{\"883\":1}}],[\"查询时间过长导致\",{\"1\":{\"864\":1}}],[\"查询出商品信息\",{\"1\":{\"732\":1}}],[\"查询的是\",{\"1\":{\"222\":1}}],[\"查询表时只需要获取必要的字段\",{\"1\":{\"82\":1}}],[\"查询检查返回少于该参数指定行的sql不被记录到慢查询日志\",{\"1\":{\"74\":1}}],[\"查询a账户和b账户的时候\",{\"1\":{\"66\":1}}],[\"查询array的第一个元素\",{\"1\":{\"22\":1}}],[\"查询一个元素\",{\"1\":{\"22\":1}}],[\"查询键值\",{\"1\":{\"22\":1}}],[\"查询语句中含有多层嵌套\",{\"1\":{\"20\":1}}],[\"查询所有表\",{\"1\":{\"13\":1}}],[\"查询数据\",{\"1\":{\"13\":1}}],[\"查询es失败\",{\"1\":{\"3\":1}}],[\"查询信息时异常\",{\"1\":{\"3\":1}}],[\"查询\",{\"1\":{\"3\":1,\"25\":1,\"214\":1,\"863\":1}}],[\"392\",{\"1\":{\"893\":1}}],[\"397\",{\"1\":{\"838\":1,\"841\":1}}],[\"3977021\",{\"1\":{\"741\":1}}],[\"39\",{\"1\":{\"834\":1}}],[\"393848605https\",{\"1\":{\"132\":1}}],[\"3<\",{\"1\":{\"707\":1,\"715\":1}}],[\"3c5d7f09dfbd\",{\"1\":{\"626\":1}}],[\"355\",{\"1\":{\"869\":1}}],[\"35387\",{\"1\":{\"845\":1}}],[\"35353187\",{\"1\":{\"789\":1}}],[\"35\",{\"1\":{\"479\":1,\"626\":1,\"893\":1}}],[\"351\",{\"1\":{\"377\":1}}],[\"3e3\",{\"1\":{\"388\":1}}],[\"330\",{\"1\":{\"893\":1}}],[\"3306\",{\"1\":{\"74\":10}}],[\"333\",{\"1\":{\"843\":1}}],[\"33554432\",{\"1\":{\"435\":1}}],[\"33\",{\"1\":{\"317\":1,\"526\":2,\"845\":4}}],[\"3>\",{\"1\":{\"307\":1}}],[\"3d22h\",{\"1\":{\"278\":3}}],[\"3过程也可以进入k8s管理页面\",{\"1\":{\"277\":1}}],[\"360等软件\",{\"1\":{\"897\":1}}],[\"364\",{\"1\":{\"626\":1}}],[\"36\",{\"1\":{\"477\":2,\"479\":2,\"480\":2,\"833\":1,\"834\":1}}],[\"3631071\",{\"1\":{\"427\":1}}],[\"365\",{\"1\":{\"205\":1}}],[\"36524\",{\"1\":{\"194\":1}}],[\"361\",{\"1\":{\"23\":1}}],[\"318\",{\"1\":{\"893\":1}}],[\"313\",{\"1\":{\"893\":2}}],[\"317\",{\"1\":{\"843\":1}}],[\"31m\",{\"1\":{\"389\":2}}],[\"31645\",{\"1\":{\"273\":2}}],[\"31\",{\"0\":{\"116\":1},\"1\":{\"526\":3,\"866\":1}}],[\"30+05\",{\"1\":{\"527\":1}}],[\"301\",{\"1\":{\"317\":3}}],[\"30\",{\"0\":{\"115\":1},\"1\":{\"213\":1,\"526\":1,\"527\":2,\"621\":2,\"626\":2,\"834\":1,\"868\":2}}],[\"300\",{\"1\":{\"317\":3,\"352\":1,\"779\":1}}],[\"3001\",{\"1\":{\"63\":1}}],[\"30000\",{\"1\":{\"403\":1,\"564\":1}}],[\"3000\",{\"1\":{\"58\":3,\"297\":1,\"396\":1}}],[\"322\",{\"1\":{\"869\":1}}],[\"32位系统\",{\"1\":{\"722\":1}}],[\"32台\",{\"1\":{\"526\":1}}],[\"32k\",{\"1\":{\"317\":2}}],[\"32\",{\"1\":{\"92\":1,\"526\":1,\"809\":3,\"837\":2,\"866\":1,\"893\":1}}],[\"32m\",{\"1\":{\"74\":1,\"866\":1}}],[\"371\",{\"1\":{\"843\":1}}],[\"37909363\",{\"1\":{\"576\":1}}],[\"37r065fhvmvgmxk6\",{\"1\":{\"294\":1}}],[\"375951738http\",{\"1\":{\"132\":1}}],[\"37\",{\"1\":{\"77\":5}}],[\"373\",{\"1\":{\"23\":1}}],[\"347\",{\"1\":{\"843\":1}}],[\"34m\",{\"1\":{\"389\":1}}],[\"34\",{\"1\":{\"74\":1,\"893\":1}}],[\"38\",{\"1\":{\"23\":1}}],[\"3\",{\"0\":{\"8\":1,\"18\":1,\"24\":1,\"36\":1,\"58\":1,\"61\":1,\"70\":1,\"86\":1,\"131\":1,\"140\":1,\"211\":1,\"217\":1,\"226\":1,\"254\":1,\"266\":1,\"267\":1,\"268\":2,\"269\":1,\"273\":1,\"277\":1,\"282\":1,\"285\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":2,\"301\":1,\"371\":1,\"377\":1,\"385\":1,\"393\":1,\"397\":1,\"407\":1,\"431\":1,\"436\":1,\"485\":1,\"490\":1,\"497\":1,\"509\":1,\"513\":1,\"518\":1,\"522\":1,\"533\":1,\"540\":1,\"548\":1,\"562\":1,\"573\":1,\"577\":1,\"578\":1,\"579\":1,\"580\":1,\"581\":1,\"582\":2,\"583\":1,\"584\":1,\"589\":1,\"595\":1,\"596\":1,\"597\":1,\"601\":1,\"605\":1,\"613\":1,\"631\":1,\"635\":1,\"641\":1,\"656\":1,\"661\":1,\"678\":1,\"688\":1,\"709\":1,\"716\":1,\"720\":1,\"727\":1,\"732\":1,\"753\":1,\"757\":1,\"766\":1,\"774\":1,\"783\":1,\"793\":1,\"804\":1,\"813\":1,\"820\":1,\"829\":1,\"833\":1,\"877\":1,\"911\":1,\"928\":1},\"1\":{\"14\":3,\"15\":2,\"19\":1,\"21\":1,\"22\":1,\"24\":5,\"25\":1,\"27\":1,\"29\":1,\"32\":1,\"57\":1,\"59\":2,\"61\":1,\"63\":3,\"66\":1,\"82\":1,\"104\":1,\"109\":1,\"113\":1,\"118\":2,\"119\":2,\"120\":2,\"126\":1,\"127\":1,\"133\":1,\"134\":2,\"135\":7,\"139\":4,\"155\":3,\"161\":1,\"172\":1,\"175\":1,\"176\":1,\"189\":1,\"204\":1,\"208\":1,\"214\":1,\"221\":3,\"222\":1,\"230\":1,\"263\":4,\"277\":1,\"278\":10,\"290\":1,\"297\":2,\"300\":1,\"301\":2,\"302\":1,\"304\":1,\"305\":2,\"317\":1,\"319\":2,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"389\":1,\"398\":1,\"411\":1,\"412\":1,\"413\":1,\"417\":1,\"427\":1,\"428\":1,\"431\":1,\"432\":1,\"433\":3,\"435\":1,\"440\":4,\"445\":5,\"448\":1,\"452\":1,\"454\":2,\"455\":1,\"457\":1,\"475\":1,\"482\":1,\"502\":1,\"511\":1,\"522\":3,\"527\":6,\"531\":1,\"532\":2,\"533\":1,\"549\":5,\"552\":1,\"558\":3,\"559\":1,\"563\":2,\"564\":2,\"580\":1,\"603\":1,\"605\":2,\"617\":1,\"626\":1,\"627\":1,\"651\":1,\"657\":1,\"662\":1,\"673\":1,\"675\":1,\"683\":3,\"684\":5,\"688\":1,\"705\":1,\"722\":2,\"723\":1,\"732\":1,\"749\":1,\"753\":1,\"759\":1,\"761\":1,\"771\":2,\"773\":1,\"799\":1,\"806\":1,\"809\":3,\"820\":4,\"821\":1,\"822\":1,\"825\":1,\"834\":3,\"838\":2,\"843\":3,\"883\":3,\"884\":1,\"893\":1,\"898\":1,\"906\":1}}],[\"截图\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1}}],[\"uv\",{\"1\":{\"783\":1}}],[\"uid\",{\"1\":{\"789\":9,\"883\":2}}],[\"ui\",{\"1\":{\"502\":2}}],[\"uint64\",{\"1\":{\"125\":2}}],[\"umount\",{\"1\":{\"367\":1}}],[\"uroot\",{\"1\":{\"324\":1,\"326\":1,\"327\":1,\"339\":3,\"342\":4}}],[\"uribuilder\",{\"1\":{\"518\":6}}],[\"uri\",{\"1\":{\"305\":1,\"306\":4,\"315\":1,\"317\":3,\"410\":4,\"537\":1}}],[\"urlencoded编码\",{\"1\":{\"749\":1}}],[\"urlencodedformentity\",{\"1\":{\"518\":2}}],[\"urlencoded\",{\"1\":{\"479\":2,\"748\":1}}],[\"urlencoder\",{\"1\":{\"63\":1}}],[\"url地址不变\",{\"1\":{\"309\":2}}],[\"url静态化\",{\"1\":{\"308\":1}}],[\"url和ip的映射就会被删除\",{\"1\":{\"222\":1}}],[\"url\",{\"0\":{\"305\":1},\"1\":{\"22\":3,\"27\":5,\"60\":3,\"61\":5,\"62\":1,\"63\":11,\"213\":2,\"230\":1,\"297\":2,\"306\":1,\"410\":1,\"484\":5,\"499\":2,\"502\":1,\"503\":1,\"515\":1,\"518\":30}}],[\"uquote\",{\"1\":{\"263\":1}}],[\"udp向上层提供无连接不可靠服务\",{\"1\":{\"645\":1}}],[\"udp有不提供数据包分组\",{\"1\":{\"638\":1}}],[\"udp在第四层传输层\",{\"1\":{\"638\":1}}],[\"udp协议全称是用户数据报协议\",{\"1\":{\"638\":1}}],[\"udp\",{\"1\":{\"254\":3,\"609\":1,\"636\":1,\"638\":1,\"639\":6,\"640\":2,\"642\":2,\"645\":1}}],[\"u012488504\",{\"1\":{\"211\":1}}],[\"u014698745\",{\"1\":{\"63\":1}}],[\"uuid2\",{\"1\":{\"214\":2}}],[\"uuid1\",{\"1\":{\"214\":2}}],[\"uuid就非常不适用\",{\"1\":{\"210\":1}}],[\"uuid太长\",{\"1\":{\"210\":1}}],[\"uuid的复杂特性在保证了其唯一性的同时\",{\"1\":{\"208\":1}}],[\"uuid是universally\",{\"1\":{\"208\":1}}],[\"uuid\",{\"0\":{\"208\":1},\"1\":{\"213\":4,\"214\":1,\"217\":5,\"218\":5,\"219\":5,\"439\":2}}],[\"u64\",{\"1\":{\"125\":1}}],[\"u\",{\"0\":{\"442\":1},\"1\":{\"78\":1,\"80\":2,\"161\":1,\"218\":1,\"293\":1,\"322\":1,\"427\":1,\"441\":4,\"442\":1,\"443\":3,\"444\":12,\"458\":1,\"497\":1,\"503\":1,\"566\":1}}],[\"unpark\",{\"1\":{\"929\":1}}],[\"unpart\",{\"1\":{\"926\":1}}],[\"unpack\",{\"1\":{\"243\":1}}],[\"unexpired\",{\"1\":{\"864\":1}}],[\"undo\",{\"1\":{\"863\":2,\"864\":3}}],[\"undeploy\",{\"1\":{\"566\":1}}],[\"under\",{\"1\":{\"275\":1,\"277\":1}}],[\"unmatchedunlockexception\",{\"1\":{\"823\":1}}],[\"unused\",{\"1\":{\"822\":1,\"823\":1}}],[\"unavailable\",{\"1\":{\"802\":1}}],[\"until\",{\"1\":{\"612\":1,\"802\":1,\"893\":2}}],[\"unsupportedencodingexception\",{\"1\":{\"518\":3}}],[\"unsafe类使java语言拥有了类似c语言指针一样操作内存空间的能力\",{\"1\":{\"442\":1}}],[\"unsafe\",{\"1\":{\"441\":2,\"442\":2,\"444\":3}}],[\"unsigned\",{\"1\":{\"119\":1,\"124\":3,\"126\":1}}],[\"unchecked\",{\"1\":{\"217\":1}}],[\"uncommitted\",{\"1\":{\"106\":1}}],[\"uncommited\",{\"0\":{\"68\":1}}],[\"unlock\",{\"1\":{\"213\":4,\"214\":5,\"330\":1,\"342\":1,\"703\":2,\"777\":1,\"814\":2,\"824\":4,\"879\":1,\"929\":2,\"930\":1}}],[\"unwatch和\",{\"1\":{\"139\":1}}],[\"unordered\",{\"1\":{\"133\":1}}],[\"uninstaller\",{\"1\":{\"835\":1}}],[\"uninstall\",{\"1\":{\"835\":4}}],[\"unicast\",{\"1\":{\"331\":3,\"336\":3,\"344\":3,\"348\":3,\"356\":3,\"361\":3}}],[\"unicode字符可以用一个\",{\"1\":{\"549\":1}}],[\"unicode\",{\"1\":{\"321\":1,\"549\":4,\"837\":1}}],[\"unit\",{\"0\":{\"758\":1},\"1\":{\"214\":6,\"215\":1,\"216\":2,\"217\":2,\"218\":2,\"219\":3,\"353\":1,\"446\":1,\"475\":1,\"551\":1,\"555\":1,\"762\":1,\"822\":1,\"823\":1}}],[\"unique\",{\"1\":{\"113\":1,\"208\":2}}],[\"unix\",{\"1\":{\"82\":1,\"145\":1}}],[\"unixtime\",{\"1\":{\"82\":1}}],[\"union后的结果\",{\"1\":{\"113\":1}}],[\"union\",{\"1\":{\"24\":2,\"26\":1,\"125\":1}}],[\"upgrade\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"upstream\",{\"1\":{\"298\":2,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1,\"317\":3}}],[\"upload\",{\"1\":{\"189\":1,\"410\":2,\"749\":1}}],[\"uploadfilereturnurl\",{\"1\":{\"63\":2}}],[\"uploadfile\",{\"1\":{\"63\":1}}],[\"updater\",{\"1\":{\"929\":3}}],[\"updatereleaseinfo>\",{\"1\":{\"707\":1,\"715\":1}}],[\"update必须等该当前事务的\",{\"1\":{\"728\":1}}],[\"update和for\",{\"1\":{\"727\":1}}],[\"update或者for\",{\"1\":{\"727\":1}}],[\"update14开始\",{\"1\":{\"722\":1}}],[\"updateandget\",{\"1\":{\"444\":1}}],[\"updatefunction\",{\"1\":{\"444\":6}}],[\"updatefill\",{\"1\":{\"64\":1}}],[\"updates=1\",{\"1\":{\"79\":2}}],[\"updatetime\",{\"1\":{\"64\":3}}],[\"update\",{\"1\":{\"64\":6,\"78\":1,\"319\":1,\"427\":2,\"502\":1,\"727\":5,\"728\":3,\"732\":1,\"893\":2}}],[\"updateby\",{\"0\":{\"64\":1},\"1\":{\"64\":4}}],[\"up\",{\"1\":{\"56\":1,\"276\":1,\"278\":1,\"332\":1,\"412\":2}}],[\"upperfuture\",{\"1\":{\"475\":2}}],[\"upper\",{\"1\":{\"22\":1,\"73\":1}}],[\"utm\",{\"1\":{\"63\":2}}],[\"utf8字符集存储汉子占用3个字节\",{\"1\":{\"82\":1}}],[\"utf8mb4\",{\"1\":{\"74\":3,\"82\":1,\"321\":1}}],[\"utf8\",{\"1\":{\"73\":1}}],[\"utf\",{\"1\":{\"59\":1,\"82\":1,\"214\":1,\"297\":2,\"518\":1,\"613\":1,\"715\":1,\"836\":1,\"837\":1}}],[\"utc\",{\"1\":{\"25\":3}}],[\"util下\",{\"1\":{\"735\":1}}],[\"utility\",{\"1\":{\"58\":2,\"60\":3,\"717\":1}}],[\"util\",{\"1\":{\"3\":2,\"32\":2,\"63\":7,\"213\":2,\"218\":2,\"297\":4,\"437\":2,\"438\":1,\"439\":1,\"440\":5,\"444\":3,\"446\":2,\"472\":2,\"518\":2,\"527\":9,\"529\":4,\"530\":1,\"533\":1,\"544\":1,\"545\":1,\"613\":1,\"626\":1,\"650\":2,\"652\":2,\"703\":1,\"716\":1,\"717\":2,\"721\":2,\"733\":1,\"779\":3}}],[\"utils\",{\"1\":{\"3\":1,\"59\":2,\"60\":1,\"61\":1,\"62\":2,\"297\":2,\"319\":2,\"518\":2,\"734\":2}}],[\"usability\",{\"1\":{\"898\":1}}],[\"usafe又是通过cas机制来实现的\",{\"1\":{\"443\":1}}],[\"usage\",{\"1\":{\"32\":1,\"652\":1}}],[\"ustc\",{\"1\":{\"236\":1}}],[\"using\",{\"1\":{\"73\":1,\"74\":2,\"82\":2,\"651\":1}}],[\"using=\",{\"1\":{\"60\":1}}],[\"us\",{\"1\":{\"21\":3,\"22\":1,\"28\":1,\"613\":1}}],[\"usesingleserver\",{\"1\":{\"213\":2}}],[\"used\",{\"1\":{\"124\":2,\"892\":1,\"893\":5}}],[\"use\",{\"1\":{\"21\":1,\"59\":1,\"78\":1,\"352\":1,\"824\":1,\"837\":1,\"845\":1,\"890\":2,\"892\":1,\"893\":1}}],[\"userkey\",{\"1\":{\"650\":2}}],[\"usercontroller>\",{\"1\":{\"523\":1,\"733\":1}}],[\"usercontroller\",{\"1\":{\"523\":8,\"733\":7}}],[\"usercode=\",{\"1\":{\"401\":1}}],[\"usercode\",{\"1\":{\"401\":2}}],[\"userid\",{\"1\":{\"427\":2,\"883\":1}}],[\"userinfo\",{\"1\":{\"20\":2}}],[\"user123\",{\"1\":{\"310\":1,\"313\":1}}],[\"userpassword\",{\"1\":{\"297\":1}}],[\"useradd\",{\"1\":{\"243\":1,\"318\":1,\"831\":1}}],[\"user=mysql\",{\"1\":{\"321\":1}}],[\"user=nginx\",{\"1\":{\"243\":1}}],[\"user=\",{\"1\":{\"78\":1,\"80\":1,\"329\":1,\"342\":1}}],[\"username=username\",{\"1\":{\"479\":1}}],[\"username=z130\",{\"1\":{\"263\":1}}],[\"username\",{\"1\":{\"73\":2,\"92\":1,\"297\":1,\"480\":1,\"650\":5,\"877\":1}}],[\"userservice\",{\"1\":{\"523\":18,\"733\":4}}],[\"users\",{\"1\":{\"63\":1,\"495\":1,\"864\":1,\"877\":2}}],[\"user\",{\"1\":{\"20\":1,\"21\":1,\"27\":7,\"78\":4,\"104\":1,\"161\":1,\"297\":7,\"307\":1,\"315\":2,\"322\":2,\"353\":1,\"401\":1,\"477\":1,\"479\":1,\"480\":1,\"495\":2,\"500\":1,\"503\":3,\"611\":1,\"613\":1,\"650\":7,\"834\":1,\"835\":1,\"836\":1,\"838\":2,\"874\":1,\"876\":1,\"877\":1,\"878\":1,\"879\":2,\"880\":1,\"881\":1,\"882\":2,\"883\":4}}],[\"usr\",{\"0\":{\"8\":1,\"9\":1,\"12\":1},\"1\":{\"6\":1,\"7\":4,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1,\"74\":1,\"230\":3,\"243\":7,\"247\":1,\"282\":1,\"319\":2,\"321\":2,\"331\":1,\"332\":1,\"333\":1,\"336\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"344\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"350\":1,\"352\":1,\"353\":1,\"376\":2,\"377\":1,\"379\":1,\"380\":5,\"834\":1,\"836\":2,\"838\":2}}],[\"dmrman\",{\"1\":{\"892\":1,\"893\":2}}],[\"dmtbsincr\",{\"1\":{\"894\":2}}],[\"dmtbs\",{\"1\":{\"867\":1,\"880\":1,\"894\":2}}],[\"dmtest=\",{\"1\":{\"842\":1}}],[\"dmtestsvr\",{\"1\":{\"838\":2,\"841\":1}}],[\"dmtest02\",{\"1\":{\"837\":1}}],[\"dmtest01\",{\"1\":{\"837\":1}}],[\"dmtest\",{\"1\":{\"837\":3,\"838\":2,\"841\":1,\"845\":1,\"893\":2}}],[\"dmjobmonitorservice\",{\"1\":{\"845\":1}}],[\"dmhr\",{\"1\":{\"843\":1,\"885\":1,\"887\":2,\"888\":2,\"893\":2,\"894\":1}}],[\"dmoa\",{\"1\":{\"843\":6,\"883\":3}}],[\"dmoaserver\",{\"1\":{\"843\":1}}],[\"dml\",{\"1\":{\"843\":1,\"864\":1,\"888\":1}}],[\"dm=\",{\"1\":{\"842\":1}}],[\"dmservice\",{\"1\":{\"844\":1}}],[\"dmservicedmtestsvr\",{\"1\":{\"838\":7,\"845\":9}}],[\"dmservicedmserver\",{\"1\":{\"836\":6,\"844\":1,\"845\":2,\"893\":2}}],[\"dmserver\",{\"1\":{\"837\":1,\"838\":1,\"841\":1,\"845\":2}}],[\"dminstancemonitorservice\",{\"1\":{\"845\":1}}],[\"dminstall\",{\"1\":{\"833\":1,\"834\":4}}],[\"dminit\",{\"0\":{\"837\":1},\"1\":{\"837\":5}}],[\"dmap\",{\"1\":{\"890\":1,\"891\":3}}],[\"dmapservice\",{\"1\":{\"834\":5,\"835\":2,\"845\":1}}],[\"dmarch\",{\"0\":{\"870\":1},\"1\":{\"870\":2}}],[\"dmauditmonitorservice\",{\"1\":{\"845\":1}}],[\"dmaven\",{\"1\":{\"566\":1}}],[\"dm\",{\"0\":{\"835\":1,\"836\":1,\"840\":1,\"843\":1,\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"853\":1,\"854\":1,\"856\":1,\"870\":1},\"1\":{\"833\":5,\"834\":10,\"835\":7,\"837\":6,\"838\":5,\"839\":2,\"841\":1,\"842\":2,\"843\":3,\"844\":1,\"845\":4,\"847\":1,\"848\":1,\"851\":2,\"852\":1,\"853\":3,\"854\":1,\"856\":1,\"857\":1,\"858\":1,\"864\":3,\"866\":1,\"867\":1,\"870\":3,\"871\":1,\"873\":1,\"874\":1,\"883\":1,\"887\":1,\"888\":1,\"890\":1,\"892\":7,\"893\":19}}],[\"dm8\",{\"0\":{\"850\":1},\"1\":{\"832\":7,\"833\":2,\"834\":4,\"835\":3,\"836\":2,\"837\":4,\"838\":1,\"841\":1,\"843\":5,\"845\":2,\"869\":3,\"870\":1,\"891\":1,\"892\":3,\"893\":24,\"894\":10}}],[\"dmdba\",{\"0\":{\"845\":1},\"1\":{\"831\":4,\"832\":3,\"833\":3,\"834\":13,\"835\":2,\"836\":2,\"837\":2,\"838\":1,\"840\":2,\"841\":3,\"842\":2,\"843\":1,\"845\":14,\"846\":1,\"847\":1,\"848\":1,\"849\":1,\"870\":2,\"883\":3,\"891\":2,\"893\":3}}],[\"dpackaging=jar\",{\"1\":{\"566\":1}}],[\"dversion=version\",{\"1\":{\"566\":1}}],[\"dgroupid=packagename\",{\"1\":{\"566\":2}}],[\"d选项\",{\"1\":{\"500\":1}}],[\"d选项只能删除已经参与了合并的分支\",{\"1\":{\"500\":1}}],[\"d都需要系统a的数据\",{\"1\":{\"428\":1}}],[\"dloader\",{\"1\":{\"389\":1}}],[\"dlc\",{\"1\":{\"63\":1}}],[\"dfile=path\",{\"1\":{\"566\":1}}],[\"df\",{\"1\":{\"374\":1,\"445\":2}}],[\"dfs会发给namenode一个rpc调用\",{\"1\":{\"14\":1}}],[\"dfs\",{\"1\":{\"6\":1,\"7\":3,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1}}],[\"dsl\",{\"1\":{\"472\":4}}],[\"dsl图\",{\"0\":{\"451\":1}}],[\"dspring\",{\"1\":{\"384\":1,\"385\":1,\"389\":1}}],[\"ds\",{\"1\":{\"295\":1}}],[\"d71fcd7d8303cbf684402823e425e9dd2e99285d\",{\"1\":{\"229\":1}}],[\"drwxr\",{\"1\":{\"277\":1,\"832\":2}}],[\"dry\",{\"1\":{\"263\":2}}],[\"drivername\",{\"1\":{\"387\":1}}],[\"driver\",{\"1\":{\"222\":1,\"387\":1,\"627\":1}}],[\"drop\",{\"1\":{\"21\":3,\"28\":1,\"58\":1,\"60\":1,\"73\":1,\"109\":2,\"882\":2,\"893\":1}}],[\"dname=$appname\",{\"1\":{\"389\":1}}],[\"dna序列分类\",{\"1\":{\"55\":1}}],[\"dns查询需要占用网络\",{\"1\":{\"651\":1}}],[\"dns服务器是运营商提供的\",{\"1\":{\"222\":1}}],[\"dns服务器就在学校\",{\"1\":{\"222\":1}}],[\"dns解析是分布式存储的\",{\"1\":{\"222\":1}}],[\"dns负责域名到ip地址的对应\",{\"1\":{\"222\":1}}],[\"dns\",{\"0\":{\"222\":1},\"1\":{\"222\":10,\"236\":1}}],[\"dce\",{\"1\":{\"208\":1}}],[\"dce安全的uuid\",{\"1\":{\"208\":1}}],[\"dubbo\",{\"1\":{\"608\":3}}],[\"duration\",{\"1\":{\"564\":4}}],[\"durability\",{\"1\":{\"65\":1,\"105\":1}}],[\"duser\",{\"1\":{\"389\":1}}],[\"dump\",{\"1\":{\"141\":1}}],[\"dup\",{\"1\":{\"119\":4}}],[\"dts\",{\"0\":{\"848\":1},\"1\":{\"848\":1}}],[\"dto\",{\"1\":{\"413\":2}}],[\"dtype=datatype\",{\"1\":{\"58\":3,\"60\":5}}],[\"dt=\",{\"1\":{\"27\":2}}],[\"dt=2020\",{\"1\":{\"27\":1}}],[\"dt\",{\"1\":{\"27\":9,\"377\":1}}],[\"ddl\",{\"1\":{\"887\":4}}],[\"dd\",{\"1\":{\"25\":1,\"280\":1,\"544\":1,\"545\":1,\"626\":5}}],[\"dosomethingmethod\",{\"1\":{\"924\":2}}],[\"dodelete\",{\"1\":{\"518\":2}}],[\"doput\",{\"1\":{\"518\":3}}],[\"dopost\",{\"1\":{\"518\":6}}],[\"doget\",{\"1\":{\"518\":5}}],[\"dog自动延期机制\",{\"1\":{\"213\":1}}],[\"don\",{\"1\":{\"413\":1}}],[\"done\",{\"1\":{\"389\":1}}],[\"domains\",{\"1\":{\"222\":2}}],[\"domain\",{\"1\":{\"222\":1}}],[\"do\",{\"1\":{\"79\":2,\"214\":1,\"307\":1,\"328\":1,\"342\":1,\"389\":1,\"443\":1,\"554\":1,\"612\":1,\"777\":1,\"924\":4}}],[\"downgrade\",{\"1\":{\"824\":1}}],[\"downlatch\",{\"1\":{\"446\":14}}],[\"downloads\",{\"1\":{\"375\":1}}],[\"downloadhttp\",{\"1\":{\"352\":1}}],[\"download\",{\"1\":{\"56\":1,\"63\":1,\"243\":1,\"352\":1}}],[\"down\",{\"1\":{\"56\":1,\"612\":1}}],[\"documentation\",{\"1\":{\"295\":2}}],[\"doc\",{\"1\":{\"291\":2,\"526\":1}}],[\"docke\",{\"1\":{\"230\":1}}],[\"docker私有仓库地址\",{\"1\":{\"263\":1}}],[\"docker镜像部署到k8s集群\",{\"0\":{\"263\":1}}],[\"docker和k8s保持官网一致的版本\",{\"1\":{\"287\":1}}],[\"docker和宿主机共享了一个网络空间eth0网络空间\",{\"1\":{\"255\":1}}],[\"docker和虚拟机vm结构非常相似\",{\"1\":{\"232\":1}}],[\"docker会随机创建一个端口映射到内部容器开放的端口\",{\"1\":{\"251\":1}}],[\"docker默认有四种网络模式\",{\"1\":{\"250\":1}}],[\"docker虚拟化的产物是docker容器\",{\"1\":{\"250\":1}}],[\"docker虚拟化技术底层是基于lxc+cgroups+aufs\",{\"1\":{\"250\":1}}],[\"docker网络模型\",{\"0\":{\"250\":1}}],[\"docker登录容器\",{\"1\":{\"242\":1}}],[\"docker安装\",{\"0\":{\"235\":1}}],[\"docker容器会拥有自己的network\",{\"1\":{\"250\":1}}],[\"docker容器和宿主机共享一个网络环境\",{\"1\":{\"250\":1}}],[\"docker容器的bridge模式也是docker默认的网络模式\",{\"1\":{\"250\":1}}],[\"docker容器通过镜像来创建\",{\"1\":{\"234\":1}}],[\"docker容器\",{\"1\":{\"234\":1}}],[\"docker也提供了官方的registry\",{\"1\":{\"234\":1}}],[\"docker服务的守护进程\",{\"1\":{\"234\":1}}],[\"docker提供给用户的客户端\",{\"1\":{\"234\":1}}],[\"docker的组成元素\",{\"0\":{\"234\":1}}],[\"docker架构\",{\"0\":{\"233\":1}}],[\"docker不停地给大家宣传\",{\"1\":{\"232\":1}}],[\"docker最初的设计优势\",{\"1\":{\"232\":1}}],[\"docker概念\",{\"0\":{\"232\":1}}],[\"docker入门\",{\"0\":{\"231\":1}}],[\"docker中的镜像\",{\"1\":{\"230\":1}}],[\"dockerfile\",{\"1\":{\"230\":2,\"243\":2,\"263\":1}}],[\"dockerdemo\",{\"1\":{\"243\":2}}],[\"dockerd\",{\"1\":{\"230\":2}}],[\"docker本机打镜像\",{\"0\":{\"223\":1}}],[\"docker\",{\"1\":{\"56\":7,\"63\":6,\"225\":12,\"226\":2,\"228\":2,\"229\":10,\"230\":8,\"234\":10,\"235\":1,\"236\":2,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":2,\"242\":1,\"243\":2,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"255\":2,\"256\":2,\"257\":1,\"258\":2,\"259\":1,\"261\":3,\"262\":2,\"263\":6,\"275\":1,\"290\":9}}],[\"docs\",{\"1\":{\"50\":1,\"63\":4,\"211\":1,\"420\":1,\"427\":1}}],[\"double类型\",{\"1\":{\"549\":1}}],[\"doublevalue\",{\"1\":{\"445\":1}}],[\"double\",{\"1\":{\"24\":1,\"58\":1,\"388\":1,\"445\":4,\"527\":1,\"549\":11,\"626\":2,\"809\":3}}],[\"does\",{\"1\":{\"612\":1}}],[\"doe\",{\"1\":{\"22\":2}}],[\"dynamictype\",{\"1\":{\"717\":3}}],[\"dynamic\",{\"1\":{\"22\":4,\"298\":2,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":1,\"717\":1}}],[\"dynamicatable\",{\"1\":{\"20\":1}}],[\"dameng\",{\"1\":{\"870\":1,\"881\":1,\"883\":3,\"893\":7}}],[\"dameng123\",{\"1\":{\"838\":1,\"841\":2,\"874\":1,\"876\":1,\"878\":1,\"883\":2}}],[\"dag\",{\"1\":{\"627\":1}}],[\"darchetypeartifactid=maven\",{\"1\":{\"566\":1}}],[\"dartifactid=projectname\",{\"1\":{\"566\":2}}],[\"dashboards\",{\"1\":{\"285\":1}}],[\"dashborad\",{\"1\":{\"161\":1}}],[\"dav\",{\"1\":{\"243\":1}}],[\"daemonthreadfactory\",{\"1\":{\"472\":1}}],[\"daemonize\",{\"1\":{\"352\":1}}],[\"daemonset\",{\"1\":{\"275\":1,\"276\":2}}],[\"daemon会接收docker\",{\"1\":{\"234\":1}}],[\"daemon\",{\"1\":{\"234\":2,\"236\":1,\"247\":1,\"290\":1,\"321\":1,\"354\":1}}],[\"daoqidelv\",{\"1\":{\"458\":1}}],[\"daoexception\",{\"1\":{\"413\":1}}],[\"dao\",{\"1\":{\"61\":1,\"62\":1}}],[\"daysrented\",{\"1\":{\"906\":1}}],[\"days\",{\"1\":{\"63\":1,\"74\":1,\"758\":1}}],[\"day<20200203\",{\"1\":{\"26\":1}}],[\"day>=20200201\",{\"1\":{\"26\":1}}],[\"day=20200203\",{\"1\":{\"26\":1}}],[\"day=20200202\",{\"1\":{\"26\":1}}],[\"day=20200201\",{\"1\":{\"26\":1}}],[\"day\",{\"1\":{\"21\":2,\"26\":1,\"27\":4,\"63\":3,\"527\":2}}],[\"dateformatutils\",{\"1\":{\"626\":1}}],[\"dateformat\",{\"1\":{\"626\":2}}],[\"datetrans\",{\"1\":{\"626\":1}}],[\"datetime的可用范围比timestamp大\",{\"1\":{\"82\":1}}],[\"date5\",{\"1\":{\"527\":3}}],[\"date4\",{\"1\":{\"527\":3}}],[\"date3\",{\"1\":{\"527\":3}}],[\"date2\",{\"1\":{\"527\":3}}],[\"date1\",{\"1\":{\"527\":6}}],[\"date\",{\"1\":{\"27\":2,\"63\":8,\"64\":8,\"276\":1,\"278\":1,\"478\":1,\"533\":1,\"626\":5}}],[\"date=$\",{\"1\":{\"27\":1}}],[\"date=\",{\"1\":{\"27\":3}}],[\"datenode负责存取数据\",{\"1\":{\"15\":1}}],[\"datafile\",{\"1\":{\"866\":1}}],[\"dataframe\",{\"1\":{\"627\":1}}],[\"data中发送\",{\"1\":{\"749\":1}}],[\"data对象所有的变量极有可能被加载在l1缓存的一行cache\",{\"1\":{\"665\":1}}],[\"datagram\",{\"1\":{\"636\":1}}],[\"dataprovider\",{\"1\":{\"472\":3}}],[\"dataid=\",{\"1\":{\"297\":2}}],[\"dataid\",{\"1\":{\"297\":12,\"401\":1,\"417\":1}}],[\"datadir=\",{\"1\":{\"321\":2}}],[\"datadir\",{\"1\":{\"74\":1}}],[\"data2\",{\"1\":{\"62\":1}}],[\"data=1\",{\"1\":{\"326\":1,\"342\":1}}],[\"data=\",{\"1\":{\"62\":1}}],[\"datatype\",{\"1\":{\"58\":1,\"60\":1}}],[\"databases\",{\"1\":{\"21\":3,\"326\":1,\"342\":1}}],[\"database\",{\"0\":{\"931\":1},\"1\":{\"21\":6,\"387\":1,\"837\":1,\"843\":4,\"845\":2,\"869\":9,\"870\":1,\"871\":1,\"891\":1,\"892\":3,\"893\":16,\"894\":5}}],[\"datanode会定期\",{\"1\":{\"19\":1}}],[\"datanode会通过心跳的方式定期向namenode发送自己节点上的block报告\",{\"1\":{\"19\":1}}],[\"datanode则通过datanode\",{\"1\":{\"19\":1}}],[\"datanode是hdfs中的worker节点\",{\"1\":{\"17\":1}}],[\"datanode运行再slave节点上\",{\"1\":{\"15\":1}}],[\"datanode\",{\"0\":{\"17\":1},\"1\":{\"15\":1,\"19\":1}}],[\"datanode在把数据包写入到本地磁盘的同时会向第二个datanode\",{\"1\":{\"14\":1}}],[\"data\",{\"0\":{\"8\":1,\"9\":1,\"12\":1},\"1\":{\"6\":1,\"7\":4,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1,\"21\":1,\"22\":1,\"25\":1,\"26\":1,\"27\":2,\"61\":7,\"63\":3,\"74\":2,\"77\":1,\"155\":1,\"192\":1,\"213\":1,\"218\":1,\"262\":3,\"270\":1,\"275\":1,\"276\":1,\"316\":1,\"317\":2,\"321\":3,\"367\":6,\"410\":1,\"417\":1,\"480\":3,\"734\":11,\"748\":1,\"749\":2,\"802\":1,\"824\":2,\"837\":4,\"838\":1,\"843\":5,\"845\":1,\"892\":3,\"893\":15}}],[\"dbf\",{\"1\":{\"843\":5,\"866\":1,\"893\":1}}],[\"dbfilename\",{\"1\":{\"141\":1}}],[\"dbname\",{\"1\":{\"837\":1}}],[\"dbca\",{\"1\":{\"836\":2,\"838\":1}}],[\"db=mysql\",{\"1\":{\"79\":1}}],[\"db=repl\",{\"1\":{\"79\":2}}],[\"db=true\",{\"1\":{\"21\":1}}],[\"dbtype\",{\"1\":{\"64\":1}}],[\"db\",{\"1\":{\"21\":1,\"328\":2,\"342\":2,\"433\":1,\"504\":1,\"837\":3,\"845\":2,\"888\":2,\"892\":1,\"893\":2}}],[\"dba\",{\"1\":{\"21\":1,\"93\":1,\"877\":2,\"883\":1,\"887\":3,\"888\":2,\"893\":1}}],[\"dbproperties\",{\"1\":{\"21\":2}}],[\"dinstall\",{\"1\":{\"831\":2,\"832\":2,\"834\":1,\"845\":6}}],[\"digital\",{\"1\":{\"705\":1}}],[\"digitlist\",{\"1\":{\"626\":2}}],[\"digest\",{\"1\":{\"705\":1}}],[\"di\",{\"1\":{\"511\":2}}],[\"did\",{\"1\":{\"293\":1,\"824\":1}}],[\"dit\",{\"1\":{\"241\":1}}],[\"disql\",{\"0\":{\"841\":1},\"1\":{\"838\":2,\"841\":4,\"843\":2,\"883\":6,\"893\":2}}],[\"display=\",{\"1\":{\"834\":1}}],[\"display\",{\"1\":{\"834\":2}}],[\"disposition\",{\"1\":{\"480\":2}}],[\"dissecting\",{\"1\":{\"458\":1}}],[\"disruptor中的等待策略\",{\"0\":{\"462\":1}}],[\"disruptor中发布事件相关类\",{\"0\":{\"459\":1,\"460\":1}}],[\"disruptor提供了与队列不同的关键功能\",{\"1\":{\"448\":1}}],[\"disruptor的目的是在同一进程内的线程之间传递数据\",{\"1\":{\"448\":1}}],[\"disruptor类似于java的blockingqueue\",{\"1\":{\"448\":1}}],[\"disruptor\",{\"0\":{\"447\":1},\"1\":{\"450\":2,\"451\":1,\"454\":1,\"457\":1,\"458\":2,\"472\":10,\"669\":1}}],[\"disk\",{\"1\":{\"894\":3}}],[\"diskspace\",{\"1\":{\"412\":1}}],[\"diskless\",{\"1\":{\"155\":1}}],[\"disabled\",{\"1\":{\"288\":1,\"834\":1}}],[\"disable\",{\"1\":{\"288\":1,\"317\":3,\"320\":1}}],[\"discover\",{\"1\":{\"284\":1}}],[\"discovery<\",{\"1\":{\"297\":1,\"391\":1,\"395\":1,\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"415\":1,\"416\":1}}],[\"discovery\",{\"1\":{\"270\":1,\"294\":1,\"297\":1,\"392\":1,\"396\":1,\"404\":2,\"408\":4,\"409\":3,\"410\":1,\"411\":3,\"415\":3,\"416\":1}}],[\"discardpolicy\",{\"1\":{\"761\":1}}],[\"discardoldestpolicy\",{\"1\":{\"761\":1}}],[\"discard服务\",{\"1\":{\"613\":1}}],[\"discard\",{\"1\":{\"139\":1}}],[\"distributionmanagement是项目分发信息\",{\"1\":{\"604\":1}}],[\"distributed\",{\"0\":{\"934\":1},\"1\":{\"208\":1}}],[\"distribute\",{\"1\":{\"23\":1}}],[\"distict\",{\"1\":{\"27\":1}}],[\"distinct为去重\",{\"1\":{\"527\":1}}],[\"distinct\",{\"1\":{\"22\":1,\"27\":9,\"82\":1,\"527\":1,\"789\":6}}],[\"distance\",{\"1\":{\"14\":4,\"53\":1,\"62\":2}}],[\"dicttype\",{\"1\":{\"126\":5}}],[\"dictentry\",{\"1\":{\"124\":3,\"125\":5}}],[\"dictht\",{\"1\":{\"124\":3,\"126\":2}}],[\"dict\",{\"1\":{\"62\":4,\"124\":2,\"126\":4,\"127\":4}}],[\"dictory\",{\"1\":{\"22\":1}}],[\"dim=512\",{\"1\":{\"60\":1}}],[\"dim=8\",{\"1\":{\"58\":1}}],[\"dims\",{\"1\":{\"59\":1}}],[\"divide方法设置精确的小数点\",{\"1\":{\"445\":1}}],[\"divide\",{\"1\":{\"445\":2}}],[\"dividend\",{\"1\":{\"23\":1}}],[\"dividends\",{\"1\":{\"23\":4}}],[\"divided\",{\"1\":{\"23\":1}}],[\"direct减少操作系统级别vfs的缓存和innodb本身的buffer缓存之间的冲突\",{\"1\":{\"74\":1}}],[\"direct\",{\"1\":{\"74\":1}}],[\"directory>\",{\"1\":{\"389\":1}}],[\"directory\",{\"1\":{\"21\":1,\"22\":2,\"389\":2,\"537\":1}}],[\"dirs\",{\"1\":{\"61\":1}}],[\"dir=\",{\"1\":{\"29\":1}}],[\"dir\",{\"1\":{\"21\":1,\"62\":1,\"141\":1,\"146\":1,\"243\":1,\"352\":1,\"837\":1,\"894\":2}}],[\"d2\",{\"1\":{\"14\":1}}],[\"d1\",{\"1\":{\"14\":7}}],[\"d\",{\"0\":{\"42\":1,\"48\":1,\"502\":1,\"692\":1,\"700\":1},\"1\":{\"13\":2,\"14\":2,\"19\":1,\"23\":14,\"56\":1,\"63\":2,\"73\":1,\"230\":1,\"241\":1,\"247\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"255\":1,\"256\":2,\"257\":1,\"261\":2,\"262\":1,\"267\":1,\"270\":1,\"277\":1,\"282\":1,\"288\":1,\"290\":1,\"291\":1,\"321\":2,\"332\":2,\"337\":1,\"345\":1,\"349\":1,\"357\":2,\"362\":1,\"380\":4,\"388\":1,\"440\":2,\"446\":1,\"500\":2,\"501\":1,\"548\":2,\"549\":4,\"564\":3,\"566\":1,\"576\":1,\"616\":1,\"673\":1,\"712\":1,\"719\":1,\"721\":1,\"754\":1,\"774\":1,\"776\":1,\"788\":1,\"789\":1,\"827\":1,\"831\":1}}],[\"detach\",{\"1\":{\"712\":1}}],[\"details\",{\"1\":{\"63\":2,\"82\":1,\"132\":2,\"189\":2,\"211\":1,\"404\":1,\"408\":1,\"409\":1,\"412\":3,\"414\":1,\"427\":1,\"576\":1,\"626\":1,\"631\":1,\"650\":7,\"664\":1,\"683\":1,\"789\":1,\"818\":1,\"825\":4,\"924\":1}}],[\"debug发现传出的参数不是自己想要的参数\",{\"1\":{\"626\":1}}],[\"deduct\",{\"1\":{\"427\":1}}],[\"deductions\",{\"1\":{\"21\":1,\"22\":3,\"25\":1,\"28\":1}}],[\"degradation\",{\"1\":{\"243\":1}}],[\"dept\",{\"1\":{\"893\":7}}],[\"department\",{\"1\":{\"888\":1,\"893\":2}}],[\"dependable\",{\"1\":{\"684\":2}}],[\"dependency\",{\"1\":{\"389\":1,\"566\":3,\"597\":3}}],[\"dependencymanagement>\",{\"1\":{\"297\":1,\"414\":1}}],[\"dependency>\",{\"1\":{\"3\":3,\"63\":3,\"297\":4,\"391\":1,\"395\":4,\"401\":1,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1,\"434\":2,\"516\":1,\"611\":1,\"712\":1,\"715\":4}}],[\"dependencies<\",{\"1\":{\"297\":2,\"389\":2,\"414\":2}}],[\"dependencies>\",{\"1\":{\"297\":2,\"414\":1,\"715\":1}}],[\"deploy后表示要发布的位置\",{\"1\":{\"604\":1}}],[\"deploy\",{\"1\":{\"278\":1,\"566\":2,\"576\":1,\"604\":1}}],[\"deployment\",{\"1\":{\"230\":1,\"263\":4,\"278\":2,\"296\":2}}],[\"de40ad0\",{\"1\":{\"229\":1}}],[\"decodebuffer\",{\"1\":{\"749\":1}}],[\"december\",{\"1\":{\"527\":2}}],[\"decimal\",{\"1\":{\"445\":4}}],[\"decimalformat\",{\"1\":{\"445\":2,\"626\":2}}],[\"decrby\",{\"1\":{\"134\":1}}],[\"decr\",{\"1\":{\"134\":2}}],[\"decrementandget\",{\"1\":{\"214\":1,\"444\":1}}],[\"decrement\",{\"1\":{\"133\":1,\"446\":1}}],[\"declare\",{\"1\":{\"73\":2}}],[\"develop\",{\"1\":{\"845\":1}}],[\"developer\",{\"1\":{\"297\":1,\"404\":2,\"408\":2,\"409\":2,\"411\":2,\"414\":2,\"415\":2,\"416\":2}}],[\"devel\",{\"1\":{\"243\":5}}],[\"dev\",{\"0\":{\"935\":1},\"1\":{\"74\":9,\"319\":1,\"370\":3,\"371\":3,\"372\":2,\"373\":1,\"389\":1,\"410\":1}}],[\"deserializer\",{\"1\":{\"435\":2,\"564\":2}}],[\"desired\",{\"1\":{\"276\":1,\"278\":1}}],[\"despite\",{\"1\":{\"195\":1}}],[\"dest=\",{\"1\":{\"869\":3}}],[\"dest\",{\"1\":{\"135\":3,\"136\":3,\"138\":2,\"139\":1,\"619\":3,\"870\":1}}],[\"describe\",{\"1\":{\"263\":1}}],[\"description\",{\"1\":{\"211\":1,\"418\":1,\"717\":1}}],[\"description=redis\",{\"1\":{\"353\":1}}],[\"description=\",{\"1\":{\"60\":1}}],[\"desc\",{\"1\":{\"108\":1,\"414\":1,\"445\":1,\"845\":1}}],[\"desktop\",{\"1\":{\"63\":1}}],[\"demoworker\",{\"1\":{\"774\":3}}],[\"demo已经成功注册\",{\"1\":{\"415\":1}}],[\"demo这个目录下\",{\"1\":{\"243\":1}}],[\"demo\",{\"0\":{\"930\":1},\"1\":{\"58\":1,\"63\":1,\"64\":1,\"263\":13,\"401\":1,\"402\":2,\"403\":2,\"415\":2,\"416\":2,\"419\":3,\"440\":2,\"497\":1,\"703\":1,\"728\":1,\"754\":1,\"776\":1}}],[\"deflate\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"definition\",{\"1\":{\"404\":1}}],[\"def\",{\"1\":{\"59\":2,\"60\":1,\"61\":2,\"62\":1}}],[\"deferred\",{\"1\":{\"28\":2}}],[\"defaultnamethreadfactory\",{\"1\":{\"814\":1,\"930\":1}}],[\"defaultinterface\",{\"1\":{\"527\":2}}],[\"defaultlock\",{\"1\":{\"214\":2}}],[\"defaults\",{\"1\":{\"74\":1}}],[\"defaultfs\",{\"1\":{\"32\":1}}],[\"default\",{\"0\":{\"88\":1},\"1\":{\"3\":5,\"58\":1,\"60\":1,\"63\":1,\"64\":1,\"229\":1,\"297\":2,\"317\":1,\"321\":2,\"384\":2,\"396\":1,\"527\":1,\"717\":1,\"837\":2,\"845\":2,\"878\":1,\"880\":1,\"892\":2,\"893\":6}}],[\"delayqueue\",{\"1\":{\"530\":1}}],[\"delta\",{\"1\":{\"443\":3,\"444\":7}}],[\"del\",{\"1\":{\"134\":2}}],[\"delimited\",{\"1\":{\"25\":1,\"27\":1}}],[\"deleteobject\",{\"1\":{\"63\":3}}],[\"deletebucket\",{\"1\":{\"63\":1}}],[\"deleteall\",{\"1\":{\"13\":1}}],[\"delete\",{\"1\":{\"3\":1,\"58\":1,\"109\":2,\"213\":1,\"214\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"263\":1,\"518\":1,\"845\":2,\"869\":1,\"872\":3}}],[\"deleteresponse\",{\"1\":{\"3\":4}}],[\"deleterequest\",{\"1\":{\"3\":4}}],[\"它能对指定类的指定的volatile引用字段进行原子更新\",{\"1\":{\"929\":1}}],[\"它能够以万亿级对向量进行索引\",{\"1\":{\"50\":1}}],[\"它让你的生活比较难过\",{\"1\":{\"898\":1}}],[\"它运行的很好\",{\"1\":{\"898\":1}}],[\"它使用的是二叉树中序排序\",{\"1\":{\"734\":1}}],[\"它假设最坏的情况\",{\"1\":{\"727\":1}}],[\"它指的是对数据被外界\",{\"1\":{\"725\":1}}],[\"它表示该锁能够支持一个线程对资源的重复加锁\",{\"1\":{\"702\":1}}],[\"它首先尝试在l1高速缓存中找到它\",{\"1\":{\"662\":1}}],[\"它首先需要进行加锁操作\",{\"1\":{\"217\":1}}],[\"它也会感知集群的网络拓扑\",{\"1\":{\"657\":1}}],[\"它也会记录客户端的ip地址或者通过域名服务器查找机器名转换为ip地址\",{\"1\":{\"651\":1}}],[\"它本身主要由两个组件构成\",{\"1\":{\"654\":1}}],[\"它负责整个系统的资源管理和分配\",{\"1\":{\"654\":1}}],[\"它负责存储数据块\",{\"1\":{\"17\":1}}],[\"它没有办法\",{\"1\":{\"650\":1}}],[\"它被读取时就是什么样\",{\"1\":{\"623\":1}}],[\"它和mapreduce\",{\"1\":{\"657\":1}}],[\"它和存放类实例\",{\"1\":{\"651\":1}}],[\"它和\",{\"1\":{\"619\":1}}],[\"它只能是4\",{\"1\":{\"578\":1}}],[\"它只能读取英文字符\",{\"1\":{\"541\":1}}],[\"它根据java应用的类路径\",{\"1\":{\"558\":1}}],[\"它用来加载java\",{\"1\":{\"558\":1}}],[\"它可以是一对一\",{\"1\":{\"684\":1}}],[\"它可以将一个\",{\"1\":{\"619\":1}}],[\"它可以保证一对象不再被引用的时候\",{\"1\":{\"558\":1}}],[\"它可以访问consumerbarrier对象\",{\"1\":{\"452\":1}}],[\"它提供一个同步点\",{\"1\":{\"555\":1}}],[\"它提供了非常强大的\",{\"1\":{\"475\":1}}],[\"它提供了一个分布式多用户能力的全文搜索引擎\",{\"1\":{\"4\":1}}],[\"它实质上就是一种带有一点扭曲的\",{\"1\":{\"530\":1}}],[\"它等于subnet\",{\"1\":{\"526\":1}}],[\"它定义的方法有\",{\"1\":{\"475\":1}}],[\"它返回了一个future类型\",{\"1\":{\"475\":1}}],[\"它多了一个返回值\",{\"1\":{\"475\":1}}],[\"它就要等释放\",{\"1\":{\"723\":1}}],[\"它就是无边界的\",{\"1\":{\"532\":1}}],[\"它就是有边界的\",{\"1\":{\"532\":1}}],[\"它就可以让生产者写入节点\",{\"1\":{\"457\":1}}],[\"它就认为此节点已经失败\",{\"1\":{\"19\":1}}],[\"它戳一下\",{\"1\":{\"456\":1}}],[\"它停在序号\",{\"1\":{\"454\":1}}],[\"它不接收任何参数\",{\"1\":{\"475\":1}}],[\"它不能再次被使用\",{\"1\":{\"446\":1}}],[\"它不提供与以下操作相同的结果\",{\"1\":{\"445\":1}}],[\"它允许一个或多个线程一直等待\",{\"1\":{\"446\":1}}],[\"它允许另外一个事务可以看到这个事务未提交的数据\",{\"1\":{\"68\":1}}],[\"它正好等于预期的\",{\"1\":{\"445\":1}}],[\"它将用户传入的数组拷贝到内核空间\",{\"1\":{\"803\":1}}],[\"它将会调用\",{\"1\":{\"454\":1}}],[\"它将具有运算功能\",{\"1\":{\"388\":1}}],[\"它将域名和ip地址相互映射的一个分布式数据库\",{\"1\":{\"222\":1}}],[\"它有的仅仅是\",{\"1\":{\"381\":1}}],[\"它同时提供www和mail服务\",{\"1\":{\"222\":1}}],[\"它通过把关键码值映射到表中一个位置来访问记录\",{\"1\":{\"506\":1}}],[\"它通过以下几种方式与担保公司建立联系\",{\"1\":{\"167\":1}}],[\"它通常会在很短的时间内返回指定域名的解析结果\",{\"1\":{\"222\":1}}],[\"它储存了每个域\",{\"1\":{\"222\":1}}],[\"它管理的region\",{\"1\":{\"199\":1}}],[\"它要么完整的被执行\",{\"1\":{\"199\":1}}],[\"它具有了解和掌握借款者有关信息的专长\",{\"1\":{\"172\":1}}],[\"它在一定程度上起到了引导作用\",{\"1\":{\"167\":1}}],[\"它们模糊甚至打破横亘于基本数据和体积较大的类之间的界限\",{\"1\":{\"915\":1}}],[\"它们可能代表着数据库中的表\",{\"1\":{\"915\":1}}],[\"它们之中很多代码都相同\",{\"1\":{\"910\":1}}],[\"它们之间的公式如下\",{\"1\":{\"526\":1}}],[\"它们不会有内存可见性问题\",{\"1\":{\"809\":1}}],[\"它们的原理是遍历线程池中的工作线程\",{\"1\":{\"764\":1}}],[\"它们的作用都是作为cpu与主内存之间的高速数据缓冲区\",{\"1\":{\"662\":1}}],[\"它们的最大长度和是否尾部空格被保留等方面也不同\",{\"1\":{\"98\":1}}],[\"它们共享相同的地址空间\",{\"1\":{\"651\":1}}],[\"它们存在线程的隔离\",{\"1\":{\"650\":1}}],[\"它们是groupid\",{\"1\":{\"586\":1}}],[\"它们主要用于int\",{\"1\":{\"527\":1}}],[\"它们定义在生产者和消费者之间快速\",{\"1\":{\"450\":1}}],[\"它们分别是watch\",{\"1\":{\"139\":1}}],[\"它带来的提升是\",{\"1\":{\"132\":1}}],[\"它是不支持重入的\",{\"1\":{\"815\":1}}],[\"它是根据artifact\",{\"1\":{\"582\":1}}],[\"它是一个长度为6的long类型的数组\",{\"1\":{\"722\":1}}],[\"它是一个基于链接节点的无界线程安全队列\",{\"1\":{\"530\":1}}],[\"它是一个客户端\",{\"1\":{\"515\":1}}],[\"它是一个放写入到某个序号的\",{\"1\":{\"455\":1}}],[\"它是disruptor底层数据结构实现\",{\"1\":{\"450\":1}}],[\"它是使用了一个内部同步器aqs来实现屏蔽功能的\",{\"1\":{\"446\":1}}],[\"它是upstream模块默认的负载均衡默认策略\",{\"1\":{\"299\":1}}],[\"它是全局唯一的\",{\"1\":{\"214\":1}}],[\"它是对数据行的拆分\",{\"1\":{\"131\":1}}],[\"它是在一定的范围内\",{\"1\":{\"208\":1}}],[\"它是在\",{\"1\":{\"93\":1}}],[\"它的最大优势是系统开销小\",{\"1\":{\"808\":1}}],[\"它的对象头部多了一个用来存储数组长度的空间\",{\"1\":{\"722\":1}}],[\"它的范围在4mb到50mb之间\",{\"1\":{\"662\":1}}],[\"它的\",{\"1\":{\"610\":1}}],[\"它的作用和上面读文件恰恰相反\",{\"1\":{\"539\":1}}],[\"它的排序规则和\",{\"1\":{\"533\":1}}],[\"它的内部实现是一个链表\",{\"1\":{\"532\":1}}],[\"它的内部实现是一个数组\",{\"1\":{\"531\":1}}],[\"它的语法是instance\",{\"1\":{\"527\":1}}],[\"它的语法是class\",{\"1\":{\"527\":2}}],[\"它的方法没有返回值\",{\"1\":{\"475\":1}}],[\"它的职责是保证数据在其管辖下的所有服务之间保持同步\",{\"1\":{\"198\":1}}],[\"它的设立旨在支持小微企业\",{\"1\":{\"167\":1}}],[\"它的提升是\",{\"1\":{\"130\":1}}],[\"它的核心理念是专库专用\",{\"1\":{\"130\":1}}],[\"它的性能较扫一遍索引树更低\",{\"1\":{\"104\":1}}],[\"它记录了\",{\"1\":{\"126\":1}}],[\"它执行\",{\"1\":{\"116\":1}}],[\"它充许另外一个事务可以看到这个事务未提交的数据\",{\"1\":{\"106\":1}}],[\"它除了保证一个事务不能被另外一个事务读取未提交的数据之外还避免了以下情况产生\",{\"1\":{\"70\":1}}],[\"它与\",{\"1\":{\"63\":1}}],[\"它会尝试从主存储器访问它\",{\"1\":{\"662\":1}}],[\"它会尝试将其他表缓存起来\",{\"1\":{\"23\":1}}],[\"它会一直等待第二个线程也执行exchange\",{\"1\":{\"555\":1}}],[\"它会一直侦听下一个可用的序号\",{\"1\":{\"450\":1}}],[\"它会减少一些不必要的唤醒\",{\"1\":{\"472\":1}}],[\"它会要求\",{\"1\":{\"456\":1}}],[\"它会抢占这个节点上的\",{\"1\":{\"455\":1}}],[\"它会将生成\",{\"1\":{\"41\":1}}],[\"它还为\",{\"1\":{\"619\":1}}],[\"它还会通过心跳定期向namenode发送所存储文件块列表信息\",{\"1\":{\"17\":1}}],[\"它还是会有性能开销\",{\"1\":{\"4\":1}}],[\"它维护文件系统树及树中的所有文件和目录\",{\"1\":{\"16\":1}}],[\"它把网络拓扑看成一棵树\",{\"1\":{\"14\":1}}],[\"近\",{\"1\":{\"4\":1}}],[\"是经过精心的设计\",{\"1\":{\"898\":1}}],[\"是计算机世界黑客常用的攻击方式之一\",{\"1\":{\"897\":1}}],[\"是隐含参数\",{\"1\":{\"874\":1}}],[\"是多进程架构\",{\"1\":{\"856\":1}}],[\"是单进程多线程对称服务器架构\",{\"1\":{\"856\":1}}],[\"是将同步状态\",{\"1\":{\"820\":1}}],[\"是将当前更改或者新增的文件加入到git的索引中\",{\"1\":{\"497\":1,\"503\":1}}],[\"是使用单个worker线程的executor\",{\"1\":{\"772\":1}}],[\"是非常耗时的操作\",{\"1\":{\"751\":1}}],[\"是进程号\",{\"1\":{\"712\":1}}],[\"是的潜在的缺陷不会被激活\",{\"1\":{\"704\":1}}],[\"是表示被加上偏向锁\",{\"1\":{\"673\":1}}],[\"是由缓存行组成的\",{\"1\":{\"662\":1}}],[\"是由一个\",{\"1\":{\"119\":1}}],[\"是每个节点的框架代理\",{\"1\":{\"656\":1}}],[\"是绝对路径\",{\"1\":{\"652\":1}}],[\"是物理内存的1\",{\"1\":{\"651\":2}}],[\"是需要执行的确类名\",{\"1\":{\"651\":1}}],[\"是访问不到\",{\"1\":{\"650\":1}}],[\"是为了比较两个对象的大小而抽象出的一个接口\",{\"1\":{\"735\":1}}],[\"是为了解决自己锁死自己的情况\",{\"1\":{\"723\":1}}],[\"是为了优化磁盘的读和写的性能\",{\"1\":{\"25\":1}}],[\"是为数据的可靠传输打下了基础\",{\"1\":{\"644\":1}}],[\"是面向连接的\",{\"1\":{\"642\":1}}],[\"是不需要和\",{\"1\":{\"639\":1}}],[\"是无法得知其是否安全完整到达的\",{\"1\":{\"638\":1}}],[\"是无副作用的\",{\"1\":{\"481\":1}}],[\"是互联网相关的各类协议族的总称\",{\"1\":{\"638\":1}}],[\"是互联网的一项服务\",{\"1\":{\"222\":1}}],[\"是可以更改的\",{\"1\":{\"629\":1}}],[\"是用来处理i\",{\"1\":{\"612\":1}}],[\"是用来对sequences属性进行原子更新的\",{\"1\":{\"472\":1}}],[\"是版本的标识号\",{\"1\":{\"605\":1}}],[\"是整个验证过程中最复杂的一个阶段\",{\"1\":{\"562\":1}}],[\"是文件的基本读写的一个类\",{\"1\":{\"539\":1}}],[\"是目录吗\",{\"1\":{\"537\":1}}],[\"是自上而下的调整堆顺序\",{\"1\":{\"533\":1}}],[\"是自下而上的调整堆\",{\"1\":{\"533\":1}}],[\"是自下而上设计的\",{\"1\":{\"50\":1}}],[\"是提供对网站服务器的身份认证\",{\"1\":{\"521\":1}}],[\"是apache\",{\"1\":{\"515\":1}}],[\"是根据关键码值\",{\"1\":{\"506\":1}}],[\"是幂等的\",{\"1\":{\"481\":1}}],[\"是get\",{\"1\":{\"475\":1}}],[\"是singleproducersequencer和multiproducersequencer的基类\",{\"1\":{\"472\":1}}],[\"是java\",{\"1\":{\"452\":1,\"703\":1}}],[\"是实际消费者的接口\",{\"1\":{\"450\":1}}],[\"是线程间交换数据的中转地\",{\"1\":{\"450\":1}}],[\"是当前对象\",{\"1\":{\"443\":1}}],[\"是程序员的基本修养\",{\"1\":{\"413\":1}}],[\"是调用者的责任\",{\"1\":{\"413\":1}}],[\"是域名系统\",{\"1\":{\"222\":1}}],[\"是则重入\",{\"1\":{\"218\":1}}],[\"是相对于目前计算机科学水平\",{\"1\":{\"190\":1}}],[\"是指攻击者发送一个目的主机已接收过的包\",{\"1\":{\"897\":1}}],[\"是指当一个线程在获取锁的时候\",{\"1\":{\"811\":1}}],[\"是指计算机系统所提供的服务是可以论证其是可信赖的\",{\"1\":{\"684\":1}}],[\"是指内存的永久保存区域\",{\"1\":{\"651\":1}}],[\"是指发送数据之前必须在两端建立连接\",{\"1\":{\"644\":1}}],[\"是指无论调用多少次都不会有不同结果的一种特性\",{\"1\":{\"481\":1}}],[\"是指支持把\",{\"1\":{\"422\":1}}],[\"是指由金融公司或某些信用较高的企业开出的无担保短期票据\",{\"1\":{\"186\":1}}],[\"是指由信托公司担任受托人\",{\"1\":{\"179\":1}}],[\"是指担保机构与非融资交易主合同债权人约定\",{\"1\":{\"180\":1}}],[\"是指银行根据进口人\",{\"1\":{\"176\":1}}],[\"是指为担保人设立的担保\",{\"1\":{\"162\":1}}],[\"是基于简单的文件系统\",{\"1\":{\"600\":1}}],[\"是基于链接节点的\",{\"1\":{\"529\":1}}],[\"是基于内存占用和性能的综合考虑\",{\"1\":{\"158\":1}}],[\"是基于图形的索引\",{\"1\":{\"52\":1}}],[\"是否依赖其他系统资源\",{\"1\":{\"769\":1}}],[\"是否需要恢复中断异常\",{\"1\":{\"765\":1}}],[\"是否成立\",{\"1\":{\"744\":1}}],[\"是否真的是鲍勃签的\",{\"1\":{\"705\":1}}],[\"是否偏向锁\",{\"1\":{\"673\":1}}],[\"是否集成了不被集成的类\",{\"1\":{\"561\":1}}],[\"是否集成了不被继承的类等\",{\"1\":{\"558\":1}}],[\"是否可以消费\",{\"1\":{\"472\":1}}],[\"是否自动提交偏移量\",{\"1\":{\"435\":1}}],[\"是否中断线程的执行\",{\"1\":{\"402\":1}}],[\"是否使用sendfile传输文件\",{\"1\":{\"305\":1}}],[\"是否使用主机网络模式\",{\"1\":{\"263\":1}}],[\"是否允许同时接受多个网路连接\",{\"1\":{\"305\":1}}],[\"是否为健康实例\",{\"1\":{\"410\":1,\"411\":1}}],[\"是否为只读模式\",{\"1\":{\"263\":1}}],[\"是否为当前列表中最小的\",{\"1\":{\"214\":1}}],[\"是否接收\",{\"1\":{\"155\":1}}],[\"是否\",{\"1\":{\"155\":1}}],[\"是否提供服务\",{\"1\":{\"155\":1}}],[\"是否启用\",{\"1\":{\"141\":1,\"146\":1}}],[\"是否压缩\",{\"1\":{\"141\":1}}],[\"是否停止接收写命令\",{\"1\":{\"141\":1}}],[\"是否对sql语句大小写敏感\",{\"1\":{\"74\":1}}],[\"是最低的事务隔离级别\",{\"1\":{\"68\":1}}],[\"是在一个程序中与其它控制线程无关的\",{\"1\":{\"651\":1}}],[\"是在\",{\"1\":{\"63\":1}}],[\"是\",{\"1\":{\"4\":1,\"22\":1,\"450\":1,\"556\":2,\"652\":1,\"753\":3,\"837\":1}}],[\"是一个不错的选择\",{\"1\":{\"914\":1}}],[\"是一个面向批处理的计算模型\",{\"1\":{\"782\":1}}],[\"是一个用来构建锁和同步器的框架\",{\"1\":{\"723\":1}}],[\"是一个只读且不可变的分布式对象集合\",{\"1\":{\"627\":1}}],[\"是一个启动nio服务的辅助启动类\",{\"1\":{\"612\":1}}],[\"是一个支持两个附加操作的队列\",{\"1\":{\"530\":1}}],[\"是一个适用于高并发场景下的队列\",{\"1\":{\"530\":1}}],[\"是一个来自数据源的元素队列并支持聚合操作\",{\"1\":{\"527\":1}}],[\"是一个想从ringbuffer里读取数据的线程\",{\"1\":{\"452\":1}}],[\"是一款开源的分布式事务解决方案\",{\"1\":{\"420\":1}}],[\"是一款功能强大的分布式搜索引擎\",{\"1\":{\"4\":1}}],[\"是一种实现的\",{\"1\":{\"729\":1}}],[\"是一种jvm原生的锁实现方式\",{\"1\":{\"723\":1}}],[\"是一种无连接的协议\",{\"1\":{\"638\":1}}],[\"是一种用于分布式\",{\"1\":{\"520\":1}}],[\"是一种经济和金融活动中的风险管理手段\",{\"1\":{\"168\":1}}],[\"是一种流行的企业级搜索引擎\",{\"1\":{\"4\":1}}],[\"中存一份随机数\",{\"1\":{\"897\":1}}],[\"中存储一份商品\",{\"1\":{\"221\":1}}],[\"中存储的信息为\",{\"1\":{\"221\":1}}],[\"中存储商品的库存数量时\",{\"1\":{\"221\":1}}],[\"中临时表空间由参数\",{\"1\":{\"864\":1}}],[\"中查询\",{\"1\":{\"857\":1}}],[\"中查询出的商品对应的分割库存后的所有key的长度进行求模运算\",{\"1\":{\"221\":1}}],[\"中查询出商品对应的分割库存后的所有\",{\"1\":{\"221\":1}}],[\"中国民间游戏\",{\"1\":{\"825\":1}}],[\"中国是\",{\"1\":{\"222\":1}}],[\"中更新过的共享变量刷新到主内存中去\",{\"1\":{\"809\":1}}],[\"中断处理\",{\"1\":{\"765\":1}}],[\"中断异常处理\",{\"0\":{\"765\":1}}],[\"中断异常\",{\"1\":{\"652\":2}}],[\"中读写隔离的\",{\"1\":{\"650\":1}}],[\"中提到\",{\"1\":{\"650\":1}}],[\"中参数相同则走channelread0\",{\"1\":{\"613\":1}}],[\"中央仓库\",{\"1\":{\"601\":1}}],[\"中加入了\",{\"1\":{\"530\":1}}],[\"中加入两个具体集合实现\",{\"1\":{\"529\":1}}],[\"中有新东西了\",{\"1\":{\"456\":1}}],[\"中序号\",{\"1\":{\"454\":1}}],[\"中间人\",{\"0\":{\"922\":1},\"1\":{\"921\":1}}],[\"中间操作都会返回流对象本身\",{\"1\":{\"527\":1}}],[\"中间不需要再次检查消费者的位置\",{\"1\":{\"457\":1}}],[\"中间\",{\"1\":{\"435\":1}}],[\"中我们可以使用\",{\"1\":{\"221\":1}}],[\"中去请求锁资源\",{\"1\":{\"221\":1}}],[\"中设置了锁标志位后\",{\"1\":{\"218\":1}}],[\"中创建的\",{\"1\":{\"214\":1}}],[\"中期票据对银行中期贷款具有明显的替代效应\",{\"1\":{\"178\":1}}],[\"中期票据是一种具有独特性质的公司债务工具\",{\"1\":{\"178\":1}}],[\"中期票据\",{\"0\":{\"178\":1}}],[\"中期票据担保\",{\"1\":{\"169\":1}}],[\"中的值\",{\"1\":{\"834\":1}}],[\"中的\",{\"1\":{\"650\":2,\"820\":1}}],[\"中的所有关系型功能\",{\"1\":{\"627\":1}}],[\"中的作用\",{\"1\":{\"616\":1}}],[\"中的内存泄露的情况\",{\"1\":{\"558\":1}}],[\"中的元素根据它们的天然排序\",{\"1\":{\"529\":1}}],[\"中的字典由\",{\"1\":{\"126\":1}}],[\"中的应用非常广泛\",{\"1\":{\"118\":1}}],[\"中的列支持使用\",{\"1\":{\"25\":1}}],[\"中文\",{\"1\":{\"63\":2}}],[\"中文件会被保留一定间隔的时间\",{\"1\":{\"14\":1}}],[\"中解析出多个\",{\"1\":{\"39\":1}}],[\"中分区的功能是非常有用的\",{\"1\":{\"26\":1}}],[\"中没有\",{\"1\":{\"25\":1}}],[\"中最后\",{\"1\":{\"25\":1}}],[\"中接口的实现\",{\"1\":{\"25\":1}}],[\"中对数据进行排序\",{\"1\":{\"23\":1}}],[\"中数据库的概念本质上仅仅是表的一个目录或者命名空间\",{\"1\":{\"21\":1}}],[\"中\",{\"1\":{\"4\":1,\"23\":3,\"93\":1,\"367\":1,\"417\":1,\"475\":4,\"490\":1,\"549\":1,\"563\":3,\"620\":1,\"712\":1,\"809\":2,\"874\":1}}],[\"在线程竞争不激烈的情况下\",{\"1\":{\"928\":1}}],[\"在线收缩临时表空间使用\",{\"1\":{\"865\":1}}],[\"在竞争激烈的情况下\",{\"1\":{\"927\":1}}],[\"在于\",{\"1\":{\"927\":1}}],[\"在很多情况下\",{\"1\":{\"913\":1}}],[\"在分析函数内的局部变量和参数\",{\"1\":{\"900\":1}}],[\"在分布式系统中\",{\"1\":{\"608\":1}}],[\"在分布式环境上\",{\"1\":{\"207\":1}}],[\"在分布式应用中\",{\"1\":{\"195\":1}}],[\"在其他应用中该程序可以被再次使用的程度\",{\"1\":{\"898\":1}}],[\"在其他sql方言中\",{\"1\":{\"25\":1}}],[\"在硬件发生故障\",{\"1\":{\"898\":1}}],[\"在百度百科里给出的定义是\",{\"1\":{\"898\":1}}],[\"在业务空间期定时清理\",{\"1\":{\"872\":1}}],[\"在物理上存放在表空间对应的物理数据文件\",{\"1\":{\"864\":1}}],[\"在责任链模式里\",{\"1\":{\"825\":1}}],[\"在锁释放之前又一次重新获取该锁\",{\"1\":{\"815\":1}}],[\"在一个安全点停止拥有锁的线程\",{\"1\":{\"828\":1}}],[\"在一个处理器执行总线事务期间\",{\"1\":{\"809\":1}}],[\"在一些\",{\"1\":{\"809\":1}}],[\"在一般程序中\",{\"1\":{\"620\":1}}],[\"在计算机中\",{\"1\":{\"809\":1}}],[\"在计算机系统启动和运行过程中再建立一条信任链\",{\"1\":{\"685\":1}}],[\"在顺序一致性模型中\",{\"1\":{\"809\":1}}],[\"在消息传递的并发模型里\",{\"1\":{\"809\":1}}],[\"在消费者启动之后生成的记录\",{\"1\":{\"435\":1}}],[\"在共享内存的并发模型里\",{\"1\":{\"809\":1}}],[\"在命令式编程中\",{\"1\":{\"809\":1}}],[\"在编写hive\",{\"1\":{\"789\":1}}],[\"在编译前后被编译器生成了monitor\",{\"1\":{\"723\":1}}],[\"在编译和执行测试的时候回使用另一套classpath\",{\"1\":{\"593\":1}}],[\"在各个模块停留的时间及用户的消费明细\",{\"1\":{\"785\":1}}],[\"在进行计算的过程中\",{\"1\":{\"781\":1}}],[\"在进行每一次四则运算时\",{\"1\":{\"445\":1}}],[\"在需要异步执行的方法上加上\",{\"1\":{\"778\":1}}],[\"在需要精确的小数计算时再使用bigdecimal\",{\"1\":{\"445\":1}}],[\"在每一次执行终止和下一次执行开始之间都存在给定的延迟\",{\"1\":{\"774\":1}}],[\"在每次调用时\",{\"1\":{\"406\":1}}],[\"在步骤2中新创建的线程将任务执行完后\",{\"1\":{\"773\":1}}],[\"在系统设计阶段\",{\"1\":{\"731\":1}}],[\"在系统运行期间\",{\"1\":{\"19\":1}}],[\"在系统运行期间所有对元信息的操作都保存在内存中并被持久化到另一个edits中\",{\"1\":{\"18\":1}}],[\"在基于数据库表的版本解决方案中\",{\"1\":{\"730\":1}}],[\"在整个数据处理过程中\",{\"1\":{\"725\":1}}],[\"在虚拟机执行到monitor\",{\"1\":{\"723\":1}}],[\"在64位系统上占用8bytes\",{\"1\":{\"722\":1}}],[\"在64位系统中占8字节\",{\"1\":{\"672\":2}}],[\"在32位系统上占用4bytes\",{\"1\":{\"722\":1}}],[\"在32位系统占4字节\",{\"1\":{\"672\":2}}],[\"在主程序运行之后执行\",{\"1\":{\"710\":1}}],[\"在主程序运行之前执行\",{\"1\":{\"710\":1}}],[\"在此记录一下javaagent的学习历程\",{\"1\":{\"706\":1}}],[\"在此线程之后的执行过程中\",{\"1\":{\"673\":1}}],[\"在使用skywalking时\",{\"1\":{\"706\":1}}],[\"在使用redis存储数据的时候\",{\"1\":{\"139\":1}}],[\"在可能会存在的缺陷时\",{\"1\":{\"704\":1}}],[\"在两种方法都可用的情况下\",{\"1\":{\"703\":1}}],[\"在初始化时创建100个connection对象\",{\"1\":{\"683\":1}}],[\"在初始化阶段才会变成123\",{\"1\":{\"563\":1}}],[\"在接下来的执行过程中\",{\"1\":{\"673\":1}}],[\"在接收端\",{\"1\":{\"639\":1}}],[\"在访问优先级方面\",{\"1\":{\"662\":1}}],[\"在有限的时间内只允许其中之一独占性的使用共享资源\",{\"1\":{\"659\":1}}],[\"在网上\",{\"1\":{\"651\":1}}],[\"在网络传输过程中以密文的形式传输到后台管理\",{\"1\":{\"897\":1}}],[\"在网络请求中\",{\"1\":{\"747\":1}}],[\"在网络中它与tcp协议一样用于处理数据包\",{\"1\":{\"638\":1}}],[\"在网络上是明文传输的\",{\"1\":{\"485\":1}}],[\"在网络出现故障的时候\",{\"1\":{\"203\":1}}],[\"在tomcat5对这些参数进行了调整\",{\"1\":{\"651\":1}}],[\"在catalina\",{\"1\":{\"651\":1}}],[\"在cap理论中\",{\"1\":{\"196\":1}}],[\"在某些项目中\",{\"1\":{\"650\":1}}],[\"在某一个目录下面创建一个专门存放此demo的目录\",{\"1\":{\"243\":1}}],[\"在后续的任意需要记录日志的方法里面进行get获取到请求id\",{\"1\":{\"650\":1}}],[\"在随后的任意地方都可以获取到\",{\"1\":{\"650\":1}}],[\"在传输数据报文时是很高效的\",{\"1\":{\"642\":1}}],[\"在osi模型中\",{\"1\":{\"638\":1}}],[\"在写java程序时\",{\"1\":{\"626\":1}}],[\"在扩展\",{\"1\":{\"621\":1}}],[\"在大流量的情况下\",{\"1\":{\"727\":1}}],[\"在大多数现代cpu中\",{\"1\":{\"662\":1}}],[\"在大多数情况下\",{\"1\":{\"102\":1}}],[\"在大部分情况下\",{\"1\":{\"613\":2}}],[\"在机器上绑定了机器所有网卡上的8080端口\",{\"1\":{\"612\":1}}],[\"在执行程序时为了提高性能\",{\"1\":{\"809\":1}}],[\"在执行monitor\",{\"1\":{\"723\":1}}],[\"在执行monitorexit指令时会将锁计算器就减1\",{\"1\":{\"703\":1}}],[\"在执行monitorenter指令时\",{\"1\":{\"703\":1}}],[\"在执行mvn\",{\"1\":{\"604\":1}}],[\"在执行\",{\"1\":{\"620\":1}}],[\"在执行时自动完成的\",{\"1\":{\"618\":1}}],[\"在执行多个任务的时候\",{\"1\":{\"475\":1}}],[\"在repositories元素下\",{\"1\":{\"603\":1}}],[\"在redis\",{\"0\":{\"356\":1,\"357\":1,\"359\":1,\"361\":1,\"362\":1,\"364\":1,\"366\":1},\"1\":{\"352\":1,\"355\":1,\"356\":1,\"366\":3,\"367\":6}}],[\"在redis中的存储为\",{\"1\":{\"221\":1}}],[\"在redis里面\",{\"1\":{\"139\":1}}],[\"在项目根目录下运行命令mvn\",{\"1\":{\"580\":1}}],[\"在~\",{\"1\":{\"575\":1}}],[\"在集成测试可以运行的环境中处理和发布包\",{\"1\":{\"566\":1}}],[\"在准备阶段初始值是0\",{\"1\":{\"563\":1}}],[\"在下一个垃圾回收周期中\",{\"1\":{\"558\":1}}],[\"在java环境中\",{\"1\":{\"926\":1}}],[\"在java环境下\",{\"1\":{\"702\":1}}],[\"在java\",{\"1\":{\"723\":1,\"735\":1}}],[\"在java同步代码快中\",{\"1\":{\"671\":1}}],[\"在java中\",{\"1\":{\"809\":1}}],[\"在java中线程是程序运行时的路径\",{\"1\":{\"651\":1}}],[\"在java中可以作为gc\",{\"1\":{\"558\":1}}],[\"在jvm中如果98\",{\"1\":{\"651\":1}}],[\"在jdk1\",{\"1\":{\"442\":1,\"667\":1,\"669\":1,\"673\":1}}],[\"在图3\",{\"1\":{\"549\":1}}],[\"在设计\",{\"1\":{\"549\":1}}],[\"在通常情况下\",{\"1\":{\"549\":1}}],[\"在通过聚集索引定位到行记录\",{\"1\":{\"104\":1}}],[\"在反序列化的操作\",{\"1\":{\"545\":1}}],[\"在队列为空时\",{\"1\":{\"530\":1}}],[\"在了解这个问题之前\",{\"1\":{\"526\":1}}],[\"在仓库根目录下创建名称为\",{\"1\":{\"504\":1}}],[\"在提交前查看修改\",{\"1\":{\"492\":1}}],[\"在克隆的资源上添加或修改文件\",{\"1\":{\"492\":1}}],[\"在调用get\",{\"1\":{\"475\":1}}],[\"在调用时注入该bean即可实现客户端负载均衡\",{\"1\":{\"408\":1}}],[\"在发送端\",{\"1\":{\"639\":1}}],[\"在发现\",{\"1\":{\"619\":1}}],[\"在发布事件时需要传一个事件转换的接口\",{\"1\":{\"472\":1}}],[\"在发生极端情况时\",{\"1\":{\"197\":1}}],[\"在完成消费事件时通知并设置回调\",{\"1\":{\"472\":1}}],[\"在完成一组正在其他线程中执行的操作之前\",{\"1\":{\"446\":1}}],[\"在自旋100次尝试后\",{\"1\":{\"471\":1,\"472\":1}}],[\"在disruptor框架中是用泛型表示的\",{\"1\":{\"461\":1}}],[\"在disruptor框架中没有类表示event\",{\"1\":{\"461\":1}}],[\"在docker容器构建时拷贝程序\",{\"1\":{\"263\":1}}],[\"在docker\",{\"1\":{\"234\":1}}],[\"在docker配置文件\",{\"1\":{\"230\":1}}],[\"在我们这儿是\",{\"1\":{\"456\":1}}],[\"在赶上消费者\",{\"1\":{\"454\":1}}],[\"在上图中\",{\"1\":{\"454\":1}}],[\"在上面的例子中是12\",{\"1\":{\"452\":1}}],[\"在上面的例子中\",{\"1\":{\"452\":1}}],[\"在等待时间点调用其他线程的\",{\"1\":{\"446\":1}}],[\"在处理庞大\",{\"1\":{\"445\":1}}],[\"在程序要保存很长时间时\",{\"1\":{\"898\":1}}],[\"在程序中使用\",{\"1\":{\"537\":1}}],[\"在程序中过度\",{\"1\":{\"442\":1}}],[\"在程序上作出分门别类的判断\",{\"1\":{\"413\":1}}],[\"在偏移量无效的情况下\",{\"1\":{\"435\":2,\"564\":2}}],[\"在sql后面加上\",{\"1\":{\"727\":1}}],[\"在synchronized优化以前\",{\"1\":{\"703\":1}}],[\"在spring\",{\"1\":{\"435\":1}}],[\"在saga模式中\",{\"1\":{\"423\":1}}],[\"在磁盘个数一定\",{\"1\":{\"433\":1}}],[\"在磁盘上存储成三个文件\",{\"1\":{\"91\":1}}],[\"在kafka整体架构中\",{\"1\":{\"433\":1}}],[\"在kafka集群中\",{\"1\":{\"432\":1}}],[\"在kubernetes集群中创建一个pod\",{\"1\":{\"296\":1}}],[\"在本地事务中\",{\"1\":{\"421\":1}}],[\"在以后需要修改时\",{\"1\":{\"413\":1}}],[\"在频繁调用出错的情况下\",{\"1\":{\"413\":1}}],[\"在解析字符串形式的数字时\",{\"1\":{\"413\":1}}],[\"在不改变系统功能的情况下\",{\"1\":{\"898\":1}}],[\"在不改变软件系统外部行为的前提下\",{\"1\":{\"898\":1}}],[\"在不同的方向上\",{\"1\":{\"911\":1}}],[\"在不同的机器\",{\"1\":{\"651\":1}}],[\"在不同引擎的实现方式\",{\"0\":{\"116\":1}}],[\"在不使用feign组件时\",{\"1\":{\"410\":1,\"411\":1}}],[\"在注解中使用name属性指定调用的具体服务名\",{\"1\":{\"408\":1,\"409\":1}}],[\"在启动类添加\",{\"1\":{\"393\":1,\"397\":1,\"415\":1,\"416\":1}}],[\"在application启动类上面加上\",{\"1\":{\"778\":1}}],[\"在application\",{\"1\":{\"392\":1,\"396\":1,\"415\":1,\"416\":1}}],[\"在a向b转账的整个过程中\",{\"1\":{\"66\":1}}],[\"在默认的情况下\",{\"1\":{\"381\":1}}],[\"在所有服务器上配置keepalived软件\",{\"1\":{\"380\":1}}],[\"在任意需要的地方可以获取\",{\"1\":{\"650\":1}}],[\"在任意位置输入\",{\"1\":{\"343\":1}}],[\"在任何时候\",{\"1\":{\"28\":1}}],[\"在最后加入\",{\"1\":{\"343\":1}}],[\"在软件包源码目录\",{\"1\":{\"343\":1}}],[\"在文件上传的位置\",{\"1\":{\"327\":1,\"342\":1}}],[\"在文件系统的命名空间创建一个新文件\",{\"1\":{\"14\":1}}],[\"在服务器查找的资源路径是\",{\"1\":{\"317\":1}}],[\"在nginx\",{\"0\":{\"345\":1,\"347\":1,\"349\":1,\"351\":1},\"1\":{\"344\":1,\"348\":1}}],[\"在nginx版本1\",{\"1\":{\"301\":1}}],[\"在namenode重启的过程中\",{\"1\":{\"19\":1}}],[\"在namenode启动时\",{\"1\":{\"19\":1}}],[\"在namenode中存放元信息的文件是fsimage\",{\"1\":{\"18\":1}}],[\"在轮询策略的基础上指定轮询的几率\",{\"1\":{\"300\":1}}],[\"在轮询中\",{\"1\":{\"299\":1}}],[\"在upstream模块配置完成后\",{\"1\":{\"298\":1}}],[\"在配置列表里配置自己的配置\",{\"1\":{\"297\":1}}],[\"在192\",{\"1\":{\"293\":1,\"294\":1}}],[\"在10个工作日内完成复核确认工作\",{\"1\":{\"189\":1}}],[\"在maven的世界\",{\"1\":{\"578\":1}}],[\"在master添加hosts\",{\"1\":{\"288\":1}}],[\"在mysql\",{\"0\":{\"331\":1,\"332\":1,\"334\":1,\"336\":1,\"337\":1,\"339\":1,\"341\":1},\"1\":{\"321\":1,\"322\":1,\"342\":7}}],[\"在mysql暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中\",{\"1\":{\"74\":1}}],[\"在开始之前\",{\"1\":{\"287\":1}}],[\"在该阶段主要完成以下四钟验证\",{\"1\":{\"558\":1}}],[\"在该例子中\",{\"1\":{\"300\":1}}],[\"在该pod上定义共享存储卷列表\",{\"1\":{\"263\":1}}],[\"在该函数内部\",{\"1\":{\"41\":1}}],[\"在企业实战环境中\",{\"1\":{\"250\":1}}],[\"在应用服务器与互联网之间通常有一层负载均衡器负责反向代理\",{\"1\":{\"222\":1}}],[\"在根域名服务器下一级就是\",{\"1\":{\"222\":1}}],[\"在数据缓冲区中修改\",{\"1\":{\"863\":1}}],[\"在数据库中保存域名与ip的对照关系\",{\"1\":{\"222\":1}}],[\"在数据通信中\",{\"1\":{\"14\":1}}],[\"在域名后面会定义一个ip地址用来指向网站服务器\",{\"1\":{\"222\":1}}],[\"在互联网中是用ip来标识一台服务器的\",{\"1\":{\"222\":1}}],[\"在真正处理库存信息时\",{\"1\":{\"221\":1}}],[\"在高并发的商城系统中\",{\"1\":{\"221\":1}}],[\"在高并发场景下\",{\"1\":{\"220\":1}}],[\"在复杂分布式系统中\",{\"1\":{\"204\":1}}],[\"在生产环境中可以最大程度的减少分区发生\",{\"1\":{\"196\":1}}],[\"在生成\",{\"1\":{\"100\":1}}],[\"在多年运营改进的基础上\",{\"1\":{\"196\":1}}],[\"在衡量一个系统的可用性的时候\",{\"1\":{\"194\":1}}],[\"在扣除追偿费用后按业务风险分担比例进行分配\",{\"1\":{\"189\":1}}],[\"在司法实践中\",{\"1\":{\"185\":1}}],[\"在信用证内\",{\"1\":{\"176\":1}}],[\"在直接融资中\",{\"1\":{\"172\":1}}],[\"在金融领域\",{\"1\":{\"166\":1}}],[\"在担保机构原保项目发生代偿时\",{\"1\":{\"165\":1}}],[\"在担保机构获得追偿回款时\",{\"1\":{\"164\":1}}],[\"在字符串like时左边是通配符\",{\"1\":{\"112\":1}}],[\"在索引的叶子节点上\",{\"1\":{\"103\":1}}],[\"在修改表的内容时\",{\"1\":{\"100\":1}}],[\"在存储或检索过程中不\",{\"1\":{\"98\":1}}],[\"在实现分布式锁时\",{\"1\":{\"214\":2}}],[\"在实际应用当做\",{\"1\":{\"751\":1}}],[\"在实际应用中\",{\"1\":{\"87\":1}}],[\"在实际操作中\",{\"1\":{\"187\":1}}],[\"在实体上构建索引\",{\"1\":{\"58\":1}}],[\"在对象头上的mark\",{\"1\":{\"723\":1}}],[\"在对存储商品库存的每个\",{\"1\":{\"221\":1}}],[\"在对该字段进行\",{\"1\":{\"82\":1}}],[\"在对每行记录进行连接操作时\",{\"1\":{\"23\":1}}],[\"在创建\",{\"1\":{\"100\":1}}],[\"在创建业务表时\",{\"1\":{\"82\":1}}],[\"在创建文件前namenode会做一些检查\",{\"1\":{\"14\":1}}],[\"在没有提交的时候\",{\"1\":{\"74\":1}}],[\"在第一行最后追加主机名\",{\"1\":{\"343\":1}}],[\"在第五步的时候\",{\"1\":{\"67\":1}}],[\"在第二个datanode把接收到的数据包写入本地磁盘时会向第三个datanode发送数据包\",{\"1\":{\"14\":1}}],[\"在转账之后\",{\"1\":{\"66\":1}}],[\"在转账之前\",{\"1\":{\"66\":1}}],[\"在与文件相同的目录中\",{\"1\":{\"56\":1}}],[\"在毫秒内准确梳理出基因的分类\",{\"1\":{\"55\":1}}],[\"在远程复制的同时\",{\"1\":{\"46\":1}}],[\"在用户编写的map函数中\",{\"1\":{\"41\":1}}],[\"在hadoop平台上\",{\"1\":{\"33\":1}}],[\"在右边表中一旦找到匹配的记录\",{\"1\":{\"23\":1}}],[\"在读取数据块时\",{\"1\":{\"19\":1}}],[\"在这些情况下\",{\"1\":{\"766\":1}}],[\"在这幅图中\",{\"1\":{\"454\":1}}],[\"在这里\",{\"1\":{\"298\":1,\"525\":1}}],[\"在这里hadoop采取了一个简单的方法\",{\"1\":{\"14\":1}}],[\"在这种处理器上运行时\",{\"1\":{\"809\":1}}],[\"在这种情况下\",{\"1\":{\"475\":1,\"898\":1,\"917\":1}}],[\"在这种情境下\",{\"1\":{\"168\":1}}],[\"在这种模式下再担保机构与担保机构签署再担保合同以确定合作条件\",{\"1\":{\"162\":1}}],[\"在这个游戏中\",{\"1\":{\"825\":1}}],[\"在这个例子中我们实现了一个服务端的应用\",{\"1\":{\"612\":1}}],[\"在这个阶段\",{\"1\":{\"558\":1}}],[\"在这个同步点上\",{\"1\":{\"555\":1}}],[\"在这个事务还没有执行结束\",{\"1\":{\"72\":1}}],[\"在这个期间文件可以恢复\",{\"1\":{\"14\":1}}],[\"在海量数据处理过程中\",{\"1\":{\"14\":1}}],[\"在运行mapreduce任务时\",{\"1\":{\"14\":1}}],[\"在\",{\"0\":{\"384\":1},\"1\":{\"4\":1,\"14\":1,\"25\":1,\"93\":1,\"99\":1,\"100\":1,\"218\":1,\"221\":1,\"323\":1,\"325\":1,\"417\":1,\"473\":1,\"475\":4,\"538\":1,\"549\":1,\"563\":1,\"576\":1,\"618\":1,\"620\":1,\"650\":1,\"651\":1,\"708\":1,\"720\":1,\"735\":1,\"781\":2,\"782\":1,\"883\":1,\"887\":1,\"920\":1}}],[\"在内存中生成该类的class对象\",{\"1\":{\"559\":1}}],[\"在内存中生成该类的class\",{\"1\":{\"558\":1}}],[\"在内存缓冲区中包含了新文档的\",{\"1\":{\"4\":1}}],[\"在内存索引缓冲区中的文档\",{\"1\":{\"4\":1}}],[\"但进入时间以及恢复时间都要比自旋锁略慢\",{\"1\":{\"927\":1}}],[\"但其它线程等不起\",{\"1\":{\"924\":1}}],[\"但其他的\",{\"1\":{\"472\":1}}],[\"但能很快执行完毕\",{\"1\":{\"924\":1}}],[\"但对于类\",{\"1\":{\"923\":1}}],[\"但对出票企业信誉审查十分严格\",{\"1\":{\"186\":1}}],[\"但变化实际没有发生\",{\"1\":{\"918\":1}}],[\"但重构使它身形缩水\",{\"1\":{\"918\":1}}],[\"但需要重启数据库才能生效\",{\"1\":{\"854\":1}}],[\"但可以读动态性能视图中的数据\",{\"1\":{\"843\":1}}],[\"但必然是做游戏的人们中的一个\",{\"1\":{\"825\":1}}],[\"但当线程数不停增加时\",{\"1\":{\"813\":1}}],[\"但指定以\",{\"1\":{\"727\":1}}],[\"但公平锁表现的性能不是很好\",{\"1\":{\"703\":1}}],[\"但不知道最终在哪个节点上处理\",{\"1\":{\"825\":1}}],[\"但不受影响\",{\"1\":{\"702\":1}}],[\"但不绝对\",{\"1\":{\"684\":1}}],[\"但不存在于其他集合中的元素\",{\"1\":{\"136\":1}}],[\"但大部分情况下就是升级成轻量级锁了\",{\"1\":{\"673\":1}}],[\"但所有对象的状态都为\",{\"1\":{\"673\":1}}],[\"但在这两块需要同步操作的代码之间\",{\"1\":{\"924\":1}}],[\"但在你的站点访问量较大时就需要设置更大的线程数\",{\"1\":{\"651\":1}}],[\"但在实际应用中\",{\"1\":{\"445\":1}}],[\"但后两者的对象是变量\",{\"1\":{\"629\":1}}],[\"但它们一样遵循\",{\"1\":{\"624\":1}}],[\"但它会减少一些不必要的唤醒\",{\"1\":{\"466\":1}}],[\"但粗心的他却忘了在执行\",{\"1\":{\"619\":1}}],[\"但却不再被使用\",{\"1\":{\"558\":1}}],[\"但却没有那种可以在两个不同类型之间移动元素的命令\",{\"1\":{\"139\":1}}],[\"但还未决定怎么改\",{\"1\":{\"898\":1}}],[\"但还没有准备好关闭连接\",{\"1\":{\"649\":1}}],[\"但还没有进行提交\",{\"1\":{\"4\":1}}],[\"但还是要死的对象\",{\"1\":{\"557\":1}}],[\"但如果表示星球上的居住人数\",{\"1\":{\"549\":1}}],[\"但这个迭代器并不保证按照优先级顺序进行迭代\",{\"1\":{\"533\":1}}],[\"但这不足以满足实际需求\",{\"1\":{\"298\":1}}],[\"但现在我们是有要求\",{\"1\":{\"526\":1}}],[\"但利用\",{\"1\":{\"521\":1}}],[\"但我们也可以定义一个实现类\",{\"1\":{\"475\":1}}],[\"但只等待指定的时间\",{\"1\":{\"475\":1}}],[\"但调用者仍需要取线程的计算结果\",{\"1\":{\"473\":1}}],[\"但存在未解析的循环启动依赖项\",{\"1\":{\"444\":1}}],[\"但同时也消耗cpu资源\",{\"1\":{\"317\":1}}],[\"但普通匹配模式不会\",{\"1\":{\"307\":1}}],[\"但实现的时候做了很多的改进\",{\"1\":{\"214\":1}}],[\"但返回的\",{\"1\":{\"214\":1}}],[\"但狗屎运通常会在不经意中到来\",{\"1\":{\"208\":1}}],[\"但随机的东西就像是买彩票\",{\"1\":{\"208\":1}}],[\"但与此同时\",{\"1\":{\"208\":1}}],[\"但没达到造成用户流程的严重程度\",{\"1\":{\"202\":1}}],[\"但没有将表分布到不同的服务器上\",{\"1\":{\"130\":1}}],[\"但商业票据的期限通常在30天以内\",{\"1\":{\"186\":1}}],[\"但\",{\"1\":{\"155\":1,\"446\":1,\"809\":1,\"843\":1}}],[\"但并不建议只启用\",{\"1\":{\"140\":1}}],[\"但并非全局有序\",{\"1\":{\"23\":1}}],[\"但使用数据库来保存二进制数据的场景也不少见\",{\"1\":{\"623\":1}}],[\"但使用\",{\"1\":{\"119\":1}}],[\"但效率很差\",{\"1\":{\"106\":1}}],[\"但会把时间戳的前4位置换为posix的uid或gid\",{\"1\":{\"208\":1}}],[\"但会出幻读\",{\"1\":{\"106\":1}}],[\"但会出现不可重复读\",{\"1\":{\"106\":1}}],[\"但会在一秒之内变为可见\",{\"1\":{\"4\":1}}],[\"但也会增加恢复故障数据库所需的时间\",{\"1\":{\"74\":1}}],[\"但意外的故障将会丢失数据\",{\"1\":{\"74\":1}}],[\"但两次读取的纪录数不同\",{\"1\":{\"72\":1}}],[\"但和\",{\"1\":{\"25\":1}}],[\"但是大某些情况下\",{\"1\":{\"924\":1}}],[\"但是请记住\",{\"1\":{\"915\":1}}],[\"但是随着时间的发展\",{\"1\":{\"898\":1}}],[\"但是随着站点的扩容而改大这些值\",{\"1\":{\"651\":1}}],[\"但是总的说来\",{\"1\":{\"898\":1}}],[\"但是用户不喜欢这样\",{\"1\":{\"897\":1}}],[\"但是用户可以对表建立索引\",{\"1\":{\"25\":1}}],[\"但是责任链模式要求在同一个时间里\",{\"1\":{\"825\":1}}],[\"但是并没有执行任何有效的任务\",{\"1\":{\"811\":1}}],[\"但是还不如把加锁代码写在循环体的外面\",{\"1\":{\"924\":1}}],[\"但是还以为这是鲍勃的公钥\",{\"1\":{\"705\":1}}],[\"但是还没有达到要求\",{\"1\":{\"130\":1}}],[\"但是自从synchronized引入了偏向锁\",{\"1\":{\"703\":1}}],[\"但是众所周知\",{\"1\":{\"686\":1}}],[\"但是很多时候\",{\"1\":{\"650\":1}}],[\"但是entry是强引用\",{\"1\":{\"650\":1}}],[\"但是etcd分布式锁更加可靠强大\",{\"1\":{\"214\":1}}],[\"但是仍然可以接受数据\",{\"1\":{\"649\":1}}],[\"但是b不知道自己发信能力如何\",{\"1\":{\"647\":1}}],[\"但是也能在很多实时性要求高的地方有所作为\",{\"1\":{\"645\":1}}],[\"但是也不至于造成用户流程的严重阻塞\",{\"1\":{\"202\":1}}],[\"但是木有parse\",{\"1\":{\"626\":1}}],[\"但是因为长生命周期对象持有它的引用而导致不能被回收\",{\"1\":{\"558\":1}}],[\"但是因为需要频繁的创建和删除节点\",{\"1\":{\"214\":1}}],[\"但是有个问题无法解决\",{\"1\":{\"541\":1}}],[\"但是有时候并不会调用\",{\"1\":{\"381\":1}}],[\"但是对于大部分应用程序来说\",{\"1\":{\"515\":1}}],[\"但是对比\",{\"1\":{\"91\":1}}],[\"但是可以通到next\",{\"1\":{\"513\":1}}],[\"但是可能实际已经没票了\",{\"1\":{\"202\":1}}],[\"但是可能会出现幻象读\",{\"1\":{\"70\":1}}],[\"但是增加计算时间\",{\"1\":{\"512\":1}}],[\"但是如果我们把statement内的代码\",{\"1\":{\"898\":1}}],[\"但是如果\",{\"1\":{\"711\":1}}],[\"但是如果输入的元素集合不具有一定的规律\",{\"1\":{\"508\":1}}],[\"但是如果全查询数据非常大\",{\"1\":{\"21\":1}}],[\"但是f\",{\"1\":{\"506\":1}}],[\"但是我们知道\",{\"1\":{\"483\":1}}],[\"但是我们想做到中英混搭的效果\",{\"1\":{\"73\":1}}],[\"但是没有返回值\",{\"1\":{\"475\":1}}],[\"但是比忙碌旋转策略\",{\"1\":{\"471\":1,\"472\":1}}],[\"但是double\",{\"1\":{\"445\":1}}],[\"但是docker引擎并不会为新启动的docker容器配置任何的网络信息\",{\"1\":{\"250\":1}}],[\"但是docker并非虚拟机技术\",{\"1\":{\"232\":1}}],[\"但是最后结果是5\",{\"1\":{\"440\":1}}],[\"但是结果不是5\",{\"1\":{\"440\":2}}],[\"但是消耗cpu\",{\"1\":{\"317\":1}}],[\"但是在实际的系统里\",{\"1\":{\"825\":1}}],[\"但是在写线程访问时\",{\"1\":{\"818\":1}}],[\"但是在连接数少并且连接都十分活跃的情况下\",{\"1\":{\"807\":1}}],[\"但是在执行拼接操作之前\",{\"1\":{\"619\":1}}],[\"但是在正则匹配之后\",{\"1\":{\"306\":1}}],[\"但是在一个指定端口上只可以绑定一个容器\",{\"1\":{\"251\":1}}],[\"但是在一些场景下我们需要实现线程的重入\",{\"1\":{\"218\":1}}],[\"但是它造成了伤害\",{\"1\":{\"898\":1}}],[\"但是它没有最大连接数的限制\",{\"1\":{\"803\":1}}],[\"但是它实际上等于0\",{\"1\":{\"445\":1}}],[\"但是它将容器直接暴露在公共网络\",{\"1\":{\"255\":1}}],[\"但是它不能保证每次服务请求的可用性\",{\"1\":{\"198\":1}}],[\"但是实际上是有本质的区别\",{\"1\":{\"234\":1}}],[\"但是一些动态资源\",{\"1\":{\"222\":1}}],[\"但是通常来说大型的网站都会返回cname\",{\"1\":{\"222\":1}}],[\"但是由于记忆起来比较困难\",{\"1\":{\"222\":1}}],[\"但是由于同一个表被分配在不同的数据库\",{\"1\":{\"131\":1}}],[\"但是其实背后是无数的工程师在恢复数据\",{\"1\":{\"203\":1}}],[\"但是过了一段时间\",{\"1\":{\"202\":1}}],[\"但是过了一会系统提示你下单失败\",{\"1\":{\"202\":1}}],[\"但是他并不是个分布式系统\",{\"1\":{\"196\":1}}],[\"但是依然没有解决单表数据量过大的问题\",{\"1\":{\"130\":1}}],[\"但是会出现脏读\",{\"1\":{\"106\":1}}],[\"但是会影响效率\",{\"1\":{\"19\":1}}],[\"但是不明显指定是哪一个处理者对象会处理此请求\",{\"1\":{\"825\":1}}],[\"但是不稳定\",{\"1\":{\"102\":1}}],[\"但是不要存储太多的分区和文件夹目录\",{\"1\":{\"26\":1}}],[\"但是不要在生产环境下每次索引一个文档都去手动刷新\",{\"1\":{\"4\":1}}],[\"但是却无法进行范围查询\",{\"1\":{\"102\":1}}],[\"但是数据的一致性就出现了问题\",{\"1\":{\"67\":1}}],[\"但是hive不支持\",{\"1\":{\"25\":1}}],[\"但是右外连接\",{\"1\":{\"23\":1}}],[\"但是这样做往往会把一系列对象都变成\",{\"1\":{\"921\":1}}],[\"但是这个也是会重复的网上说法木有参考性\",{\"1\":{\"205\":1}}],[\"但是这种操作\",{\"1\":{\"23\":1}}],[\"但是这里新段会被先写入到文件系统缓存\",{\"1\":{\"4\":1}}],[\"但是\",{\"1\":{\"21\":1,\"302\":1,\"381\":1,\"448\":1,\"454\":1,\"620\":1,\"706\":1,\"922\":1}}],[\"但是合并的过程会影响到hadoop重启的速度\",{\"1\":{\"19\":1}}],[\"图形化管理数据库\",{\"1\":{\"846\":1}}],[\"图形化卸载\",{\"1\":{\"835\":1}}],[\"图形化界面方式安装\",{\"1\":{\"834\":1}}],[\"图解公钥私钥\",{\"0\":{\"705\":1}}],[\"图例则是core2\",{\"1\":{\"663\":1}}],[\"图片来自\",{\"1\":{\"662\":1,\"664\":1}}],[\"图具有3级缓存的处理器\",{\"1\":{\"662\":1}}],[\"图中的链也是信任链\",{\"1\":{\"684\":1}}],[\"图中使用五个空格来表示五字节的未使用空间\",{\"1\":{\"616\":1}}],[\"图中所示\",{\"1\":{\"157\":1,\"161\":1}}],[\"图3\",{\"1\":{\"126\":1}}],[\"图\",{\"1\":{\"119\":1,\"124\":1,\"125\":1,\"126\":1,\"616\":1,\"617\":1,\"618\":1}}],[\"图像可搜索并立即从海量数据库中返回最相似的图像\",{\"1\":{\"55\":1}}],[\"图像相似性搜索\",{\"1\":{\"55\":1}}],[\"图2\",{\"1\":{\"4\":1,\"125\":1,\"127\":1,\"616\":1}}],[\"图1\",{\"1\":{\"4\":1,\"124\":1,\"127\":1}}],[\"并用新建的节点将原有的tail替代\",{\"1\":{\"929\":1}}],[\"并消除原先的类\",{\"1\":{\"919\":1}}],[\"并消费可用事件\",{\"1\":{\"450\":1}}],[\"并因而企图以各样的钩子和特殊情况来处理一些非必要的事情\",{\"1\":{\"919\":1}}],[\"并添加一个类来应付这些变化\",{\"1\":{\"918\":1}}],[\"并添加基础配置信息\",{\"1\":{\"401\":1}}],[\"并以其用途命名\",{\"1\":{\"910\":1}}],[\"并以承租人支付租金为条件\",{\"1\":{\"187\":1}}],[\"并利用查询函数\",{\"1\":{\"904\":1}}],[\"并利用欧式距离计算相似度\",{\"1\":{\"58\":1}}],[\"并生成对应执行计划\",{\"1\":{\"863\":1}}],[\"并修改安装目录的所属组给\",{\"1\":{\"832\":1}}],[\"并修改位置\",{\"1\":{\"21\":1}}],[\"并时不时的打听自己的饭做好了没有\",{\"1\":{\"791\":1}}],[\"并根据代码结构和业务逻辑判断\",{\"1\":{\"765\":1}}],[\"并让这些线程都处于睡眠状态\",{\"1\":{\"751\":1}}],[\"并进行相应调整\",{\"1\":{\"731\":1}}],[\"并进入time\",{\"1\":{\"649\":1}}],[\"并保证每个线程都能拥有对该int的可见性和原子修改\",{\"1\":{\"723\":1}}],[\"并保证主从数据一致\",{\"1\":{\"342\":1}}],[\"并发编程总结\",{\"0\":{\"723\":1}}],[\"并发访问不需要同步\",{\"1\":{\"529\":1}}],[\"并自主设计了双数字证书认证结构\",{\"1\":{\"692\":1}}],[\"并能够抵御病毒和物理干扰\",{\"1\":{\"684\":1}}],[\"并和resource\",{\"1\":{\"655\":1}}],[\"并与node\",{\"1\":{\"653\":1}}],[\"并与承办银行核对后将审核结果报送省级再担保机构\",{\"1\":{\"189\":1}}],[\"并下发这些任务到\",{\"1\":{\"627\":1}}],[\"并读取具体的\",{\"1\":{\"627\":1}}],[\"并为将来可能有的增长操作提供了优化\",{\"1\":{\"622\":1}}],[\"并没有办法进行回收\",{\"1\":{\"650\":1}}],[\"并没有\",{\"1\":{\"645\":1}}],[\"并没有释放多出来的\",{\"1\":{\"622\":1}}],[\"并没有说这两次执行是在同一个事务中\",{\"1\":{\"72\":1}}],[\"并等待将来使用\",{\"1\":{\"622\":1}}],[\"并说明\",{\"1\":{\"617\":1}}],[\"并组成成为一个完整的\",{\"1\":{\"563\":1}}],[\"并组织成为一个完整的java应用程序\",{\"1\":{\"558\":1}}],[\"并支持https协议\",{\"1\":{\"515\":1}}],[\"并把这些信息汇报给调度器\",{\"1\":{\"656\":1}}],[\"并把这两个库分散到不同的服务器\",{\"1\":{\"130\":1}}],[\"并把可访问的url记录下来\",{\"1\":{\"497\":1}}],[\"并向开发人员发送确认合并的通知\",{\"1\":{\"488\":1}}],[\"并向用户返回这个元素\",{\"1\":{\"135\":2}}],[\"并分享url给开发人员\",{\"1\":{\"488\":1}}],[\"并会返回一个新的\",{\"1\":{\"475\":1}}],[\"并提示给用户\",{\"1\":{\"413\":1}}],[\"并提⾼响应⾄客户端的速度\",{\"1\":{\"317\":1}}],[\"并路由到不同端口的实例上\",{\"1\":{\"408\":1}}],[\"并开启feign的熔断器功能\",{\"1\":{\"396\":1,\"416\":1}}],[\"并开始搜索与更改后的uri相匹配的location\",{\"1\":{\"309\":1}}],[\"并继续搜索正则匹配模式\",{\"1\":{\"307\":1}}],[\"并增加运维维护成本\",{\"1\":{\"265\":1}}],[\"并增加了系统的复杂性\",{\"1\":{\"206\":1}}],[\"并执行当前任务\",{\"1\":{\"761\":1}}],[\"并执行其\",{\"1\":{\"711\":1}}],[\"并执行命令\",{\"1\":{\"262\":1}}],[\"并执行combine\",{\"1\":{\"36\":1}}],[\"并指定扫描范围\",{\"1\":{\"397\":1,\"416\":1}}],[\"并指定网络为刚才我们创建的\",{\"1\":{\"262\":1}}],[\"并指定网络类型为host模式\",{\"1\":{\"255\":1}}],[\"并指定为udp模式\",{\"1\":{\"254\":1}}],[\"并对服务器的进行具体操作\",{\"1\":{\"234\":1}}],[\"并共同向总行和国家融资担保基金申报\",{\"1\":{\"189\":1}}],[\"并及时向金融监管部门和财政部报告\",{\"1\":{\"189\":1}}],[\"并及时对相关业务数据进行调整\",{\"1\":{\"189\":1}}],[\"并将\",{\"1\":{\"621\":1}}],[\"并将记录存入\",{\"1\":{\"511\":1}}],[\"并将处理结果返给client\",{\"1\":{\"433\":1}}],[\"并将结果报送国家融资担保基金\",{\"1\":{\"189\":1}}],[\"并将元素item添加到集合dest\",{\"1\":{\"135\":1}}],[\"并报送银行分行\",{\"1\":{\"189\":1}}],[\"并受承办担保机构委托指导企业签订委托担保合同等法律文件\",{\"1\":{\"189\":1}}],[\"并委托银行分行管理\",{\"1\":{\"189\":1}}],[\"并通过http或者grpc方式发送数据到skywalking\",{\"1\":{\"706\":1}}],[\"并通过其在出口人所在地的代理行或往来行\",{\"1\":{\"176\":1}}],[\"并通过client\",{\"1\":{\"19\":1}}],[\"并交纳一定的开证押金或提供其它保证\",{\"1\":{\"176\":1}}],[\"并按照规定和程序追究相关人员责任\",{\"1\":{\"189\":1}}],[\"并按照分值从大到小的顺序来返回它们\",{\"1\":{\"138\":1}}],[\"并按规定随附装运单据\",{\"1\":{\"176\":1}}],[\"并明确长度\",{\"1\":{\"157\":1}}],[\"并尝试\",{\"1\":{\"154\":1}}],[\"并不真实存在\",{\"1\":{\"809\":1}}],[\"并不真正将内存返回给操作系统\",{\"1\":{\"751\":1}}],[\"并不再需要去进行加锁或者解锁操作\",{\"1\":{\"673\":1}}],[\"并不是一个一个字节使用\",{\"1\":{\"662\":1}}],[\"并不能单独启动\",{\"1\":{\"706\":1}}],[\"并不能满足\",{\"1\":{\"617\":1}}],[\"并不能直接降低\",{\"1\":{\"160\":1}}],[\"并不限制服务处理的返回时间\",{\"1\":{\"396\":1}}],[\"并不确保缓冲区的内容一定能够写入硬盘\",{\"1\":{\"147\":1}}],[\"并不适用\",{\"1\":{\"140\":1}}],[\"并返回旧的节点\",{\"1\":{\"929\":1}}],[\"并返回旧值\",{\"1\":{\"444\":1}}],[\"并返回等待执行任务的列表\",{\"1\":{\"764\":1}}],[\"并返回被移除成员的数量\",{\"1\":{\"137\":1}}],[\"并返回被移除的元素\",{\"1\":{\"135\":1}}],[\"并返回被移除元素的数量\",{\"1\":{\"135\":1}}],[\"并返回被添加元素当中原本并不存在于集合里面的元素数量\",{\"1\":{\"135\":1}}],[\"并返回文件url\",{\"1\":{\"63\":1}}],[\"并集\",{\"1\":{\"133\":1}}],[\"并列出相应的链表和链表节点\",{\"1\":{\"118\":1}}],[\"并降低写操作的性能\",{\"1\":{\"100\":1}}],[\"并在服务类上建立客户所需要的所有函数\",{\"1\":{\"921\":1}}],[\"并在很多领域开展了规模应用\",{\"1\":{\"688\":1}}],[\"并在确认完成担保收费后放款\",{\"1\":{\"189\":1}}],[\"并在项目有追偿回款后按补偿比例收回补偿款项\",{\"1\":{\"165\":1}}],[\"并在自己的事务中运行\",{\"1\":{\"72\":1}}],[\"并在必要时对数据进行合并\",{\"1\":{\"42\":1}}],[\"并非任意的对数据库的操作序列都是数据库事务\",{\"1\":{\"65\":1}}],[\"并非所有的数据集都可形成合理的分区\",{\"1\":{\"27\":1}}],[\"并存储当前图片的路径\",{\"1\":{\"58\":1}}],[\"并显示相似声音\",{\"1\":{\"55\":1}}],[\"并针对某一篇数据进行判断\",{\"1\":{\"45\":1}}],[\"并写入一个环形内存缓冲区中\",{\"1\":{\"41\":1}}],[\"并产生一系列新的\",{\"1\":{\"40\":1}}],[\"并作为远程仓库的master分支\",{\"1\":{\"499\":1}}],[\"并作为\",{\"1\":{\"93\":1}}],[\"并作为wordcount的结果输出\",{\"1\":{\"37\":1}}],[\"并作为apache许可条款下的开放源码发布\",{\"1\":{\"4\":1}}],[\"并\",{\"1\":{\"19\":1,\"20\":1}}],[\"并且做相应的调整\",{\"1\":{\"902\":1}}],[\"并且为用户所满意的概率\",{\"1\":{\"898\":1}}],[\"并且为空字符分配额外的\",{\"1\":{\"616\":1}}],[\"并且保持锁的时间段\",{\"1\":{\"813\":1}}],[\"并且已经创建的线程数小于最大线程数\",{\"1\":{\"756\":1}}],[\"并且只有在确保其它线程不会造成干扰的情况下执行\",{\"1\":{\"727\":1}}],[\"并且只抛出非受检的异常\",{\"1\":{\"475\":1}}],[\"并且不同状态下有不同的行为\",{\"1\":{\"906\":1}}],[\"并且不需要创建新的进程或者线程\",{\"1\":{\"808\":1}}],[\"并且不限于实现用于创建运行时代理的接口\",{\"1\":{\"714\":1}}],[\"并且不是偏向自己\",{\"1\":{\"673\":1}}],[\"并且执行结果也不包含系统故障引起的差错\",{\"1\":{\"704\":1}}],[\"并且每个任务执行时间较短\",{\"1\":{\"757\":1}}],[\"并且每个请求任务处理需要1秒钟\",{\"1\":{\"651\":1}}],[\"并且每一个文件要足够大\",{\"1\":{\"26\":1}}],[\"并且包括可能从很多很远的服务器或者不起作用的服务器上去获取对应的ip的过程\",{\"1\":{\"651\":1}}],[\"并且导致应用服务崩溃\",{\"1\":{\"651\":1}}],[\"并且是互相不会影响的\",{\"1\":{\"650\":1}}],[\"并且把服务器发来ack的序号字段+1\",{\"1\":{\"648\":1}}],[\"并且也只是数据报文的搬运工\",{\"1\":{\"639\":1}}],[\"并且总会在为\",{\"1\":{\"624\":1}}],[\"并且除了字符串的末尾之外\",{\"1\":{\"623\":1}}],[\"并且需要对\",{\"1\":{\"621\":1}}],[\"并且可能需要执行系统调用\",{\"1\":{\"620\":1}}],[\"并且可以将这些数据库部署在不同的服务器上\",{\"1\":{\"130\":1}}],[\"并且可以通过future的get\",{\"1\":{\"762\":1}}],[\"并且可以通过构造函数来配置他们的关系\",{\"1\":{\"612\":1}}],[\"并且可以通过\",{\"1\":{\"119\":1}}],[\"并且可以通过增删节点来灵活地调整链表的长度\",{\"1\":{\"118\":1}}],[\"并且拼接之后的字符串也正好是\",{\"1\":{\"619\":1}}],[\"并且字符数组的最后一个元素总是空字符\",{\"1\":{\"617\":1}}],[\"并且它支持\",{\"1\":{\"515\":1}}],[\"并且提供了函数式编程的能力\",{\"1\":{\"475\":1}}],[\"并且提供安全的账号管理可以管理只有自己可见的私人image\",{\"1\":{\"234\":1}}],[\"并且callable接口是一个泛型接口\",{\"1\":{\"475\":1}}],[\"并且通知所有人都知道\",{\"1\":{\"458\":1}}],[\"并且比\",{\"1\":{\"446\":1}}],[\"并且将定义的信息保存起来\",{\"1\":{\"381\":1}}],[\"并且能减少动态url对外暴露过多的参数\",{\"1\":{\"308\":1}}],[\"并且在数据段放写isn发完毕后\",{\"1\":{\"648\":1}}],[\"并且在正则之前\",{\"1\":{\"306\":1}}],[\"并且在不影响性能的前提下可以被频繁地执行\",{\"1\":{\"4\":1}}],[\"并且更新数据不会影响镜像\",{\"1\":{\"262\":1}}],[\"并且还有一些cd盘在系统的基础上安装了必要的软件\",{\"1\":{\"234\":1}}],[\"并且设置一个ttl\",{\"1\":{\"222\":1}}],[\"并且返回name\",{\"1\":{\"222\":1}}],[\"并且分为4种\",{\"1\":{\"214\":1}}],[\"并且要想尽办法提升p\",{\"1\":{\"196\":1}}],[\"并且\",{\"1\":{\"155\":1,\"452\":1}}],[\"并且被包含的每个字符串都是独一无二\",{\"1\":{\"133\":1}}],[\"并且商品库属于访问频率非常高的资源\",{\"1\":{\"131\":1}}],[\"并且商品详细描述信息数据存储占用空间较大\",{\"1\":{\"129\":1}}],[\"并且磁盘空间也快不够了\",{\"1\":{\"130\":1}}],[\"并且对于大表来说也拆分为若干小表\",{\"1\":{\"128\":1}}],[\"并且对数据进行了修改\",{\"1\":{\"72\":1}}],[\"并且算法的计算速度也非常快\",{\"1\":{\"127\":1}}],[\"并且edits文件和fsimage文件会secondarynamenode周期性地合并\",{\"1\":{\"18\":1}}],[\"并接受它的不足\",{\"1\":{\"4\":1}}],[\"这么做其它数据有没有因而失去意义\",{\"1\":{\"914\":1}}],[\"这么一来才不会遗忘我曾经理解的东西\",{\"1\":{\"901\":1}}],[\"这暗示getcharge应该移动到movie中\",{\"1\":{\"905\":1}}],[\"这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任\",{\"1\":{\"825\":1}}],[\"这使得加载和存储操作看上去可能是在乱序执行\",{\"1\":{\"809\":1}}],[\"这三种锁使得jdk得以优化synchronized的运行\",{\"1\":{\"723\":1}}],[\"这三行元素定义了一个项目的基本坐标\",{\"1\":{\"578\":1}}],[\"这封信确实是鲍勃发出的\",{\"1\":{\"705\":1}}],[\"这封信就是安全的\",{\"1\":{\"705\":1}}],[\"这相当于synchronized来说可以避免出现死锁的情况\",{\"1\":{\"703\":1}}],[\"这相当于是从负责人那拷贝了一份项目副本\",{\"1\":{\"488\":1}}],[\"这称为缓存未命中\",{\"1\":{\"662\":1}}],[\"这会对延迟产生负面影响\",{\"1\":{\"662\":1}}],[\"这块内存主要是被jvm存放class和meta信息的\",{\"1\":{\"651\":1}}],[\"这两个\",{\"1\":{\"809\":1}}],[\"这两个指令是什么意思呢\",{\"1\":{\"723\":1}}],[\"这两个值的大小一般根据需要进行设置\",{\"1\":{\"651\":1}}],[\"这两个附加的操作是\",{\"1\":{\"530\":1}}],[\"这确保了获取字符串长度的工作不会成为\",{\"1\":{\"618\":1}}],[\"这部分信息是服务段用私钥加密后的信息\",{\"1\":{\"522\":1}}],[\"这部分传送的是用证书加密后的随机值\",{\"1\":{\"522\":1}}],[\"这部分工作是有客户端的tls来完成的\",{\"1\":{\"522\":1}}],[\"这套证书其实就是一对公钥和私钥\",{\"1\":{\"522\":1}}],[\"这太好了\",{\"1\":{\"453\":1}}],[\"这无疑也增加了程序发生相关指针问题的风险\",{\"1\":{\"442\":1}}],[\"这要根据你的ioc容器来决定\",{\"1\":{\"381\":1}}],[\"这能够有效地节约带宽\",{\"1\":{\"317\":1}}],[\"这条命令是master执行init时生成的\",{\"1\":{\"294\":1}}],[\"这对业务来说是十分不友好的\",{\"1\":{\"219\":1}}],[\"这10位可以由\",{\"1\":{\"205\":1}}],[\"这其实是分布式领域的另外一个理论\",{\"1\":{\"203\":1}}],[\"这其实也不准确的\",{\"1\":{\"202\":1}}],[\"这其实就是先在可用性方面保证系统可以正常的服务\",{\"1\":{\"202\":1}}],[\"这也说明了所有对象都是可偏向的\",{\"1\":{\"673\":1}}],[\"这也是我们经常所说的锁膨胀\",{\"1\":{\"829\":1}}],[\"这也是我们将\",{\"1\":{\"623\":1}}],[\"这也是为什么会有偏向锁出现的原因\",{\"1\":{\"673\":1}}],[\"这也是为什么在前面的cap证明中\",{\"1\":{\"196\":1}}],[\"这也是提交之前所需要执行的一步\",{\"1\":{\"497\":1,\"503\":1}}],[\"这也要费时间\",{\"1\":{\"100\":1}}],[\"这降低了担保公司的单一风险敞口\",{\"1\":{\"167\":1}}],[\"这意味着当担保公司已经为某笔贷款提供了担保\",{\"1\":{\"167\":1}}],[\"这可能包括推广新的业务模式\",{\"1\":{\"166\":1}}],[\"这可以保证每个\",{\"1\":{\"23\":1}}],[\"这包括确保所有参与者遵守相同的准则\",{\"1\":{\"166\":1}}],[\"这通常通过引入第三方担保机构或采用其他信用增强措施来实现\",{\"1\":{\"166\":1}}],[\"这四个词经常被用来描述再担保公司的核心功能\",{\"1\":{\"166\":1}}],[\"这四个属性通常称为acid特性\",{\"1\":{\"65\":1}}],[\"这表示包含键值对\",{\"1\":{\"127\":1}}],[\"这涉及到查询语句所要求的字段是否全部命中了索引\",{\"1\":{\"103\":1}}],[\"这一系列步骤称之为总线事务\",{\"1\":{\"809\":1}}],[\"这一点前面也已经讲过\",{\"1\":{\"809\":1}}],[\"这一点前面已经讲过了\",{\"1\":{\"809\":1}}],[\"这一点我们前面\",{\"1\":{\"100\":1}}],[\"这一种散列码实现简单\",{\"1\":{\"508\":1}}],[\"这一步代价比较高\",{\"1\":{\"4\":1}}],[\"这一步代价会比较低\",{\"1\":{\"4\":1}}],[\"这\",{\"1\":{\"100\":1}}],[\"这里旧的节点实际上就是当前节点的前驱节点\",{\"1\":{\"929\":1}}],[\"这里的关键是\",{\"1\":{\"809\":1}}],[\"这里的的开始时间截\",{\"1\":{\"205\":1}}],[\"这里就不再赘述\",{\"1\":{\"809\":2}}],[\"这里对象头大小为12字节\",{\"1\":{\"722\":1}}],[\"这里要强调的是\",{\"1\":{\"705\":1}}],[\"这里我们覆盖了chanelread\",{\"1\":{\"613\":1}}],[\"这里把文件写入对象和字符流写入对象分开写了\",{\"1\":{\"541\":1}}],[\"这里有true的话\",{\"1\":{\"539\":1}}],[\"这里需要进行抛出异常处理\",{\"1\":{\"539\":1}}],[\"这里和lamda一起使用了\",{\"1\":{\"527\":1}}],[\"这里所说的车道便是partition\",{\"1\":{\"430\":1}}],[\"这里表示压缩级别\",{\"1\":{\"317\":1}}],[\"这里表示如果文件小于10个字节\",{\"1\":{\"317\":1}}],[\"这里设置以16k为单位\",{\"1\":{\"317\":1}}],[\"这里指定阿里云镜像仓库地址\",{\"1\":{\"293\":1}}],[\"这里指定版本号部署\",{\"1\":{\"292\":1}}],[\"这里写logstash启动的监听地址和端口\",{\"1\":{\"275\":1,\"277\":1}}],[\"这里主要对es和kibana的主配置文件进行配置\",{\"1\":{\"269\":1}}],[\"这里以编译nginx提供web服务来构建新的镜像\",{\"1\":{\"243\":1}}],[\"这里查找本地的host文件\",{\"1\":{\"222\":1}}],[\"这里给出简易的代码实现\",{\"1\":{\"220\":1}}],[\"这里你设置越大\",{\"1\":{\"74\":1}}],[\"这里是最后一次ack吗\",{\"1\":{\"14\":1}}],[\"这时就无需再让线程执行阻塞操作\",{\"1\":{\"723\":1}}],[\"这时就需要加上大小为3字节的padding进行8字节对齐\",{\"1\":{\"722\":1}}],[\"这时就需要重新创建token\",{\"1\":{\"294\":1}}],[\"这时就需要进行水平分库了\",{\"1\":{\"131\":1}}],[\"这时如果不支持重入\",{\"1\":{\"723\":1}}],[\"这时及时产生冲突\",{\"1\":{\"513\":1}}],[\"这时候就应该移除中间人\",{\"1\":{\"922\":1}}],[\"这时候我们可以隐藏\",{\"1\":{\"921\":1}}],[\"这时候只需对两个类抽取方法\",{\"1\":{\"909\":1}}],[\"这时候可以采用抽取方法提炼出重复的代码\",{\"1\":{\"909\":1}}],[\"这时候如果你需要将它放到远程服务器上\",{\"1\":{\"497\":1}}],[\"这时候进行redo的region应该是unavailable的\",{\"1\":{\"199\":1}}],[\"这时\",{\"1\":{\"72\":1,\"256\":1,\"621\":1}}],[\"这时用户可能就需要执行那些一天执行一次的处理过程\",{\"1\":{\"27\":1}}],[\"这种坏味道就会被嗅出\",{\"1\":{\"917\":1}}],[\"这种变化带有不稳定性倾向\",{\"1\":{\"905\":1}}],[\"这种切换代价十分昂贵\",{\"1\":{\"723\":1}}],[\"这种可信依赖更多地指系统的可靠性\",{\"1\":{\"684\":1}}],[\"这种现象既不是\",{\"1\":{\"619\":1}}],[\"这种现象就是冲突\",{\"1\":{\"506\":1}}],[\"这种方法就不必循环打印数据了\",{\"1\":{\"545\":1}}],[\"这种方式意味着客户代码将与某些功能函数中的导航结构紧密耦合\",{\"1\":{\"921\":1}}],[\"这种方式稍微复杂一些\",{\"1\":{\"497\":1}}],[\"这种方式比进行一次提交代价要小得多\",{\"1\":{\"4\":1}}],[\"这种192\",{\"1\":{\"526\":1}}],[\"这种等待策略应该被认为是实验性的\",{\"1\":{\"466\":1,\"472\":1}}],[\"这种策略会利用cpu资源来避免系统调用带来的延迟抖动\",{\"1\":{\"465\":1,\"472\":1}}],[\"这种策略会利用cpu资源来避免系统调用带来的延迟抖动当线程可以绑定到指定cpu\",{\"1\":{\"458\":1}}],[\"这种策略延迟不均匀\",{\"1\":{\"458\":1}}],[\"这种记录允许您将多个名字映射到另外一个域名\",{\"1\":{\"222\":1}}],[\"这种uuid产生重复的概率是可以计算出来的\",{\"1\":{\"208\":1}}],[\"这种舍弃强一致性而保证系统的分区容错性和可用性的场景和案例非常多\",{\"1\":{\"201\":1}}],[\"这种情况可以先找出这些数据以字段形式出现的地方\",{\"1\":{\"914\":1}}],[\"这种情况可以把所有需要的代码放进同一个类\",{\"1\":{\"912\":1}}],[\"这种情况下\",{\"1\":{\"302\":1,\"773\":1}}],[\"这种情况在分布式系统中几乎是不存在的\",{\"1\":{\"196\":1}}],[\"这种情况被称为是不可重复读\",{\"1\":{\"72\":1}}],[\"这种保函通常在工程建设领域得到广泛应用\",{\"1\":{\"184\":1}}],[\"这种保障不仅仅是为了确保债务得到清偿\",{\"1\":{\"168\":1}}],[\"这种合作有助于优化担保流程\",{\"1\":{\"167\":1}}],[\"这种双重担保机制增强了担保公司的信用能力\",{\"1\":{\"167\":1}}],[\"这种事务可以让一个客户端在不被其他客户端打断的情况下执行多个命令\",{\"1\":{\"139\":1}}],[\"这种事务隔离级别可以防止脏读\",{\"1\":{\"70\":1}}],[\"这种算法的优点在于\",{\"1\":{\"127\":1}}],[\"这种判断的子句可以让程序自动完成\",{\"1\":{\"82\":1}}],[\"这种存大量文字或者存图片的大数据类型\",{\"1\":{\"82\":1}}],[\"这种抽样方式不一定适用于所有的文件格式\",{\"1\":{\"24\":1}}],[\"这种是基于行数的\",{\"1\":{\"24\":1}}],[\"这是还有一些代码\",{\"1\":{\"924\":1}}],[\"这是给一家出租店用的程序\",{\"1\":{\"898\":1}}],[\"这是否是在浪费客户的投资呢\",{\"1\":{\"898\":1}}],[\"这是很重要的\",{\"1\":{\"786\":1}}],[\"这是很致命的问题\",{\"1\":{\"711\":1}}],[\"这是开发者不愿意看到的\",{\"1\":{\"722\":1}}],[\"这是为了让那些保存文本数据的\",{\"1\":{\"624\":1}}],[\"这是玩家都到齐之后会执行的代码\",{\"1\":{\"552\":1}}],[\"这是java中一个内置的包\",{\"1\":{\"537\":1}}],[\"这是某一子网掩码下可分配的实际子网数量\",{\"1\":{\"526\":1}}],[\"这是一种较为简单的初始化方式\",{\"1\":{\"497\":1}}],[\"这是一种不负责任的表现\",{\"1\":{\"413\":1}}],[\"这是一条描述信息\",{\"1\":{\"414\":1}}],[\"这是一个文件输入流\",{\"1\":{\"539\":1}}],[\"这是一个极高的要求\",{\"1\":{\"194\":1}}],[\"这是一个逻辑结构\",{\"1\":{\"20\":1}}],[\"这是保证ca\",{\"1\":{\"203\":1}}],[\"这是强一致性\",{\"1\":{\"193\":1}}],[\"这是最重要的字段之一\",{\"1\":{\"113\":1}}],[\"这是事务最低的隔离级别\",{\"1\":{\"106\":1}}],[\"这是花费最高代价但最可靠的事务隔离级别\",{\"1\":{\"71\":1}}],[\"这是因为对象指针在64位jvm下有更宽的寻址\",{\"1\":{\"722\":1}}],[\"这是因为0\",{\"1\":{\"445\":1}}],[\"这是因为我们在选取排序规则时\",{\"1\":{\"73\":1}}],[\"这是因为\",{\"1\":{\"23\":1}}],[\"这个字段不能是private的\",{\"1\":{\"929\":1}}],[\"这个操作是原子性的\",{\"1\":{\"929\":1}}],[\"这个操作的复杂度为\",{\"1\":{\"618\":1}}],[\"这个测试必须有自我检验能力\",{\"1\":{\"899\":1}}],[\"这个变化的影响是\",{\"1\":{\"898\":1}}],[\"这个处理者对象是动态确定的\",{\"1\":{\"825\":1}}],[\"这个链可能由复合模式给出\",{\"1\":{\"825\":1}}],[\"这个会导致系统在用户态与内核态之间来回切换\",{\"1\":{\"812\":1}}],[\"这个差异与处理器总线的工作机制密切相关\",{\"1\":{\"809\":1}}],[\"这个空闲线程将终止\",{\"1\":{\"773\":1}}],[\"这个poll操作会让空闲线程最多在synchronousqueue中等待60秒钟\",{\"1\":{\"773\":1}}],[\"这个pool存在哪里呢\",{\"1\":{\"683\":1}}],[\"这个参数基本没用\",{\"1\":{\"756\":1}}],[\"这个排序被称为类的自然排序\",{\"1\":{\"735\":1}}],[\"这个接口往往是可比较类实现的\",{\"1\":{\"735\":1}}],[\"这个特定的手段就是\",{\"1\":{\"712\":1}}],[\"这个协议主要用于网页加密\",{\"1\":{\"705\":1}}],[\"这个信任根置于主板\",{\"1\":{\"689\":1}}],[\"这个锁会偏向于第一个获得它的线程\",{\"1\":{\"673\":1}}],[\"这个解决问题了\",{\"1\":{\"651\":1}}],[\"这个问题主要还是由这个问题\",{\"1\":{\"651\":1}}],[\"这个值表示tomcat可创建的最大的线程数\",{\"1\":{\"651\":1}}],[\"这个值默认是300\",{\"1\":{\"74\":1}}],[\"这个例子中\",{\"1\":{\"613\":2}}],[\"这个组往往和项目所在的组织或公司存在关联\",{\"1\":{\"578\":1}}],[\"这个动作在后面的解析过程中发生\",{\"1\":{\"563\":1}}],[\"这个对象需要占用8+4+1=13个字节\",{\"1\":{\"722\":1}}],[\"这个对象将是可被回收的\",{\"1\":{\"558\":1}}],[\"这个对象一直被缓存引用\",{\"1\":{\"558\":1}}],[\"这个对象却一直被引用\",{\"1\":{\"558\":1}}],[\"这个对象由ringbuffer创建并且代表消费者与ringbuffer进行交互\",{\"1\":{\"452\":1}}],[\"这个加载过程是由类加载器完成\",{\"1\":{\"558\":1,\"563\":1}}],[\"这个子网掩码是29位\",{\"1\":{\"526\":1}}],[\"这个子句的出现是为了解决\",{\"1\":{\"23\":1}}],[\"这个证书其实就是公钥\",{\"1\":{\"522\":1}}],[\"这个没什么好说的\",{\"1\":{\"522\":1}}],[\"这个映射函数叫\",{\"1\":{\"506\":1}}],[\"这个url地址的远程版本库\",{\"1\":{\"497\":1}}],[\"这个不算工作区\",{\"1\":{\"490\":1}}],[\"这个方法做的事情太多\",{\"1\":{\"898\":1}}],[\"这个方法会在收到消息时被调用\",{\"1\":{\"613\":1}}],[\"这个方法不会合并结果\",{\"1\":{\"475\":1}}],[\"这个方法确保了相同的客户端的请求一直发送到相同的服务器\",{\"1\":{\"301\":1}}],[\"这个类主要是提供发布事件\",{\"1\":{\"472\":1}}],[\"这个类里的sequences数组可以动态的进行增加\",{\"1\":{\"472\":1}}],[\"这个策略不会带来显著的延迟抖动\",{\"1\":{\"471\":1,\"472\":1}}],[\"这个策略会100\",{\"1\":{\"471\":1}}],[\"这个策略是一种比较好的折中方案\",{\"1\":{\"469\":1,\"472\":1}}],[\"这个策略在基准性能测试上是会表现出一些性能提升\",{\"1\":{\"466\":1}}],[\"这个cas机制来完成的增加操作\",{\"1\":{\"443\":1}}],[\"这个\",{\"1\":{\"433\":1,\"616\":3,\"620\":1,\"712\":1}}],[\"这个集群中任何一台机器宕机\",{\"1\":{\"432\":1}}],[\"这个是最原始\",{\"1\":{\"526\":1}}],[\"这个是最关键的东西了\",{\"1\":{\"234\":1}}],[\"这个是链接一小段时间\",{\"1\":{\"477\":1}}],[\"这个是逻辑上的叫法\",{\"1\":{\"429\":1}}],[\"这个时候可以实现对新加载的类进行字节码修改\",{\"1\":{\"711\":1}}],[\"这个时候\",{\"1\":{\"711\":1}}],[\"这个时候请抽取\",{\"1\":{\"413\":1}}],[\"这个时候zookeeper是不能立即响应请求的\",{\"1\":{\"198\":1}}],[\"这个过程称为硬解析\",{\"1\":{\"863\":1}}],[\"这个过程称为软解析\",{\"1\":{\"863\":1}}],[\"这个过程叫做\",{\"1\":{\"433\":1}}],[\"这个过程就是一个资源定位的过程\",{\"1\":{\"381\":1}}],[\"这个过程可能会消耗太漫长的时间来执行\",{\"1\":{\"23\":1}}],[\"这个地址时\",{\"1\":{\"316\":1}}],[\"这个可以压缩指针\",{\"1\":{\"722\":1}}],[\"这个可以不写\",{\"1\":{\"317\":1}}],[\"这个可认为是docker\",{\"1\":{\"234\":1}}],[\"这个可难懂了\",{\"1\":{\"234\":1}}],[\"这个域名就由他们的服务器来解析\",{\"1\":{\"222\":1}}],[\"这个name\",{\"1\":{\"222\":2}}],[\"这个名字我们称作为域名\",{\"1\":{\"222\":1}}],[\"这个版本的uuid保证了\",{\"1\":{\"208\":1}}],[\"这个版本的uuid在实际中较少用到\",{\"1\":{\"208\":1}}],[\"这个版本的uuid可以保证在全球范围的唯一性\",{\"1\":{\"208\":1}}],[\"这个命令在\",{\"1\":{\"139\":1}}],[\"这个命令在redis\",{\"1\":{\"134\":1,\"139\":2}}],[\"这个指针可以将多个哈希值相同的键值对连接在一次\",{\"1\":{\"125\":1}}],[\"这个指标通常用于分子相似性搜索领域\",{\"1\":{\"54\":2}}],[\"这个指标通常用于自然语言处理\",{\"1\":{\"54\":1}}],[\"这个属性和哈希值一起决定一个键应该被放到\",{\"1\":{\"124\":1}}],[\"这个结构带有表头节点指针\",{\"1\":{\"121\":1}}],[\"这个函数太长了\",{\"1\":{\"900\":1}}],[\"这个函数创建成功后\",{\"1\":{\"73\":1}}],[\"这个函数需要在创建表之后定义\",{\"1\":{\"73\":1}}],[\"这个函数会返回一个随机值\",{\"1\":{\"24\":1}}],[\"这个也是gbk的排序效果\",{\"1\":{\"73\":1}}],[\"这个优化也明显地要快于常规的连接操作\",{\"1\":{\"23\":1}}],[\"这个设置会触发map阶段进行\",{\"1\":{\"22\":1}}],[\"这个报告包含了datanode节点上的所有数据块的列表\",{\"1\":{\"19\":1}}],[\"这些工作都是需要花钱的\",{\"1\":{\"918\":1}}],[\"这些总是绑在一起出现的数据真应该拥有属于它们自己的对象\",{\"1\":{\"914\":1}}],[\"这些方案都会影响消费和积分的计算方式\",{\"1\":{\"898\":1}}],[\"这些重排序都可能会导致多线程程序出现内存可见性问题\",{\"1\":{\"809\":1}}],[\"这些记录以\",{\"1\":{\"786\":1}}],[\"这些行为都会记录到日志中\",{\"1\":{\"780\":1}}],[\"这些变量应该放到它们所描述的实体所对应的类中去\",{\"1\":{\"683\":1}}],[\"这些同期由资源管理器分配对节点管理器进行管理\",{\"1\":{\"657\":1}}],[\"这些值在安装后就已经设定为默认值并且是足够使用的\",{\"1\":{\"651\":1}}],[\"这些\",{\"1\":{\"624\":1}}],[\"这些限制使得\",{\"1\":{\"623\":1}}],[\"这些未使用空间就可能会派上用场\",{\"1\":{\"622\":1}}],[\"这些脚本是用来配置java命令的\",{\"1\":{\"572\":1}}],[\"这些文件可以被看成是一个个可以被动态加载的单元\",{\"1\":{\"563\":1}}],[\"这些内存都将在方法区中进行分配\",{\"1\":{\"563\":1}}],[\"这些类被该\",{\"1\":{\"419\":1}}],[\"这些类所属的包及其子包下的所有\",{\"1\":{\"419\":1}}],[\"这些包及其子包下的所有\",{\"1\":{\"419\":1}}],[\"这些表仅供下一个job使用\",{\"1\":{\"27\":1}}],[\"这些数据类型是对\",{\"1\":{\"25\":1}}],[\"这些数据类型在传统的数据库中并不常见\",{\"1\":{\"20\":1}}],[\"这些操作又会不断的持久化到本地edits文件中\",{\"1\":{\"19\":1}}],[\"这样一次锁的请求就可以达到我们的要求\",{\"1\":{\"924\":1}}],[\"这样高频的锁请求就反而不利于系统性能的优化了\",{\"1\":{\"924\":1}}],[\"这样对每个对象就可以只因一种变化而需要修改因为不同的原因\",{\"1\":{\"911\":1}}],[\"这样也是可以理解的\",{\"1\":{\"910\":1}}],[\"这样可在网页上直接显示\",{\"1\":{\"898\":1}}],[\"这样可以省略很多开销\",{\"1\":{\"673\":1}}],[\"这样可以减轻单个担保机构的风险负担\",{\"1\":{\"166\":1}}],[\"这样可以减少网络带宽的消耗\",{\"1\":{\"82\":1}}],[\"这样可以防止hive尝试将其作为数字\",{\"1\":{\"25\":1}}],[\"这样可以提高后面进行的全局排序的效率\",{\"1\":{\"23\":1}}],[\"这样做也就不合理了\",{\"1\":{\"924\":1}}],[\"这样做是有前提的\",{\"1\":{\"924\":1}}],[\"这样做的直接好处是可以将很多参数列缩短\",{\"1\":{\"914\":1}}],[\"这样做稍微安全一些\",{\"1\":{\"897\":1}}],[\"这样做有助于平缓延迟的峰值\",{\"0\":{\"453\":1}}],[\"这样反复操作磁盘\",{\"1\":{\"781\":1}}],[\"这样在调用栈中更高层的代码将看到引发了一个中断\",{\"1\":{\"766\":1}}],[\"这样才能在加载\",{\"1\":{\"709\":1}}],[\"这样将导致对象状态丢失\",{\"1\":{\"683\":1}}],[\"这样设置有隐患的\",{\"1\":{\"651\":1}}],[\"这样设计的巧妙之处有\",{\"1\":{\"14\":1}}],[\"这样始终是同一个线程在处理请求\",{\"1\":{\"650\":1}}],[\"这样能建立可靠的连接\",{\"1\":{\"644\":1}}],[\"这样会消耗一定的时间\",{\"1\":{\"651\":1}}],[\"这样会比使用\",{\"1\":{\"549\":1}}],[\"这样会导致商家超卖\",{\"1\":{\"202\":1}}],[\"这样除非知道私钥\",{\"1\":{\"522\":1}}],[\"这样除非有钥匙\",{\"1\":{\"522\":1}}],[\"这样你既可以扩展原对象的行为\",{\"1\":{\"922\":1}}],[\"这样你就不需要记忆复杂的版本号哈希值了\",{\"1\":{\"501\":1}}],[\"这样你可以在disruptor的协调下实现真正的并发数据处理\",{\"1\":{\"453\":1}}],[\"这样从ioc容器中就可以得到一个依赖注入完成的bean\",{\"1\":{\"381\":1}}],[\"这样每个访客都固定访问一个后端服务器\",{\"1\":{\"301\":1}}],[\"这样\",{\"1\":{\"221\":1,\"445\":1,\"549\":1,\"624\":2}}],[\"这样watch事件的传播是线性的\",{\"1\":{\"214\":1}}],[\"这样表中字段长度较短且访问频率较高\",{\"1\":{\"129\":1}}],[\"这样的代码让人难以理解\",{\"1\":{\"920\":1}}],[\"这样的开销无法承受\",{\"1\":{\"726\":1}}],[\"这样的列集\",{\"1\":{\"100\":1}}],[\"这样的话md5加密就起不到任何作用了\",{\"1\":{\"897\":1}}],[\"这样的话\",{\"1\":{\"73\":1}}],[\"这样就是过度委托\",{\"1\":{\"922\":1}}],[\"这样就会将你的账户就很容易被别人使用\",{\"1\":{\"897\":1}}],[\"这样就使每次的内存回收都是对内存区间的一半进行回收\",{\"1\":{\"557\":1}}],[\"这样就解决了哈希的冲突问题\",{\"1\":{\"513\":1}}],[\"这样就具有好的分区容错性\",{\"1\":{\"195\":1}}],[\"这样就不存在四舍五入了\",{\"1\":{\"82\":1}}],[\"这样就发生了在一个事物内两次连续读到的数据是不一样的\",{\"1\":{\"72\":1}}],[\"这样就大大提高了完成作业的效率\",{\"1\":{\"33\":1}}],[\"这样就可以像操作表一样来操作这个视图了\",{\"1\":{\"20\":1}}],[\"这样效率高且清晰明了\",{\"1\":{\"26\":1}}],[\"这就意味有机会把它们提炼到某个组件内\",{\"1\":{\"910\":1}}],[\"这就意味着\",{\"1\":{\"781\":1,\"782\":1}}],[\"这就需要从用户态切换到内核态来执行\",{\"1\":{\"723\":1}}],[\"这就要学习一下\",{\"1\":{\"650\":1}}],[\"这就能够提升\",{\"1\":{\"221\":1}}],[\"这就说明\",{\"1\":{\"221\":1}}],[\"这就有可能导致超卖现象或者其他并发安全问题\",{\"1\":{\"220\":1}}],[\"这就是消息链\",{\"1\":{\"921\":1}}],[\"这就是一个明确的信号\",{\"1\":{\"914\":1}}],[\"这就是这个软件系统的生命走到尽头的时候\",{\"1\":{\"898\":1}}],[\"这就是锁的升级\",{\"1\":{\"723\":1}}],[\"这就是构建\",{\"1\":{\"568\":1}}],[\"这就是java中可能出现内存泄露的情况\",{\"1\":{\"558\":1}}],[\"这就是java中内存泄露的发生场景\",{\"1\":{\"558\":1}}],[\"这就是最基本的负载均衡实例\",{\"1\":{\"298\":1}}],[\"这就是分布式锁的来源\",{\"1\":{\"212\":1}}],[\"这就是所谓的回表查询\",{\"1\":{\"104\":1}}],[\"这就是为什么我们说\",{\"1\":{\"4\":1}}],[\"这就保证了集群始终维持指定的副本数\",{\"1\":{\"19\":1}}],[\"索引模式\",{\"1\":{\"283\":1,\"285\":1}}],[\"索引不生效的情况\",{\"0\":{\"112\":1}}],[\"索引也用于\",{\"1\":{\"100\":1}}],[\"索引可用于\",{\"1\":{\"100\":1}}],[\"索引太多\",{\"1\":{\"100\":1}}],[\"索引越多\",{\"1\":{\"100\":1}}],[\"索引必须进行更新\",{\"1\":{\"100\":1}}],[\"索引一个列的前缀是利用该的n前个字\",{\"1\":{\"100\":1}}],[\"索引的顺序与原顺序无法保持一致\",{\"1\":{\"102\":1}}],[\"索引的效果最好\",{\"1\":{\"100\":1}}],[\"索引的选择性计算方法\",{\"1\":{\"82\":1}}],[\"索引设计原则\",{\"0\":{\"100\":1}}],[\"索引字段上面不要使用函数\",{\"1\":{\"82\":1}}],[\"索引和管理由深度神经网络和其他机器学习\",{\"1\":{\"50\":1}}],[\"索引\",{\"0\":{\"52\":1},\"1\":{\"4\":1,\"126\":1,\"846\":1,\"888\":1}}],[\"稍后再被刷新到磁盘\",{\"1\":{\"4\":1}}],[\"​\\t后台数据库保存的是用md5算法加密的密码\",{\"1\":{\"897\":1}}],[\"​\\t\",{\"1\":{\"657\":1}}],[\"​\\t\\t有时候你会看到两个类过于亲密\",{\"1\":{\"923\":1}}],[\"​\\t\\t但是select\",{\"1\":{\"808\":1}}],[\"​\\t\\t\",{\"1\":{\"683\":1}}],[\"​\\t\\t对数据准确性要求高\",{\"1\":{\"645\":1}}],[\"​\\t\\t对于其他场景\",{\"1\":{\"203\":1}}],[\"​\\t\\t对于涉及到钱财这样不能有一丝让步的场景\",{\"1\":{\"203\":1}}],[\"​\\t\\ttcp向上层提供面向连接的可靠服务\",{\"1\":{\"645\":1}}],[\"​\\t\\t当一个类收到了类加载请求时\",{\"1\":{\"558\":1}}],[\"​\\t\\t\\t\\tbiglnteger\",{\"1\":{\"549\":2}}],[\"​\\t\\t大数值类中的\",{\"1\":{\"549\":1}}],[\"​\\t\\t所以\",{\"1\":{\"486\":1}}],[\"​\\t\\t上面介绍了如何cap中权衡及取舍以及典型的案例\",{\"1\":{\"203\":1}}],[\"​\\t\\treduce\",{\"1\":{\"49\":1}}],[\"​\\t\\t每一个\",{\"1\":{\"24\":1}}],[\"​\\t\\t尽管刷新是比提交轻量很多的操作\",{\"1\":{\"4\":1}}],[\"​\\thdfs可以检测到数据块损坏\",{\"1\":{\"19\":1}}],[\"​\",{\"1\":{\"4\":4,\"7\":5,\"9\":2,\"14\":22,\"15\":14,\"16\":7,\"17\":4,\"18\":1,\"19\":20,\"20\":7,\"21\":8,\"22\":1,\"23\":17,\"24\":5,\"25\":9,\"27\":7,\"28\":2,\"29\":3,\"33\":9,\"34\":4,\"35\":3,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"63\":1,\"65\":4,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":4,\"73\":2,\"82\":10,\"133\":10,\"139\":4,\"190\":1,\"191\":1,\"192\":3,\"193\":4,\"194\":4,\"195\":3,\"196\":4,\"197\":3,\"199\":2,\"201\":2,\"202\":2,\"212\":1,\"222\":11,\"232\":2,\"234\":1,\"241\":1,\"383\":1,\"384\":2,\"385\":1,\"446\":3,\"448\":1,\"452\":1,\"476\":2,\"481\":3,\"482\":3,\"483\":4,\"484\":3,\"485\":3,\"486\":2,\"506\":5,\"507\":1,\"508\":2,\"509\":1,\"511\":2,\"512\":3,\"513\":2,\"514\":3,\"515\":4,\"520\":3,\"521\":1,\"524\":1,\"527\":1,\"528\":2,\"529\":1,\"530\":1,\"549\":30,\"557\":11,\"558\":22,\"626\":9,\"627\":9,\"629\":4,\"636\":3,\"637\":1,\"638\":6,\"639\":3,\"640\":1,\"641\":1,\"642\":5,\"644\":4,\"650\":2,\"651\":26,\"653\":5,\"654\":2,\"655\":1,\"656\":1,\"657\":5,\"662\":5,\"665\":4,\"667\":3,\"669\":1,\"671\":4,\"672\":5,\"673\":13,\"674\":8,\"682\":2,\"683\":12,\"684\":1,\"686\":1,\"687\":2,\"688\":2,\"689\":1,\"690\":1,\"691\":1,\"692\":1,\"693\":1,\"702\":4,\"703\":3,\"704\":6,\"706\":4,\"707\":1,\"708\":2,\"709\":1,\"710\":2,\"711\":1,\"712\":2,\"714\":1,\"720\":1,\"721\":1,\"722\":41,\"723\":14,\"725\":2,\"727\":10,\"728\":2,\"730\":1,\"731\":2,\"735\":3,\"736\":1,\"748\":3,\"749\":10,\"759\":3,\"781\":2,\"782\":1,\"783\":4,\"784\":2,\"785\":4,\"786\":3,\"795\":2,\"800\":4,\"803\":2,\"806\":6,\"807\":1,\"808\":3,\"809\":3,\"818\":7,\"820\":1,\"821\":2,\"822\":2,\"824\":1,\"825\":9,\"827\":5,\"828\":3,\"897\":8,\"898\":10,\"909\":2,\"910\":4,\"911\":1,\"912\":1,\"913\":1,\"914\":1,\"915\":1,\"916\":1,\"917\":3,\"918\":1,\"919\":1,\"920\":1,\"921\":2,\"922\":1,\"926\":4,\"927\":1,\"928\":1}}],[\"+08\",{\"1\":{\"837\":1}}],[\"+name\",{\"1\":{\"779\":1}}],[\"+1\",{\"1\":{\"730\":1}}],[\"+usecompressedoops\",{\"1\":{\"722\":1}}],[\"+useparalleloldgc\",{\"1\":{\"389\":1}}],[\"+useparallelgc\",{\"1\":{\"389\":1}}],[\"+thread\",{\"1\":{\"552\":1,\"554\":1}}],[\"+f1\",{\"1\":{\"537\":6}}],[\"+df\",{\"1\":{\"445\":1}}],[\"+b\",{\"1\":{\"445\":1}}],[\"+a\",{\"1\":{\"445\":1}}],[\"+重试>10s\",{\"1\":{\"396\":1}}],[\"+printgcdetails\",{\"1\":{\"389\":1}}],[\"+printgcdatestamps\",{\"1\":{\"389\":1}}],[\"+heapdumponoutofmemoryerror\",{\"1\":{\"389\":1}}],[\"+x\",{\"1\":{\"333\":1,\"338\":1,\"340\":1,\"346\":1,\"350\":1,\"358\":1,\"363\":1,\"365\":1}}],[\"+yyyy\",{\"1\":{\"280\":1}}],[\"++i\",{\"1\":{\"652\":1}}],[\"++\",{\"1\":{\"213\":2,\"214\":2}}],[\"+=\",{\"1\":{\"32\":1,\"61\":1,\"652\":1}}],[\"+\",{\"1\":{\"3\":3,\"63\":3,\"74\":1,\"101\":3,\"107\":6,\"205\":1,\"213\":2,\"214\":3,\"218\":1,\"265\":1,\"297\":7,\"328\":18,\"342\":18,\"399\":2,\"401\":1,\"402\":4,\"404\":1,\"410\":8,\"411\":5,\"415\":1,\"437\":3,\"438\":1,\"441\":1,\"443\":3,\"444\":2,\"445\":3,\"475\":3,\"507\":1,\"511\":1,\"517\":6,\"523\":2,\"527\":24,\"533\":4,\"549\":5,\"552\":2,\"554\":3,\"557\":1,\"564\":2,\"613\":3,\"621\":4,\"626\":1,\"650\":4,\"678\":1,\"690\":1,\"709\":1,\"716\":3,\"717\":1,\"722\":8,\"734\":3,\"738\":1,\"739\":1,\"740\":4,\"743\":1,\"744\":7,\"745\":3,\"774\":1,\"777\":2,\"820\":3,\"822\":1,\"834\":2,\"929\":1}}],[\"j080624\",{\"1\":{\"818\":1}}],[\"jmm决定一个线程和主内存的抽象关系\",{\"1\":{\"809\":1}}],[\"jmm\",{\"1\":{\"809\":5}}],[\"jisuanji12306\",{\"1\":{\"650\":1}}],[\"jiangxinlingdu\",{\"1\":{\"650\":1}}],[\"jianshu\",{\"1\":{\"113\":1,\"458\":2,\"475\":1,\"626\":1,\"674\":2,\"924\":1}}],[\"jdbc数据源\",{\"1\":{\"627\":1}}],[\"jdk线程示例\",{\"0\":{\"770\":1}}],[\"jdk并发包常用类\",{\"0\":{\"550\":1}}],[\"jdk7\",{\"1\":{\"413\":1}}],[\"jdk1\",{\"1\":{\"377\":1,\"735\":1}}],[\"jdk安装\",{\"1\":{\"368\":1}}],[\"jdk8\",{\"1\":{\"263\":1,\"375\":1,\"413\":1}}],[\"jdk\",{\"1\":{\"218\":1,\"230\":2,\"263\":1,\"376\":1,\"444\":1,\"515\":2,\"527\":1,\"722\":1}}],[\"jetty\",{\"1\":{\"566\":1}}],[\"jkl\",{\"1\":{\"527\":1}}],[\"jvm就撤销偏斜锁\",{\"1\":{\"723\":1}}],[\"jvm会利用cas操作\",{\"1\":{\"723\":1}}],[\"jvm会将编译生成的\",{\"1\":{\"558\":1}}],[\"jvm对java的原生锁的优化\",{\"1\":{\"723\":1}}],[\"jvm是不会优化的\",{\"1\":{\"722\":1}}],[\"jvmstack\",{\"1\":{\"717\":1,\"721\":2}}],[\"jvm需要添加参数\",{\"1\":{\"669\":1}}],[\"jvm在启动的时候会自动设置heap\",{\"1\":{\"651\":1}}],[\"jvm堆的设置是指java程序运行过程中jvm可以调配使用的内存空间的设置\",{\"1\":{\"651\":1}}],[\"jvm类加载过程\",{\"0\":{\"559\":1}}],[\"jvm性能优化整理\",{\"0\":{\"558\":1}}],[\"jvm垃圾回收算法\",{\"0\":{\"557\":1}}],[\"jvm内存结构\",{\"0\":{\"556\":1}}],[\"jvm\",{\"1\":{\"389\":1,\"556\":2,\"563\":5,\"650\":1,\"706\":1,\"709\":2,\"711\":2,\"712\":2,\"717\":2,\"721\":2,\"809\":2}}],[\"jvm参数\",{\"1\":{\"389\":1}}],[\"jre\",{\"1\":{\"377\":1}}],[\"junit依赖的测试范围test\",{\"1\":{\"593\":1}}],[\"junit\",{\"1\":{\"527\":5}}],[\"jun\",{\"1\":{\"229\":2,\"277\":1}}],[\"juejin\",{\"1\":{\"75\":2,\"475\":1}}],[\"jstack\",{\"1\":{\"712\":1}}],[\"jsessionid=061657a0c03921cb478acb889502c93a\",{\"1\":{\"480\":1}}],[\"jsessionid=f463f5132a34573215c941893534bf26\",{\"1\":{\"478\":1}}],[\"jsp\",{\"1\":{\"298\":1,\"315\":3,\"477\":1,\"479\":1,\"480\":1}}],[\"jsonupload\",{\"1\":{\"749\":1}}],[\"json可以比formdata的数据结构更加复杂\",{\"1\":{\"749\":1}}],[\"json\",{\"1\":{\"290\":1,\"748\":1,\"749\":1,\"786\":1}}],[\"json将\",{\"1\":{\"236\":1}}],[\"jsonmap\",{\"1\":{\"3\":6}}],[\"js和图片\",{\"1\":{\"222\":1}}],[\"jpeg\",{\"1\":{\"748\":1}}],[\"jps\",{\"1\":{\"712\":1}}],[\"jp域名\",{\"1\":{\"222\":1}}],[\"jp6npxh6\",{\"1\":{\"74\":1}}],[\"jpg\",{\"1\":{\"62\":1,\"316\":1,\"317\":2}}],[\"j\",{\"1\":{\"73\":1,\"218\":1}}],[\"jan\",{\"1\":{\"478\":1}}],[\"jangoyvaerts和tony\",{\"1\":{\"22\":1}}],[\"jar=testargs\",{\"1\":{\"719\":1}}],[\"jar规则进行命名的\",{\"1\":{\"582\":1}}],[\"jar是maven加载类库\",{\"1\":{\"572\":1}}],[\"jar包路径\",{\"1\":{\"712\":1}}],[\"jar包\",{\"1\":{\"389\":1}}],[\"jar包名\",{\"1\":{\"389\":1}}],[\"jar\",{\"1\":{\"230\":5,\"263\":7,\"377\":3,\"389\":3,\"566\":3,\"576\":1,\"706\":2,\"711\":1,\"712\":2}}],[\"jar<\",{\"1\":{\"230\":1,\"712\":1}}],[\"jaccard\",{\"1\":{\"54\":1}}],[\"java还提供了另外一个实现lock接口的reentrantreadwritelock\",{\"1\":{\"818\":1}}],[\"java线程之间的通信总是隐式进行\",{\"1\":{\"809\":1}}],[\"java的并发采用的是共享内存模型\",{\"1\":{\"809\":1}}],[\"java的uuid往往是这样实现的\",{\"1\":{\"208\":1}}],[\"java对象内存布局\",{\"1\":{\"722\":1}}],[\"java对象占用空间是8字节对齐的\",{\"1\":{\"672\":1,\"722\":1}}],[\"javamodule\",{\"1\":{\"717\":12}}],[\"javaagent\",{\"1\":{\"710\":1,\"711\":1,\"719\":1}}],[\"java语言中\",{\"1\":{\"674\":1}}],[\"java语言是一种具有动态性的解释型语言\",{\"1\":{\"558\":1,\"563\":1}}],[\"javaheap\",{\"1\":{\"651\":1}}],[\"java应用的类都是由它来完成加载的\",{\"1\":{\"558\":1}}],[\"java虚拟机的实现会提供一个扩展库目录\",{\"1\":{\"558\":1}}],[\"java内存泄露\",{\"1\":{\"558\":1}}],[\"java方法服务\",{\"1\":{\"556\":1}}],[\"java编译器会去除这些下划线\",{\"1\":{\"549\":1}}],[\"java数据类型易混概念\",{\"0\":{\"549\":1}}],[\"java操作txt文件总结\",{\"0\":{\"535\":1}}],[\"java中池化技术是提前保存大量的资源\",{\"1\":{\"750\":1}}],[\"java中可以通过实现\",{\"1\":{\"734\":1}}],[\"java中\",{\"1\":{\"727\":1,\"926\":1}}],[\"java中synchronize通过在对象头设置标记\",{\"1\":{\"723\":1}}],[\"java中synchronized和lock是互斥锁\",{\"0\":{\"660\":1}}],[\"java中对string对象进行的操作实际上是一个不断创建新的对象并且将旧的对象回收的一个过程\",{\"1\":{\"629\":1}}],[\"java中对bigdecimal比较大小一般用的是bigdemical的compareto方法\",{\"1\":{\"445\":1}}],[\"java中有垃圾回收机制\",{\"1\":{\"558\":1}}],[\"java中的queue队列\",{\"0\":{\"528\":1}}],[\"java9在它的基础上又增加了3个方法\",{\"1\":{\"527\":1}}],[\"java出到了13\",{\"1\":{\"527\":1}}],[\"javanx\",{\"1\":{\"485\":1}}],[\"java8optionaltest\",{\"1\":{\"527\":1}}],[\"java8datetest\",{\"1\":{\"527\":1}}],[\"java8defaultinterfacetest\",{\"1\":{\"527\":2}}],[\"java8defaultinterface\",{\"1\":{\"527\":3}}],[\"java8quotetest\",{\"1\":{\"527\":1}}],[\"java8streamtest\",{\"1\":{\"527\":1}}],[\"java8test\",{\"1\":{\"527\":8}}],[\"java8新特性\",{\"0\":{\"527\":1}}],[\"java8\",{\"1\":{\"475\":3,\"527\":1}}],[\"java标准库还提供了一个callable接口\",{\"1\":{\"475\":1}}],[\"java在java\",{\"1\":{\"445\":1}}],[\"java原子类中的递增操作就通过cas自旋实现的\",{\"1\":{\"443\":1}}],[\"javax\",{\"1\":{\"439\":1}}],[\"java和messageservice\",{\"0\":{\"437\":1}}],[\"java|grep\",{\"1\":{\"389\":3}}],[\"javassist\",{\"1\":{\"715\":2}}],[\"javase\",{\"1\":{\"375\":2}}],[\"javascript\",{\"1\":{\"317\":5,\"515\":1,\"748\":1}}],[\"java等\",{\"1\":{\"214\":1}}],[\"java\",{\"0\":{\"384\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"536\":1,\"716\":1,\"717\":1,\"721\":1,\"937\":1},\"1\":{\"3\":4,\"13\":1,\"22\":1,\"25\":1,\"32\":3,\"63\":14,\"213\":1,\"218\":2,\"230\":1,\"263\":2,\"266\":1,\"273\":3,\"282\":5,\"297\":8,\"375\":1,\"376\":2,\"377\":2,\"378\":1,\"389\":1,\"413\":1,\"414\":1,\"438\":1,\"439\":1,\"440\":5,\"444\":5,\"445\":2,\"446\":1,\"473\":1,\"475\":3,\"515\":2,\"517\":1,\"518\":3,\"523\":2,\"527\":11,\"529\":2,\"530\":1,\"533\":2,\"537\":4,\"538\":1,\"539\":2,\"541\":1,\"542\":1,\"544\":2,\"545\":2,\"549\":6,\"556\":1,\"558\":2,\"563\":2,\"626\":18,\"650\":3,\"651\":7,\"652\":2,\"706\":3,\"707\":1,\"709\":3,\"710\":1,\"711\":1,\"712\":2,\"715\":1,\"716\":2,\"717\":2,\"721\":1,\"733\":5,\"735\":1,\"779\":3,\"809\":1}}],[\"joda\",{\"1\":{\"626\":1}}],[\"jobtracker用于调度作业\",{\"1\":{\"33\":1}}],[\"jobtracker\",{\"1\":{\"33\":1,\"653\":1}}],[\"job\",{\"1\":{\"27\":1,\"29\":3,\"32\":14,\"652\":16,\"782\":1,\"872\":1}}],[\"jones\",{\"1\":{\"22\":2}}],[\"joe\",{\"1\":{\"21\":1}}],[\"john\",{\"1\":{\"20\":2,\"22\":2}}],[\"joining\",{\"1\":{\"475\":1,\"527\":1}}],[\"join命令\",{\"1\":{\"294\":1}}],[\"join列类型要保持一致\",{\"1\":{\"82\":1}}],[\"join=true\",{\"1\":{\"23\":1}}],[\"join\",{\"1\":{\"20\":4,\"23\":21,\"27\":2,\"29\":1,\"61\":1,\"294\":2,\"321\":1,\"446\":3,\"475\":4,\"527\":3}}],[\"jom\",{\"1\":{\"13\":2}}],[\"w然后在\",{\"1\":{\"774\":1}}],[\"wsonepiece\",{\"1\":{\"741\":1}}],[\"wsx\",{\"1\":{\"342\":1}}],[\"wow64\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"word来试图获取锁\",{\"1\":{\"723\":1}}],[\"word部分设置线程id\",{\"1\":{\"723\":1}}],[\"word的结构信息如下\",{\"1\":{\"673\":1}}],[\"word\",{\"1\":{\"652\":4,\"672\":1}}],[\"wordcount\",{\"1\":{\"652\":3}}],[\"wordcount简析\",{\"0\":{\"652\":1}}],[\"word打开id\",{\"1\":{\"495\":1}}],[\"workqueue\",{\"0\":{\"759\":1}}],[\"workernode\",{\"1\":{\"627\":1}}],[\"workergroup\",{\"1\":{\"612\":3}}],[\"worker\",{\"1\":{\"612\":2}}],[\"workingdir\",{\"1\":{\"263\":1}}],[\"workdir\",{\"1\":{\"243\":1}}],[\"world\",{\"1\":{\"134\":2,\"229\":1,\"475\":2,\"527\":1,\"624\":1}}],[\"w3\",{\"1\":{\"316\":1,\"317\":2,\"715\":1}}],[\"which\",{\"1\":{\"845\":2}}],[\"while循环中有两个\",{\"1\":{\"900\":1}}],[\"while\",{\"1\":{\"218\":1,\"389\":1,\"443\":1,\"542\":1,\"564\":2,\"613\":1,\"652\":1,\"768\":1,\"802\":1,\"814\":1}}],[\"why\",{\"1\":{\"650\":1}}],[\"whats\",{\"1\":{\"458\":1}}],[\"what\",{\"1\":{\"420\":1}}],[\"when\",{\"1\":{\"22\":3,\"446\":1,\"789\":3}}],[\"where子句限制了左边表是aapl的记录\",{\"1\":{\"23\":1}}],[\"where\",{\"1\":{\"20\":5,\"21\":1,\"22\":4,\"23\":4,\"24\":1,\"26\":3,\"27\":8,\"29\":1,\"78\":2,\"103\":1,\"104\":1,\"727\":1,\"728\":2,\"732\":2,\"789\":6,\"865\":1,\"872\":1,\"874\":1,\"877\":1,\"883\":1,\"887\":4,\"890\":1,\"893\":1,\"894\":1}}],[\"wrong\",{\"1\":{\"155\":2}}],[\"writelock\",{\"1\":{\"824\":2}}],[\"writelines\",{\"1\":{\"548\":1}}],[\"writefile\",{\"1\":{\"548\":1}}],[\"writebytearraytofile\",{\"1\":{\"547\":1}}],[\"writeobject\",{\"1\":{\"544\":1}}],[\"writers\",{\"1\":{\"823\":1}}],[\"writershouldblock\",{\"1\":{\"820\":1}}],[\"writer\",{\"1\":{\"538\":1}}],[\"writes\",{\"1\":{\"141\":2,\"194\":1}}],[\"write\",{\"0\":{\"49\":1},\"1\":{\"32\":2,\"74\":1,\"147\":1,\"155\":2,\"199\":1,\"317\":1,\"539\":1,\"541\":1,\"613\":1,\"652\":2,\"805\":1,\"809\":1,\"818\":1,\"823\":1,\"824\":4,\"833\":1,\"837\":1}}],[\"wiki\",{\"1\":{\"458\":1,\"475\":1,\"611\":1}}],[\"windows版\",{\"1\":{\"564\":1}}],[\"windows\",{\"1\":{\"288\":1,\"477\":1,\"479\":1,\"480\":1,\"575\":1}}],[\"windows进行打包并上传镜像\",{\"1\":{\"230\":1}}],[\"windwos\",{\"1\":{\"222\":1}}],[\"winmusic\",{\"1\":{\"132\":1}}],[\"will\",{\"1\":{\"217\":1,\"837\":1,\"845\":1}}],[\"wihtout\",{\"0\":{\"201\":1}}],[\"withinitial\",{\"1\":{\"626\":3}}],[\"withyear\",{\"1\":{\"527\":1}}],[\"withdayofmonth\",{\"1\":{\"527\":1}}],[\"without\",{\"0\":{\"196\":1,\"197\":1}}],[\"withscores\",{\"1\":{\"137\":1,\"138\":3}}],[\"withpathstyleaccessenabled\",{\"1\":{\"63\":1}}],[\"withendpointconfiguration\",{\"1\":{\"63\":1}}],[\"withcredentials\",{\"1\":{\"63\":1}}],[\"with\",{\"1\":{\"28\":1,\"217\":1,\"243\":18,\"322\":3,\"324\":1,\"342\":1,\"343\":2,\"413\":1,\"717\":1,\"888\":1,\"893\":4,\"894\":3,\"902\":1,\"904\":1}}],[\"w\",{\"1\":{\"73\":1,\"132\":1,\"820\":4}}],[\"www\",{\"1\":{\"63\":1,\"67\":1,\"132\":1,\"189\":3,\"211\":1,\"222\":1,\"265\":2,\"312\":1,\"315\":2,\"317\":4,\"375\":1,\"433\":1,\"458\":3,\"472\":1,\"475\":2,\"479\":2,\"485\":1,\"527\":1,\"613\":1,\"626\":1,\"650\":1,\"674\":3,\"715\":1,\"722\":1,\"741\":1,\"748\":1,\"749\":1,\"816\":1,\"924\":1}}],[\"wget\",{\"1\":{\"56\":1,\"243\":1,\"290\":1,\"295\":1,\"319\":2}}],[\"wants\",{\"1\":{\"834\":1,\"835\":1,\"836\":1,\"838\":2}}],[\"wantedby=multi\",{\"1\":{\"353\":1}}],[\"wangwu\",{\"1\":{\"104\":1}}],[\"was\",{\"1\":{\"293\":1,\"399\":1,\"495\":1}}],[\"watch功能支持监听某个固定的key\",{\"1\":{\"214\":1}}],[\"watch机制\",{\"1\":{\"214\":1}}],[\"watch\",{\"1\":{\"213\":1,\"214\":5}}],[\"waiting\",{\"1\":{\"811\":1,\"823\":1}}],[\"wait状态\",{\"1\":{\"649\":1}}],[\"waitfor\",{\"1\":{\"452\":2}}],[\"waitforcompletion\",{\"1\":{\"32\":1,\"652\":1}}],[\"waitstrategy\",{\"0\":{\"463\":1},\"1\":{\"450\":1,\"456\":2,\"458\":1,\"472\":1}}],[\"wait\",{\"1\":{\"74\":2,\"564\":1,\"612\":1,\"649\":3,\"805\":1,\"870\":1,\"926\":1}}],[\"walk\",{\"1\":{\"61\":1}}],[\"war\",{\"1\":{\"243\":1,\"566\":1}}],[\"warehouse\",{\"1\":{\"21\":2}}],[\"warning\",{\"1\":{\"3\":5,\"107\":1,\"549\":1,\"833\":1}}],[\"we\",{\"1\":{\"824\":1}}],[\"weixin\",{\"1\":{\"576\":1,\"789\":1}}],[\"weight的数值与访问比率成正比\",{\"1\":{\"300\":1}}],[\"weight的默认值为1\",{\"1\":{\"300\":1}}],[\"weight参数用于指定轮询几率\",{\"1\":{\"300\":1}}],[\"weight=2\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"weights\",{\"1\":{\"138\":2}}],[\"weights=self\",{\"1\":{\"59\":1}}],[\"weight\",{\"0\":{\"300\":1},\"1\":{\"59\":2,\"138\":4,\"301\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1}}],[\"weakcompareandsetvolatile\",{\"1\":{\"444\":2}}],[\"weakcompareandsetplain\",{\"1\":{\"444\":1}}],[\"weakcompareandsetintplain\",{\"1\":{\"444\":1}}],[\"weakcompareandsetint\",{\"1\":{\"443\":2}}],[\"wed\",{\"1\":{\"229\":2}}],[\"web端首先通过客户端脚本如javascript对密码原文进行md5加密\",{\"1\":{\"897\":1}}],[\"webapp\",{\"1\":{\"502\":1,\"566\":1}}],[\"webapps\",{\"1\":{\"243\":2}}],[\"webkitformboundarysn8ehdkx6tf3ngiq\",{\"1\":{\"480\":4}}],[\"webp\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"webservers\",{\"1\":{\"317\":2}}],[\"web02\",{\"1\":{\"262\":3}}],[\"web03\",{\"1\":{\"262\":2}}],[\"web01\",{\"1\":{\"262\":1}}],[\"web服务器\",{\"1\":{\"194\":1}}],[\"web\",{\"1\":{\"93\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"262\":1,\"401\":2,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1,\"417\":1,\"520\":1,\"566\":1,\"651\":1}}],[\"weblog\",{\"1\":{\"27\":4}}],[\"weblogs\",{\"1\":{\"27\":8}}],[\"web接口\",{\"1\":{\"4\":1}}],[\"wechat\",{\"1\":{\"2\":1,\"174\":1}}],[\"mgr\",{\"1\":{\"845\":5}}],[\"mv\",{\"1\":{\"836\":1}}],[\"mvn是unix的shell脚本\",{\"1\":{\"572\":1}}],[\"mvn运行脚本\",{\"1\":{\"572\":1}}],[\"mvnrepository\",{\"1\":{\"401\":1,\"415\":1}}],[\"mvn\",{\"1\":{\"230\":1,\"566\":31,\"572\":1,\"576\":3,\"579\":3,\"580\":1,\"581\":1,\"582\":1,\"584\":1,\"597\":3,\"710\":1}}],[\"mcslock\",{\"1\":{\"816\":1}}],[\"mf<\",{\"1\":{\"707\":1,\"715\":1}}],[\"mf\",{\"0\":{\"708\":1,\"718\":1},\"1\":{\"707\":2,\"708\":1,\"709\":1,\"715\":2}}],[\"mb\",{\"1\":{\"621\":7,\"651\":2}}],[\"m2下的settings\",{\"1\":{\"576\":1}}],[\"m2\",{\"1\":{\"572\":1,\"576\":1}}],[\"m=11100000=128+64+32=224\",{\"1\":{\"526\":1}}],[\"m=256\",{\"1\":{\"526\":1}}],[\"m是相应的子网掩码如\",{\"1\":{\"526\":1}}],[\"mnt是要挂载内容\",{\"1\":{\"373\":1}}],[\"mnt\",{\"1\":{\"372\":2,\"833\":4,\"834\":2}}],[\"mnt目录下\",{\"1\":{\"372\":1}}],[\"mkfs\",{\"1\":{\"371\":1}}],[\"mkdir\",{\"1\":{\"6\":1,\"243\":1,\"293\":1,\"319\":1,\"321\":3,\"352\":2,\"357\":1,\"362\":1,\"367\":1,\"832\":1,\"833\":1,\"834\":1}}],[\"msg\",{\"1\":{\"412\":1,\"438\":2,\"564\":3,\"613\":7}}],[\"msie\",{\"1\":{\"317\":2}}],[\"msie6\",{\"1\":{\"317\":1}}],[\"ms\",{\"1\":{\"262\":2,\"297\":1,\"402\":1,\"564\":4,\"716\":1,\"838\":1,\"841\":2,\"843\":1,\"883\":3,\"893\":3}}],[\"mp4\",{\"1\":{\"243\":1}}],[\"mt\",{\"1\":{\"211\":1}}],[\"multibroker\",{\"1\":{\"564\":1}}],[\"multiproducersequencer\",{\"1\":{\"450\":1,\"472\":1}}],[\"multiply\",{\"1\":{\"427\":1,\"445\":2,\"549\":2}}],[\"multipartfile\",{\"1\":{\"410\":1}}],[\"multipart\",{\"1\":{\"410\":1,\"480\":1,\"748\":1,\"749\":1}}],[\"multi\",{\"1\":{\"139\":1,\"834\":1,\"835\":1,\"836\":1,\"838\":2}}],[\"murmurhash3\",{\"1\":{\"127\":1}}],[\"murmurhash\",{\"1\":{\"127\":3}}],[\"murmurhash2\",{\"1\":{\"127\":2}}],[\"must\",{\"1\":{\"3\":1,\"824\":1}}],[\"m\",{\"1\":{\"73\":1,\"104\":3,\"243\":1,\"497\":1,\"501\":1,\"511\":2,\"526\":5,\"563\":2,\"664\":1,\"738\":1,\"743\":2,\"744\":1,\"745\":3,\"831\":1}}],[\"mdhttp\",{\"1\":{\"613\":1}}],[\"md文件\",{\"1\":{\"497\":1}}],[\"md5之后的密码\",{\"1\":{\"897\":1}}],[\"md5\",{\"1\":{\"208\":1,\"317\":1,\"897\":1}}],[\"md\",{\"1\":{\"50\":1,\"267\":1,\"497\":1}}],[\"ml\",{\"1\":{\"50\":1}}],[\"mmt\",{\"1\":{\"372\":1}}],[\"mmt目录\",{\"1\":{\"372\":1}}],[\"mm\",{\"1\":{\"25\":2,\"280\":1,\"626\":9}}],[\"might\",{\"1\":{\"824\":1}}],[\"microseconds\",{\"1\":{\"758\":1}}],[\"michigan\",{\"1\":{\"22\":1}}],[\"misc\",{\"1\":{\"444\":1,\"626\":2,\"669\":1}}],[\"missing\",{\"1\":{\"435\":1}}],[\"mime\",{\"1\":{\"305\":1,\"317\":1}}],[\"mirror\",{\"1\":{\"236\":1,\"290\":1}}],[\"mirrors\",{\"1\":{\"226\":1,\"236\":3,\"290\":2,\"291\":3}}],[\"milliseconds\\t\\t将一个毫秒级精度的unix时间戳设置为给定键的过期时间\",{\"1\":{\"139\":1}}],[\"milliseconds\",{\"1\":{\"139\":1,\"440\":2,\"446\":1,\"721\":1,\"754\":1,\"771\":1,\"772\":2,\"774\":3,\"776\":1}}],[\"milvus支持的索引和指标\",{\"0\":{\"51\":1}}],[\"milvus\",{\"1\":{\"50\":5,\"52\":1,\"55\":1,\"56\":5,\"58\":11}}],[\"milvus向量数据库之以图搜图\",{\"0\":{\"50\":1}}],[\"middle\",{\"1\":{\"22\":1}}],[\"minprocessors\",{\"1\":{\"651\":1}}],[\"minimum\",{\"1\":{\"229\":1}}],[\"minimal\",{\"1\":{\"74\":1}}],[\"minio所在地址\",{\"1\":{\"63\":1}}],[\"minioclient\",{\"1\":{\"63\":2}}],[\"minio客户端\",{\"1\":{\"63\":1}}],[\"minio强依赖于okhttp3\",{\"1\":{\"63\":1}}],[\"minio<\",{\"1\":{\"63\":1}}],[\"minio1\",{\"1\":{\"63\":1}}],[\"minio\",{\"1\":{\"63\":22}}],[\"minio单机安装以及使用\",{\"0\":{\"63\":1}}],[\"min\",{\"0\":{\"152\":1},\"1\":{\"63\":1,\"74\":1,\"137\":1,\"138\":3,\"146\":1,\"152\":1,\"155\":4,\"194\":1,\"317\":3,\"564\":1,\"874\":1}}],[\"minute\",{\"1\":{\"21\":1}}],[\"minutes\",{\"1\":{\"21\":2,\"758\":1}}],[\"minsparethreadstomcat初始化时创建的线程数\",{\"1\":{\"651\":1}}],[\"mins\",{\"1\":{\"21\":1}}],[\"movie\",{\"1\":{\"898\":1}}],[\"movefromlocal\",{\"1\":{\"7\":1}}],[\"more\",{\"1\":{\"897\":3}}],[\"mozilla\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"mounted\",{\"1\":{\"833\":1}}],[\"mountpath\",{\"1\":{\"263\":1,\"275\":2}}],[\"mount\",{\"1\":{\"262\":1,\"367\":1,\"372\":1,\"833\":2,\"843\":12,\"845\":2,\"869\":2}}],[\"modify\",{\"1\":{\"869\":1}}],[\"modifytime肯定会改变createtime变量和key变量在创建后\",{\"1\":{\"665\":1}}],[\"modified\",{\"1\":{\"317\":1,\"664\":1}}],[\"mod\",{\"1\":{\"511\":1}}],[\"modb\",{\"1\":{\"433\":1}}],[\"module\",{\"1\":{\"243\":17,\"275\":1,\"277\":1,\"280\":1,\"343\":2,\"687\":1}}],[\"modefied\",{\"1\":{\"317\":1}}],[\"mode\",{\"1\":{\"261\":1,\"352\":1,\"435\":1,\"837\":1,\"845\":1,\"869\":3,\"892\":1,\"893\":4}}],[\"modelversion>\",{\"1\":{\"715\":1}}],[\"model\",{\"1\":{\"59\":4,\"63\":2,\"500\":1,\"503\":3}}],[\"mode=nonstrict\",{\"1\":{\"22\":1}}],[\"mode=strict\",{\"1\":{\"21\":1,\"23\":1,\"29\":1}}],[\"most\",{\"1\":{\"217\":1}}],[\"moyand\",{\"1\":{\"211\":1}}],[\"monitor的实现完全依赖底层操作系统的互斥锁来实现\",{\"1\":{\"723\":1}}],[\"monitor\",{\"0\":{\"849\":1},\"1\":{\"716\":1,\"717\":2,\"849\":1}}],[\"monitoring\",{\"1\":{\"63\":1}}],[\"mon\",{\"1\":{\"478\":1}}],[\"mongodb\",{\"1\":{\"211\":1,\"619\":1}}],[\"mongdb\",{\"1\":{\"207\":1,\"211\":1}}],[\"month\",{\"1\":{\"21\":2,\"527\":4}}],[\"mycomparable\",{\"1\":{\"734\":3}}],[\"mycontroller\",{\"1\":{\"419\":2}}],[\"myagent\",{\"0\":{\"717\":1,\"721\":1},\"1\":{\"717\":1,\"718\":1,\"721\":1}}],[\"myagent<\",{\"1\":{\"715\":1}}],[\"myapp\",{\"1\":{\"580\":1}}],[\"mytask\",{\"1\":{\"446\":9}}],[\"myribbonconfig\",{\"1\":{\"403\":2}}],[\"mylist\",{\"1\":{\"135\":13,\"139\":2}}],[\"myindex\",{\"1\":{\"91\":1}}],[\"myi\",{\"1\":{\"91\":1}}],[\"myisam数据表\",{\"1\":{\"95\":1}}],[\"myisam是mysql的默认存储引擎\",{\"1\":{\"91\":1}}],[\"myisam\",{\"0\":{\"95\":1},\"1\":{\"82\":1,\"90\":1,\"91\":1,\"93\":2,\"116\":1}}],[\"mydomain\",{\"1\":{\"222\":1}}],[\"mydata\",{\"1\":{\"91\":1}}],[\"myd\",{\"1\":{\"91\":1}}],[\"mydb\",{\"1\":{\"21\":1}}],[\"mysql中\",{\"1\":{\"727\":1}}],[\"mysql中innodb表为什么要建议用自增列做主键\",{\"1\":{\"211\":1}}],[\"mysql是有最大连接数的\",{\"1\":{\"683\":1}}],[\"mysql为例\",{\"1\":{\"683\":1}}],[\"mysql从库配置\",{\"0\":{\"335\":1}}],[\"mysql配置\",{\"1\":{\"321\":1}}],[\"mysqlx\",{\"1\":{\"321\":3}}],[\"mysql安装\",{\"0\":{\"321\":1}}],[\"mysql安装版本选择\",{\"0\":{\"320\":1}}],[\"mysql安装根目录\",{\"1\":{\"74\":1}}],[\"mysql80\",{\"1\":{\"319\":2,\"320\":1}}],[\"mysql主键索引是b+树\",{\"1\":{\"210\":1}}],[\"mysql最多创建多少列索引\",{\"0\":{\"114\":1}}],[\"mysql删除表的几种方式\",{\"0\":{\"109\":1}}],[\"mysql优化\",{\"1\":{\"104\":1}}],[\"mysql有哪些索引\",{\"0\":{\"101\":1}}],[\"mysql选择不到所要使用\",{\"1\":{\"100\":1}}],[\"mysql的字符集包括字符集\",{\"1\":{\"99\":1}}],[\"mysql的随机读缓冲区大小\",{\"1\":{\"74\":1}}],[\"mysql服务器可以支持多种字符集\",{\"1\":{\"99\":1}}],[\"mysql字符集\",{\"0\":{\"99\":1}}],[\"mysql存储引擎\",{\"0\":{\"90\":1}}],[\"mysql>\",{\"1\":{\"89\":1,\"107\":1,\"108\":1,\"324\":2,\"327\":1,\"328\":1,\"341\":1,\"342\":4}}],[\"mysql只用来存储下载地址\",{\"1\":{\"87\":1}}],[\"mysql数据库中\",{\"1\":{\"82\":1}}],[\"mysql数据文件所在位置\",{\"1\":{\"74\":1}}],[\"mysql表设计及优化\",{\"0\":{\"81\":1}}],[\"mysqldump\",{\"1\":{\"326\":1,\"342\":1}}],[\"mysqld\",{\"1\":{\"78\":3,\"321\":4,\"322\":1,\"323\":1,\"325\":1}}],[\"mysql八大集群架构的优点和缺点总结\",{\"1\":{\"75\":1}}],[\"mysql高可用集群方案\",{\"1\":{\"75\":1}}],[\"mysql集群简介及对比\",{\"1\":{\"75\":1}}],[\"mysql集群简介\",{\"1\":{\"75\":1}}],[\"mysql简单主从搭建过程\",{\"0\":{\"75\":1}}],[\"mysql开发人员建议设置为1\",{\"1\":{\"74\":1}}],[\"mysql执行排序使用的缓冲大小\",{\"1\":{\"74\":1}}],[\"mysql会为它分配一段内存缓冲区\",{\"1\":{\"74\":1}}],[\"mysql读入缓冲区大小\",{\"1\":{\"74\":1}}],[\"mysql默认的wait\",{\"1\":{\"74\":1}}],[\"mysql默认可重复读级别\",{\"1\":{\"74\":1}}],[\"mysql连接闲置超过一定时间后\",{\"1\":{\"74\":1}}],[\"mysql监听端口\",{\"1\":{\"74\":1}}],[\"mysql57\",{\"1\":{\"320\":1}}],[\"mysql5\",{\"1\":{\"74\":1}}],[\"mysql突然变慢排查\",{\"0\":{\"74\":1}}],[\"mysql排序\",{\"0\":{\"73\":1}}],[\"mysql事务\",{\"0\":{\"65\":1}}],[\"mysql\",{\"1\":{\"64\":1,\"74\":14,\"77\":5,\"78\":2,\"79\":2,\"80\":3,\"82\":2,\"93\":2,\"100\":2,\"132\":1,\"318\":3,\"319\":4,\"320\":5,\"321\":47,\"322\":7,\"323\":1,\"324\":1,\"325\":1,\"326\":1,\"327\":1,\"331\":4,\"332\":4,\"333\":1,\"336\":4,\"337\":4,\"338\":1,\"339\":6,\"342\":8,\"788\":1}}],[\"mystuff\",{\"1\":{\"27\":3}}],[\"mybatisplusinterceptor\",{\"1\":{\"64\":4}}],[\"mybatisplusconfig\",{\"1\":{\"64\":1}}],[\"mybatis\",{\"0\":{\"64\":1}}],[\"my\",{\"0\":{\"79\":1,\"323\":1},\"1\":{\"21\":1,\"74\":2,\"79\":1,\"261\":1,\"262\":1,\"321\":1,\"323\":1,\"325\":1,\"458\":1,\"717\":1}}],[\"messaging\",{\"1\":{\"438\":1}}],[\"messagelistener\",{\"1\":{\"438\":1}}],[\"message\",{\"1\":{\"21\":4,\"195\":1,\"413\":1,\"419\":4,\"438\":3,\"518\":1}}],[\"messageservicekafkaimpl\",{\"1\":{\"437\":1}}],[\"messageservice\",{\"1\":{\"437\":3,\"439\":4}}],[\"messages\",{\"1\":{\"21\":7,\"63\":2}}],[\"mediatype\",{\"1\":{\"410\":1}}],[\"medium=distribute\",{\"1\":{\"63\":1}}],[\"meituan\",{\"1\":{\"211\":1}}],[\"member\",{\"1\":{\"133\":1,\"137\":7,\"138\":1}}],[\"memory参数\",{\"1\":{\"263\":1}}],[\"memory子系统\",{\"1\":{\"250\":1}}],[\"memory数据表目前都使用固定长度的数据行存储\",{\"1\":{\"96\":1}}],[\"memory存储引擎和数据列\",{\"0\":{\"96\":1}}],[\"memory\",{\"1\":{\"74\":1,\"90\":1,\"93\":1,\"263\":2,\"270\":1,\"275\":2,\"435\":1,\"809\":2}}],[\"meta\",{\"1\":{\"707\":1,\"708\":1,\"715\":1}}],[\"metaspacesize=128m\",{\"1\":{\"389\":1}}],[\"metastore\",{\"1\":{\"21\":1}}],[\"metadata\",{\"1\":{\"263\":3,\"275\":3}}],[\"metaobject\",{\"1\":{\"64\":10}}],[\"metaobjecthandlerimpl\",{\"1\":{\"64\":2}}],[\"metaobjecthandler\",{\"1\":{\"64\":3}}],[\"method2方法里面执行method1时当前线程又要去尝试获取锁\",{\"1\":{\"723\":1}}],[\"methoddelegation\",{\"1\":{\"717\":2}}],[\"methodcosttime\",{\"0\":{\"716\":1},\"1\":{\"716\":1,\"717\":2}}],[\"method实例如下\",{\"1\":{\"527\":2}}],[\"methods\",{\"1\":{\"518\":1}}],[\"methodargumentnotvalidexception\",{\"1\":{\"419\":2}}],[\"method\",{\"0\":{\"900\":1,\"903\":1},\"1\":{\"63\":3,\"74\":1,\"211\":1,\"217\":3,\"400\":1,\"402\":2,\"410\":1,\"411\":1,\"413\":1,\"415\":1,\"518\":1,\"523\":4,\"527\":1,\"716\":4,\"717\":1,\"904\":1}}],[\"metrics\",{\"1\":{\"402\":1,\"418\":3}}],[\"metric\",{\"1\":{\"58\":2,\"62\":1}}],[\"me\",{\"1\":{\"28\":1}}],[\"mergedstring\",{\"1\":{\"527\":4}}],[\"merge\",{\"0\":{\"46\":1},\"1\":{\"23\":1,\"90\":1,\"93\":1,\"113\":1,\"493\":1,\"500\":1}}],[\"merges\",{\"1\":{\"10\":1}}],[\"magic\",{\"1\":{\"893\":2}}],[\"may\",{\"1\":{\"823\":1}}],[\"mayinterruptifrunning\",{\"1\":{\"475\":1}}],[\"mask为1左移16位然后减1\",{\"1\":{\"820\":1}}],[\"mask为\",{\"1\":{\"820\":1}}],[\"mask\",{\"1\":{\"526\":1,\"820\":2}}],[\"master实际上是特定框架库的一个实例\",{\"1\":{\"655\":1}}],[\"master配置\",{\"0\":{\"344\":1}}],[\"master服务器的共享目录\",{\"1\":{\"367\":1}}],[\"master服务器出现故障\",{\"1\":{\"367\":1}}],[\"master服务器上\",{\"1\":{\"342\":3,\"366\":1,\"367\":5}}],[\"master服务器上验证虚拟ip是否绑定\",{\"0\":{\"334\":1,\"347\":1,\"359\":1}}],[\"master服务器上创建检测脚本\",{\"0\":{\"332\":1,\"345\":1,\"357\":1},\"1\":{\"356\":1}}],[\"master服务器上修改keepalived配置文件\",{\"0\":{\"331\":1,\"356\":1},\"1\":{\"344\":1}}],[\"master服务器\",{\"0\":{\"323\":1,\"324\":1,\"326\":1,\"328\":1,\"330\":1},\"1\":{\"341\":1,\"351\":3}}],[\"masterauth\",{\"1\":{\"155\":1}}],[\"master\",{\"0\":{\"293\":1,\"655\":1},\"1\":{\"21\":2,\"22\":1,\"58\":1,\"63\":1,\"80\":8,\"155\":3,\"275\":1,\"276\":3,\"277\":1,\"280\":1,\"282\":4,\"288\":1,\"293\":1,\"295\":2,\"326\":1,\"328\":2,\"329\":10,\"336\":2,\"339\":1,\"340\":1,\"342\":13,\"343\":1,\"344\":1,\"345\":2,\"349\":2,\"361\":2,\"364\":1,\"365\":1,\"427\":1,\"497\":1,\"499\":2,\"503\":1,\"653\":2,\"657\":2}}],[\"mailto\",{\"1\":{\"243\":1}}],[\"maintainability\",{\"1\":{\"898\":2}}],[\"maintainer\",{\"1\":{\"230\":1,\"243\":2,\"263\":1}}],[\"main函数调用job类及逆行mapreduce\",{\"1\":{\"652\":1}}],[\"main\",{\"1\":{\"3\":1,\"32\":1,\"62\":1,\"63\":1,\"297\":1,\"389\":1,\"393\":1,\"397\":1,\"404\":1,\"408\":1,\"409\":1,\"415\":1,\"416\":1,\"440\":4,\"445\":4,\"446\":1,\"475\":7,\"502\":1,\"523\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"537\":3,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"549\":1,\"554\":1,\"563\":1,\"564\":2,\"612\":1,\"626\":1,\"650\":1,\"652\":1,\"703\":2,\"706\":1,\"707\":1,\"712\":1,\"715\":1,\"733\":1,\"734\":2,\"735\":1,\"809\":1,\"814\":1,\"843\":1,\"864\":3,\"893\":7,\"930\":1}}],[\"main方法参数\",{\"1\":{\"3\":1}}],[\"maven版本号机制\",{\"0\":{\"605\":1}}],[\"maven就会将项目构建输出的构建部署到配置对应的远程仓库\",{\"1\":{\"604\":1}}],[\"maven会直接依赖pom\",{\"1\":{\"594\":1}}],[\"maven有以下几种依赖范围\",{\"1\":{\"593\":1}}],[\"maven在编译项目主代码时候使用一套classpath\",{\"1\":{\"593\":1}}],[\"maven坐标为各种构件引入了秩序\",{\"1\":{\"586\":1}}],[\"maven构建的所有输出都在target\",{\"1\":{\"580\":1}}],[\"maven目录介绍\",{\"0\":{\"572\":1}}],[\"maven怎么升级\",{\"0\":{\"571\":1}}],[\"maven通过一个坐标系统准确地定位每一个构件\",{\"1\":{\"569\":1}}],[\"maven的认证\",{\"1\":{\"603\":1}}],[\"maven的核心是pom\",{\"1\":{\"578\":1}}],[\"maven的安装和配置\",{\"0\":{\"570\":1}}],[\"maven的用途\",{\"0\":{\"569\":1}}],[\"maven的简介\",{\"0\":{\"567\":1}}],[\"maven的命令\",{\"0\":{\"566\":1}}],[\"maven常用命令\",{\"1\":{\"566\":1}}],[\"maven梳理\",{\"0\":{\"565\":1}}],[\"maven\",{\"1\":{\"230\":1,\"389\":6,\"566\":2,\"575\":1,\"583\":1,\"707\":4,\"709\":1,\"715\":13}}],[\"maven编译插件\",{\"1\":{\"230\":1}}],[\"make\",{\"1\":{\"243\":3,\"343\":2,\"352\":2,\"379\":2}}],[\"makecache\",{\"1\":{\"227\":2}}],[\"makebucketargs\",{\"1\":{\"63\":1}}],[\"makebucket\",{\"1\":{\"63\":1}}],[\"manifestentries>\",{\"1\":{\"707\":1,\"715\":1}}],[\"manifestresourcetransformer\",{\"1\":{\"707\":1,\"715\":1}}],[\"manifestfile>\",{\"1\":{\"707\":1,\"715\":1}}],[\"manifestfile>src\",{\"1\":{\"707\":1,\"715\":1}}],[\"manifest\",{\"0\":{\"708\":1,\"718\":1},\"1\":{\"707\":2,\"708\":2,\"709\":1,\"715\":2,\"718\":1}}],[\"management\",{\"1\":{\"283\":1,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1}}],[\"manager是一个纯粹的调度器\",{\"1\":{\"654\":1}}],[\"manager协同工作来\",{\"1\":{\"655\":1}}],[\"manager协同工作来执行和监控任务\",{\"1\":{\"653\":1}}],[\"manager协商资源\",{\"1\":{\"653\":1,\"655\":1}}],[\"manager拥有为系统中所有应用分配资源的决定权\",{\"1\":{\"653\":1}}],[\"manager\",{\"0\":{\"654\":1,\"656\":1,\"846\":1},\"1\":{\"226\":1,\"320\":2,\"518\":2,\"627\":1,\"653\":3,\"654\":1,\"656\":1,\"657\":1,\"840\":1,\"846\":1}}],[\"manager的简写\",{\"1\":{\"222\":1}}],[\"manual\",{\"1\":{\"211\":1,\"435\":1}}],[\"mark\",{\"1\":{\"672\":1,\"723\":1}}],[\"marketplace\",{\"1\":{\"230\":1}}],[\"mariadb\",{\"1\":{\"76\":2,\"318\":5}}],[\"mary\",{\"1\":{\"22\":2}}],[\"maxpoolsize\",{\"1\":{\"779\":2}}],[\"maxprocessors的值也是有上限的\",{\"1\":{\"651\":1}}],[\"maxmumpoolsize为integer\",{\"1\":{\"773\":1}}],[\"maxmetaspacesize=512m\",{\"1\":{\"389\":1}}],[\"maxnumpoolsize等于说是一个无效参数\",{\"1\":{\"771\":1}}],[\"maxnewsize=256m\",{\"1\":{\"651\":1}}],[\"maxsparethreads一旦创建的线程超过这个值\",{\"1\":{\"651\":1}}],[\"maxthreads\",{\"1\":{\"651\":1}}],[\"maximumpoolsize\",{\"0\":{\"756\":1}}],[\"maximum\",{\"1\":{\"649\":1,\"820\":1}}],[\"maxautoretriesnextserver\",{\"1\":{\"403\":1}}],[\"maxautoretries\",{\"1\":{\"403\":1}}],[\"maxconcurrentrequests\",{\"1\":{\"402\":2}}],[\"max之间的所有成员\",{\"1\":{\"138\":1}}],[\"max\",{\"1\":{\"22\":2,\"59\":1,\"60\":3,\"74\":6,\"137\":1,\"138\":3,\"155\":2,\"158\":10,\"300\":1,\"301\":1,\"302\":1,\"317\":1,\"479\":1,\"480\":1,\"532\":1,\"549\":1,\"564\":3,\"650\":1,\"771\":1,\"773\":3,\"820\":1,\"822\":1}}],[\"material\",{\"1\":{\"243\":1}}],[\"matcher\",{\"1\":{\"717\":1}}],[\"matchlabels\",{\"1\":{\"263\":1,\"275\":1}}],[\"match\",{\"1\":{\"119\":4,\"527\":1}}],[\"matchquery\",{\"1\":{\"3\":1}}],[\"math下有两个很有用的类\",{\"1\":{\"549\":1}}],[\"math包中提供的api类bigdecimal\",{\"1\":{\"445\":1}}],[\"math\",{\"1\":{\"13\":6,\"552\":1}}],[\"map的输出\",{\"1\":{\"652\":1}}],[\"map的输出是reduce的输入\",{\"1\":{\"652\":1}}],[\"maptoint\",{\"1\":{\"527\":1}}],[\"mapping\",{\"1\":{\"426\":1}}],[\"mappings\",{\"1\":{\"418\":1}}],[\"mapper<object\",{\"1\":{\"652\":1}}],[\"mapper<longwritable\",{\"1\":{\"32\":2}}],[\"mapper\",{\"1\":{\"23\":1,\"32\":1,\"36\":2,\"37\":1,\"652\":1}}],[\"maps\",{\"1\":{\"214\":1}}],[\"map负责把作业分解成多个任务\",{\"1\":{\"33\":1}}],[\"maperd\",{\"1\":{\"23\":1}}],[\"mapjoin\",{\"1\":{\"23\":1}}],[\"mapred\",{\"1\":{\"21\":1,\"29\":5}}],[\"mapreduce作业\",{\"1\":{\"657\":1}}],[\"mapreduce会将数据写到本地磁盘上\",{\"1\":{\"42\":1}}],[\"mapreduce框架负责处理并行编程中分布式存储\",{\"1\":{\"33\":1}}],[\"mapreduce采取了分而治之的基本思想\",{\"1\":{\"33\":1}}],[\"mapreduce概述\",{\"0\":{\"33\":1}}],[\"mapreduce平均数计算\",{\"0\":{\"30\":1}}],[\"mapreduce\",{\"1\":{\"21\":1,\"23\":1,\"32\":7,\"652\":5,\"657\":1,\"781\":2,\"782\":1,\"783\":1}}],[\"map<string\",{\"1\":{\"3\":2,\"21\":1,\"25\":1,\"28\":1,\"518\":10,\"650\":6}}],[\"map\",{\"0\":{\"38\":1,\"40\":1},\"1\":{\"3\":1,\"20\":2,\"22\":1,\"23\":4,\"25\":1,\"32\":3,\"33\":1,\"34\":1,\"35\":1,\"39\":1,\"43\":1,\"217\":8,\"475\":1,\"518\":3,\"527\":4,\"650\":12,\"652\":6,\"781\":2,\"782\":1}}],[\"篮子对象\",{\"1\":{\"3\":1}}],[\"vti\",{\"1\":{\"888\":1}}],[\"v$视图权限\",{\"1\":{\"888\":1}}],[\"v$dynamic\",{\"1\":{\"888\":1}}],[\"v$database\",{\"1\":{\"843\":1}}],[\"v$datafile\",{\"1\":{\"843\":1}}],[\"v$开头的动态视图权限\",{\"1\":{\"888\":1}}],[\"v$sessions\",{\"1\":{\"857\":1}}],[\"v8\",{\"1\":{\"837\":1,\"838\":1,\"841\":2,\"843\":1,\"845\":1,\"883\":3,\"893\":2}}],[\"vm\",{\"1\":{\"719\":1,\"855\":1}}],[\"vlan\",{\"1\":{\"526\":1}}],[\"vlan原理详解\",{\"1\":{\"526\":1}}],[\"vldb\",{\"1\":{\"93\":1}}],[\"vcs\",{\"1\":{\"505\":1}}],[\"vs\",{\"1\":{\"475\":1}}],[\"vgroup\",{\"1\":{\"426\":1}}],[\"vgg\",{\"1\":{\"61\":2,\"62\":2}}],[\"vggnet\",{\"1\":{\"59\":1,\"61\":3,\"62\":3}}],[\"vgg16\",{\"1\":{\"59\":5}}],[\"vdb1是要挂载的分区名\",{\"1\":{\"372\":1}}],[\"vdb1是要格式化的分区名\",{\"1\":{\"371\":1}}],[\"vdb1\",{\"1\":{\"371\":1,\"372\":1,\"373\":1}}],[\"vdb表示上图未挂载的硬盘\",{\"1\":{\"370\":1}}],[\"vdb\",{\"1\":{\"370\":1}}],[\"vdc1\",{\"1\":{\"74\":9}}],[\"vrrp\",{\"1\":{\"331\":2,\"336\":2,\"344\":2,\"348\":2,\"356\":2,\"361\":2}}],[\"vhost\",{\"1\":{\"317\":1}}],[\"v1通过计算后的索引值都为2\",{\"1\":{\"513\":1}}],[\"v1\",{\"1\":{\"244\":1,\"246\":1,\"247\":1,\"263\":2,\"275\":2,\"293\":1}}],[\"v1版本镜像\",{\"0\":{\"244\":1}}],[\"v1~rank\",{\"1\":{\"63\":1}}],[\"visitor\",{\"1\":{\"527\":1}}],[\"virtualmachine\",{\"1\":{\"712\":9}}],[\"virtual\",{\"1\":{\"331\":3,\"336\":3,\"344\":3,\"348\":3,\"356\":3,\"361\":3}}],[\"vim\",{\"0\":{\"323\":1},\"1\":{\"79\":1,\"230\":1,\"243\":1,\"267\":1,\"270\":2,\"321\":2,\"323\":1,\"325\":1,\"331\":1,\"332\":1,\"336\":1,\"337\":1,\"339\":1,\"343\":4,\"344\":1,\"345\":1,\"348\":1,\"349\":1,\"352\":1,\"353\":1,\"355\":1,\"356\":1,\"357\":1,\"361\":1,\"362\":1,\"364\":1,\"373\":1,\"377\":1,\"834\":1}}],[\"vi\",{\"1\":{\"74\":1}}],[\"view\",{\"1\":{\"20\":3,\"27\":1,\"626\":2}}],[\"v\",{\"1\":{\"63\":3,\"73\":9,\"125\":2,\"332\":2,\"337\":2,\"345\":2,\"349\":2,\"389\":3,\"443\":6,\"499\":1,\"838\":2,\"841\":4,\"843\":7,\"865\":1,\"869\":4,\"872\":1,\"874\":1,\"887\":1,\"890\":1,\"894\":3}}],[\"v31\",{\"1\":{\"63\":1}}],[\"v3\",{\"1\":{\"63\":1}}],[\"vectors\",{\"1\":{\"58\":3,\"62\":2}}],[\"vector\",{\"1\":{\"58\":1,\"59\":1,\"60\":4,\"61\":5,\"62\":1}}],[\"versio\",{\"1\":{\"732\":1}}],[\"version=version+1\",{\"1\":{\"732\":1}}],[\"version=\",{\"1\":{\"715\":1}}],[\"version为版本\",{\"0\":{\"589\":1}}],[\"version指定了版本\",{\"1\":{\"578\":1}}],[\"version标签名\",{\"1\":{\"501\":1}}],[\"version\",{\"1\":{\"27\":1,\"229\":12,\"235\":1,\"290\":2,\"293\":1,\"297\":2,\"317\":5,\"378\":1,\"414\":2,\"425\":1,\"501\":1,\"516\":1,\"582\":1,\"586\":1,\"605\":1,\"704\":1,\"708\":1,\"715\":6,\"718\":1,\"730\":2,\"732\":1,\"837\":1,\"845\":1}}],[\"version>3\",{\"1\":{\"715\":2}}],[\"version>5\",{\"1\":{\"596\":1}}],[\"version>4\",{\"1\":{\"516\":1}}],[\"version>greenwich\",{\"1\":{\"414\":1}}],[\"version>0\",{\"1\":{\"297\":1,\"414\":1}}],[\"version>2\",{\"1\":{\"297\":1,\"715\":1}}],[\"version>15\",{\"1\":{\"715\":1}}],[\"version>1\",{\"1\":{\"297\":1,\"414\":1,\"707\":1,\"715\":2}}],[\"version>\",{\"1\":{\"3\":3,\"63\":3,\"230\":1,\"297\":6,\"389\":5,\"414\":5,\"425\":1,\"516\":2,\"596\":1,\"611\":1,\"707\":2,\"712\":1,\"715\":13}}],[\"verifyloginuserexpire\",{\"1\":{\"650\":1}}],[\"verify\",{\"1\":{\"61\":1,\"566\":1}}],[\"veryhigh\",{\"1\":{\"22\":1}}],[\"very\",{\"1\":{\"22\":1}}],[\"volumemounts\",{\"1\":{\"263\":1,\"275\":1}}],[\"volume\",{\"1\":{\"230\":1}}],[\"volumes类型有很多种\",{\"1\":{\"263\":1}}],[\"volumes\",{\"1\":{\"56\":1,\"262\":2,\"263\":1,\"275\":1}}],[\"volatile\",{\"1\":{\"63\":2,\"440\":1,\"441\":1,\"444\":1,\"929\":2}}],[\"void\",{\"1\":{\"3\":1,\"32\":3,\"63\":6,\"64\":2,\"119\":8,\"125\":2,\"126\":17,\"213\":3,\"214\":10,\"215\":1,\"216\":1,\"217\":2,\"218\":1,\"219\":1,\"297\":2,\"393\":1,\"397\":1,\"408\":1,\"409\":1,\"415\":1,\"416\":1,\"427\":1,\"437\":4,\"438\":1,\"439\":1,\"440\":2,\"444\":2,\"445\":3,\"446\":4,\"475\":9,\"517\":2,\"518\":3,\"523\":2,\"527\":18,\"530\":1,\"531\":1,\"532\":1,\"533\":3,\"537\":2,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"548\":2,\"549\":1,\"552\":2,\"554\":2,\"563\":1,\"564\":2,\"612\":3,\"613\":3,\"626\":1,\"650\":9,\"652\":3,\"661\":4,\"671\":1,\"703\":8,\"709\":2,\"712\":1,\"717\":7,\"721\":2,\"733\":1,\"734\":7,\"735\":1,\"749\":2,\"776\":1,\"779\":1,\"814\":3,\"824\":1,\"924\":2,\"929\":2,\"930\":1}}],[\"v2与键值对k1\",{\"1\":{\"513\":1}}],[\"v2\",{\"1\":{\"50\":1,\"56\":1}}],[\"varhandle\",{\"1\":{\"444\":1}}],[\"vary\",{\"1\":{\"317\":4}}],[\"variable\",{\"1\":{\"217\":3}}],[\"variables\",{\"1\":{\"74\":2}}],[\"var\",{\"1\":{\"78\":1,\"270\":2,\"322\":1,\"353\":1}}],[\"varchar的10代表了申请的空间长度\",{\"1\":{\"115\":1}}],[\"varchar类型长度是否以字符为单位\",{\"1\":{\"837\":1}}],[\"varchar类型\",{\"1\":{\"97\":1}}],[\"varchar\",{\"0\":{\"98\":1,\"115\":1},\"1\":{\"25\":1,\"60\":3,\"73\":4,\"92\":1,\"97\":1,\"104\":2,\"836\":9}}],[\"validate\",{\"1\":{\"566\":1}}],[\"validatecodefilter\",{\"1\":{\"410\":1}}],[\"valdestructor\",{\"1\":{\"126\":1}}],[\"valdup\",{\"1\":{\"126\":1}}],[\"val\",{\"1\":{\"62\":1,\"125\":1,\"652\":2}}],[\"value=\",{\"1\":{\"749\":1}}],[\"value累加\",{\"1\":{\"652\":1}}],[\"value的容量\",{\"1\":{\"532\":1}}],[\"value的格式指定\",{\"1\":{\"263\":1}}],[\"value2\",{\"1\":{\"527\":4}}],[\"value1\",{\"1\":{\"527\":4}}],[\"value格式\",{\"1\":{\"478\":1}}],[\"value是\",{\"1\":{\"443\":1}}],[\"values\",{\"1\":{\"32\":2,\"217\":1,\"445\":4,\"652\":3,\"843\":2}}],[\"value\",{\"0\":{\"443\":1},\"1\":{\"32\":4,\"34\":1,\"35\":2,\"36\":2,\"37\":1,\"39\":1,\"40\":2,\"41\":1,\"64\":8,\"119\":1,\"133\":5,\"134\":1,\"135\":4,\"136\":2,\"158\":4,\"213\":6,\"214\":4,\"217\":11,\"221\":1,\"263\":2,\"387\":1,\"388\":4,\"398\":2,\"400\":1,\"401\":2,\"402\":6,\"404\":1,\"408\":3,\"409\":1,\"410\":7,\"411\":1,\"415\":1,\"416\":2,\"419\":1,\"435\":2,\"438\":1,\"441\":5,\"443\":3,\"444\":17,\"506\":1,\"507\":1,\"508\":1,\"563\":1,\"564\":3,\"650\":3,\"652\":15,\"749\":1,\"771\":1,\"773\":3,\"865\":1}}],[\"valueof\",{\"1\":{\"3\":2,\"445\":3,\"549\":2,\"552\":1}}],[\"v0\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"127\":2}}],[\"抛出异常nullpointerexception\",{\"1\":{\"527\":1}}],[\"抛出异常\",{\"1\":{\"3\":1}}],[\"ndct\",{\"1\":{\"845\":3}}],[\"ndb\",{\"1\":{\"90\":1}}],[\"nca\",{\"1\":{\"842\":1}}],[\"n++\",{\"1\":{\"814\":1}}],[\"n+1\",{\"1\":{\"617\":1,\"620\":1}}],[\"nm\",{\"1\":{\"653\":1}}],[\"nmaenode负责各个数据块的备份\",{\"1\":{\"19\":1}}],[\"n会减1\",{\"1\":{\"551\":1}}],[\"nx\",{\"1\":{\"549\":2}}],[\"nvps\",{\"1\":{\"518\":3}}],[\"n个线程相互等待\",{\"1\":{\"446\":1,\"553\":1}}],[\"nthreads\",{\"1\":{\"771\":3}}],[\"nt\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"ntpdate\",{\"1\":{\"288\":2}}],[\"ntoa来实现\",{\"1\":{\"82\":1}}],[\"nfloadbalancerruleclassname\",{\"1\":{\"403\":1}}],[\"nfs\",{\"1\":{\"357\":1,\"367\":1}}],[\"nf\",{\"1\":{\"288\":2}}],[\"ni\",{\"1\":{\"527\":1}}],[\"nioserversocketchannel\",{\"1\":{\"612\":2}}],[\"nioeventloopgroup\",{\"1\":{\"612\":4}}],[\"nio\",{\"1\":{\"297\":1,\"433\":1,\"612\":2}}],[\"nicksors\",{\"1\":{\"285\":1}}],[\"nil\",{\"1\":{\"134\":1}}],[\"nginx做为反向代理时启用\",{\"1\":{\"317\":1}}],[\"nginx02\",{\"1\":{\"308\":1}}],[\"nginx01\",{\"1\":{\"308\":1,\"343\":2}}],[\"nginx反代不会保留虚拟路径\",{\"1\":{\"307\":1}}],[\"nginx反代会保留虚拟路径\",{\"1\":{\"307\":1}}],[\"nginx实际转发后端的请求url为http\",{\"1\":{\"307\":2}}],[\"nginx匹配这个请求的流程如下\",{\"1\":{\"307\":1}}],[\"nginx进程pid存放路径\",{\"1\":{\"305\":1}}],[\"nginx配置\",{\"0\":{\"298\":1}}],[\"nginx\",{\"0\":{\"344\":1,\"348\":1},\"1\":{\"239\":1,\"243\":10,\"244\":1,\"246\":1,\"247\":3,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"262\":1,\"296\":2,\"305\":1,\"306\":1,\"317\":3,\"343\":14,\"344\":4,\"345\":9,\"346\":1,\"348\":4,\"349\":9,\"350\":1}}],[\"nsvr\",{\"1\":{\"845\":3}}],[\"nss\",{\"1\":{\"353\":1}}],[\"ns\",{\"1\":{\"214\":1}}],[\"n>\",{\"1\":{\"113\":1}}],[\"n88lpo\",{\"1\":{\"82\":1}}],[\"n\",{\"0\":{\"798\":1,\"801\":1},\"1\":{\"73\":1,\"74\":2,\"100\":2,\"211\":1,\"220\":1,\"263\":1,\"277\":1,\"278\":2,\"295\":1,\"617\":1,\"618\":2,\"620\":1,\"621\":3,\"626\":1,\"704\":1,\"800\":1,\"814\":2,\"837\":3,\"869\":1,\"872\":1}}],[\"nexus是实际项目\",{\"1\":{\"587\":1}}],[\"nexus\",{\"1\":{\"587\":1}}],[\"nexttoken\",{\"1\":{\"652\":1}}],[\"nextint\",{\"1\":{\"554\":1,\"564\":1}}],[\"nextsequence\",{\"1\":{\"452\":1}}],[\"nextc\",{\"1\":{\"446\":3,\"821\":4,\"823\":3}}],[\"next\",{\"1\":{\"119\":4,\"125\":3,\"317\":2,\"444\":7,\"513\":1,\"845\":1}}],[\"nerver表示不再重启该pod\",{\"1\":{\"263\":1}}],[\"nerver表示仅使用本地镜像\",{\"1\":{\"263\":1}}],[\"never\",{\"1\":{\"263\":2}}],[\"need\",{\"1\":{\"217\":1,\"845\":2}}],[\"negativejnfinity\",{\"1\":{\"549\":1}}],[\"negative\",{\"1\":{\"214\":1,\"549\":1}}],[\"netty5\",{\"1\":{\"613\":1}}],[\"netty提供了许多不同的eventloopgroup的实现用来处理不同传输协议\",{\"1\":{\"612\":1}}],[\"netty<\",{\"1\":{\"611\":1}}],[\"netty\",{\"1\":{\"608\":2,\"609\":2,\"610\":3,\"611\":1,\"612\":8,\"613\":6}}],[\"netty大大简化了网络程序的开发过程比如tcp和udp的\",{\"1\":{\"607\":1}}],[\"netty是一个nio框架\",{\"1\":{\"607\":1}}],[\"netty是一个提供异步事件驱动的网络应用框架\",{\"1\":{\"607\":1}}],[\"netty是一个异步\",{\"1\":{\"607\":1}}],[\"netty本质是一个nio框架\",{\"1\":{\"607\":1}}],[\"netty主要针对在tcp协议下\",{\"1\":{\"607\":1}}],[\"netty介绍及简单示例\",{\"0\":{\"606\":1}}],[\"net包中已经提供了访问\",{\"1\":{\"515\":1}}],[\"netflix\",{\"1\":{\"395\":2,\"403\":1,\"404\":1,\"408\":1,\"416\":2}}],[\"netstat\",{\"1\":{\"258\":1,\"273\":1,\"282\":1}}],[\"net=none\",{\"1\":{\"257\":1}}],[\"net=container\",{\"1\":{\"256\":1}}],[\"net=host\",{\"1\":{\"255\":1}}],[\"net=bridge\",{\"1\":{\"251\":1}}],[\"net选项指定docker容器的网络模式\",{\"1\":{\"250\":1}}],[\"net子系统等\",{\"1\":{\"250\":1}}],[\"network\",{\"1\":{\"222\":1,\"258\":2,\"261\":1,\"262\":1,\"270\":1,\"293\":1,\"353\":1,\"836\":3}}],[\"net\",{\"1\":{\"63\":4,\"82\":1,\"132\":2,\"211\":1,\"222\":2,\"256\":4,\"261\":1,\"262\":1,\"288\":2,\"316\":1,\"317\":1,\"427\":1,\"458\":1,\"526\":1,\"537\":1,\"576\":1,\"626\":1,\"631\":1,\"650\":1,\"662\":1,\"664\":1,\"683\":1,\"716\":3,\"717\":6,\"789\":1,\"818\":1,\"825\":4,\"924\":1}}],[\"newupdater\",{\"1\":{\"929\":1}}],[\"newurl\",{\"1\":{\"499\":1}}],[\"newsinglethreadexecutor\",{\"1\":{\"772\":2}}],[\"newsinglethreadscheduledexecutor\",{\"1\":{\"214\":1}}],[\"newnode\",{\"1\":{\"734\":10}}],[\"newinstance\",{\"1\":{\"733\":1}}],[\"new一个新实例\",{\"1\":{\"733\":1}}],[\"newline\",{\"1\":{\"541\":1}}],[\"newlockcount\",{\"1\":{\"214\":3}}],[\"newlockdata\",{\"1\":{\"214\":5}}],[\"newbigdecimal\",{\"1\":{\"445\":1}}],[\"newvalue\",{\"1\":{\"444\":15}}],[\"newratio=1\",{\"1\":{\"389\":1}}],[\"newfixedthreadpool\",{\"1\":{\"214\":1,\"475\":3,\"771\":1}}],[\"newclient\",{\"1\":{\"214\":1}}],[\"newcondition\",{\"1\":{\"214\":2}}],[\"newconcurrentmap\",{\"1\":{\"214\":1}}],[\"newcachedthreadpool\",{\"1\":{\"213\":2,\"214\":1,\"773\":2}}],[\"new\",{\"1\":{\"3\":14,\"19\":1,\"32\":8,\"63\":13,\"64\":8,\"213\":5,\"214\":15,\"217\":1,\"218\":3,\"219\":2,\"222\":3,\"297\":6,\"399\":1,\"403\":1,\"404\":1,\"408\":2,\"427\":3,\"437\":1,\"440\":9,\"445\":10,\"446\":14,\"475\":1,\"500\":3,\"518\":11,\"523\":2,\"527\":8,\"530\":1,\"531\":1,\"532\":1,\"533\":4,\"537\":2,\"544\":2,\"546\":1,\"547\":1,\"548\":3,\"552\":4,\"554\":3,\"563\":3,\"564\":5,\"612\":6,\"626\":10,\"650\":5,\"652\":8,\"661\":1,\"673\":1,\"703\":9,\"717\":2,\"721\":2,\"722\":1,\"733\":1,\"734\":6,\"735\":6,\"749\":1,\"754\":4,\"771\":2,\"772\":6,\"773\":4,\"774\":5,\"776\":6,\"777\":1,\"779\":2,\"814\":6,\"820\":1,\"821\":1,\"907\":1,\"929\":2,\"930\":5}}],[\"npe\",{\"1\":{\"413\":6}}],[\"nproc\",{\"1\":{\"270\":5}}],[\"nprobe\",{\"1\":{\"58\":1,\"62\":1}}],[\"np\",{\"1\":{\"59\":3}}],[\"nlist\",{\"1\":{\"58\":1}}],[\"nlp\",{\"1\":{\"53\":1,\"54\":1}}],[\"num++\",{\"1\":{\"930\":1}}],[\"num=5238\",{\"1\":{\"837\":1}}],[\"num=subnet\",{\"1\":{\"526\":1}}],[\"num=ip\",{\"1\":{\"526\":1}}],[\"num=2\",{\"1\":{\"60\":1}}],[\"num也用于计算主机段\",{\"1\":{\"526\":1}}],[\"numbuckets\",{\"1\":{\"402\":2}}],[\"numberformat\",{\"1\":{\"445\":5}}],[\"numberformatexception\",{\"1\":{\"413\":1,\"626\":1}}],[\"number\",{\"1\":{\"24\":6,\"263\":2,\"440\":1,\"444\":1,\"605\":1,\"648\":2,\"868\":1}}],[\"numbersflat\",{\"1\":{\"24\":1}}],[\"numbers\",{\"1\":{\"24\":9,\"527\":4}}],[\"num\",{\"1\":{\"214\":3,\"526\":2,\"837\":1,\"930\":2}}],[\"numpy\",{\"1\":{\"59\":2}}],[\"null表示锁未被线程持有\",{\"1\":{\"814\":1}}],[\"nullpointerexception\",{\"1\":{\"413\":2}}],[\"null值\",{\"1\":{\"112\":1}}],[\"null\",{\"0\":{\"88\":1},\"1\":{\"3\":4,\"21\":1,\"23\":3,\"27\":2,\"63\":3,\"74\":1,\"82\":2,\"113\":1,\"119\":2,\"121\":1,\"214\":6,\"217\":4,\"218\":3,\"219\":3,\"263\":2,\"297\":4,\"317\":1,\"388\":3,\"389\":1,\"410\":1,\"411\":1,\"413\":5,\"518\":19,\"523\":1,\"527\":1,\"563\":1,\"564\":4,\"650\":3,\"712\":2,\"733\":2,\"734\":5,\"814\":2,\"821\":1,\"822\":1,\"823\":2,\"929\":4}}],[\"nan\",{\"1\":{\"549\":2}}],[\"nanoseconds\",{\"1\":{\"214\":2,\"758\":1,\"773\":3}}],[\"namingservice\",{\"1\":{\"410\":3,\"411\":3}}],[\"namevaluepair\",{\"1\":{\"518\":1}}],[\"name为服务提供者名称\",{\"1\":{\"403\":1}}],[\"namedthreadfactory\",{\"1\":{\"440\":4,\"446\":2,\"754\":2,\"776\":2}}],[\"named\",{\"1\":{\"222\":1}}],[\"namestartswith\",{\"1\":{\"717\":1}}],[\"namespace子系统\",{\"1\":{\"250\":2}}],[\"namespace是相互隔离的\",{\"1\":{\"250\":1}}],[\"namespace\",{\"1\":{\"208\":1,\"250\":1,\"263\":1,\"275\":2}}],[\"names参数来区别表名的大小写\",{\"1\":{\"82\":1}}],[\"names\",{\"1\":{\"63\":3,\"74\":2,\"317\":1,\"321\":2,\"527\":6}}],[\"name=dmtestsvr\",{\"1\":{\"837\":1}}],[\"name=dmtest\",{\"1\":{\"837\":1}}],[\"name=1234\",{\"1\":{\"297\":1}}],[\"name=123\",{\"1\":{\"297\":1}}],[\"name=zhengtianqi\",{\"1\":{\"297\":2}}],[\"name=kubernetes\",{\"1\":{\"291\":1}}],[\"name=elastic\",{\"1\":{\"267\":1}}],[\"name=centos\",{\"1\":{\"255\":1,\"256\":2,\"257\":1}}],[\"name=collection\",{\"1\":{\"60\":1}}],[\"name=nginx\",{\"1\":{\"251\":1,\"252\":1,\"253\":1,\"254\":2}}],[\"name=\",{\"1\":{\"58\":3,\"60\":5,\"104\":1,\"404\":1,\"480\":2,\"727\":1,\"893\":1}}],[\"nameorscore\",{\"1\":{\"32\":3}}],[\"nameandscore\",{\"1\":{\"32\":2}}],[\"namenode只被动接受请求\",{\"1\":{\"19\":1}}],[\"namenode只是重命名被删除的文件到\",{\"1\":{\"14\":1}}],[\"namenode从secondaryname获取合并好的新的fsimage并将旧的替换掉\",{\"1\":{\"19\":1}}],[\"namenode在更新内存的元信息之前都会先将操作写入edits文件\",{\"1\":{\"19\":1}}],[\"namenode占用大量内存和i\",{\"1\":{\"16\":1}}],[\"namenode启动时加载到内存中\",{\"1\":{\"16\":1}}],[\"namenode也负责维护所有这些文件或目录的打开\",{\"1\":{\"16\":1}}],[\"namenode管理着文件系统的命名空间\",{\"1\":{\"16\":1}}],[\"namenode负责信息维护者\",{\"1\":{\"15\":1}}],[\"namenode将会把文件从命名空间中删除\",{\"1\":{\"14\":1}}],[\"namenode会重新备份损坏的数据块\",{\"1\":{\"19\":1}}],[\"namenode会继续备份数据到新的可用的节点\",{\"1\":{\"14\":1}}],[\"namenode会为创建文件写一条记录到本地磁盘的editlog\",{\"1\":{\"14\":1}}],[\"namenode会很快成为瓶颈\",{\"1\":{\"14\":1}}],[\"namenode会返回该块副本datanode的节点地址\",{\"1\":{\"14\":1}}],[\"namenode\",{\"0\":{\"16\":1},\"1\":{\"14\":1,\"15\":1,\"433\":1}}],[\"name\",{\"1\":{\"3\":9,\"13\":4,\"21\":3,\"22\":9,\"24\":1,\"25\":1,\"27\":1,\"28\":3,\"60\":7,\"61\":3,\"62\":6,\"63\":8,\"74\":1,\"82\":1,\"104\":2,\"109\":3,\"111\":1,\"134\":15,\"135\":19,\"136\":16,\"137\":15,\"138\":4,\"139\":7,\"222\":2,\"262\":1,\"263\":13,\"272\":1,\"275\":8,\"276\":2,\"278\":2,\"295\":1,\"297\":3,\"307\":2,\"317\":3,\"392\":1,\"396\":1,\"398\":2,\"402\":4,\"403\":1,\"404\":7,\"408\":7,\"409\":6,\"410\":4,\"411\":4,\"414\":1,\"415\":1,\"416\":4,\"417\":1,\"418\":3,\"435\":1,\"446\":5,\"493\":2,\"495\":1,\"499\":3,\"500\":10,\"501\":5,\"523\":5,\"533\":6,\"566\":2,\"733\":1,\"734\":5,\"779\":2,\"837\":2,\"838\":4,\"841\":8,\"843\":4,\"865\":2,\"872\":1,\"874\":1,\"883\":4,\"887\":2,\"890\":1,\"893\":4,\"894\":7}}],[\"native\",{\"1\":{\"321\":1,\"322\":2,\"556\":1}}],[\"national\",{\"1\":{\"167\":1}}],[\"nacosfeigndemoapplication\",{\"1\":{\"416\":2}}],[\"nacosfactory\",{\"1\":{\"297\":2}}],[\"nacos服务地址\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"415\":1,\"416\":1}}],[\"nacos服务发现\",{\"1\":{\"395\":1,\"402\":2,\"416\":1}}],[\"nacosdiscoveryexampleapplication\",{\"1\":{\"397\":2}}],[\"nacosproviderdemoapplication\",{\"1\":{\"393\":2,\"415\":2}}],[\"nacos<\",{\"1\":{\"297\":1}}],[\"nacosconfigexampleapplication\",{\"1\":{\"297\":2}}],[\"nacos读取配置超时或网络异常\",{\"1\":{\"297\":1}}],[\"nacosutils$1\",{\"1\":{\"297\":1}}],[\"nacosutils\",{\"1\":{\"297\":3}}],[\"nacosexception\",{\"1\":{\"297\":3,\"410\":1,\"411\":1}}],[\"nacos\",{\"0\":{\"420\":1},\"1\":{\"297\":21,\"391\":1,\"392\":2,\"394\":1,\"395\":1,\"396\":2,\"398\":1,\"401\":7,\"402\":2,\"403\":2,\"404\":3,\"408\":3,\"409\":3,\"410\":1,\"411\":3,\"415\":6,\"416\":6,\"417\":4,\"423\":1,\"427\":3}}],[\"nacos配置中心使用\",{\"0\":{\"297\":1}}],[\"nasdaq\",{\"1\":{\"22\":3}}],[\"nomount\",{\"1\":{\"843\":1}}],[\"nohup\",{\"1\":{\"389\":1}}],[\"nopreempt\",{\"1\":{\"331\":1,\"336\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"nopush\",{\"1\":{\"317\":1}}],[\"nogpgcheck\",{\"1\":{\"321\":1}}],[\"noarchivelog\",{\"1\":{\"869\":1}}],[\"noarch\",{\"1\":{\"319\":2}}],[\"nofile\",{\"1\":{\"270\":2}}],[\"nologin\",{\"1\":{\"243\":1}}],[\"nodelay\",{\"1\":{\"317\":1}}],[\"nodeip\",{\"1\":{\"296\":1}}],[\"node2\",{\"1\":{\"288\":1}}],[\"node1\",{\"1\":{\"288\":1}}],[\"node\",{\"0\":{\"294\":1,\"656\":1},\"1\":{\"270\":1,\"276\":1,\"294\":1,\"653\":1,\"656\":1,\"657\":1,\"734\":8,\"929\":9}}],[\"nodeselector\",{\"1\":{\"263\":1}}],[\"nodes\",{\"1\":{\"192\":1,\"293\":1}}],[\"nodeps\",{\"1\":{\"76\":1,\"318\":1}}],[\"non\",{\"1\":{\"101\":1,\"445\":2}}],[\"none\",{\"0\":{\"257\":1},\"1\":{\"63\":1,\"250\":2,\"257\":1}}],[\"nowait区别\",{\"1\":{\"727\":1}}],[\"nowait\",{\"1\":{\"727\":3}}],[\"now\",{\"1\":{\"63\":5,\"527\":1,\"823\":1}}],[\"normal\",{\"1\":{\"837\":5,\"845\":5,\"892\":5,\"893\":25}}],[\"normalized\",{\"1\":{\"59\":1}}],[\"norm\",{\"1\":{\"59\":3}}],[\"no\",{\"0\":{\"149\":1},\"1\":{\"21\":1,\"146\":5,\"148\":1,\"149\":1,\"155\":3,\"217\":2,\"317\":8,\"341\":1,\"352\":3,\"364\":1,\"445\":2,\"823\":1}}],[\"notice\",{\"1\":{\"572\":1}}],[\"notify\",{\"1\":{\"336\":1,\"361\":1,\"926\":1}}],[\"note\",{\"1\":{\"186\":1,\"820\":1}}],[\"notes\",{\"1\":{\"21\":1}}],[\"nothing\",{\"1\":{\"155\":1}}],[\"not\",{\"1\":{\"21\":1,\"74\":2,\"82\":1,\"126\":1,\"155\":1,\"214\":1,\"389\":1,\"612\":1,\"837\":1,\"845\":1,\"892\":1,\"893\":1}}],[\"n4\",{\"1\":{\"14\":1}}],[\"n3\",{\"1\":{\"14\":1}}],[\"n2\",{\"1\":{\"14\":1}}],[\"n1\",{\"1\":{\"14\":6}}],[\"0表示等于\",{\"1\":{\"734\":1}}],[\"0战略中提出\",{\"1\":{\"688\":1}}],[\"0时代\",{\"1\":{\"687\":1}}],[\"09\",{\"1\":{\"683\":1,\"834\":2}}],[\"0utofmemoryerror\",{\"1\":{\"651\":1}}],[\"0d\",{\"1\":{\"549\":1}}],[\"0b1001就是\",{\"1\":{\"549\":1}}],[\"0b\",{\"1\":{\"549\":2}}],[\"0二进制为\",{\"1\":{\"526\":1}}],[\"0是一个c类地址\",{\"1\":{\"526\":1}}],[\"0转换成二进制\",{\"1\":{\"526\":1}}],[\"0开始\",{\"1\":{\"450\":1}}],[\"0~1之间的bigdecimal小数\",{\"1\":{\"445\":1}}],[\"0m\",{\"1\":{\"389\":3}}],[\"009\",{\"1\":{\"893\":1}}],[\"00pkg\",{\"1\":{\"893\":1}}],[\"00m\",{\"1\":{\"892\":1,\"893\":3}}],[\"006\",{\"1\":{\"445\":1}}],[\"0011\",{\"1\":{\"896\":2}}],[\"0010\",{\"1\":{\"549\":1}}],[\"001\",{\"1\":{\"445\":1}}],[\"00054错误\",{\"1\":{\"727\":1}}],[\"000这些下划线只是为丫让人更易读\",{\"1\":{\"549\":1}}],[\"00010000\",{\"1\":{\"526\":2}}],[\"00010011\",{\"1\":{\"526\":2}}],[\"000\",{\"1\":{\"445\":1,\"549\":1}}],[\"0000表示一百万\",{\"1\":{\"549\":1}}],[\"00001010\",{\"1\":{\"526\":4}}],[\"000040\",{\"1\":{\"342\":1}}],[\"00000010\",{\"1\":{\"526\":1}}],[\"00000000\",{\"1\":{\"526\":7}}],[\"00000000000009936472\",{\"1\":{\"433\":3}}],[\"00000000000005367851\",{\"1\":{\"433\":3}}],[\"00000000000000000000\",{\"1\":{\"433\":3}}],[\"00000001\",{\"1\":{\"526\":11}}],[\"000005\",{\"1\":{\"328\":1,\"329\":1,\"342\":1}}],[\"000001\",{\"1\":{\"80\":1}}],[\"008\",{\"1\":{\"445\":1}}],[\"00\",{\"1\":{\"328\":1,\"341\":1,\"445\":8,\"837\":1,\"868\":4,\"891\":2,\"892\":9,\"893\":31}}],[\"0的版本\",{\"1\":{\"320\":1}}],[\"0被访问的几率为其他服务器的两倍\",{\"1\":{\"300\":1}}],[\"0k\",{\"1\":{\"277\":1}}],[\"03t10\",{\"1\":{\"527\":1}}],[\"033\",{\"1\":{\"389\":6}}],[\"03\",{\"1\":{\"222\":1,\"263\":1}}],[\"0l\",{\"1\":{\"214\":3,\"440\":2,\"446\":1,\"650\":1,\"721\":1,\"754\":1,\"771\":1,\"772\":2,\"776\":1}}],[\"0后彻底废弃\",{\"1\":{\"82\":1}}],[\"0x7000c\",{\"1\":{\"837\":1}}],[\"0x\",{\"1\":{\"549\":2}}],[\"0xff\",{\"1\":{\"157\":1,\"613\":1}}],[\"0xd4d1\",{\"1\":{\"73\":1}}],[\"0xd1b9\",{\"1\":{\"73\":1}}],[\"0xcef4\",{\"1\":{\"73\":1}}],[\"0xcdda\",{\"1\":{\"73\":1}}],[\"0xcbfa\",{\"1\":{\"73\":1}}],[\"0xc8f6\",{\"1\":{\"73\":1}}],[\"0xc8bb\",{\"1\":{\"73\":1}}],[\"0xc6da\",{\"1\":{\"73\":1}}],[\"0xc5be\",{\"1\":{\"73\":1}}],[\"0xc5b6\",{\"1\":{\"73\":1}}],[\"0xc4c3\",{\"1\":{\"73\":1}}],[\"0xc2e8\",{\"1\":{\"73\":1}}],[\"0xc0ac\",{\"1\":{\"73\":1}}],[\"0xbfa6\",{\"1\":{\"73\":1}}],[\"0xbbf7\",{\"1\":{\"73\":1}}],[\"0xb9fe\",{\"1\":{\"73\":1}}],[\"0xb8c1\",{\"1\":{\"73\":1}}],[\"0xb7a2\",{\"1\":{\"73\":1}}],[\"0xb6ea\",{\"1\":{\"73\":1}}],[\"0xb4ee\",{\"1\":{\"73\":1}}],[\"0xb2c1\",{\"1\":{\"73\":1}}],[\"0xb0c5\",{\"1\":{\"73\":1}}],[\"0xb0a1\",{\"1\":{\"73\":1}}],[\"0<\",{\"1\":{\"63\":1,\"297\":1,\"389\":2,\"715\":2}}],[\"062\",{\"1\":{\"893\":1}}],[\"06340f8feb05\",{\"1\":{\"674\":1}}],[\"06\",{\"1\":{\"23\":1,\"27\":1,\"277\":1,\"290\":2,\"722\":1,\"834\":1}}],[\"08\",{\"1\":{\"23\":4,\"27\":1,\"222\":1,\"478\":1,\"837\":1,\"845\":2}}],[\"07\",{\"1\":{\"23\":2,\"285\":1,\"475\":1}}],[\"052\",{\"1\":{\"262\":1}}],[\"05\",{\"1\":{\"23\":8,\"475\":1,\"722\":1}}],[\"04\",{\"1\":{\"23\":2,\"26\":2,\"211\":1}}],[\"02等\",{\"1\":{\"26\":1}}],[\"02\",{\"1\":{\"21\":1,\"23\":4,\"26\":1,\"27\":2,\"28\":1,\"342\":1,\"478\":1,\"893\":6,\"894\":3,\"899\":1}}],[\"0100\",{\"1\":{\"549\":2}}],[\"010\",{\"1\":{\"549\":1}}],[\"018\",{\"1\":{\"262\":1}}],[\"015\",{\"1\":{\"23\":1}}],[\"01\",{\"1\":{\"21\":1,\"23\":4,\"26\":10,\"27\":2,\"107\":1,\"445\":1,\"673\":1,\"683\":1,\"891\":1,\"892\":1,\"893\":2,\"894\":7,\"899\":1}}],[\"0\",{\"0\":{\"671\":1,\"686\":1,\"687\":1,\"688\":1,\"729\":1,\"771\":1},\"1\":{\"3\":1,\"21\":1,\"22\":10,\"23\":3,\"24\":4,\"32\":5,\"34\":1,\"58\":1,\"59\":4,\"61\":1,\"62\":1,\"63\":2,\"74\":2,\"107\":1,\"118\":1,\"126\":2,\"127\":5,\"134\":22,\"135\":24,\"139\":5,\"152\":1,\"155\":1,\"161\":1,\"194\":1,\"213\":16,\"214\":11,\"218\":2,\"219\":2,\"221\":2,\"229\":4,\"230\":8,\"253\":2,\"254\":4,\"262\":3,\"263\":5,\"266\":1,\"270\":4,\"273\":20,\"275\":1,\"276\":4,\"278\":4,\"280\":2,\"282\":10,\"288\":1,\"292\":3,\"293\":4,\"295\":1,\"297\":5,\"317\":2,\"320\":2,\"328\":1,\"341\":1,\"342\":1,\"343\":4,\"352\":5,\"355\":4,\"357\":4,\"362\":4,\"364\":2,\"366\":2,\"377\":1,\"389\":4,\"392\":2,\"396\":2,\"412\":1,\"414\":2,\"419\":1,\"435\":2,\"439\":1,\"440\":2,\"444\":2,\"445\":25,\"446\":5,\"477\":2,\"479\":2,\"480\":2,\"523\":1,\"526\":21,\"527\":2,\"533\":1,\"539\":1,\"541\":1,\"549\":10,\"552\":1,\"563\":1,\"564\":4,\"578\":2,\"605\":1,\"612\":2,\"616\":2,\"617\":1,\"626\":8,\"650\":2,\"652\":3,\"673\":2,\"688\":1,\"708\":1,\"712\":1,\"715\":9,\"718\":1,\"719\":1,\"734\":3,\"735\":1,\"768\":1,\"773\":2,\"776\":1,\"789\":1,\"814\":2,\"820\":5,\"821\":1,\"822\":3,\"823\":3,\"834\":4,\"837\":6,\"838\":1,\"841\":2,\"842\":4,\"843\":13,\"845\":20,\"865\":1,\"868\":3,\"869\":6,\"870\":2,\"874\":2,\"885\":1,\"887\":1,\"888\":1,\"891\":1,\"892\":4,\"893\":27,\"894\":1,\"930\":2}}],[\"tbstest\",{\"1\":{\"878\":1}}],[\"tbs01\",{\"1\":{\"866\":1}}],[\"tbs\",{\"1\":{\"866\":1,\"867\":1}}],[\"tblproperties\",{\"1\":{\"21\":1}}],[\"ts\",{\"1\":{\"865\":1}}],[\"tm\",{\"1\":{\"789\":8}}],[\"tmpdir=\",{\"1\":{\"834\":1}}],[\"tmpdir\",{\"1\":{\"74\":1,\"834\":1}}],[\"tmp\",{\"1\":{\"22\":3,\"29\":2,\"74\":3,\"230\":1,\"326\":1,\"327\":1,\"342\":2,\"367\":4,\"834\":6}}],[\"tpcm\",{\"0\":{\"689\":1},\"1\":{\"689\":1}}],[\"tpm\",{\"1\":{\"687\":1}}],[\"tpm的嵌入式软件\",{\"1\":{\"684\":1}}],[\"tpm的物理安全\",{\"1\":{\"684\":1}}],[\"tps61f\",{\"1\":{\"294\":1}}],[\"tps性能会更高\",{\"1\":{\"82\":1}}],[\"t3\",{\"1\":{\"533\":4}}],[\"t2\",{\"1\":{\"533\":4,\"563\":5}}],[\"t1\",{\"1\":{\"533\":4,\"563\":5}}],[\"tls\",{\"1\":{\"521\":1,\"522\":1}}],[\"tlsv1\",{\"1\":{\"317\":2}}],[\"two\",{\"1\":{\"454\":1}}],[\"twemproxy\",{\"1\":{\"158\":1,\"161\":2}}],[\"tcg组织制定了tpm\",{\"1\":{\"687\":1}}],[\"tcg\",{\"1\":{\"687\":1}}],[\"tcg用实体行为的预期性来定义\",{\"1\":{\"684\":1}}],[\"tcc\",{\"0\":{\"422\":1},\"1\":{\"420\":1,\"422\":1}}],[\"tcp四次挥手协议\",{\"0\":{\"648\":1}}],[\"tcp三次握手协议\",{\"0\":{\"647\":1}}],[\"tcp握手结束\",{\"1\":{\"648\":1}}],[\"tcp握手\",{\"0\":{\"646\":1}}],[\"tcp可以立即发送一个数据段\",{\"1\":{\"644\":1}}],[\"tcp允许通信双方的应用程序在任何时候都能发送数据\",{\"1\":{\"644\":1}}],[\"tcp提供全双工通信\",{\"1\":{\"644\":1}}],[\"tcp能够减小向网络注入数据的速率和数量\",{\"1\":{\"644\":1}}],[\"tcp为了保证报文传输的可靠\",{\"1\":{\"644\":1}}],[\"tcp不像udp一样那样一个个报文独立地传输\",{\"1\":{\"644\":1}}],[\"tcp连接\",{\"0\":{\"643\":1}}],[\"tcp协议全称是传输控制协议是一种面向连接的\",{\"1\":{\"642\":1}}],[\"tcp协议的通信过程\",{\"1\":{\"637\":1}}],[\"tcp一样在发送数据前进行三次握手建立连接的\",{\"1\":{\"639\":1}}],[\"tcp与udp的区别\",{\"0\":{\"638\":1}}],[\"tcp的全双工的工作模式及tcp的滑动窗口就是依赖于这两个独立的buffer和该buffer的填充状态\",{\"1\":{\"637\":1}}],[\"tcp6\",{\"1\":{\"282\":4}}],[\"tcpsocket\",{\"1\":{\"263\":1}}],[\"tcp\",{\"0\":{\"486\":1,\"632\":1},\"1\":{\"230\":4,\"273\":2,\"317\":2,\"483\":1,\"486\":1,\"520\":1,\"521\":1,\"522\":2,\"564\":1,\"609\":1,\"636\":1,\"638\":4,\"642\":2,\"645\":1,\"839\":1}}],[\"tutorial\",{\"1\":{\"620\":2,\"621\":2}}],[\"tu\",{\"1\":{\"475\":1}}],[\"tunlp\",{\"1\":{\"258\":1}}],[\"tuple\",{\"1\":{\"22\":1}}],[\"ttl=64\",{\"1\":{\"262\":2}}],[\"ttl\",{\"1\":{\"139\":1,\"214\":1,\"222\":1,\"650\":1}}],[\"tx\",{\"1\":{\"107\":2,\"426\":1}}],[\"txt的文件\",{\"1\":{\"541\":1}}],[\"txt文件的内容清空\",{\"1\":{\"539\":1}}],[\"txt配置的service\",{\"1\":{\"426\":1}}],[\"txt到本地文件系统\",{\"0\":{\"11\":1}}],[\"txt上传到hdfs\",{\"1\":{\"7\":1}}],[\"txt\",{\"1\":{\"7\":8,\"9\":3,\"10\":3,\"11\":1,\"27\":4,\"63\":2,\"537\":2,\"539\":2,\"541\":2,\"542\":1,\"544\":1,\"545\":2,\"548\":2,\"572\":3}}],[\"txtdir下的文件内容\",{\"0\":{\"9\":1}}],[\"txtdir目录结构\",{\"0\":{\"8\":1}}],[\"txtdir\",{\"0\":{\"12\":1},\"1\":{\"6\":1,\"7\":4,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1}}],[\"ticketlock\",{\"1\":{\"816\":1}}],[\"till\",{\"1\":{\"805\":1}}],[\"title\",{\"1\":{\"720\":1}}],[\"tid\",{\"1\":{\"626\":1,\"822\":1,\"823\":1}}],[\"tianqi\",{\"1\":{\"317\":5}}],[\"tips\",{\"1\":{\"90\":1,\"254\":1,\"551\":1,\"751\":1}}],[\"timeindex\",{\"1\":{\"433\":3}}],[\"timeinmilliseconds\",{\"1\":{\"402\":2}}],[\"timezone=asia\",{\"1\":{\"389\":1}}],[\"time=0\",{\"1\":{\"262\":2}}],[\"timesstamp来实现\",{\"1\":{\"82\":1}}],[\"timestamps\",{\"1\":{\"321\":1}}],[\"timestamps表示\",{\"1\":{\"25\":1}}],[\"timestamp如果没有显示声明not\",{\"1\":{\"74\":1}}],[\"timestamp函数\",{\"1\":{\"25\":1}}],[\"timestamp函数和\",{\"1\":{\"25\":1}}],[\"timestamp的值可以是整数\",{\"1\":{\"25\":1}}],[\"timestamp\",{\"1\":{\"21\":2,\"74\":1,\"139\":2,\"283\":1,\"285\":1}}],[\"timeout指定\",{\"1\":{\"799\":1}}],[\"timeout是调用select的进程\",{\"1\":{\"799\":1}}],[\"timeout网络连接超时\",{\"1\":{\"651\":1}}],[\"timeoutblockingwaitstrategy的实现方法是阻塞给定的时间\",{\"1\":{\"470\":1}}],[\"timeoutblockingwaitstrategy的一个变形\",{\"1\":{\"467\":1,\"472\":1}}],[\"timeoutblockingwaitstrategy\",{\"0\":{\"470\":1},\"1\":{\"472\":1}}],[\"timeoutblockingwaitstrategy实现方法是阻塞给定的时间超过时间的话会抛出超时异常\",{\"1\":{\"458\":1}}],[\"timeoutinmilliseconds\",{\"1\":{\"396\":1,\"402\":1}}],[\"timeout=20s\",{\"1\":{\"300\":1,\"301\":1,\"302\":1}}],[\"timeoutseconds\",{\"1\":{\"263\":1}}],[\"timeout参数需要同时配置才能生效\",{\"1\":{\"74\":1}}],[\"timeout值为8个小时\",{\"1\":{\"74\":1}}],[\"timeout\",{\"1\":{\"74\":3,\"135\":3,\"139\":1,\"215\":1,\"216\":2,\"217\":2,\"218\":2,\"219\":3,\"297\":2,\"317\":7,\"396\":1,\"402\":1,\"446\":1,\"475\":1,\"518\":10,\"555\":1,\"564\":2,\"762\":1}}],[\"timeunit\",{\"1\":{\"63\":2,\"213\":4,\"214\":9,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"219\":1,\"297\":1,\"440\":2,\"446\":2,\"475\":1,\"531\":1,\"551\":1,\"555\":1,\"721\":1,\"754\":1,\"762\":1,\"771\":1,\"772\":2,\"773\":5,\"774\":3,\"776\":1,\"814\":1,\"930\":1}}],[\"time\",{\"1\":{\"28\":1,\"61\":9,\"64\":2,\"74\":1,\"139\":1,\"192\":1,\"214\":5,\"222\":1,\"288\":1,\"527\":1,\"551\":1,\"626\":1,\"837\":1,\"842\":1,\"872\":2,\"883\":3,\"892\":1,\"893\":6}}],[\"t\",{\"1\":{\"25\":1,\"27\":1,\"62\":9,\"73\":1,\"104\":1,\"125\":4,\"217\":12,\"241\":1,\"244\":1,\"263\":1,\"367\":1,\"371\":1,\"388\":2,\"413\":1,\"445\":3,\"475\":3,\"495\":1,\"527\":1,\"563\":3,\"650\":1,\"732\":2,\"734\":3,\"735\":1,\"838\":1,\"843\":4,\"865\":1,\"872\":1,\"874\":2,\"887\":7,\"890\":1,\"893\":9,\"894\":10,\"929\":1}}],[\"tez\",{\"1\":{\"783\":1}}],[\"temp\",{\"1\":{\"317\":1,\"626\":2,\"843\":1,\"864\":3,\"865\":8,\"902\":1,\"904\":1}}],[\"template\",{\"1\":{\"263\":1,\"275\":1}}],[\"temporary\",{\"1\":{\"82\":1,\"322\":1}}],[\"technologies\",{\"1\":{\"375\":1}}],[\"tech\",{\"1\":{\"211\":1}}],[\"testautowired\",{\"1\":{\"733\":1}}],[\"test运行的步骤中会提示测试报告\",{\"1\":{\"581\":1}}],[\"testcar\",{\"1\":{\"554\":1}}],[\"testcommand\",{\"1\":{\"402\":3}}],[\"testoptional\",{\"1\":{\"527\":1}}],[\"testzoneddatetime\",{\"1\":{\"527\":1}}],[\"teststructdatetime\",{\"1\":{\"527\":1}}],[\"testlocaldatetime\",{\"1\":{\"527\":1}}],[\"testlock\",{\"1\":{\"214\":1}}],[\"testreflect\",{\"1\":{\"523\":1}}],[\"test1\",{\"1\":{\"436\":2,\"437\":1,\"438\":1}}],[\"test123\",{\"1\":{\"78\":1,\"80\":1}}],[\"test<\",{\"1\":{\"434\":1}}],[\"testfallback\",{\"1\":{\"402\":2}}],[\"testetcddistributelock\",{\"1\":{\"214\":1}}],[\"test\",{\"0\":{\"383\":1},\"1\":{\"60\":1,\"62\":2,\"73\":1,\"213\":4,\"214\":2,\"216\":1,\"243\":2,\"263\":1,\"297\":2,\"307\":5,\"310\":1,\"311\":1,\"312\":1,\"315\":3,\"316\":1,\"317\":1,\"366\":1,\"404\":1,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"415\":1,\"416\":1,\"499\":3,\"527\":20,\"537\":2,\"564\":1,\"566\":4,\"579\":1,\"581\":1,\"593\":1,\"671\":1,\"673\":1,\"707\":3,\"708\":1,\"711\":1,\"712\":1,\"715\":2,\"734\":2,\"814\":1,\"843\":4}}],[\"textoutputformat\",{\"1\":{\"32\":1}}],[\"textinputformat\",{\"1\":{\"32\":1}}],[\"text\",{\"1\":{\"32\":11,\"82\":1,\"317\":7,\"477\":1,\"478\":1,\"479\":1,\"480\":1,\"626\":7,\"652\":14,\"748\":4}}],[\"term\",{\"1\":{\"389\":1}}],[\"term=java+设置+minio永久访问链接\",{\"1\":{\"63\":1}}],[\"terminating\",{\"1\":{\"445\":2}}],[\"terminated\",{\"1\":{\"27\":1}}],[\"terminqted\",{\"1\":{\"25\":1}}],[\"terry\",{\"1\":{\"27\":1}}],[\"terrys\",{\"1\":{\"27\":1}}],[\"teacher\",{\"1\":{\"7\":1}}],[\"tab\",{\"1\":{\"887\":1}}],[\"table记录\",{\"1\":{\"427\":1}}],[\"tablespace\",{\"1\":{\"866\":2,\"867\":1,\"878\":1,\"880\":1,\"893\":6,\"894\":2}}],[\"tables\",{\"1\":{\"321\":1,\"324\":1,\"330\":1,\"342\":2,\"888\":1,\"893\":1}}],[\"tables语句注意到锁定设置\",{\"1\":{\"74\":1}}],[\"tablesample\",{\"1\":{\"24\":9}}],[\"table=1\",{\"1\":{\"74\":1}}],[\"tablefield\",{\"1\":{\"64\":4}}],[\"table前drop\",{\"1\":{\"28\":1}}],[\"table\",{\"1\":{\"20\":1,\"21\":9,\"22\":4,\"25\":2,\"26\":8,\"27\":13,\"28\":6,\"74\":4,\"82\":2,\"89\":1,\"92\":1,\"104\":1,\"109\":5,\"111\":1,\"113\":1,\"124\":4,\"321\":1,\"427\":2,\"506\":1,\"884\":1,\"887\":3,\"888\":1,\"893\":3,\"894\":1}}],[\"take\",{\"1\":{\"533\":1}}],[\"tag\",{\"0\":{\"501\":1},\"1\":{\"230\":1,\"263\":1,\"501\":9}}],[\"tar\",{\"1\":{\"77\":2,\"243\":2,\"263\":1,\"343\":2,\"352\":2,\"376\":2,\"379\":2}}],[\"target>\",{\"1\":{\"715\":1}}],[\"targetport\",{\"1\":{\"263\":1}}],[\"targetaddress\",{\"1\":{\"243\":1}}],[\"target\",{\"1\":{\"59\":1,\"230\":1,\"353\":5,\"504\":1,\"712\":1,\"719\":1,\"733\":2,\"834\":1,\"835\":1,\"836\":1,\"838\":2}}],[\"tail\",{\"1\":{\"74\":2,\"119\":3,\"157\":1,\"929\":2}}],[\"tanimoto\",{\"1\":{\"54\":1}}],[\"task将每组数据一次交给用户编写的\",{\"1\":{\"48\":1}}],[\"task只需对所有的数据进行一次归并排序即可\",{\"1\":{\"47\":1}}],[\"task实现了局部排序\",{\"1\":{\"47\":1}}],[\"task启动了两个后台线程对内存和磁盘上的文件进行合并\",{\"1\":{\"46\":1}}],[\"task上远程复制一片数据\",{\"1\":{\"45\":1}}],[\"task从各个map\",{\"1\":{\"45\":1}}],[\"task\",{\"1\":{\"39\":1,\"43\":1,\"63\":1,\"446\":1,\"475\":5,\"533\":11,\"627\":4,\"773\":1}}],[\"tasktracker用于跟踪任务的执行情况\",{\"1\":{\"33\":1}}],[\"tasktracker\",{\"1\":{\"33\":1}}],[\"taxes\",{\"1\":{\"22\":3}}],[\"thd\",{\"1\":{\"857\":1}}],[\"that\",{\"1\":{\"612\":1}}],[\"threshold\",{\"1\":{\"412\":1}}],[\"thread=new\",{\"1\":{\"554\":1}}],[\"threadpoolconfig\",{\"1\":{\"779\":1}}],[\"threadpooltaskexecutor\",{\"1\":{\"779\":10}}],[\"threadpool\",{\"1\":{\"475\":6}}],[\"threadpoolexecutor\",{\"1\":{\"440\":4,\"446\":2,\"475\":2,\"754\":2,\"771\":1,\"772\":2,\"773\":2,\"776\":2,\"779\":2,\"814\":2,\"930\":2}}],[\"threadhints\",{\"1\":{\"472\":1}}],[\"threadfactory\",{\"0\":{\"760\":1},\"1\":{\"440\":2,\"446\":1,\"754\":1,\"772\":3,\"773\":3,\"776\":1}}],[\"threadfactorybuilder\",{\"1\":{\"440\":4,\"446\":2,\"717\":1,\"721\":2,\"754\":1,\"774\":1,\"776\":1}}],[\"threaddump\",{\"1\":{\"418\":1}}],[\"threaddata\",{\"1\":{\"214\":5}}],[\"threadlocal用来存储用户信息\",{\"1\":{\"650\":1}}],[\"threadlocal被垃圾回收后\",{\"1\":{\"650\":1}}],[\"threadlocal2=null\",{\"1\":{\"650\":3}}],[\"threadlocal2\",{\"1\":{\"650\":1}}],[\"threadlocal1=2\",{\"1\":{\"650\":1}}],[\"threadlocal1=1\",{\"1\":{\"650\":1}}],[\"threadlocal1=0\",{\"1\":{\"650\":1}}],[\"threadlocal1\",{\"1\":{\"650\":1}}],[\"threadlocaltest\",{\"1\":{\"650\":1}}],[\"threadlocal归纳下来就2类用途\",{\"1\":{\"650\":1}}],[\"threadlocalinteger\",{\"1\":{\"219\":5}}],[\"threadlocals\",{\"1\":{\"217\":2}}],[\"threadlocalmap\",{\"1\":{\"217\":5,\"650\":6}}],[\"threadlocal的get和set源码如下\",{\"1\":{\"217\":1}}],[\"threadlocal<clhnode>\",{\"1\":{\"929\":1}}],[\"threadlocal<simpledateformat>\",{\"1\":{\"626\":3}}],[\"threadlocal<string>\",{\"1\":{\"217\":1,\"218\":1,\"219\":1}}],[\"threadlocal<integer>\",{\"1\":{\"218\":1,\"219\":1,\"650\":1}}],[\"threadlocal<>\",{\"1\":{\"217\":1,\"218\":2,\"219\":2,\"650\":1,\"929\":1}}],[\"threadlocal\",{\"0\":{\"650\":1},\"1\":{\"217\":6,\"219\":4,\"626\":4,\"650\":15}}],[\"threads\",{\"1\":{\"74\":2,\"650\":1}}],[\"thread\",{\"1\":{\"74\":1,\"214\":4,\"217\":16,\"218\":1,\"396\":1,\"402\":3,\"440\":2,\"446\":2,\"469\":1,\"472\":1,\"475\":9,\"552\":3,\"554\":6,\"564\":1,\"650\":11,\"669\":1,\"703\":10,\"765\":1,\"767\":2,\"776\":1,\"777\":2,\"814\":4,\"820\":2,\"822\":2,\"823\":2,\"824\":1,\"929\":2}}],[\"throttle\",{\"1\":{\"74\":1}}],[\"throw\",{\"1\":{\"214\":9,\"218\":1,\"446\":1,\"820\":1,\"821\":1,\"823\":1}}],[\"throwable\",{\"1\":{\"3\":1,\"399\":1,\"404\":2,\"413\":1,\"437\":2,\"613\":1,\"717\":2}}],[\"throws\",{\"1\":{\"3\":2,\"32\":3,\"63\":9,\"213\":2,\"214\":6,\"446\":1,\"475\":5,\"518\":26,\"523\":1,\"537\":1,\"539\":1,\"612\":2,\"613\":2,\"650\":2,\"652\":7,\"712\":1,\"716\":1,\"814\":1,\"930\":1}}],[\"thing\",{\"1\":{\"924\":4}}],[\"third\",{\"1\":{\"25\":1}}],[\"thisamount会被修改\",{\"1\":{\"900\":1}}],[\"thisamount\",{\"1\":{\"900\":1}}],[\"this\",{\"1\":{\"21\":1,\"64\":6,\"214\":8,\"217\":7,\"401\":1,\"441\":1,\"443\":1,\"444\":10,\"446\":3,\"475\":1,\"517\":5,\"523\":1,\"527\":1,\"533\":6,\"612\":3,\"717\":1,\"723\":1,\"734\":19,\"870\":1,\"929\":3}}],[\"thenrun\",{\"1\":{\"475\":2}}],[\"thenaccept\",{\"1\":{\"475\":3}}],[\"thenapply\",{\"1\":{\"475\":2}}],[\"then\",{\"1\":{\"22\":3,\"73\":1,\"332\":4,\"337\":2,\"345\":2,\"349\":2,\"357\":4,\"362\":2,\"389\":5,\"789\":2,\"820\":1}}],[\"the\",{\"1\":{\"21\":7,\"58\":2,\"192\":2,\"195\":2,\"214\":1,\"217\":16,\"293\":3,\"444\":1,\"527\":1,\"612\":1,\"823\":1}}],[\"type有\",{\"1\":{\"747\":1}}],[\"type是指http\",{\"1\":{\"747\":1}}],[\"type介绍\",{\"0\":{\"747\":1}}],[\"typedescription\",{\"1\":{\"717\":6}}],[\"typedef\",{\"1\":{\"119\":2,\"124\":1,\"125\":1,\"126\":2}}],[\"types\",{\"1\":{\"317\":4}}],[\"type定义\",{\"1\":{\"305\":1}}],[\"type>\",{\"1\":{\"297\":2,\"414\":2}}],[\"type=local\",{\"1\":{\"869\":3}}],[\"type=forking\",{\"1\":{\"353\":1}}],[\"type=nodeport\",{\"1\":{\"296\":1}}],[\"type=rpm\",{\"1\":{\"267\":1}}],[\"type\",{\"0\":{\"746\":1},\"1\":{\"20\":1,\"58\":3,\"62\":1,\"74\":1,\"113\":2,\"126\":3,\"270\":1,\"275\":2,\"277\":2,\"280\":3,\"317\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"408\":1,\"478\":1,\"479\":2,\"480\":1,\"515\":1,\"717\":2,\"733\":2,\"865\":1,\"870\":1,\"894\":3}}],[\"triggers\",{\"1\":{\"326\":1,\"342\":1}}],[\"trim\",{\"1\":{\"133\":1,\"620\":1}}],[\"trxs\",{\"1\":{\"845\":5}}],[\"trxid\",{\"1\":{\"845\":1}}],[\"trx\",{\"1\":{\"74\":1,\"845\":11}}],[\"trunc\",{\"1\":{\"865\":1}}],[\"truncated\",{\"1\":{\"146\":2}}],[\"truncate\",{\"1\":{\"109\":2}}],[\"trusted\",{\"1\":{\"684\":1,\"687\":2}}],[\"trust\",{\"1\":{\"73\":1}}],[\"true\",{\"1\":{\"32\":1,\"61\":1,\"63\":2,\"64\":1,\"74\":1,\"214\":1,\"218\":3,\"219\":1,\"229\":1,\"275\":1,\"277\":1,\"396\":2,\"402\":4,\"404\":2,\"410\":3,\"411\":1,\"416\":1,\"472\":1,\"523\":1,\"539\":1,\"548\":1,\"549\":1,\"554\":1,\"564\":2,\"612\":1,\"650\":2,\"652\":1,\"708\":1,\"718\":1,\"733\":1,\"802\":1,\"820\":2,\"824\":1}}],[\"tree\",{\"1\":{\"58\":1,\"101\":1,\"427\":1,\"566\":1,\"597\":1}}],[\"tradition\",{\"1\":{\"837\":1}}],[\"transform\",{\"1\":{\"717\":1}}],[\"transformer\",{\"1\":{\"717\":3}}],[\"transformers>\",{\"1\":{\"707\":1,\"715\":1}}],[\"transformer>\",{\"1\":{\"707\":1,\"715\":1}}],[\"transfer\",{\"1\":{\"520\":1,\"521\":1}}],[\"transmittablethreadlocal<>\",{\"1\":{\"650\":1}}],[\"transmittablethreadlocal<map<string\",{\"1\":{\"650\":1}}],[\"transmittablethreadlocal\",{\"1\":{\"650\":1}}],[\"transition\",{\"1\":{\"446\":1}}],[\"transactional+select\",{\"1\":{\"427\":1}}],[\"transactional\",{\"1\":{\"427\":1}}],[\"transaction\",{\"1\":{\"74\":1,\"139\":1,\"326\":1,\"342\":1,\"809\":3}}],[\"track\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"tracker=$\",{\"1\":{\"29\":1}}],[\"tracker=local\",{\"1\":{\"29\":1}}],[\"tracker\",{\"1\":{\"29\":1}}],[\"traffic\",{\"1\":{\"222\":1}}],[\"train\",{\"1\":{\"61\":1}}],[\"trash\",{\"1\":{\"14\":2}}],[\"tryrelease\",{\"1\":{\"821\":1}}],[\"tryreleaseshared\",{\"1\":{\"446\":1,\"823\":1}}],[\"tryacquire\",{\"1\":{\"820\":2}}],[\"tryacquireshared\",{\"1\":{\"446\":1,\"822\":1}}],[\"trylock\",{\"1\":{\"214\":6,\"215\":1,\"216\":1,\"217\":2,\"218\":1,\"219\":1}}],[\"try\",{\"1\":{\"3\":4,\"61\":1,\"63\":2,\"213\":5,\"214\":9,\"218\":1,\"297\":3,\"410\":1,\"411\":1,\"413\":6,\"440\":2,\"446\":1,\"475\":4,\"518\":4,\"531\":1,\"533\":1,\"537\":1,\"539\":3,\"541\":2,\"542\":2,\"544\":2,\"545\":2,\"548\":2,\"552\":2,\"554\":1,\"564\":1,\"612\":1,\"626\":1,\"650\":4,\"712\":1,\"716\":1,\"733\":1,\"765\":1,\"776\":2,\"777\":1,\"824\":2}}],[\"tool\",{\"1\":{\"836\":2,\"840\":2,\"842\":2,\"844\":1,\"846\":1,\"847\":1,\"848\":1,\"849\":1}}],[\"tools\",{\"1\":{\"377\":1,\"712\":2}}],[\"tohexstring\",{\"1\":{\"613\":1}}],[\"tolong\",{\"1\":{\"650\":1}}],[\"tolocaldate\",{\"1\":{\"527\":1}}],[\"tolist\",{\"1\":{\"527\":2,\"735\":1}}],[\"tolerance分区容错性\",{\"0\":{\"195\":1}}],[\"tolerance\",{\"1\":{\"191\":1}}],[\"todo\",{\"1\":{\"475\":2,\"537\":1,\"539\":3,\"541\":2,\"542\":2,\"544\":2,\"545\":2}}],[\"todd\",{\"1\":{\"22\":2}}],[\"totalamount和frequenrenterpoint两个临时变量\",{\"1\":{\"904\":1}}],[\"total\",{\"1\":{\"412\":1,\"845\":5,\"893\":9}}],[\"tokenizermapper\",{\"1\":{\"652\":2}}],[\"tokens\",{\"1\":{\"317\":1}}],[\"token\",{\"1\":{\"294\":3,\"650\":3}}],[\"touppercase\",{\"1\":{\"475\":1,\"523\":1}}],[\"touch\",{\"1\":{\"243\":1,\"352\":1,\"497\":1}}],[\"toutiao\",{\"1\":{\"222\":1}}],[\"topics\",{\"1\":{\"435\":1,\"438\":1}}],[\"topic\",{\"0\":{\"429\":1},\"1\":{\"436\":5,\"437\":1,\"438\":4,\"564\":6}}],[\"top\",{\"1\":{\"222\":3}}],[\"top=false\",{\"1\":{\"59\":1}}],[\"tostr\",{\"1\":{\"650\":1}}],[\"tostring\",{\"1\":{\"3\":1,\"32\":2,\"213\":1,\"214\":1,\"217\":1,\"218\":1,\"219\":1,\"439\":1,\"445\":4,\"446\":1,\"517\":1,\"518\":1,\"527\":3,\"533\":1,\"613\":2,\"652\":1}}],[\"toseconds\",{\"1\":{\"214\":1}}],[\"tonanos\",{\"1\":{\"214\":1}}],[\"toys\",{\"1\":{\"27\":3}}],[\"to\",{\"1\":{\"21\":1,\"25\":1,\"58\":4,\"59\":2,\"80\":1,\"139\":1,\"155\":2,\"195\":1,\"214\":3,\"217\":5,\"222\":1,\"243\":2,\"276\":1,\"278\":1,\"280\":1,\"282\":2,\"293\":1,\"322\":1,\"329\":2,\"342\":2,\"446\":1,\"495\":1,\"607\":1,\"612\":1,\"717\":1,\"823\":1,\"837\":1,\"845\":2,\"867\":1,\"884\":1,\"885\":1,\"887\":4,\"888\":3,\"894\":4}}],[\"tomee1\",{\"1\":{\"263\":1}}],[\"tomcat就会关闭不再需要的socket\",{\"1\":{\"651\":1}}],[\"tomcat性能优化整理\",{\"0\":{\"651\":1}}],[\"tomcat4中可以通过修改minprocessors和maxprocessors的值来控制线程数\",{\"1\":{\"651\":1}}],[\"tomcat4\",{\"1\":{\"298\":1}}],[\"tomcat3\",{\"1\":{\"298\":1}}],[\"tomcat2\",{\"1\":{\"298\":1}}],[\"tomcat1\",{\"1\":{\"298\":1}}],[\"tomcat\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"243\":2,\"300\":4,\"301\":4,\"302\":4,\"304\":4,\"305\":4,\"566\":7,\"650\":1,\"651\":3}}],[\"tom\",{\"1\":{\"13\":2}}],[\"gb18030\",{\"1\":{\"836\":1,\"837\":1}}],[\"gbk\",{\"1\":{\"73\":1,\"82\":1}}],[\"gmt\",{\"1\":{\"478\":1}}],[\"ga<\",{\"1\":{\"715\":1}}],[\"garbagecollection\",{\"1\":{\"651\":1}}],[\"gateway\",{\"1\":{\"410\":1}}],[\"gag\",{\"1\":{\"243\":1,\"497\":1}}],[\"gc\",{\"1\":{\"629\":1,\"650\":1,\"651\":1}}],[\"gc对象的判定方法\",{\"1\":{\"558\":1}}],[\"gcm\",{\"1\":{\"317\":1}}],[\"gcr\",{\"1\":{\"293\":1}}],[\"gcc\",{\"1\":{\"224\":2,\"243\":2}}],[\"gpgcheck=0\",{\"1\":{\"291\":2}}],[\"gpgcheck=1\",{\"1\":{\"267\":1}}],[\"gpg\",{\"1\":{\"267\":1,\"291\":2}}],[\"gpgkey=https\",{\"1\":{\"267\":1,\"291\":1}}],[\"gpu\",{\"1\":{\"52\":1}}],[\"gd\",{\"1\":{\"243\":2}}],[\"glibc\",{\"1\":{\"243\":1}}],[\"globalexeption\",{\"1\":{\"626\":1}}],[\"globalexceptionhandler\",{\"1\":{\"419\":7}}],[\"globalsign\",{\"1\":{\"522\":1}}],[\"globallock+\",{\"1\":{\"427\":1}}],[\"globally\",{\"1\":{\"208\":1}}],[\"globaltransaction\",{\"1\":{\"427\":1}}],[\"globaltransactional+select\",{\"1\":{\"427\":1}}],[\"globaltransactional\",{\"1\":{\"427\":2}}],[\"global\",{\"1\":{\"74\":2,\"107\":2,\"222\":1,\"339\":1,\"495\":2}}],[\"gzip压缩可以配置http\",{\"1\":{\"317\":1}}],[\"gzip\",{\"1\":{\"243\":1,\"317\":26,\"477\":1,\"479\":1,\"480\":1}}],[\"gz\",{\"1\":{\"243\":2,\"263\":1,\"343\":1,\"352\":1,\"376\":1,\"379\":1}}],[\"gtid\",{\"1\":{\"328\":1,\"342\":1}}],[\"gtm\",{\"1\":{\"222\":1}}],[\"gtl对应的域名服务器的地址\",{\"1\":{\"222\":1}}],[\"gtld\",{\"1\":{\"222\":7}}],[\"godaddy\",{\"1\":{\"522\":1}}],[\"goods\",{\"1\":{\"732\":2}}],[\"goo\",{\"1\":{\"409\":1}}],[\"google通过建立私有网络以及强大的网络工程能力来保证p\",{\"1\":{\"196\":1}}],[\"google\",{\"1\":{\"127\":1,\"293\":1,\"440\":2,\"446\":1,\"715\":1,\"717\":1,\"721\":1}}],[\"goal\",{\"1\":{\"566\":1}}],[\"goals>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"goal>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"go1\",{\"1\":{\"229\":2}}],[\"go\",{\"1\":{\"229\":2}}],[\"gone\",{\"1\":{\"214\":1}}],[\"gif等\",{\"1\":{\"748\":1}}],[\"gib\",{\"1\":{\"263\":1}}],[\"gilbert和nancy\",{\"1\":{\"190\":1}}],[\"gitignore\",{\"1\":{\"504\":1}}],[\"git的版本号都是生成的一个哈希值\",{\"1\":{\"503\":1}}],[\"git的checkout有两个作用\",{\"1\":{\"500\":1}}],[\"gitmodules\",{\"1\":{\"502\":1}}],[\"gitpush\",{\"1\":{\"500\":1}}],[\"git以后就会对该目录下的文件进行版本控制\",{\"1\":{\"497\":1}}],[\"git配置及使用\",{\"0\":{\"494\":1}}],[\"git工作流程\",{\"0\":{\"491\":1}}],[\"git目录下\",{\"1\":{\"490\":1}}],[\"gitlab是公司搭建的代码版本控制平台\",{\"1\":{\"488\":1}}],[\"git是目前世界上最先进的分布式版本控制系统\",{\"1\":{\"488\":1}}],[\"git介绍\",{\"0\":{\"488\":1}}],[\"git梳理\",{\"0\":{\"487\":1}}],[\"gitcommit\",{\"1\":{\"229\":3}}],[\"git\",{\"0\":{\"490\":1},\"1\":{\"62\":1,\"229\":2,\"490\":2,\"492\":1,\"493\":2,\"495\":2,\"496\":1,\"497\":20,\"499\":10,\"500\":14,\"501\":10,\"502\":7,\"503\":11,\"505\":1,\"712\":1,\"719\":1}}],[\"gitee\",{\"1\":{\"58\":1}}],[\"github目前2\",{\"1\":{\"626\":1}}],[\"githubusercontent\",{\"1\":{\"295\":2}}],[\"github\",{\"1\":{\"56\":1,\"427\":2,\"458\":1,\"475\":1,\"502\":1,\"683\":1}}],[\"gjrdjj\",{\"1\":{\"189\":3}}],[\"guava<\",{\"1\":{\"715\":1}}],[\"guava\",{\"1\":{\"715\":2}}],[\"guarantee\",{\"0\":{\"933\":1},\"1\":{\"167\":1}}],[\"gunzip\",{\"1\":{\"243\":1,\"343\":1}}],[\"guide\",{\"1\":{\"63\":2,\"64\":3,\"265\":1,\"611\":1,\"613\":1}}],[\"gracefully\",{\"1\":{\"612\":1}}],[\"grantee=\",{\"1\":{\"887\":3}}],[\"grant\",{\"1\":{\"214\":1,\"321\":1,\"322\":2,\"884\":1,\"885\":1,\"887\":4,\"888\":4}}],[\"gruop\",{\"1\":{\"426\":1}}],[\"greys\",{\"1\":{\"706\":1}}],[\"greenwich\",{\"1\":{\"297\":3}}],[\"grep|wc\",{\"1\":{\"389\":1}}],[\"grep|awk\",{\"1\":{\"389\":2}}],[\"grep\",{\"1\":{\"74\":1,\"76\":1,\"78\":1,\"270\":1,\"272\":1,\"318\":2,\"320\":3,\"322\":1,\"332\":6,\"337\":6,\"343\":1,\"345\":6,\"349\":6}}],[\"groupid为org\",{\"1\":{\"587\":1}}],[\"groupid定义到项目\",{\"0\":{\"587\":1}}],[\"groupid定义了项目属于哪个组\",{\"1\":{\"578\":1}}],[\"groupid\",{\"1\":{\"438\":1}}],[\"groupid>\",{\"1\":{\"3\":3,\"63\":4,\"230\":1,\"297\":4,\"389\":6,\"391\":1,\"395\":4,\"401\":1,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1,\"434\":2,\"516\":1,\"611\":1,\"707\":1,\"712\":1,\"715\":7}}],[\"group1\",{\"1\":{\"436\":2,\"438\":1}}],[\"group大家都是用的默认的default\",{\"1\":{\"410\":1}}],[\"groupadd\",{\"1\":{\"318\":1,\"831\":1}}],[\"group=服务组名称\",{\"1\":{\"426\":1}}],[\"group=supervision\",{\"1\":{\"401\":1}}],[\"group=\",{\"1\":{\"297\":2}}],[\"group=nginx\",{\"1\":{\"243\":1}}],[\"groups\",{\"1\":{\"250\":1}}],[\"group\",{\"1\":{\"22\":1,\"161\":3,\"297\":15,\"404\":1,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"414\":1,\"415\":1,\"416\":1,\"417\":1,\"435\":1,\"436\":1,\"564\":2,\"566\":1,\"612\":1,\"687\":1,\"789\":5}}],[\"g\",{\"1\":{\"73\":1,\"80\":1,\"247\":1,\"293\":1,\"318\":1,\"329\":1,\"341\":1,\"342\":1,\"738\":1,\"739\":1,\"740\":5,\"743\":1,\"744\":2,\"745\":5,\"831\":1}}],[\"gnu\",{\"1\":{\"63\":1}}],[\"gecko\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"geoip\",{\"1\":{\"243\":3}}],[\"geodata\",{\"1\":{\"27\":2}}],[\"genericoptionsparser\",{\"1\":{\"652\":2}}],[\"generic\",{\"1\":{\"222\":1}}],[\"generation和tenuredgeneraion之和\",{\"1\":{\"651\":1}}],[\"generation\",{\"1\":{\"651\":1}}],[\"generate\",{\"1\":{\"566\":2}}],[\"generated\",{\"1\":{\"539\":1}}],[\"generatepresignedurl\",{\"1\":{\"63\":1}}],[\"general\",{\"1\":{\"74\":1}}],[\"getruntime\",{\"1\":{\"769\":1}}],[\"getremainingargs\",{\"1\":{\"652\":1}}],[\"getreleasetime\",{\"1\":{\"626\":1}}],[\"getrequesturi\",{\"1\":{\"419\":4}}],[\"getthreadid\",{\"1\":{\"822\":1,\"823\":1}}],[\"gettype\",{\"1\":{\"733\":1}}],[\"gettoken\",{\"1\":{\"650\":1}}],[\"gettime\",{\"1\":{\"63\":1}}],[\"getheader\",{\"1\":{\"650\":3}}],[\"gethttpclientresult\",{\"1\":{\"518\":5}}],[\"gethits\",{\"1\":{\"3\":2}}],[\"getvalue\",{\"1\":{\"518\":3}}],[\"get方法的参数写法是固定的吗\",{\"0\":{\"483\":1}}],[\"get产生一个tcp数据包\",{\"1\":{\"482\":1}}],[\"get的查询方法\",{\"1\":{\"481\":1}}],[\"get响应\",{\"0\":{\"478\":1}}],[\"get请求\",{\"0\":{\"477\":1}}],[\"get和post是http与服务器交互的方式\",{\"1\":{\"476\":1}}],[\"get与post区别\",{\"0\":{\"476\":1}}],[\"get等方法都是通过unsafe对象实现对value值的原子操作\",{\"1\":{\"472\":1}}],[\"getdouble\",{\"1\":{\"626\":1}}],[\"getdayofmonth\",{\"1\":{\"527\":1}}],[\"getdateafter\",{\"1\":{\"63\":2}}],[\"getdeclaredfields\",{\"1\":{\"733\":1}}],[\"getdeclaredfield\",{\"1\":{\"523\":1}}],[\"getdefaultmessage\",{\"1\":{\"419\":2}}],[\"getbindingresult\",{\"1\":{\"419\":1}}],[\"getb\",{\"1\":{\"413\":1}}],[\"getbytes\",{\"1\":{\"214\":2,\"297\":2,\"539\":1,\"749\":1}}],[\"getannotation\",{\"1\":{\"733\":1}}],[\"getandupdate\",{\"1\":{\"444\":1}}],[\"getandadd\",{\"1\":{\"444\":1}}],[\"getandaddint\",{\"1\":{\"441\":1,\"443\":4,\"444\":6}}],[\"getanddecrement\",{\"1\":{\"444\":1}}],[\"getandincrement\",{\"1\":{\"444\":1}}],[\"getandsetint\",{\"1\":{\"444\":1}}],[\"getandset\",{\"1\":{\"444\":1,\"929\":1}}],[\"getabsolutepath\",{\"1\":{\"537\":1}}],[\"getaverage\",{\"1\":{\"527\":1}}],[\"getallerrors\",{\"1\":{\"419\":1}}],[\"geta\",{\"1\":{\"413\":1}}],[\"getage\",{\"1\":{\"3\":1,\"735\":6}}],[\"getfrequentrenterpoint抽象出来\",{\"1\":{\"906\":1}}],[\"getfielderror\",{\"1\":{\"419\":1}}],[\"getfilename\",{\"1\":{\"921\":2}}],[\"getfilenames\",{\"1\":{\"63\":1}}],[\"getfilechannel\",{\"1\":{\"921\":1}}],[\"getfile\",{\"1\":{\"921\":2}}],[\"getfilesource\",{\"1\":{\"921\":1}}],[\"getfiles\",{\"1\":{\"63\":1}}],[\"getforobject\",{\"1\":{\"402\":2,\"410\":1,\"411\":1}}],[\"getmonth\",{\"1\":{\"527\":1}}],[\"getmin\",{\"1\":{\"527\":1}}],[\"getmax\",{\"1\":{\"527\":1}}],[\"getmapping\",{\"1\":{\"398\":2,\"404\":1,\"408\":1,\"409\":1,\"416\":2}}],[\"getmap\",{\"1\":{\"217\":3}}],[\"getmethod\",{\"1\":{\"419\":1,\"523\":1}}],[\"getmessage\",{\"1\":{\"399\":1,\"419\":9}}],[\"getcharge\",{\"1\":{\"902\":1,\"906\":1}}],[\"getclass\",{\"1\":{\"523\":1,\"733\":1}}],[\"getclient\",{\"1\":{\"213\":2}}],[\"getcursor就是用来获取当前游标的位置\",{\"1\":{\"472\":1}}],[\"getcurrencyinstance\",{\"1\":{\"445\":1}}],[\"getconsumer\",{\"1\":{\"564\":2}}],[\"getcontent\",{\"1\":{\"517\":1}}],[\"getconfigproperties\",{\"1\":{\"297\":2}}],[\"getconfig\",{\"1\":{\"297\":3}}],[\"getcount\",{\"1\":{\"446\":2}}],[\"getcode\",{\"1\":{\"419\":1,\"517\":1}}],[\"getc\",{\"1\":{\"413\":1}}],[\"getexclusiveownerthread\",{\"1\":{\"820\":1,\"822\":1}}],[\"getexecutor\",{\"1\":{\"297\":1}}],[\"getentity\",{\"1\":{\"518\":2}}],[\"getentry\",{\"1\":{\"217\":1}}],[\"getenvironment\",{\"1\":{\"297\":2,\"408\":1,\"409\":1,\"416\":1}}],[\"getesclient\",{\"1\":{\"3\":3}}],[\"getsystemclassloader\",{\"1\":{\"558\":1}}],[\"getsecond\",{\"1\":{\"527\":1}}],[\"getservice\",{\"1\":{\"214\":1}}],[\"getsum\",{\"1\":{\"527\":1}}],[\"getstatuscode\",{\"1\":{\"518\":1}}],[\"getstatusline\",{\"1\":{\"518\":2}}],[\"getstate\",{\"1\":{\"214\":1,\"446\":3,\"820\":1,\"821\":2,\"822\":1,\"823\":1}}],[\"getsourceasmap\",{\"1\":{\"3\":1}}],[\"getleaseid\",{\"1\":{\"214\":2}}],[\"getleaseclient\",{\"1\":{\"214\":1}}],[\"getlocalmap\",{\"1\":{\"650\":4}}],[\"getlockclient\",{\"1\":{\"214\":1}}],[\"getlock\",{\"1\":{\"213\":1}}],[\"getloginuser\",{\"1\":{\"64\":2,\"650\":1}}],[\"getlogger\",{\"1\":{\"3\":1,\"63\":1,\"213\":1,\"218\":1,\"419\":1}}],[\"getoriginalfilename\",{\"1\":{\"749\":1}}],[\"getordefault\",{\"1\":{\"650\":2}}],[\"getoperations\",{\"1\":{\"213\":1}}],[\"getobjectsummaries\",{\"1\":{\"63\":2}}],[\"getobjectargs\",{\"1\":{\"63\":1}}],[\"getobject\",{\"1\":{\"63\":1}}],[\"getpermission\",{\"1\":{\"650\":1}}],[\"getpercentinstance\",{\"1\":{\"445\":1}}],[\"getpath\",{\"1\":{\"537\":1}}],[\"getpattern\",{\"1\":{\"139\":1}}],[\"getport\",{\"1\":{\"410\":2,\"411\":1}}],[\"getproducer\",{\"1\":{\"564\":2}}],[\"getproperty\",{\"1\":{\"297\":4,\"408\":1,\"409\":1,\"416\":1}}],[\"getpresignedurl\",{\"1\":{\"63\":1}}],[\"getpresignedobjecturlargs\",{\"1\":{\"63\":1}}],[\"getpresignedobjecturl\",{\"1\":{\"63\":2}}],[\"getuserkey\",{\"1\":{\"650\":1}}],[\"getuserid\",{\"1\":{\"650\":1}}],[\"getuserservice\",{\"1\":{\"523\":2}}],[\"getusername\",{\"1\":{\"64\":3,\"650\":1}}],[\"getunsafe\",{\"1\":{\"441\":1,\"442\":1,\"444\":1}}],[\"geturl\",{\"1\":{\"63\":2}}],[\"getkey\",{\"1\":{\"63\":2,\"214\":1,\"518\":3}}],[\"get\",{\"0\":{\"484\":1,\"485\":1},\"1\":{\"3\":4,\"11\":1,\"13\":2,\"32\":2,\"63\":3,\"73\":1,\"134\":6,\"139\":1,\"213\":1,\"214\":5,\"217\":4,\"218\":8,\"219\":6,\"263\":1,\"276\":2,\"278\":1,\"293\":1,\"295\":1,\"296\":1,\"319\":1,\"400\":1,\"402\":2,\"410\":1,\"411\":1,\"415\":1,\"419\":1,\"438\":1,\"444\":5,\"475\":10,\"477\":1,\"481\":1,\"485\":2,\"527\":4,\"613\":4,\"626\":1,\"650\":9,\"652\":1,\"703\":4,\"749\":2,\"762\":2,\"814\":1,\"822\":1,\"823\":1,\"929\":1}}],[\"getintvolatile\",{\"1\":{\"443\":1}}],[\"getinstance\",{\"1\":{\"32\":1,\"63\":2,\"652\":1}}],[\"getip\",{\"1\":{\"410\":1,\"411\":1}}],[\"getisneighbourhood\",{\"1\":{\"3\":1}}],[\"getid\",{\"1\":{\"3\":4,\"214\":1,\"533\":2}}],[\"getname\",{\"1\":{\"3\":1,\"214\":1,\"475\":3,\"523\":1,\"533\":1,\"537\":1,\"552\":2,\"554\":3,\"650\":2,\"703\":2,\"733\":1,\"777\":2,\"929\":1}}],[\"=3\",{\"1\":{\"896\":1}}],[\"=test\",{\"1\":{\"711\":1}}],[\"=null\",{\"1\":{\"542\":1}}],[\"=new\",{\"1\":{\"445\":2}}],[\"=|~|~\",{\"1\":{\"306\":1}}],[\"=>\",{\"1\":{\"280\":3}}],[\"=100\",{\"1\":{\"865\":1}}],[\"=16\",{\"1\":{\"722\":1}}],[\"=1\",{\"1\":{\"21\":1}}],[\"=6\",{\"1\":{\"14\":1}}],[\"=4\",{\"1\":{\"14\":1}}],[\"=2\",{\"1\":{\"14\":1}}],[\"=0\",{\"1\":{\"14\":1}}],[\"====\",{\"1\":{\"554\":1}}],[\"=============\",{\"1\":{\"402\":1}}],[\"============\",{\"1\":{\"402\":3}}],[\"==0\",{\"1\":{\"445\":1,\"554\":1}}],[\"==\",{\"1\":{\"3\":1,\"62\":2,\"63\":3,\"126\":1,\"214\":2,\"218\":1,\"219\":3,\"280\":2,\"297\":1,\"332\":4,\"337\":2,\"345\":2,\"349\":2,\"357\":2,\"444\":2,\"446\":3,\"518\":1,\"564\":2,\"650\":2,\"734\":3,\"820\":2,\"821\":1,\"822\":4,\"823\":4}}],[\"=\",{\"1\":{\"3\":32,\"20\":1,\"21\":9,\"22\":10,\"23\":12,\"27\":1,\"28\":3,\"32\":10,\"58\":12,\"59\":10,\"60\":8,\"61\":15,\"62\":14,\"63\":31,\"64\":21,\"73\":3,\"74\":48,\"78\":2,\"100\":3,\"127\":6,\"194\":1,\"205\":2,\"213\":18,\"214\":41,\"217\":12,\"218\":9,\"219\":9,\"288\":2,\"297\":20,\"306\":3,\"307\":2,\"317\":1,\"321\":3,\"357\":2,\"362\":2,\"388\":3,\"389\":6,\"397\":2,\"398\":4,\"400\":2,\"402\":17,\"403\":2,\"404\":3,\"408\":9,\"409\":3,\"410\":15,\"411\":5,\"413\":1,\"415\":2,\"416\":7,\"419\":13,\"427\":3,\"436\":2,\"437\":1,\"438\":4,\"439\":1,\"440\":8,\"441\":2,\"442\":1,\"443\":2,\"444\":17,\"445\":10,\"446\":9,\"452\":1,\"475\":16,\"506\":1,\"507\":1,\"508\":1,\"511\":2,\"517\":6,\"518\":36,\"523\":9,\"527\":34,\"530\":1,\"531\":2,\"532\":1,\"533\":6,\"537\":1,\"539\":1,\"541\":1,\"544\":1,\"546\":1,\"548\":2,\"549\":9,\"552\":3,\"554\":1,\"557\":2,\"563\":14,\"564\":13,\"612\":7,\"613\":2,\"621\":1,\"626\":14,\"650\":13,\"652\":9,\"661\":1,\"673\":1,\"676\":1,\"677\":1,\"703\":3,\"712\":3,\"716\":1,\"717\":2,\"721\":1,\"722\":4,\"728\":3,\"733\":7,\"734\":15,\"735\":6,\"738\":4,\"739\":1,\"740\":5,\"743\":4,\"744\":2,\"745\":4,\"749\":7,\"754\":2,\"768\":2,\"774\":1,\"776\":5,\"777\":1,\"779\":6,\"789\":2,\"805\":1,\"814\":9,\"820\":8,\"821\":3,\"822\":11,\"823\":8,\"824\":2,\"845\":3,\"870\":7,\"874\":1,\"875\":1,\"877\":1,\"883\":2,\"887\":1,\"892\":2,\"893\":8,\"894\":2,\"929\":9,\"930\":5}}],[\"pwd=dameng123\",{\"1\":{\"837\":1}}],[\"pwd\",{\"1\":{\"837\":2,\"874\":5,\"875\":1}}],[\"pv\",{\"1\":{\"783\":1}}],[\"pvi=4403687424\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"png\",{\"1\":{\"748\":1}}],[\"p50\",{\"1\":{\"744\":1}}],[\"p1\",{\"1\":{\"744\":1}}],[\"p是否成立\",{\"1\":{\"739\":1}}],[\"p是一个基本要求\",{\"1\":{\"196\":1}}],[\"pgv\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"p=92\",{\"1\":{\"472\":1}}],[\"phasedbackoffwaitstrategy的实现方法是先自旋\",{\"1\":{\"468\":1}}],[\"phasedbackoffwaitstrategy\",{\"0\":{\"468\":1},\"1\":{\"472\":1}}],[\"phasedbackoffwaitstrategy实现方法是先自旋\",{\"1\":{\"458\":1}}],[\"phase\",{\"1\":{\"454\":1}}],[\"phase>\",{\"1\":{\"389\":2,\"707\":1,\"715\":1}}],[\"phrchased\",{\"1\":{\"27\":1}}],[\"plexus\",{\"1\":{\"572\":1}}],[\"plat\",{\"1\":{\"789\":3}}],[\"platform\",{\"1\":{\"401\":2,\"417\":1,\"687\":1}}],[\"placeorder\",{\"1\":{\"427\":1}}],[\"plain\",{\"1\":{\"317\":2,\"748\":1}}],[\"plug\",{\"1\":{\"583\":1}}],[\"plugin插件\",{\"1\":{\"581\":1}}],[\"plugin\",{\"1\":{\"566\":1,\"709\":1,\"715\":6}}],[\"plugin=mysql\",{\"1\":{\"321\":1}}],[\"plugin>\",{\"1\":{\"230\":1,\"389\":5,\"707\":1,\"715\":2}}],[\"plugin<\",{\"1\":{\"230\":1,\"389\":5,\"707\":1,\"715\":2}}],[\"plugins>\",{\"1\":{\"389\":1,\"707\":1,\"715\":1}}],[\"plugins<\",{\"1\":{\"389\":4,\"707\":1,\"715\":2}}],[\"plugins\",{\"1\":{\"230\":1,\"707\":1,\"715\":1}}],[\"plume\",{\"1\":{\"263\":1}}],[\"plus\",{\"1\":{\"64\":1}}],[\"plus插件统一处理createtime\",{\"0\":{\"64\":1}}],[\"pms\",{\"1\":{\"367\":6}}],[\"pm\",{\"1\":{\"315\":2}}],[\"pd8m2\",{\"1\":{\"276\":1}}],[\"pdf\",{\"1\":{\"189\":1,\"833\":1,\"834\":2}}],[\"p参数\",{\"1\":{\"251\":1}}],[\"p80\",{\"1\":{\"247\":1}}],[\"p三者并不是平等的\",{\"1\":{\"196\":1}}],[\"pts\",{\"1\":{\"834\":2}}],[\"pttl\",{\"1\":{\"139\":1}}],[\"ptr\",{\"1\":{\"119\":3}}],[\"pcre\",{\"1\":{\"243\":2}}],[\"pc\",{\"1\":{\"63\":2,\"789\":2}}],[\"pointer的空间大小为8字节+markword为8字节=16字节\",{\"1\":{\"722\":1}}],[\"pointer的空间大小为4字节+markword为8字节=12字节\",{\"1\":{\"722\":2}}],[\"pointer\",{\"1\":{\"672\":1,\"722\":1}}],[\"policy\",{\"1\":{\"874\":4,\"875\":1,\"888\":1}}],[\"police\",{\"1\":{\"527\":2}}],[\"pol\",{\"1\":{\"773\":1}}],[\"poll本质上和select没有区别\",{\"1\":{\"803\":1}}],[\"poll方法返回时会返回一个描述读写操作是否就绪的mask掩码\",{\"1\":{\"799\":1}}],[\"pollwait\",{\"1\":{\"799\":1}}],[\"poll为例\",{\"1\":{\"799\":1}}],[\"poll模型对比\",{\"0\":{\"797\":1}}],[\"poll\",{\"0\":{\"801\":1},\"1\":{\"530\":1,\"564\":2,\"773\":2,\"795\":1,\"806\":1,\"808\":2}}],[\"pong\",{\"1\":{\"357\":2,\"362\":2}}],[\"positive\",{\"1\":{\"549\":2}}],[\"position=0\",{\"1\":{\"329\":1,\"342\":1}}],[\"position\",{\"1\":{\"328\":1,\"342\":1}}],[\"posts\",{\"0\":{\"932\":1}}],[\"post产生两个tcp数据包\",{\"1\":{\"482\":1}}],[\"post响应\",{\"0\":{\"480\":1}}],[\"post请求\",{\"0\":{\"479\":1}}],[\"post\",{\"0\":{\"485\":1,\"486\":1},\"1\":{\"475\":1,\"479\":1,\"480\":1,\"481\":1,\"485\":1,\"486\":3}}],[\"postconstruct\",{\"1\":{\"439\":2}}],[\"postmapping\",{\"1\":{\"410\":1,\"749\":2}}],[\"pos=155\",{\"1\":{\"329\":1,\"342\":1}}],[\"pos=120\",{\"1\":{\"80\":1}}],[\"pos参数替换为实际的配置\",{\"1\":{\"329\":1,\"342\":1}}],[\"pods\",{\"1\":{\"295\":1}}],[\"pod中附加专用日志收集的容器\",{\"0\":{\"265\":1}}],[\"pod中容器列表\",{\"1\":{\"263\":1}}],[\"pod中容器的详细定义\",{\"1\":{\"263\":1}}],[\"pod所在宿主机的目录\",{\"1\":{\"263\":1}}],[\"pod所属的命名空间\",{\"1\":{\"263\":1}}],[\"pod的重启策略\",{\"1\":{\"263\":1}}],[\"pod升级\",{\"1\":{\"263\":1}}],[\"pod\",{\"1\":{\"263\":4,\"276\":1,\"278\":5,\"293\":1,\"296\":1}}],[\"pod名称\",{\"1\":{\"263\":2,\"275\":1}}],[\"podc会议上提出cap猜想\",{\"1\":{\"190\":1}}],[\"pom或者war都是以基于这些基本的坐标进行区分的\",{\"1\":{\"578\":1}}],[\"pom\",{\"0\":{\"425\":1,\"715\":1},\"1\":{\"715\":2}}],[\"pom中添加\",{\"1\":{\"230\":1}}],[\"pom和dockerfile在同一目录下\",{\"1\":{\"230\":1}}],[\"pool=\",{\"1\":{\"764\":1}}],[\"pool\",{\"1\":{\"74\":1,\"321\":1,\"440\":6,\"446\":10,\"475\":2,\"683\":2,\"754\":2,\"764\":2,\"776\":1,\"814\":2,\"845\":1,\"855\":2,\"930\":2}}],[\"pooling=self\",{\"1\":{\"59\":1}}],[\"pooling\",{\"1\":{\"59\":2}}],[\"portability\",{\"1\":{\"898\":1}}],[\"ports\",{\"1\":{\"263\":2,\"839\":1}}],[\"port=5236\",{\"1\":{\"839\":1}}],[\"port=`netstat\",{\"1\":{\"357\":2}}],[\"port=80\",{\"1\":{\"263\":1,\"296\":1}}],[\"port=33060\",{\"1\":{\"321\":1}}],[\"port=3306\",{\"1\":{\"80\":1,\"321\":2}}],[\"port=\",{\"1\":{\"58\":1}}],[\"port\",{\"1\":{\"3\":1,\"74\":1,\"155\":4,\"248\":1,\"263\":4,\"270\":1,\"272\":1,\"280\":1,\"293\":1,\"296\":1,\"297\":1,\"315\":1,\"392\":1,\"396\":1,\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"412\":1,\"414\":2,\"612\":9,\"837\":2}}],[\"pig\",{\"1\":{\"783\":1}}],[\"ping`\",{\"1\":{\"357\":2,\"362\":2}}],[\"ping\",{\"1\":{\"262\":4}}],[\"pinyin\",{\"1\":{\"73\":4}}],[\"pid=\",{\"1\":{\"389\":1}}],[\"pid=`ps\",{\"1\":{\"389\":3}}],[\"pidfile=\",{\"1\":{\"353\":1}}],[\"pid文件所在目录\",{\"1\":{\"74\":1}}],[\"pid\",{\"1\":{\"74\":2,\"321\":2,\"353\":1,\"389\":1,\"845\":1,\"883\":2}}],[\"pil\",{\"1\":{\"61\":1}}],[\"picture\",{\"1\":{\"316\":1,\"317\":2}}],[\"pictures\",{\"1\":{\"62\":1}}],[\"picdao\",{\"1\":{\"61\":1,\"62\":1}}],[\"pic\",{\"1\":{\"58\":1,\"60\":17,\"61\":15,\"62\":9}}],[\"pipelining\",{\"1\":{\"527\":1}}],[\"pipeline\",{\"1\":{\"161\":1,\"280\":1,\"612\":1}}],[\"pip\",{\"1\":{\"57\":1}}],[\"pkgs\",{\"1\":{\"893\":9}}],[\"pk\",{\"1\":{\"58\":3,\"738\":1,\"740\":4,\"743\":1,\"745\":3}}],[\"pymilvus\",{\"1\":{\"58\":1,\"60\":3,\"62\":1}}],[\"pymilvus==2\",{\"1\":{\"57\":1}}],[\"python版sdk\",{\"0\":{\"57\":1}}],[\"pseg\",{\"1\":{\"845\":8}}],[\"ps\",{\"1\":{\"56\":1,\"63\":1,\"308\":1,\"332\":2,\"337\":2,\"343\":1,\"345\":2,\"349\":2,\"891\":1}}],[\"pq是基于量化的索引\",{\"1\":{\"52\":1}}],[\"pq\",{\"1\":{\"52\":1}}],[\"peek\",{\"1\":{\"530\":1}}],[\"peer场景下的大量数据持续性传输的应用\",{\"1\":{\"607\":1}}],[\"peer\",{\"1\":{\"331\":2,\"336\":2,\"344\":2,\"348\":2,\"356\":2,\"361\":2}}],[\"pexpireat\",{\"1\":{\"139\":1}}],[\"pexpire\",{\"1\":{\"139\":1}}],[\"permgen\",{\"1\":{\"651\":2,\"722\":1}}],[\"permissions\",{\"1\":{\"650\":2}}],[\"permission\",{\"1\":{\"650\":2}}],[\"permanent\",{\"1\":{\"309\":1,\"839\":1}}],[\"periodseconds\",{\"1\":{\"263\":1}}],[\"period\",{\"1\":{\"214\":2,\"774\":1}}],[\"persist\",{\"1\":{\"139\":1}}],[\"personlist\",{\"1\":{\"3\":3}}],[\"persondao\",{\"1\":{\"3\":1}}],[\"person\",{\"1\":{\"3\":18,\"92\":1}}],[\"per\",{\"1\":{\"74\":1}}],[\"percentage\",{\"0\":{\"152\":1},\"1\":{\"146\":1,\"152\":2}}],[\"percent\",{\"1\":{\"24\":1,\"445\":3,\"892\":1,\"893\":13}}],[\"pernode=1000\",{\"1\":{\"22\":1}}],[\"people\",{\"1\":{\"20\":4,\"29\":1}}],[\"prenode\",{\"1\":{\"929\":4}}],[\"premain\",{\"1\":{\"707\":2,\"708\":1,\"709\":3,\"710\":1,\"711\":3,\"715\":2,\"717\":2,\"718\":1,\"721\":2}}],[\"prehandle\",{\"1\":{\"650\":1}}],[\"prepare\",{\"1\":{\"421\":1,\"422\":2}}],[\"preprocess\",{\"1\":{\"59\":2}}],[\"preprocessing\",{\"1\":{\"59\":1}}],[\"predicates\",{\"1\":{\"410\":2}}],[\"predict\",{\"1\":{\"59\":2}}],[\"preamble\",{\"1\":{\"352\":1}}],[\"preapp\",{\"1\":{\"62\":1}}],[\"pre\",{\"1\":{\"214\":4,\"845\":2}}],[\"previous\",{\"1\":{\"157\":1}}],[\"prev\",{\"1\":{\"119\":4,\"444\":11}}],[\"prefer\",{\"1\":{\"317\":1}}],[\"preferred\",{\"1\":{\"21\":1}}],[\"prefix=supervision\",{\"1\":{\"401\":1}}],[\"prefix=\",{\"1\":{\"243\":1,\"343\":1,\"352\":1,\"379\":1}}],[\"prefix机制\",{\"1\":{\"214\":1}}],[\"prefix\",{\"1\":{\"63\":2,\"214\":1,\"230\":1,\"417\":5}}],[\"proceed\",{\"1\":{\"823\":1}}],[\"processing\",{\"1\":{\"892\":1}}],[\"processingsequencebarrier\",{\"1\":{\"472\":1}}],[\"processcacheddata\",{\"1\":{\"824\":1}}],[\"processor线程将响应返回给客户端\",{\"1\":{\"433\":1}}],[\"processor将请求封装成request对象\",{\"1\":{\"433\":1}}],[\"process数等\",{\"1\":{\"305\":1}}],[\"processlist\",{\"1\":{\"74\":1}}],[\"process\",{\"1\":{\"21\":1,\"250\":1,\"345\":2,\"349\":2,\"845\":2}}],[\"programimgname\",{\"1\":{\"749\":1}}],[\"programimg\",{\"1\":{\"749\":1}}],[\"programs等\",{\"1\":{\"704\":1}}],[\"progress\",{\"1\":{\"126\":1,\"155\":1}}],[\"provided\",{\"1\":{\"593\":1}}],[\"provider\",{\"1\":{\"402\":2,\"403\":1,\"404\":1,\"408\":2,\"409\":1,\"410\":1,\"411\":2,\"415\":2,\"416\":1}}],[\"pro\",{\"1\":{\"433\":1}}],[\"prodiver\",{\"1\":{\"415\":1}}],[\"prod\",{\"1\":{\"410\":2}}],[\"produce积累到一定数据\",{\"1\":{\"435\":1}}],[\"produce不会重复\",{\"1\":{\"435\":1}}],[\"producerrecord<>\",{\"1\":{\"564\":1}}],[\"producerrecord<string\",{\"1\":{\"564\":1}}],[\"producer<string\",{\"1\":{\"564\":1}}],[\"producertest\",{\"1\":{\"564\":1}}],[\"producerbarier会看到下一个节点\",{\"1\":{\"455\":1}}],[\"producerbarrier上的批处理\",{\"0\":{\"457\":1}}],[\"producerbarrier先等待ringbuffer的游标追上当前的位置\",{\"1\":{\"456\":1}}],[\"producerbarrier如何防止ringbuffer重叠\",{\"1\":{\"454\":1}}],[\"producerbarrier\",{\"1\":{\"454\":4,\"456\":3,\"457\":1,\"458\":3}}],[\"producer向ringbuffer写入事件\",{\"1\":{\"450\":1}}],[\"producer已经成功注册\",{\"1\":{\"394\":1}}],[\"producer\",{\"1\":{\"392\":1,\"396\":1,\"398\":1,\"433\":1,\"435\":1,\"450\":1,\"564\":7}}],[\"product\",{\"1\":{\"53\":1}}],[\"profileid\",{\"1\":{\"883\":1}}],[\"profile1\",{\"1\":{\"883\":2}}],[\"profiles\",{\"1\":{\"384\":5,\"385\":2,\"389\":1,\"410\":1,\"883\":1}}],[\"profile定义两个bean\",{\"0\":{\"383\":1}}],[\"profile文件中添加\",{\"1\":{\"575\":1}}],[\"profile文件\",{\"1\":{\"377\":1}}],[\"profile\",{\"0\":{\"382\":1},\"1\":{\"343\":2,\"377\":2,\"385\":1,\"417\":4,\"495\":1,\"566\":1,\"883\":5}}],[\"proxied\",{\"1\":{\"317\":2}}],[\"proxy\",{\"1\":{\"161\":4,\"298\":1,\"307\":2,\"317\":14}}],[\"proxytargetclass\",{\"1\":{\"64\":1}}],[\"property\",{\"0\":{\"426\":1}}],[\"propertykeyconst\",{\"1\":{\"297\":2}}],[\"properties文件\",{\"1\":{\"385\":1}}],[\"properties>\",{\"1\":{\"297\":1,\"414\":1,\"596\":1,\"707\":1,\"715\":1}}],[\"properties\",{\"1\":{\"297\":29,\"385\":1,\"401\":2,\"417\":1,\"564\":17}}],[\"propagation\",{\"1\":{\"72\":1}}],[\"prospectors\",{\"1\":{\"275\":1,\"277\":1}}],[\"project>\",{\"1\":{\"715\":1}}],[\"project是所有的pom\",{\"1\":{\"578\":1}}],[\"project\",{\"1\":{\"230\":2,\"275\":2,\"297\":2,\"389\":3,\"477\":1,\"478\":1,\"707\":2,\"715\":2}}],[\"promissory\",{\"1\":{\"186\":1}}],[\"protected\",{\"1\":{\"32\":2,\"352\":1,\"446\":2,\"613\":1,\"820\":1,\"821\":1,\"822\":1,\"823\":1,\"833\":1}}],[\"protocols\",{\"1\":{\"317\":1}}],[\"protocol做了封装\",{\"1\":{\"19\":1}}],[\"protocol\",{\"1\":{\"19\":1,\"263\":1,\"520\":1,\"521\":1,\"638\":1}}],[\"protocol协议与namenode进行沟通\",{\"1\":{\"19\":1}}],[\"protocol协议与namenode交互\",{\"1\":{\"19\":1}}],[\"pratice\",{\"1\":{\"13\":1}}],[\"prior\",{\"1\":{\"894\":1}}],[\"priorityblockingqueue<>\",{\"1\":{\"533\":1}}],[\"priorityblockingqueue<task>\",{\"1\":{\"533\":1}}],[\"priorityblockingqueuedemo\",{\"1\":{\"533\":1}}],[\"priorityblockingqueue中允许插入null对象\",{\"1\":{\"533\":1}}],[\"priorityblockingqueue是一个没有边界的队列\",{\"1\":{\"533\":1}}],[\"priorityblockingqueue通过使用堆这种数据结构实现将队列中的元素按照某种排序规则进行排序\",{\"1\":{\"533\":1}}],[\"priorityblockingqueue\",{\"0\":{\"533\":1},\"1\":{\"530\":1,\"759\":1}}],[\"priorityqueue一样\",{\"1\":{\"533\":1}}],[\"priorityqueue\",{\"1\":{\"529\":3}}],[\"priority\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"primary\",{\"1\":{\"92\":1,\"104\":1}}],[\"primary=true\",{\"1\":{\"58\":1,\"60\":1}}],[\"privs\",{\"1\":{\"886\":1,\"887\":3}}],[\"priv\",{\"1\":{\"837\":1,\"887\":3}}],[\"privdata\",{\"1\":{\"126\":8}}],[\"privileged\",{\"1\":{\"263\":1}}],[\"privileged=true\",{\"1\":{\"63\":1}}],[\"privileges\",{\"1\":{\"78\":1,\"322\":2}}],[\"privatetmp=true\",{\"1\":{\"353\":1}}],[\"private\",{\"1\":{\"3\":3,\"63\":10,\"64\":4,\"213\":5,\"214\":20,\"216\":1,\"217\":2,\"218\":5,\"219\":3,\"297\":3,\"317\":3,\"388\":4,\"400\":1,\"401\":1,\"410\":3,\"411\":2,\"413\":1,\"419\":1,\"427\":2,\"437\":1,\"439\":1,\"440\":2,\"441\":3,\"442\":1,\"443\":1,\"444\":4,\"446\":4,\"517\":3,\"518\":3,\"523\":1,\"527\":1,\"530\":1,\"533\":2,\"548\":2,\"554\":1,\"563\":3,\"564\":5,\"612\":1,\"650\":2,\"652\":3,\"661\":1,\"733\":1,\"734\":6,\"779\":5,\"814\":2,\"929\":4,\"930\":1}}],[\"price\",{\"1\":{\"22\":4,\"23\":7,\"60\":3,\"61\":3,\"62\":2}}],[\"printgcmetric\",{\"1\":{\"721\":1}}],[\"printmemorymetric\",{\"1\":{\"721\":1}}],[\"printf\",{\"1\":{\"613\":3,\"616\":2}}],[\"printstacktrace\",{\"1\":{\"63\":1,\"213\":4,\"214\":2,\"410\":1,\"411\":1,\"440\":2,\"446\":1,\"475\":1,\"531\":1,\"533\":1,\"539\":1,\"548\":2,\"552\":3,\"554\":1,\"564\":1,\"613\":1,\"650\":2,\"733\":2,\"776\":2}}],[\"print\",{\"1\":{\"21\":1,\"61\":1,\"62\":1,\"294\":1,\"389\":2,\"527\":2,\"539\":1,\"734\":8}}],[\"println\",{\"1\":{\"3\":2,\"32\":1,\"63\":1,\"213\":2,\"214\":2,\"297\":1,\"408\":1,\"409\":1,\"416\":1,\"437\":3,\"438\":1,\"440\":4,\"445\":11,\"446\":2,\"475\":9,\"523\":2,\"527\":28,\"530\":3,\"531\":1,\"532\":1,\"533\":3,\"537\":8,\"539\":2,\"542\":1,\"545\":1,\"548\":1,\"549\":5,\"552\":3,\"554\":4,\"563\":2,\"564\":2,\"613\":3,\"626\":2,\"650\":2,\"652\":1,\"661\":4,\"703\":4,\"709\":1,\"716\":1,\"717\":1,\"734\":2,\"776\":2,\"777\":4,\"814\":1,\"929\":1,\"930\":1}}],[\"p\",{\"0\":{\"196\":1},\"1\":{\"6\":1,\"63\":3,\"73\":1,\"78\":1,\"80\":2,\"127\":1,\"132\":2,\"211\":1,\"230\":1,\"241\":3,\"251\":6,\"252\":2,\"253\":2,\"254\":4,\"260\":1,\"271\":1,\"293\":1,\"319\":1,\"321\":1,\"322\":2,\"324\":1,\"326\":1,\"327\":1,\"342\":4,\"357\":3,\"362\":3,\"364\":1,\"458\":3,\"475\":1,\"566\":1,\"626\":1,\"674\":3,\"740\":2,\"741\":1,\"743\":1,\"744\":2,\"745\":5,\"816\":1,\"838\":1,\"924\":1}}],[\"publish\",{\"1\":{\"749\":1}}],[\"public\",{\"1\":{\"3\":6,\"32\":4,\"63\":17,\"64\":11,\"213\":6,\"214\":22,\"215\":1,\"216\":3,\"217\":5,\"218\":3,\"219\":3,\"297\":11,\"393\":2,\"397\":2,\"398\":1,\"399\":4,\"400\":2,\"401\":2,\"402\":2,\"403\":2,\"404\":5,\"408\":6,\"409\":3,\"410\":3,\"411\":1,\"413\":2,\"415\":4,\"416\":3,\"419\":13,\"427\":1,\"436\":3,\"437\":5,\"438\":2,\"439\":2,\"440\":5,\"441\":1,\"443\":1,\"444\":17,\"445\":6,\"446\":5,\"475\":9,\"517\":8,\"518\":15,\"523\":7,\"527\":26,\"530\":2,\"531\":2,\"532\":2,\"533\":9,\"537\":4,\"539\":4,\"541\":2,\"542\":2,\"544\":2,\"545\":2,\"549\":2,\"552\":2,\"554\":3,\"563\":5,\"564\":11,\"612\":5,\"613\":3,\"626\":12,\"650\":20,\"652\":6,\"661\":5,\"671\":1,\"703\":10,\"709\":3,\"712\":1,\"716\":2,\"717\":8,\"721\":3,\"733\":6,\"734\":12,\"735\":2,\"749\":2,\"771\":1,\"772\":2,\"773\":2,\"776\":1,\"779\":3,\"814\":5,\"888\":1,\"924\":2,\"929\":4,\"930\":2}}],[\"pub将公钥添加进gitlab\",{\"1\":{\"495\":1}}],[\"pub公钥文件\",{\"1\":{\"495\":1}}],[\"push等操作\",{\"1\":{\"488\":1}}],[\"push\",{\"1\":{\"263\":1,\"493\":1,\"497\":1,\"499\":5,\"500\":2,\"501\":3,\"503\":1}}],[\"pull镜像时使用的secret名称\",{\"1\":{\"263\":1}}],[\"pull\",{\"1\":{\"63\":1,\"239\":1,\"263\":1,\"488\":1,\"493\":1,\"499\":2,\"501\":1,\"503\":1}}],[\"purchased\",{\"1\":{\"27\":1}}],[\"putintrelease\",{\"1\":{\"444\":1}}],[\"put操作要么成功\",{\"1\":{\"199\":1}}],[\"putobjectargs\",{\"1\":{\"63\":2}}],[\"putobject\",{\"1\":{\"63\":2}}],[\"put\",{\"1\":{\"3\":4,\"7\":1,\"13\":21,\"214\":3,\"243\":1,\"297\":1,\"476\":1,\"518\":1,\"564\":9,\"650\":1}}],[\"palt\",{\"1\":{\"789\":1}}],[\"padding大小\",{\"1\":{\"722\":1}}],[\"panel\",{\"1\":{\"317\":1}}],[\"passwd\",{\"1\":{\"831\":2}}],[\"password=password\",{\"1\":{\"479\":1}}],[\"password=12345678\",{\"1\":{\"297\":1}}],[\"password=123456\",{\"1\":{\"297\":1}}],[\"password=\",{\"1\":{\"80\":1,\"329\":1,\"342\":1}}],[\"password\",{\"1\":{\"20\":1,\"78\":1,\"155\":1,\"297\":2,\"321\":2,\"322\":3,\"480\":1,\"883\":3}}],[\"pass\",{\"1\":{\"298\":1,\"307\":2,\"317\":1,\"331\":2,\"336\":2,\"344\":2,\"348\":2,\"356\":2,\"361\":2}}],[\"paper的缩写\",{\"1\":{\"186\":1}}],[\"pattern\",{\"1\":{\"139\":2,\"306\":2}}],[\"path被设置\",{\"1\":{\"418\":1}}],[\"pathvariable\",{\"1\":{\"398\":1,\"400\":1,\"402\":2,\"404\":1,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"415\":1,\"416\":1}}],[\"path=\",{\"1\":{\"410\":2,\"478\":1,\"837\":1}}],[\"path=$app\",{\"1\":{\"389\":1}}],[\"path=$path\",{\"1\":{\"343\":2,\"377\":1}}],[\"path=resources\",{\"1\":{\"389\":1}}],[\"paths\",{\"1\":{\"275\":1,\"277\":1}}],[\"pathfile\",{\"1\":{\"61\":2}}],[\"path\",{\"1\":{\"22\":3,\"32\":3,\"59\":2,\"61\":5,\"62\":3,\"263\":4,\"270\":2,\"275\":1,\"343\":1,\"418\":1,\"502\":2,\"652\":4,\"837\":6,\"843\":2,\"865\":1,\"890\":2,\"894\":3}}],[\"pack14\",{\"1\":{\"833\":1}}],[\"packaging为该项目的打包方式\",{\"0\":{\"590\":1}}],[\"packaging\",{\"1\":{\"586\":1}}],[\"package进行打包\",{\"1\":{\"582\":1}}],[\"packageparam\",{\"1\":{\"518\":3}}],[\"packageheader\",{\"1\":{\"518\":3}}],[\"packages\",{\"1\":{\"267\":2}}],[\"package\",{\"1\":{\"3\":1,\"32\":1,\"230\":1,\"291\":1,\"417\":1,\"436\":1,\"437\":2,\"438\":1,\"439\":1,\"440\":2,\"444\":1,\"446\":1,\"517\":1,\"518\":1,\"523\":3,\"527\":8,\"563\":1,\"566\":1,\"576\":1,\"579\":1,\"612\":1,\"613\":1,\"650\":1,\"652\":1,\"710\":1,\"716\":1,\"717\":1,\"721\":1,\"733\":4,\"734\":2}}],[\"packet\",{\"1\":{\"74\":2}}],[\"pagination\",{\"1\":{\"64\":1}}],[\"paginationinnerinterceptor\",{\"1\":{\"64\":9}}],[\"pages\",{\"1\":{\"845\":6}}],[\"page\",{\"1\":{\"27\":1,\"837\":2,\"845\":1,\"853\":1}}],[\"park\",{\"1\":{\"926\":1,\"929\":1}}],[\"parities\",{\"1\":{\"552\":1}}],[\"paris\",{\"1\":{\"527\":1}}],[\"parallelism\",{\"1\":{\"809\":1}}],[\"parallelstream\",{\"1\":{\"527\":1}}],[\"parallel\",{\"1\":{\"527\":1}}],[\"parallell=true\",{\"1\":{\"29\":1}}],[\"param3\",{\"1\":{\"443\":1}}],[\"param1\",{\"1\":{\"443\":1}}],[\"param2\",{\"1\":{\"317\":1,\"443\":1}}],[\"param=search\",{\"1\":{\"62\":1}}],[\"params\",{\"1\":{\"58\":5,\"62\":3,\"518\":30}}],[\"param\",{\"1\":{\"3\":1,\"63\":3,\"73\":3,\"213\":4,\"217\":2,\"297\":4,\"444\":12,\"445\":1,\"518\":27,\"613\":4,\"652\":6}}],[\"parsedouble\",{\"1\":{\"626\":2}}],[\"parseexception\",{\"1\":{\"626\":2}}],[\"parseint\",{\"1\":{\"32\":2,\"612\":1,\"896\":1}}],[\"parse\",{\"1\":{\"22\":1,\"527\":2,\"626\":4}}],[\"partitiion\",{\"1\":{\"27\":1}}],[\"partition是发送消息\",{\"1\":{\"433\":1}}],[\"partition=true\",{\"1\":{\"22\":1}}],[\"partitions可以创建最大动态分区个数\",{\"1\":{\"22\":1}}],[\"partitions\",{\"1\":{\"21\":2,\"22\":1}}],[\"partitions命令查看表中存在的所有分区\",{\"1\":{\"21\":1}}],[\"partitioned\",{\"1\":{\"21\":1,\"26\":1,\"27\":2,\"28\":2}}],[\"partition\",{\"0\":{\"195\":1,\"430\":1},\"1\":{\"21\":5,\"22\":4,\"26\":3,\"27\":6,\"28\":2,\"191\":1,\"564\":1}}],[\"part\",{\"1\":{\"20\":2,\"21\":1,\"26\":7,\"195\":1}}],[\"ld\",{\"1\":{\"832\":2}}],[\"l3\",{\"1\":{\"662\":1}}],[\"l3再次\",{\"1\":{\"662\":1}}],[\"l1和l2高速缓存存在于cpu内核本身\",{\"1\":{\"662\":1}}],[\"l1缓存通常也有两种分割方式\",{\"1\":{\"662\":1}}],[\"l1缓存具有cpu在完成特定任务时最可能需要的数据\",{\"1\":{\"662\":1}}],[\"l1\",{\"1\":{\"662\":1}}],[\"l1最靠近cpu核心\",{\"1\":{\"662\":1}}],[\"lwn\",{\"1\":{\"662\":1}}],[\"lmax\",{\"1\":{\"458\":1,\"472\":4}}],[\"lbq\",{\"1\":{\"532\":5}}],[\"lb\",{\"1\":{\"410\":2}}],[\"l`\",{\"1\":{\"389\":1}}],[\"ln\",{\"1\":{\"321\":2,\"380\":4}}],[\"lntup|grep\",{\"1\":{\"273\":1,\"282\":1}}],[\"lululove19870526\",{\"1\":{\"626\":1}}],[\"luawaf\",{\"1\":{\"317\":1}}],[\"lucene\",{\"1\":{\"4\":2}}],[\"lh\",{\"1\":{\"277\":1}}],[\"ll\",{\"1\":{\"263\":1,\"833\":1,\"834\":2,\"845\":1}}],[\"llen\",{\"1\":{\"118\":1}}],[\"lynch从理论上证明了cap\",{\"1\":{\"190\":1}}],[\"ltrim\",{\"1\":{\"135\":1}}],[\"lpop\",{\"1\":{\"135\":1}}],[\"lpush\",{\"1\":{\"135\":2}}],[\"lrange\",{\"1\":{\"118\":1,\"135\":4,\"139\":1}}],[\"l\",{\"1\":{\"73\":1,\"369\":1,\"508\":1,\"549\":2}}],[\"lambda表达式定义了supplier\",{\"1\":{\"475\":1}}],[\"lambda\",{\"1\":{\"475\":3}}],[\"lazyset\",{\"1\":{\"444\":1}}],[\"language=\",{\"1\":{\"842\":1}}],[\"language\",{\"1\":{\"477\":2,\"479\":1,\"480\":1}}],[\"lang\",{\"1\":{\"444\":1,\"445\":2,\"523\":2,\"533\":1,\"558\":1,\"574\":1,\"626\":2,\"651\":3,\"709\":1,\"716\":1,\"717\":1,\"733\":4,\"735\":1}}],[\"lang3的\",{\"1\":{\"652\":1}}],[\"lang3\",{\"1\":{\"63\":1,\"527\":1,\"779\":1}}],[\"layout>\",{\"1\":{\"389\":1}}],[\"large\",{\"1\":{\"317\":1}}],[\"labels\",{\"1\":{\"263\":3,\"275\":1}}],[\"latch\",{\"1\":{\"776\":3}}],[\"latest\",{\"1\":{\"225\":3,\"230\":1,\"263\":4,\"435\":1,\"564\":1}}],[\"latin1\",{\"1\":{\"82\":1}}],[\"lag\",{\"1\":{\"155\":2}}],[\"last\",{\"1\":{\"309\":1,\"317\":2}}],[\"lastsave\",{\"0\":{\"145\":1}}],[\"lastindexof\",{\"1\":{\"63\":2}}],[\"lastname\",{\"1\":{\"20\":4}}],[\"la\",{\"1\":{\"59\":2}}],[\"l2其次\",{\"1\":{\"662\":1}}],[\"l2\",{\"1\":{\"53\":1,\"58\":2,\"62\":1,\"662\":1}}],[\"lsn\",{\"1\":{\"845\":1,\"868\":1,\"872\":1,\"892\":2,\"893\":9}}],[\"lsblk或lsblk\",{\"1\":{\"369\":1}}],[\"ls\",{\"1\":{\"8\":1,\"258\":1,\"277\":1,\"832\":2}}],[\"life\",{\"1\":{\"883\":1}}],[\"lifetime\",{\"1\":{\"649\":1}}],[\"license\",{\"1\":{\"837\":2,\"845\":2,\"892\":1,\"893\":1}}],[\"little\",{\"1\":{\"674\":1}}],[\"litetimeoutblockingwaitstrategy\",{\"0\":{\"467\":1},\"1\":{\"472\":1}}],[\"liteblockingwaitstrategy的实现方法也是阻塞等待\",{\"1\":{\"466\":1}}],[\"liteblockingwaitstrategy\",{\"0\":{\"466\":1},\"1\":{\"472\":1}}],[\"liteblockingwaitstrategy实现方法也是阻塞等待\",{\"1\":{\"458\":1}}],[\"liaoxuefeng\",{\"1\":{\"475\":1}}],[\"liquidbase\",{\"1\":{\"418\":1}}],[\"livenessprobe\",{\"1\":{\"263\":1}}],[\"live\",{\"1\":{\"139\":1,\"214\":1,\"222\":1}}],[\"lisi\",{\"1\":{\"104\":2}}],[\"listsize\",{\"1\":{\"768\":2}}],[\"list=\",{\"1\":{\"545\":1}}],[\"list=null\",{\"1\":{\"545\":1}}],[\"list=new\",{\"1\":{\"544\":1}}],[\"listner负责ack\",{\"1\":{\"435\":1}}],[\"listnode\",{\"1\":{\"119\":10,\"121\":1}}],[\"listenablefuture<sendresult<string\",{\"1\":{\"437\":1}}],[\"listenablefuturecallback<sendresult<string\",{\"1\":{\"437\":1}}],[\"listenablefuturecallback\",{\"1\":{\"437\":1}}],[\"listenablefuture\",{\"1\":{\"437\":1}}],[\"listener\",{\"1\":{\"297\":3,\"435\":1,\"717\":4}}],[\"listen\",{\"1\":{\"273\":2,\"282\":4,\"307\":2,\"317\":2}}],[\"list列表命令\",{\"0\":{\"135\":1}}],[\"listobjectsargs\",{\"1\":{\"63\":1}}],[\"listobjects\",{\"1\":{\"63\":3}}],[\"listfiles\",{\"1\":{\"63\":1}}],[\"listbuckets\",{\"1\":{\"63\":2}}],[\"list<car>\",{\"1\":{\"527\":1}}],[\"list<integer>\",{\"1\":{\"527\":3}}],[\"list<namevaluepair>\",{\"1\":{\"518\":1}}],[\"list<student>\",{\"1\":{\"735\":2}}],[\"list<string>\",{\"1\":{\"32\":1,\"63\":6,\"527\":3,\"544\":1,\"545\":1,\"548\":2}}],[\"list<s3objectsummary>\",{\"1\":{\"63\":2}}],[\"list<s3fileinfo>\",{\"1\":{\"63\":2}}],[\"list<bucket>\",{\"1\":{\"63\":1}}],[\"list<person>\",{\"1\":{\"3\":2}}],[\"list\",{\"1\":{\"32\":5,\"63\":4,\"119\":9,\"121\":1,\"133\":1,\"158\":2,\"221\":1,\"414\":1,\"496\":1,\"527\":2,\"544\":4,\"545\":2,\"548\":5,\"566\":1,\"597\":1,\"839\":1}}],[\"listperson\",{\"1\":{\"3\":3}}],[\"lincense\",{\"1\":{\"572\":1}}],[\"lincoln\",{\"1\":{\"155\":1}}],[\"linux是1000个左右\",{\"1\":{\"651\":1}}],[\"linux版\",{\"1\":{\"564\":1}}],[\"linux查看镜像并运行\",{\"1\":{\"230\":1}}],[\"linux\",{\"0\":{\"373\":1},\"1\":{\"226\":1,\"229\":2,\"262\":1,\"263\":1,\"290\":1,\"376\":1,\"433\":1,\"575\":1,\"812\":1,\"883\":1}}],[\"linux中则是\",{\"1\":{\"222\":1}}],[\"linkedblockingqueue作为线程池工作队列\",{\"1\":{\"771\":1}}],[\"linkedblockingqueue<runnable>\",{\"1\":{\"754\":1,\"771\":1,\"772\":2,\"776\":1}}],[\"linkedblockingqueue<>\",{\"1\":{\"440\":2,\"446\":1,\"814\":1,\"930\":1}}],[\"linkedblockingqueuedemo\",{\"1\":{\"532\":1}}],[\"linkedblockingqueue阻塞队列大小的配置是可选的\",{\"1\":{\"532\":1}}],[\"linkedblockingqueue\",{\"0\":{\"532\":1},\"1\":{\"530\":1,\"532\":3,\"759\":1}}],[\"linkedlist实现了deque接\",{\"1\":{\"528\":1}}],[\"linkedlist\",{\"1\":{\"157\":1}}],[\"link\",{\"1\":{\"217\":2,\"243\":1,\"321\":1}}],[\"lindex\",{\"1\":{\"135\":1}}],[\"linalg\",{\"1\":{\"59\":1}}],[\"line的字节数就可以达到要求\",{\"1\":{\"667\":1}}],[\"line全部被设置为失效\",{\"1\":{\"665\":1}}],[\"line上\",{\"1\":{\"664\":1}}],[\"line上的不同数据\",{\"1\":{\"663\":1}}],[\"line从e变成m\",{\"1\":{\"663\":1}}],[\"line状态由i变成e\",{\"1\":{\"663\":1}}],[\"line状态由m变为i\",{\"1\":{\"663\":1}}],[\"line已经无效了\",{\"1\":{\"663\":1}}],[\"line由s\",{\"1\":{\"663\":1}}],[\"line中分隔开\",{\"1\":{\"669\":1}}],[\"line中\",{\"1\":{\"663\":1,\"665\":1}}],[\"lines\",{\"1\":{\"548\":2}}],[\"line\",{\"1\":{\"32\":2,\"548\":2,\"663\":1}}],[\"lib类库\",{\"1\":{\"572\":1}}],[\"lib文件夹放在同一目录下\",{\"1\":{\"389\":1}}],[\"lib<\",{\"1\":{\"389\":1}}],[\"libxslt\",{\"1\":{\"243\":1}}],[\"libs\",{\"1\":{\"76\":1,\"77\":1,\"318\":1,\"502\":2}}],[\"lib\",{\"1\":{\"32\":2,\"230\":1,\"270\":1,\"353\":1,\"377\":3,\"389\":1,\"572\":1,\"652\":2,\"712\":1,\"834\":1,\"836\":2,\"838\":2}}],[\"limits\",{\"1\":{\"263\":1,\"270\":2,\"275\":1,\"834\":1}}],[\"limit=20480\",{\"1\":{\"869\":1}}],[\"limit=10240\",{\"1\":{\"869\":1}}],[\"limit=10\",{\"1\":{\"62\":1}}],[\"limit=3\",{\"1\":{\"58\":2}}],[\"limit\",{\"1\":{\"22\":1,\"23\":1,\"74\":1,\"82\":1,\"138\":2,\"139\":1,\"317\":2,\"527\":3,\"865\":1,\"870\":1,\"883\":3}}],[\"limit子句勇于限制返回的行数\",{\"1\":{\"22\":1}}],[\"lily\",{\"1\":{\"13\":2}}],[\"like\",{\"1\":{\"7\":1,\"21\":1,\"22\":2,\"74\":3,\"82\":1,\"100\":1,\"477\":1,\"479\":1,\"480\":1,\"865\":1,\"872\":1,\"887\":1,\"894\":1}}],[\"love\",{\"1\":{\"539\":1}}],[\"loanamount\",{\"1\":{\"445\":3}}],[\"loadagent\",{\"1\":{\"712\":1}}],[\"loader\",{\"1\":{\"558\":2}}],[\"loadblanced注解实现负载均衡\",{\"1\":{\"408\":1}}],[\"loadbalancer\",{\"1\":{\"403\":1}}],[\"loadbalanced注解\",{\"1\":{\"408\":1}}],[\"loadbalanced\",{\"1\":{\"398\":2,\"404\":1,\"408\":1,\"416\":2}}],[\"load\",{\"1\":{\"22\":1,\"26\":1,\"27\":2,\"58\":1,\"59\":1,\"62\":1,\"146\":2,\"297\":2,\"673\":1,\"845\":2}}],[\"lookup\",{\"1\":{\"353\":1}}],[\"loss\",{\"1\":{\"195\":1}}],[\"lockrecord\",{\"1\":{\"827\":1}}],[\"lockresponse\",{\"1\":{\"214\":4}}],[\"locksupport\",{\"1\":{\"926\":1,\"929\":2}}],[\"locks\",{\"1\":{\"818\":1,\"823\":1}}],[\"lockobject\",{\"1\":{\"671\":1,\"673\":4}}],[\"lockinterruptibly\",{\"1\":{\"214\":2,\"703\":1}}],[\"lockdata\",{\"1\":{\"214\":11}}],[\"lockdata>\",{\"1\":{\"214\":1}}],[\"lockcount\",{\"1\":{\"214\":5}}],[\"lockclient\",{\"1\":{\"214\":4}}],[\"lockpath\",{\"1\":{\"214\":12}}],[\"lockkey\",{\"1\":{\"214\":8}}],[\"lock\",{\"1\":{\"74\":1,\"213\":12,\"214\":23,\"216\":1,\"218\":1,\"270\":1,\"324\":1,\"342\":1,\"427\":1,\"661\":2,\"703\":11,\"777\":5,\"814\":2,\"820\":1,\"823\":1,\"824\":8,\"879\":1,\"883\":2,\"924\":5,\"929\":1,\"930\":1}}],[\"locker\",{\"1\":{\"64\":1}}],[\"locator\",{\"1\":{\"410\":1}}],[\"location块\",{\"1\":{\"305\":1}}],[\"location\",{\"1\":{\"21\":2,\"298\":1,\"306\":12,\"307\":7,\"310\":1,\"311\":1,\"312\":1,\"316\":1,\"317\":2}}],[\"local1\",{\"1\":{\"870\":1}}],[\"localtime\",{\"1\":{\"527\":4}}],[\"localdate\",{\"1\":{\"527\":3}}],[\"localdatetime\",{\"1\":{\"527\":3}}],[\"localdomain4\",{\"1\":{\"343\":1}}],[\"localdomain\",{\"1\":{\"343\":1}}],[\"localbranchname\",{\"1\":{\"499\":2}}],[\"localinstall\",{\"1\":{\"319\":1}}],[\"localinteger\",{\"1\":{\"218\":9}}],[\"locallog\",{\"1\":{\"297\":9,\"399\":1,\"626\":1}}],[\"locale\",{\"1\":{\"272\":1}}],[\"localfile\",{\"1\":{\"243\":1}}],[\"localstring\",{\"1\":{\"218\":6}}],[\"locals\",{\"1\":{\"217\":1}}],[\"localhost4\",{\"1\":{\"343\":2}}],[\"localhost\",{\"1\":{\"32\":1,\"58\":1,\"78\":1,\"229\":1,\"230\":2,\"254\":1,\"293\":1,\"297\":1,\"298\":4,\"300\":4,\"301\":4,\"302\":4,\"304\":4,\"305\":4,\"322\":1,\"343\":2,\"410\":4,\"418\":2,\"477\":1,\"479\":3,\"480\":3,\"834\":8,\"838\":1,\"839\":5,\"841\":2,\"843\":1,\"883\":5,\"893\":1}}],[\"local\",{\"0\":{\"8\":1,\"9\":1,\"12\":1},\"1\":{\"6\":1,\"7\":4,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1,\"22\":2,\"27\":2,\"74\":1,\"217\":4,\"222\":1,\"243\":7,\"247\":1,\"315\":1,\"319\":2,\"321\":2,\"331\":1,\"332\":1,\"333\":1,\"336\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"344\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"350\":1,\"352\":1,\"376\":2,\"377\":1,\"379\":1,\"380\":4,\"650\":5,\"809\":1,\"870\":1,\"929\":4}}],[\"lowercaseserviceid\",{\"1\":{\"410\":1}}],[\"lower\",{\"1\":{\"74\":1,\"321\":1}}],[\"low\",{\"1\":{\"22\":1}}],[\"long型变量和\",{\"1\":{\"809\":1}}],[\"long和double是8个字节\",{\"1\":{\"722\":1}}],[\"long类型占8个字节\",{\"1\":{\"722\":1}}],[\"long类型的\",{\"1\":{\"452\":1}}],[\"long等基本类型上\",{\"1\":{\"527\":1}}],[\"longtimecalculation\",{\"1\":{\"475\":2}}],[\"longvalue\",{\"1\":{\"445\":1}}],[\"longwritable\",{\"1\":{\"32\":2}}],[\"longer\",{\"1\":{\"21\":1}}],[\"long\",{\"1\":{\"21\":1,\"27\":1,\"74\":1,\"119\":1,\"124\":3,\"214\":10,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"219\":1,\"388\":1,\"441\":1,\"443\":3,\"444\":2,\"445\":1,\"446\":3,\"452\":1,\"475\":1,\"517\":1,\"527\":1,\"549\":3,\"551\":1,\"552\":1,\"555\":1,\"650\":1,\"652\":1,\"716\":1,\"722\":2,\"762\":1,\"809\":2}}],[\"logfile\",{\"1\":{\"352\":1,\"418\":1,\"871\":1}}],[\"login\",{\"1\":{\"263\":1,\"479\":1,\"480\":1,\"650\":1,\"789\":6,\"883\":2}}],[\"loginuser\",{\"1\":{\"64\":7,\"410\":2,\"650\":5}}],[\"logrotate\",{\"1\":{\"225\":2}}],[\"log中\",{\"1\":{\"79\":1}}],[\"log中的同步到bin\",{\"1\":{\"79\":1}}],[\"log=\",{\"1\":{\"79\":1,\"321\":1}}],[\"log的且未使用索引的sql语句次数\",{\"1\":{\"74\":1}}],[\"log4j2用的队列\",{\"1\":{\"41\":1}}],[\"log2\",{\"1\":{\"27\":2}}],[\"log1\",{\"1\":{\"27\":2}}],[\"logstash部署是否成功\",{\"0\":{\"282\":1}}],[\"logstash\",{\"1\":{\"265\":2,\"267\":1,\"268\":1,\"275\":1,\"277\":1,\"280\":1,\"281\":2,\"282\":7}}],[\"logs\",{\"1\":{\"27\":8,\"74\":1,\"270\":1,\"275\":9,\"276\":8,\"277\":6,\"321\":5,\"352\":4,\"389\":1}}],[\"logmsgs\",{\"1\":{\"21\":1}}],[\"log\",{\"1\":{\"3\":9,\"21\":8,\"26\":7,\"73\":1,\"74\":24,\"78\":2,\"79\":4,\"80\":2,\"150\":1,\"199\":1,\"214\":6,\"270\":1,\"275\":1,\"276\":1,\"277\":1,\"280\":1,\"297\":2,\"317\":1,\"321\":8,\"322\":2,\"323\":2,\"329\":4,\"342\":4,\"352\":3,\"389\":2,\"419\":8,\"433\":9,\"497\":1,\"503\":1,\"837\":5,\"868\":1,\"871\":1}}],[\"loggers\",{\"1\":{\"418\":1}}],[\"loggerfactory\",{\"1\":{\"63\":2,\"213\":2,\"218\":2,\"419\":1}}],[\"logger\",{\"1\":{\"3\":3,\"63\":5,\"213\":4,\"218\":4,\"419\":1,\"779\":1}}],[\"logging\",{\"1\":{\"3\":1,\"199\":1}}],[\"least\",{\"0\":{\"302\":1},\"1\":{\"302\":2}}],[\"leaseid\",{\"1\":{\"214\":10}}],[\"leasettl\",{\"1\":{\"214\":7}}],[\"leaseclient\",{\"1\":{\"214\":10}}],[\"lease\",{\"1\":{\"214\":5}}],[\"lease机制\",{\"1\":{\"214\":1}}],[\"leaf\",{\"1\":{\"211\":2}}],[\"learn\",{\"1\":{\"58\":1}}],[\"len\",{\"1\":{\"119\":3,\"157\":1,\"616\":3,\"618\":3,\"621\":5,\"623\":1,\"874\":1}}],[\"length中获取\",{\"1\":{\"317\":1}}],[\"length=1200\",{\"1\":{\"60\":3}}],[\"length\",{\"1\":{\"3\":2,\"32\":1,\"73\":2,\"157\":1,\"317\":3,\"478\":1,\"479\":1,\"480\":1,\"537\":1,\"539\":1,\"541\":1,\"612\":1,\"652\":3,\"672\":1,\"837\":1}}],[\"left\",{\"1\":{\"23\":4,\"73\":2,\"734\":6}}],[\"level=\",{\"1\":{\"62\":1}}],[\"level\",{\"1\":{\"3\":1,\"222\":2,\"317\":3,\"662\":1,\"809\":1,\"894\":1}}],[\"oguid\",{\"1\":{\"845\":1,\"892\":1,\"893\":4}}],[\"oa\",{\"1\":{\"843\":1}}],[\"o多路复用可以通过把多个\",{\"1\":{\"808\":1}}],[\"o多路复用的本质是通过一种机制\",{\"1\":{\"795\":1}}],[\"o事件通知用户线程\",{\"1\":{\"806\":1}}],[\"o事件时\",{\"1\":{\"802\":1}}],[\"o事件发生了\",{\"1\":{\"800\":1}}],[\"o流\",{\"1\":{\"800\":1}}],[\"o复用select模型\",{\"0\":{\"796\":1}}],[\"o复用模型\",{\"0\":{\"795\":1}}],[\"o数据\",{\"1\":{\"795\":1}}],[\"o2\",{\"1\":{\"735\":4}}],[\"o1\",{\"1\":{\"735\":4}}],[\"oop的全称为\",{\"1\":{\"722\":1}}],[\"oom\",{\"1\":{\"87\":1}}],[\"o操作的多线程事件循环器\",{\"1\":{\"612\":1}}],[\"o请求逻辑\",{\"1\":{\"433\":1}}],[\"octet\",{\"1\":{\"317\":1}}],[\"otherargs\",{\"1\":{\"652\":6}}],[\"otherbeanprop\",{\"1\":{\"388\":1}}],[\"other\",{\"1\":{\"307\":2,\"924\":2}}],[\"other时\",{\"1\":{\"307\":2}}],[\"othersargs\",{\"1\":{\"32\":4}}],[\"obeject\",{\"1\":{\"263\":1}}],[\"obou6wyb\",{\"1\":{\"236\":1}}],[\"obj传入的小数\",{\"1\":{\"445\":1}}],[\"obj\",{\"1\":{\"126\":2,\"413\":2,\"445\":6}}],[\"objectinputstream\",{\"1\":{\"545\":2}}],[\"objectid\",{\"1\":{\"207\":1,\"211\":2}}],[\"objectoutputstream\",{\"1\":{\"544\":2}}],[\"objectfieldoffset\",{\"1\":{\"441\":1,\"443\":1,\"444\":1}}],[\"objectsummaries\",{\"1\":{\"63\":4}}],[\"objectlisting\",{\"1\":{\"63\":7}}],[\"object\",{\"1\":{\"63\":5,\"419\":1,\"438\":1,\"443\":1,\"613\":2,\"650\":4,\"652\":2,\"661\":2,\"716\":1,\"722\":1,\"733\":1,\"926\":1}}],[\"objectname\",{\"1\":{\"63\":10}}],[\"object>>\",{\"1\":{\"437\":2,\"650\":1}}],[\"object>\",{\"1\":{\"3\":2,\"437\":2,\"650\":7}}],[\"owner\",{\"1\":{\"893\":2}}],[\"own\",{\"1\":{\"214\":1}}],[\"oldgen\",{\"1\":{\"722\":1}}],[\"oldlockdata\",{\"1\":{\"214\":4}}],[\"oldjobtracker\",{\"1\":{\"29\":1}}],[\"oldjobtracker=$\",{\"1\":{\"29\":1}}],[\"ok\",{\"1\":{\"134\":2,\"366\":1,\"478\":1,\"482\":1,\"845\":3,\"893\":1}}],[\"okhttp3<\",{\"1\":{\"63\":2}}],[\"o是比较好的\",{\"1\":{\"97\":1}}],[\"o越少\",{\"1\":{\"74\":1}}],[\"ops\",{\"0\":{\"935\":1}}],[\"opsforvalue\",{\"1\":{\"213\":3,\"216\":1,\"217\":2,\"218\":2,\"219\":3}}],[\"opts的值为\",{\"1\":{\"574\":1}}],[\"opts环境变量\",{\"0\":{\"574\":1}}],[\"opts\",{\"1\":{\"389\":1}}],[\"opts=\",{\"1\":{\"389\":1,\"575\":1,\"651\":3}}],[\"opt\",{\"1\":{\"275\":3,\"277\":3,\"831\":3,\"832\":4,\"833\":4,\"834\":7}}],[\"options\",{\"1\":{\"476\":1,\"719\":1}}],[\"option\",{\"1\":{\"322\":1,\"527\":1,\"612\":1,\"888\":1}}],[\"optional<integer>\",{\"1\":{\"527\":4}}],[\"optional类有一些方法接收supplier作为参数\",{\"1\":{\"475\":1}}],[\"optional>\",{\"1\":{\"63\":1}}],[\"optional\",{\"1\":{\"3\":2,\"413\":1,\"438\":3,\"475\":1,\"527\":8}}],[\"optimistic\",{\"1\":{\"64\":1}}],[\"optimisticlockerinnerinterceptor\",{\"1\":{\"64\":4}}],[\"optimize\",{\"1\":{\"23\":3}}],[\"operate\",{\"1\":{\"133\":5,\"195\":1}}],[\"openfeign<\",{\"1\":{\"395\":1,\"404\":1,\"409\":1,\"416\":1}}],[\"openfeign\",{\"1\":{\"394\":1,\"416\":1}}],[\"openssl\",{\"1\":{\"243\":2,\"317\":1}}],[\"openjdk\",{\"1\":{\"230\":2,\"266\":1}}],[\"open\",{\"1\":{\"61\":1,\"74\":1,\"843\":7,\"845\":2,\"869\":2}}],[\"oschina\",{\"1\":{\"458\":1}}],[\"os\",{\"1\":{\"61\":3,\"229\":2}}],[\"o\",{\"1\":{\"22\":1,\"56\":1,\"73\":1,\"74\":2,\"119\":3,\"263\":2,\"290\":1,\"443\":4,\"454\":1,\"527\":1,\"566\":1,\"618\":5,\"733\":2,\"734\":2,\"735\":1,\"781\":1,\"791\":2,\"800\":1,\"808\":2,\"809\":1}}],[\"overflow\",{\"1\":{\"619\":1}}],[\"overlay\",{\"1\":{\"250\":1,\"261\":2}}],[\"overriding\",{\"1\":{\"404\":1}}],[\"overridden\",{\"1\":{\"217\":1}}],[\"override\",{\"1\":{\"3\":1,\"32\":2,\"64\":2,\"214\":11,\"216\":2,\"217\":3,\"218\":2,\"219\":2,\"297\":2,\"399\":3,\"404\":1,\"437\":3,\"446\":1,\"517\":1,\"533\":2,\"552\":2,\"612\":1,\"613\":3,\"650\":2,\"652\":2,\"703\":2,\"717\":5,\"734\":1,\"735\":1,\"776\":1}}],[\"overview\",{\"1\":{\"50\":1,\"420\":1}}],[\"overwrite\",{\"1\":{\"22\":3,\"27\":11}}],[\"overwrite关键字换成into关键字的话\",{\"1\":{\"22\":1}}],[\"onlinebakincr\",{\"1\":{\"894\":2}}],[\"onlinebak\",{\"1\":{\"893\":2,\"894\":6}}],[\"only=0\",{\"1\":{\"339\":1}}],[\"only=1\",{\"1\":{\"79\":1}}],[\"only\",{\"1\":{\"140\":1,\"155\":1,\"833\":1,\"845\":4,\"854\":1}}],[\"oncomplete\",{\"1\":{\"717\":1}}],[\"onignored\",{\"1\":{\"717\":1}}],[\"ondiscovery\",{\"1\":{\"717\":1}}],[\"ontransformation\",{\"1\":{\"717\":1}}],[\"onto\",{\"1\":{\"505\":1}}],[\"ontario\",{\"1\":{\"22\":1}}],[\"onmessage\",{\"1\":{\"438\":1}}],[\"onsuccess\",{\"1\":{\"437\":1}}],[\"on表示开启\",{\"1\":{\"317\":1}}],[\"onfailure表示只有pod以非0退出码退出才重启\",{\"1\":{\"263\":1}}],[\"onfailure\",{\"1\":{\"263\":1,\"437\":1}}],[\"onerror\",{\"1\":{\"717\":1}}],[\"one\",{\"1\":{\"155\":2,\"364\":1,\"652\":2}}],[\"on子句指定了两个表间数据进行连接的条件\",{\"1\":{\"23\":1}}],[\"on子句中谓词之间不能使用or\",{\"1\":{\"23\":1}}],[\"on\",{\"0\":{\"149\":1},\"1\":{\"20\":2,\"23\":8,\"24\":8,\"27\":2,\"28\":4,\"141\":2,\"146\":1,\"217\":1,\"317\":11,\"322\":1,\"380\":1,\"734\":1,\"823\":1,\"837\":1,\"845\":1,\"885\":1,\"887\":2,\"888\":2,\"894\":1}}],[\"o资源\",{\"1\":{\"16\":1}}],[\"outofmemoryerror\",{\"1\":{\"651\":2}}],[\"outofmemeoryerror\",{\"1\":{\"574\":1}}],[\"outdate\",{\"1\":{\"626\":2}}],[\"outputdirectory>\",{\"1\":{\"389\":2}}],[\"outputencoding>\",{\"1\":{\"297\":1,\"707\":1,\"715\":1}}],[\"outputencoding>utf\",{\"1\":{\"297\":1,\"707\":1,\"715\":1}}],[\"outputavg\",{\"1\":{\"32\":1}}],[\"output\",{\"1\":{\"32\":1,\"58\":3,\"59\":1,\"118\":1,\"275\":1,\"277\":1,\"280\":1,\"445\":3,\"626\":2,\"652\":1}}],[\"outer\",{\"1\":{\"23\":6}}],[\"out\",{\"1\":{\"3\":2,\"24\":8,\"63\":1,\"213\":2,\"214\":1,\"297\":1,\"408\":1,\"409\":1,\"416\":1,\"437\":3,\"438\":1,\"440\":4,\"445\":11,\"446\":2,\"475\":9,\"523\":2,\"527\":28,\"530\":3,\"531\":1,\"532\":1,\"533\":3,\"537\":8,\"539\":3,\"542\":1,\"545\":1,\"548\":1,\"549\":5,\"552\":3,\"554\":4,\"563\":2,\"564\":2,\"613\":6,\"626\":4,\"650\":2,\"661\":4,\"703\":4,\"709\":1,\"716\":1,\"717\":1,\"734\":2,\"776\":2,\"777\":4,\"814\":1,\"929\":1,\"930\":1}}],[\"ora\",{\"1\":{\"727\":1}}],[\"oracle\",{\"1\":{\"375\":1,\"843\":2,\"856\":1,\"864\":2}}],[\"ordinary\",{\"1\":{\"722\":1}}],[\"ordermoney\",{\"1\":{\"427\":2}}],[\"orderdao\",{\"1\":{\"427\":3}}],[\"order\",{\"1\":{\"23\":1,\"73\":1,\"74\":1,\"427\":4,\"435\":1}}],[\"orders\",{\"1\":{\"20\":2}}],[\"origin\",{\"1\":{\"479\":1,\"480\":1,\"497\":2,\"499\":4,\"500\":3,\"501\":4,\"503\":1,\"716\":2}}],[\"or\",{\"1\":{\"82\":1,\"113\":1,\"195\":1,\"293\":1,\"475\":1,\"805\":1}}],[\"orelseget\",{\"1\":{\"475\":1}}],[\"orelse\",{\"1\":{\"3\":1,\"527\":2}}],[\"org反向对应\",{\"1\":{\"587\":1}}],[\"org等都属于gtld\",{\"1\":{\"222\":1}}],[\"org\",{\"1\":{\"3\":11,\"28\":1,\"32\":10,\"63\":6,\"213\":6,\"218\":5,\"243\":1,\"297\":3,\"401\":1,\"415\":1,\"435\":4,\"437\":6,\"438\":6,\"439\":2,\"518\":10,\"527\":5,\"546\":1,\"547\":1,\"548\":2,\"564\":6,\"587\":1,\"652\":11,\"707\":1,\"715\":5,\"779\":4}}],[\"ofmillis\",{\"1\":{\"564\":1}}],[\"ofnullable\",{\"1\":{\"438\":1,\"527\":2}}],[\"offer\",{\"1\":{\"530\":4,\"531\":1,\"773\":1}}],[\"off表示关闭\",{\"1\":{\"317\":1}}],[\"off\",{\"1\":{\"247\":1,\"317\":4}}],[\"offset\",{\"1\":{\"135\":1,\"138\":2,\"139\":1,\"433\":1,\"435\":1,\"443\":4,\"564\":4}}],[\"of\",{\"1\":{\"3\":1,\"21\":2,\"24\":8,\"195\":2,\"217\":6,\"270\":1,\"475\":1,\"527\":5,\"733\":1,\"837\":5,\"845\":5,\"892\":5,\"893\":25}}],[\"b2\",{\"1\":{\"893\":1}}],[\"bmj\",{\"1\":{\"837\":1}}],[\"b和c就可以利用a进行通讯\",{\"1\":{\"809\":1}}],[\"b和c必须都得做完\",{\"1\":{\"659\":1}}],[\"b君也撩到了美女服务员的微信号\",{\"1\":{\"791\":1}}],[\"b君也喜欢下馆子\",{\"1\":{\"791\":1}}],[\"b君看这个服务员长得不错便前去搭讪\",{\"1\":{\"791\":1}}],[\"bpid\",{\"1\":{\"789\":2}}],[\"bt\",{\"1\":{\"734\":5}}],[\"btrace\",{\"1\":{\"706\":1}}],[\"btree\",{\"1\":{\"101\":1}}],[\"b城的发信能力和自己的收信能力是没有问题的\",{\"1\":{\"647\":1}}],[\"b城的发信能力和收信能力都是没问题的\",{\"1\":{\"647\":1}}],[\"b城发信\",{\"1\":{\"647\":1}}],[\"b城收到了\",{\"1\":{\"647\":2}}],[\"b对于c是第二直接依赖\",{\"1\":{\"594\":1}}],[\"b依赖c\",{\"1\":{\"594\":1}}],[\"bc\",{\"1\":{\"527\":1}}],[\"b类为255\",{\"1\":{\"526\":2}}],[\"bbb\",{\"1\":{\"544\":1}}],[\"bbaf6fb5060b4875b18ff9ff637ce118256d6f20\",{\"1\":{\"501\":1,\"503\":1}}],[\"bb\",{\"1\":{\"315\":3}}],[\"b中是user\",{\"1\":{\"297\":1}}],[\"b9pmyelo\",{\"1\":{\"290\":1}}],[\"b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7\",{\"1\":{\"229\":1}}],[\"bdrd4\",{\"1\":{\"278\":1}}],[\"bdb\",{\"1\":{\"90\":1}}],[\"b5e1e6975083\",{\"1\":{\"243\":2}}],[\"b0f5bc3\",{\"1\":{\"229\":1}}],[\"bgrewriteaof\",{\"0\":{\"151\":1},\"1\":{\"151\":1}}],[\"bgsave\",{\"0\":{\"144\":1},\"1\":{\"141\":2,\"144\":1}}],[\"branches\",{\"1\":{\"505\":1}}],[\"branch的分支上去\",{\"1\":{\"500\":1}}],[\"branch的分支\",{\"1\":{\"500\":1}}],[\"branch的新分支\",{\"1\":{\"500\":1}}],[\"branch\",{\"0\":{\"500\":1},\"1\":{\"500\":9}}],[\"bracket\",{\"1\":{\"22\":1}}],[\"br\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"brokenbarrierexception\",{\"1\":{\"552\":1}}],[\"brokendreams\",{\"1\":{\"472\":1}}],[\"broker\",{\"1\":{\"433\":2}}],[\"bridge\",{\"0\":{\"251\":1},\"1\":{\"250\":1,\"251\":1,\"261\":2,\"288\":4}}],[\"break\",{\"1\":{\"218\":1,\"219\":1,\"309\":1,\"768\":1}}],[\"brewer教授acm\",{\"1\":{\"190\":1}}],[\"brpoplpush\",{\"1\":{\"135\":1}}],[\"brpop\",{\"1\":{\"135\":2}}],[\"b+树底层实现是多路平衡查找树\",{\"1\":{\"102\":1}}],[\"blpop\",{\"1\":{\"135\":4}}],[\"blackhole\",{\"1\":{\"90\":1}}],[\"blocks\",{\"1\":{\"704\":1}}],[\"blockingqueue\",{\"1\":{\"530\":3}}],[\"blockingwaitstrategy的实现方法是阻塞等待\",{\"1\":{\"464\":1}}],[\"blockingwaitstrategy\",{\"0\":{\"464\":1},\"1\":{\"472\":1}}],[\"blockingwaitstrategy默认的等待策略\",{\"1\":{\"458\":1}}],[\"block=256\",{\"1\":{\"526\":2}}],[\"block\",{\"1\":{\"64\":1,\"526\":9,\"539\":1,\"627\":3,\"853\":1}}],[\"blockattackinnerinterceptor\",{\"1\":{\"64\":4}}],[\"blog\",{\"1\":{\"63\":3,\"82\":1,\"132\":2,\"211\":1,\"427\":2,\"458\":1,\"472\":1,\"534\":1,\"576\":1,\"626\":1,\"631\":1,\"650\":1,\"664\":1,\"683\":1,\"789\":1,\"818\":1,\"825\":4,\"924\":1}}],[\"blob\",{\"1\":{\"25\":1,\"82\":1}}],[\"b账户里面的钱应该是a转给b的钱加上c转给b的钱再加上自己原有的钱\",{\"1\":{\"66\":1}}],[\"b账户突然不可用\",{\"1\":{\"66\":1}}],[\"because\",{\"1\":{\"824\":1}}],[\"become\",{\"1\":{\"336\":1,\"339\":1,\"340\":1,\"361\":1,\"364\":1,\"365\":1}}],[\"bestavailablerule\",{\"1\":{\"408\":1}}],[\"beats\",{\"1\":{\"275\":1,\"280\":1}}],[\"beanname\",{\"1\":{\"388\":1}}],[\"bean属性赋值当前的bean\",{\"1\":{\"388\":1}}],[\"beanfactory\",{\"1\":{\"381\":1}}],[\"beanpostprocessor是针对所有bean而言\",{\"1\":{\"381\":1}}],[\"bean作用域与生命周期\",{\"0\":{\"381\":1}}],[\"beans\",{\"1\":{\"213\":1,\"218\":1,\"437\":1,\"439\":1}}],[\"bean\",{\"1\":{\"64\":2,\"381\":6,\"403\":1,\"404\":2,\"408\":2,\"779\":2}}],[\"beijing\",{\"1\":{\"263\":6}}],[\"be\",{\"1\":{\"217\":1}}],[\"before\",{\"1\":{\"214\":2,\"451\":1,\"824\":3,\"845\":2,\"872\":3}}],[\"between\",{\"1\":{\"100\":1,\"789\":6}}],[\"behavior\",{\"1\":{\"72\":1}}],[\"begin\",{\"1\":{\"61\":2,\"73\":1,\"728\":1,\"845\":3}}],[\"bakset\",{\"1\":{\"894\":4}}],[\"bakres\",{\"1\":{\"891\":1}}],[\"bak\",{\"1\":{\"890\":4,\"891\":1,\"892\":1,\"893\":3}}],[\"bat中\",{\"1\":{\"651\":1}}],[\"bat是windows版\",{\"1\":{\"572\":1}}],[\"bat\",{\"1\":{\"564\":2}}],[\"batch\",{\"1\":{\"435\":1}}],[\"baidu\",{\"1\":{\"211\":1,\"312\":1,\"526\":1}}],[\"baike\",{\"1\":{\"211\":1}}],[\"backupdir\",{\"1\":{\"894\":2}}],[\"backupset\",{\"1\":{\"892\":1,\"893\":7,\"894\":5}}],[\"backup配置\",{\"0\":{\"348\":1}}],[\"backup服务器上的redis是否会升级为主库\",{\"1\":{\"367\":1}}],[\"backup服务器上的redis中\",{\"1\":{\"367\":1}}],[\"backup服务器上时\",{\"1\":{\"367\":1}}],[\"backup服务器上redis配置文件\",{\"1\":{\"355\":1}}],[\"backup服务器上\",{\"0\":{\"366\":1},\"1\":{\"342\":4,\"366\":2,\"367\":3}}],[\"backup服务器上验证虚拟ip是否绑定\",{\"0\":{\"341\":1,\"351\":1}}],[\"backup服务器上创建处理脚本\",{\"0\":{\"339\":1,\"364\":1}}],[\"backup服务器上创建检测脚本\",{\"0\":{\"337\":1,\"349\":1,\"362\":1}}],[\"backup服务器上修改keepalived配置文件\",{\"0\":{\"336\":1,\"361\":1},\"1\":{\"348\":1}}],[\"backup服务器上重复以上步骤\",{\"1\":{\"321\":1,\"322\":1,\"352\":1,\"355\":1}}],[\"backup服务器\",{\"0\":{\"325\":1,\"327\":1,\"329\":1},\"1\":{\"321\":1,\"341\":2,\"351\":1}}],[\"backup\",{\"1\":{\"300\":1,\"302\":1,\"331\":1,\"336\":1,\"348\":1,\"356\":1,\"361\":1,\"891\":1,\"892\":3,\"893\":4,\"894\":28}}],[\"backlog\",{\"1\":{\"155\":2,\"612\":1}}],[\"back\",{\"1\":{\"74\":1}}],[\"backend\",{\"1\":{\"59\":1}}],[\"baomidou\",{\"1\":{\"64\":3}}],[\"bash命令行\",{\"1\":{\"495\":1}}],[\"bashrc\",{\"1\":{\"343\":2}}],[\"bash\",{\"1\":{\"242\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"255\":1,\"256\":2,\"257\":1,\"277\":1,\"332\":1,\"337\":1,\"339\":1,\"343\":2,\"345\":1,\"349\":1,\"357\":1,\"362\":1,\"364\":1,\"575\":1,\"831\":1}}],[\"basicthreadfactory\",{\"1\":{\"779\":1}}],[\"basicnamevaluepair\",{\"1\":{\"518\":2}}],[\"basicexecutor\",{\"1\":{\"472\":2}}],[\"basic\",{\"1\":{\"139\":1}}],[\"basicawscredentials\",{\"1\":{\"63\":2}}],[\"baseconnect\",{\"1\":{\"894\":1}}],[\"base64decoder\",{\"1\":{\"749\":1}}],[\"basepackageclasses\",{\"1\":{\"419\":2}}],[\"basepackages\",{\"1\":{\"397\":2,\"416\":2,\"419\":4}}],[\"baseurl=https\",{\"1\":{\"267\":1,\"291\":1}}],[\"base理论\",{\"1\":{\"203\":1}}],[\"basedir=\",{\"1\":{\"321\":2}}],[\"basedir\",{\"1\":{\"74\":1}}],[\"base\",{\"1\":{\"62\":1,\"243\":1,\"414\":1,\"523\":7,\"651\":2,\"894\":3}}],[\"bvalid\",{\"1\":{\"61\":3}}],[\"b是第12个字符\",{\"1\":{\"34\":1}}],[\"bjut<\",{\"1\":{\"715\":1}}],[\"bjut\",{\"1\":{\"32\":1,\"440\":2,\"517\":1,\"518\":2,\"523\":7,\"527\":8,\"650\":1,\"707\":1,\"708\":1,\"715\":1,\"716\":1,\"717\":4,\"718\":1,\"721\":1,\"733\":7,\"734\":2}}],[\"bios\",{\"1\":{\"689\":1}}],[\"biglnteger\",{\"1\":{\"549\":4}}],[\"bigdecimal类\",{\"1\":{\"549\":1}}],[\"bigdecimal都是不可变的\",{\"1\":{\"445\":1}}],[\"bigdecimal的性能比double和float差\",{\"1\":{\"445\":1}}],[\"bigdecimal格式化保留2为小数\",{\"1\":{\"445\":1}}],[\"bigdecimal对象中的值相除\",{\"1\":{\"445\":1}}],[\"bigdecimal对象中的值相乘\",{\"1\":{\"445\":1}}],[\"bigdecimal对象中的值相减\",{\"1\":{\"445\":1}}],[\"bigdecimal对象中的值相加\",{\"1\":{\"445\":1}}],[\"bigdecimal所创建的是对象\",{\"1\":{\"445\":1}}],[\"bigdecimal\",{\"0\":{\"445\":1},\"1\":{\"427\":3,\"445\":28,\"549\":2}}],[\"biginteger\",{\"1\":{\"549\":1}}],[\"bigint\",{\"1\":{\"82\":1}}],[\"bin目录\",{\"1\":{\"572\":1}}],[\"bindexception\",{\"1\":{\"419\":2}}],[\"bind\",{\"1\":{\"352\":1,\"612\":1,\"716\":3}}],[\"bin=master\",{\"1\":{\"323\":1}}],[\"bin=mysql\",{\"1\":{\"79\":1}}],[\"bin=\",{\"1\":{\"79\":1,\"321\":1}}],[\"binlog太多\",{\"1\":{\"87\":1}}],[\"binlog记录内容的方式\",{\"1\":{\"74\":1}}],[\"binlog功能\",{\"1\":{\"74\":1}}],[\"binlog日志文件保存的过期时间\",{\"1\":{\"74\":1}}],[\"binlog\",{\"1\":{\"74\":3,\"79\":2,\"321\":1,\"328\":2,\"342\":2}}],[\"bin\",{\"1\":{\"73\":1,\"74\":2,\"79\":3,\"80\":1,\"230\":2,\"242\":1,\"255\":1,\"282\":1,\"321\":5,\"323\":3,\"326\":1,\"328\":1,\"329\":1,\"332\":2,\"337\":2,\"339\":4,\"342\":3,\"343\":2,\"345\":1,\"349\":1,\"353\":3,\"355\":2,\"357\":5,\"362\":4,\"364\":2,\"366\":1,\"377\":1,\"380\":1,\"389\":1,\"504\":1,\"572\":1,\"651\":2,\"831\":1,\"833\":1,\"834\":5,\"836\":1,\"837\":3,\"838\":1,\"841\":3,\"845\":8,\"891\":1}}],[\"binarytree<>\",{\"1\":{\"734\":1}}],[\"binarytree<integer>\",{\"1\":{\"734\":1}}],[\"binarytree<t>\",{\"1\":{\"734\":1}}],[\"binary可以在记录中包含任意字节\",{\"1\":{\"25\":1}}],[\"binary\",{\"1\":{\"24\":3,\"25\":2,\"623\":1}}],[\"bitmap索引\",{\"1\":{\"28\":1}}],[\"both\",{\"1\":{\"823\":1,\"875\":1,\"887\":1}}],[\"boundary分割\",{\"1\":{\"749\":1}}],[\"boundary=\",{\"1\":{\"480\":1}}],[\"bossgroup\",{\"1\":{\"612\":3}}],[\"boss\",{\"1\":{\"612\":2}}],[\"body的form\",{\"1\":{\"749\":1}}],[\"body\",{\"1\":{\"317\":1,\"483\":1,\"484\":1,\"486\":4}}],[\"bookstack\",{\"1\":{\"613\":1}}],[\"boot目录\",{\"1\":{\"572\":1}}],[\"boot<\",{\"1\":{\"389\":1,\"404\":1,\"412\":1}}],[\"boot两个数据库\",{\"0\":{\"383\":1}}],[\"boot\",{\"0\":{\"383\":1},\"1\":{\"297\":2,\"389\":2,\"404\":1,\"412\":1,\"414\":1,\"435\":1,\"572\":1}}],[\"bootstrapclassloader\",{\"1\":{\"558\":1}}],[\"bootstrap\",{\"1\":{\"270\":1,\"401\":2,\"435\":1,\"564\":1,\"612\":1}}],[\"boolean\",{\"1\":{\"63\":1,\"213\":2,\"214\":6,\"215\":1,\"216\":1,\"217\":1,\"218\":3,\"219\":2,\"263\":1,\"413\":1,\"444\":4,\"446\":2,\"475\":1,\"531\":1,\"549\":2,\"650\":1,\"717\":5,\"820\":1,\"821\":2,\"823\":1}}],[\"boolquery\",{\"1\":{\"3\":2}}],[\"boolquerybuilder\",{\"1\":{\"3\":6}}],[\"bob\",{\"1\":{\"27\":2}}],[\"byte和boolean是1个字节\",{\"1\":{\"722\":1}}],[\"bytebuddy\",{\"1\":{\"716\":3,\"717\":6}}],[\"bytebuddy<\",{\"1\":{\"715\":2}}],[\"bytebufutil\",{\"1\":{\"613\":2}}],[\"bytebuf\",{\"1\":{\"613\":3}}],[\"byte\",{\"1\":{\"539\":2,\"546\":1,\"549\":1,\"621\":1,\"714\":3,\"715\":3,\"722\":5,\"749\":2}}],[\"bytearrayinputstream\",{\"1\":{\"297\":9}}],[\"bytes和send\",{\"1\":{\"564\":1}}],[\"bytesequence\",{\"1\":{\"214\":2}}],[\"bytes\",{\"1\":{\"157\":1,\"262\":3,\"315\":1,\"433\":1,\"564\":3}}],[\"by子句\",{\"1\":{\"139\":1}}],[\"by效率低\",{\"1\":{\"86\":1}}],[\"by时可能用到临时表\",{\"1\":{\"74\":1}}],[\"by语句通常会和聚合函数一起使用\",{\"1\":{\"22\":1}}],[\"by后进行\",{\"1\":{\"22\":1}}],[\"by\",{\"1\":{\"21\":2,\"22\":3,\"23\":7,\"25\":1,\"26\":1,\"27\":6,\"28\":3,\"29\":1,\"64\":2,\"73\":1,\"74\":1,\"78\":1,\"139\":1,\"217\":1,\"322\":2,\"789\":4,\"824\":1,\"874\":1,\"876\":1,\"878\":1,\"881\":1,\"883\":1,\"894\":3}}],[\"b\",{\"0\":{\"40\":1,\"44\":1,\"46\":1,\"500\":1,\"690\":1,\"698\":1},\"1\":{\"7\":3,\"9\":1,\"10\":1,\"13\":2,\"14\":2,\"16\":1,\"19\":1,\"23\":4,\"24\":1,\"63\":2,\"72\":1,\"73\":1,\"104\":1,\"297\":1,\"445\":4,\"495\":1,\"497\":1,\"500\":1,\"507\":1,\"527\":5,\"549\":4,\"576\":1,\"612\":3,\"613\":2,\"653\":1,\"673\":1,\"679\":1,\"680\":1,\"682\":1,\"683\":1,\"712\":2,\"717\":5,\"783\":1,\"785\":1,\"788\":1,\"789\":1,\"809\":2,\"827\":1,\"828\":1,\"877\":3,\"883\":3}}],[\"bus\",{\"1\":{\"809\":1}}],[\"busyspinwaitstrategy的实现方法是自旋等待\",{\"1\":{\"465\":1}}],[\"busyspinwaitstrategy\",{\"0\":{\"465\":1},\"1\":{\"472\":1}}],[\"busyspinwaitstrategy自旋等待\",{\"1\":{\"458\":1}}],[\"busy\",{\"1\":{\"317\":1,\"471\":1,\"472\":1}}],[\"buddy<\",{\"1\":{\"715\":1}}],[\"buddy\",{\"1\":{\"715\":5}}],[\"buddy提供了一个方便的api\",{\"1\":{\"714\":1}}],[\"buddy还允许创建任意类\",{\"1\":{\"714\":1}}],[\"buddy是一个代码生成和操作库\",{\"1\":{\"714\":1}}],[\"buf\",{\"1\":{\"616\":5,\"620\":1,\"621\":2,\"623\":2,\"624\":1,\"855\":2,\"870\":1}}],[\"buff\",{\"1\":{\"539\":1}}],[\"buff=str\",{\"1\":{\"539\":1}}],[\"bufferedreader\",{\"1\":{\"542\":2}}],[\"bufferedwriter\",{\"1\":{\"541\":2}}],[\"bufferedwriter类使用\",{\"0\":{\"541\":1}}],[\"buffers\",{\"1\":{\"317\":6}}],[\"buffer\",{\"1\":{\"74\":5,\"118\":1,\"317\":2,\"321\":4,\"435\":1,\"454\":1,\"564\":2,\"613\":2,\"619\":1,\"749\":1,\"837\":1}}],[\"but\",{\"1\":{\"612\":1,\"823\":1}}],[\"bug越来越多\",{\"1\":{\"898\":1}}],[\"bug\",{\"1\":{\"605\":1,\"619\":1,\"907\":1}}],[\"built\",{\"1\":{\"229\":2}}],[\"build>\",{\"1\":{\"389\":1,\"707\":1,\"715\":1}}],[\"buildargs>\",{\"1\":{\"230\":1}}],[\"build\",{\"0\":{\"568\":1},\"1\":{\"63\":11,\"214\":1,\"230\":3,\"244\":1,\"263\":1,\"290\":1,\"297\":2,\"389\":2,\"440\":2,\"446\":1,\"518\":5,\"707\":3,\"715\":3,\"721\":1,\"754\":1,\"774\":1,\"776\":1}}],[\"builder\",{\"1\":{\"3\":2,\"63\":11,\"214\":1,\"717\":3}}],[\"bundle\",{\"1\":{\"77\":1,\"317\":1}}],[\"bucketname\",{\"1\":{\"63\":2}}],[\"bucketexistsargs\",{\"1\":{\"63\":1}}],[\"bucketexists\",{\"1\":{\"63\":1}}],[\"bucketing=true\",{\"1\":{\"27\":1}}],[\"bucketizedhiveinputformat\",{\"1\":{\"23\":1}}],[\"buckets\",{\"1\":{\"27\":1}}],[\"bucket\",{\"1\":{\"24\":8,\"63\":38,\"317\":1}}],[\"bucketmapjoin\",{\"1\":{\"23\":1}}],[\"bucketmapjoin=true\",{\"1\":{\"23\":2}}],[\"bulk\",{\"1\":{\"3\":2}}],[\"bulkresponse\",{\"1\":{\"3\":1}}],[\"bulkrequest\",{\"1\":{\"3\":5}}],[\"iid\",{\"1\":{\"845\":1}}],[\"ieee\",{\"1\":{\"684\":2}}],[\"iec\",{\"1\":{\"684\":1}}],[\"ietf\",{\"1\":{\"642\":1}}],[\"ie5\",{\"1\":{\"317\":1}}],[\"icmp\",{\"1\":{\"638\":1}}],[\"icu$request\",{\"1\":{\"317\":1}}],[\"icu\",{\"1\":{\"317\":4}}],[\"i+\",{\"1\":{\"554\":1}}],[\"i++\",{\"1\":{\"3\":1,\"213\":2,\"214\":2,\"439\":1,\"440\":2,\"539\":1,\"541\":1,\"552\":1,\"554\":1,\"650\":2,\"768\":1,\"776\":1,\"814\":1,\"924\":2,\"930\":1}}],[\"i<size\",{\"1\":{\"924\":2}}],[\"i<100\",{\"1\":{\"554\":1}}],[\"i<200\",{\"1\":{\"214\":1}}],[\"ibigdata\",{\"1\":{\"472\":1}}],[\"ibm\",{\"1\":{\"23\":5}}],[\"ibm股价ibm\",{\"1\":{\"23\":1}}],[\"irule\",{\"1\":{\"403\":1,\"404\":1,\"408\":1}}],[\"i18n\",{\"1\":{\"272\":1}}],[\"i=0\",{\"1\":{\"214\":1,\"554\":1,\"924\":2}}],[\"ignoreexceptionhandler\",{\"1\":{\"472\":1}}],[\"ignore\",{\"1\":{\"79\":1,\"328\":1,\"342\":1}}],[\"ivh\",{\"1\":{\"77\":4}}],[\"ivf\",{\"1\":{\"52\":6,\"58\":1}}],[\"itr\",{\"1\":{\"652\":3}}],[\"itchuxuezhe\",{\"1\":{\"631\":1}}],[\"iteye\",{\"1\":{\"472\":1}}],[\"iterable<result<item>>\",{\"1\":{\"63\":1}}],[\"iterable<intwritable>\",{\"1\":{\"32\":1,\"652\":1}}],[\"items\",{\"1\":{\"263\":2,\"845\":1}}],[\"item\",{\"1\":{\"63\":5,\"135\":6,\"211\":1,\"728\":4}}],[\"it\",{\"1\":{\"63\":1,\"217\":1,\"242\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":2,\"255\":2,\"256\":2,\"257\":1,\"262\":1,\"277\":1,\"823\":1}}],[\"ilp\",{\"1\":{\"809\":1}}],[\"illegalaccessexception\",{\"1\":{\"733\":1}}],[\"illegalargumentexception\",{\"1\":{\"446\":1}}],[\"illegalmonitorstateexception\",{\"1\":{\"214\":2,\"821\":1}}],[\"ilsvrc2012\",{\"1\":{\"62\":1}}],[\"il\",{\"1\":{\"21\":1}}],[\"isleaf\",{\"1\":{\"894\":2}}],[\"islocked\",{\"1\":{\"219\":8,\"929\":4}}],[\"islock\",{\"1\":{\"218\":4}}],[\"islocksuccess\",{\"1\":{\"214\":1}}],[\"isheldexclusively\",{\"1\":{\"821\":1}}],[\"ismobile\",{\"1\":{\"789\":1}}],[\"ispc\",{\"1\":{\"789\":1}}],[\"ispresent\",{\"1\":{\"438\":1,\"527\":3}}],[\"isinterrupted\",{\"1\":{\"767\":1}}],[\"isterminaed就会返回true\",{\"1\":{\"764\":1}}],[\"isshutdown就会返回true\",{\"1\":{\"764\":1}}],[\"issuccess\",{\"1\":{\"413\":1}}],[\"iso\",{\"0\":{\"833\":1},\"1\":{\"684\":1,\"833\":1}}],[\"isolation\",{\"1\":{\"65\":1,\"74\":1,\"105\":1,\"107\":2,\"396\":1,\"402\":2}}],[\"isreadable\",{\"1\":{\"613\":1}}],[\"isblank\",{\"1\":{\"527\":1}}],[\"isdone\",{\"1\":{\"475\":1}}],[\"isdirectory\",{\"1\":{\"537\":1}}],[\"isdir\",{\"1\":{\"63\":1}}],[\"isnotempty\",{\"1\":{\"650\":1}}],[\"isnotnull\",{\"1\":{\"419\":1,\"650\":1}}],[\"isneighbourhood\",{\"1\":{\"3\":2}}],[\"isempty\",{\"1\":{\"213\":1,\"527\":3}}],[\"isvalidimage\",{\"1\":{\"61\":2}}],[\"is\",{\"1\":{\"21\":2,\"58\":2,\"60\":1,\"155\":2,\"217\":1,\"389\":3,\"401\":1,\"420\":1,\"445\":4,\"612\":1,\"717\":1,\"845\":2,\"870\":1}}],[\"id为1\",{\"1\":{\"533\":1}}],[\"id为3\",{\"1\":{\"533\":1}}],[\"id为2\",{\"1\":{\"533\":1}}],[\"id建议填写产品名\",{\"1\":{\"417\":1}}],[\"id>\",{\"1\":{\"389\":2}}],[\"id的值修改为2\",{\"1\":{\"321\":1}}],[\"ideabuffer\",{\"1\":{\"722\":1}}],[\"idea导入maven项目\",{\"1\":{\"576\":1}}],[\"idea是project下的module\",{\"1\":{\"576\":1}}],[\"idea和eclipse导入时不同\",{\"1\":{\"576\":1}}],[\"idea\",{\"1\":{\"230\":2,\"505\":1,\"566\":2}}],[\"idea安装docker服务\",{\"1\":{\"230\":1}}],[\"identifier\",{\"1\":{\"208\":1}}],[\"identifier的缩写\",{\"1\":{\"208\":1}}],[\"identified\",{\"1\":{\"78\":1,\"322\":2,\"874\":1,\"876\":1,\"878\":1,\"881\":1,\"883\":1}}],[\"id作为主键时在特定的环境会存在一些问题\",{\"1\":{\"210\":1}}],[\"idcsec\",{\"1\":{\"263\":1}}],[\"idc\",{\"1\":{\"205\":1}}],[\"id列数字越大越先执行\",{\"1\":{\"113\":1}}],[\"ids\",{\"1\":{\"58\":2,\"62\":3}}],[\"idxproperties\",{\"1\":{\"28\":1}}],[\"id分区\",{\"1\":{\"27\":1}}],[\"id=\",{\"1\":{\"732\":2}}],[\"id=2\",{\"1\":{\"79\":1,\"325\":1}}],[\"id=1\",{\"1\":{\"79\":1,\"321\":1,\"323\":1}}],[\"id=false\",{\"1\":{\"58\":1}}],[\"id=3\",{\"1\":{\"20\":2}}],[\"id=people\",{\"1\":{\"20\":2}}],[\"id\",{\"1\":{\"3\":3,\"13\":1,\"20\":2,\"21\":3,\"26\":4,\"27\":7,\"60\":3,\"61\":3,\"62\":5,\"73\":1,\"92\":1,\"104\":1,\"113\":1,\"161\":1,\"213\":2,\"214\":2,\"221\":4,\"230\":1,\"255\":1,\"293\":2,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"410\":2,\"417\":2,\"418\":1,\"435\":1,\"437\":10,\"438\":1,\"523\":1,\"527\":2,\"533\":10,\"548\":1,\"564\":2,\"650\":3,\"728\":2,\"732\":2,\"733\":1,\"789\":5,\"843\":2,\"845\":1,\"857\":1,\"877\":2,\"883\":2,\"887\":1}}],[\"ifeve\",{\"1\":{\"458\":1,\"613\":1,\"818\":1}}],[\"ifconfig\",{\"1\":{\"332\":1}}],[\"ifnotpresent表示优先使用本地镜像\",{\"1\":{\"263\":1}}],[\"ifnotpresent\",{\"1\":{\"263\":1}}],[\"if\",{\"1\":{\"3\":2,\"21\":4,\"28\":1,\"32\":2,\"60\":1,\"61\":1,\"62\":2,\"63\":4,\"73\":3,\"126\":1,\"155\":1,\"213\":2,\"214\":10,\"217\":5,\"218\":5,\"219\":6,\"280\":1,\"297\":1,\"317\":1,\"332\":4,\"337\":2,\"345\":2,\"349\":2,\"357\":4,\"362\":2,\"389\":5,\"410\":1,\"413\":1,\"438\":1,\"444\":4,\"445\":2,\"446\":3,\"518\":8,\"537\":1,\"554\":1,\"564\":2,\"612\":1,\"650\":4,\"652\":1,\"712\":1,\"733\":1,\"734\":7,\"768\":1,\"802\":1,\"814\":1,\"820\":5,\"821\":2,\"822\":6,\"823\":7,\"824\":2,\"882\":2,\"929\":2}}],[\"i\",{\"0\":{\"795\":1,\"796\":1},\"1\":{\"3\":4,\"7\":3,\"58\":2,\"74\":1,\"213\":4,\"214\":2,\"230\":1,\"241\":1,\"288\":1,\"293\":1,\"316\":2,\"317\":2,\"439\":2,\"440\":4,\"454\":1,\"475\":3,\"527\":4,\"539\":3,\"541\":3,\"552\":3,\"616\":1,\"650\":5,\"652\":3,\"664\":1,\"768\":2,\"776\":2,\"781\":1,\"795\":1,\"802\":2,\"805\":1,\"808\":2,\"809\":1,\"814\":2,\"835\":2,\"930\":2}}],[\"ip有两个具有代表性的传输层协议\",{\"1\":{\"638\":1}}],[\"ip四层网络模型\",{\"0\":{\"632\":1}}],[\"ip段三\",{\"1\":{\"526\":2}}],[\"ip段二\",{\"1\":{\"526\":2}}],[\"ip段一\",{\"1\":{\"526\":2}}],[\"ipaddress\",{\"1\":{\"331\":2,\"336\":2,\"344\":2,\"348\":2,\"356\":2,\"361\":2}}],[\"iptables\",{\"1\":{\"288\":1}}],[\"iptables规则等\",{\"1\":{\"250\":1}}],[\"ip6tables\",{\"1\":{\"288\":1}}],[\"ip地址其实跟身份证号比较像\",{\"1\":{\"526\":1}}],[\"ip地址是由两部分组成\",{\"1\":{\"526\":1}}],[\"ip地址常采用点分十进制表示方法x\",{\"1\":{\"525\":1}}],[\"ip地址与子网掩码换算公式\",{\"0\":{\"524\":1}}],[\"ip地址\",{\"1\":{\"257\":1,\"526\":1}}],[\"ip地址虽然能够代表一台设备\",{\"1\":{\"222\":1}}],[\"ipv4\",{\"1\":{\"642\":1}}],[\"ipv4字段基本上可以不适用char\",{\"1\":{\"82\":1}}],[\"ipv4尽量使用\",{\"1\":{\"82\":1}}],[\"ip=geodata\",{\"1\":{\"27\":2}}],[\"ip协议的\",{\"1\":{\"19\":1}}],[\"ip协议中的差不多\",{\"1\":{\"14\":1}}],[\"ips\",{\"1\":{\"3\":4}}],[\"ip\",{\"0\":{\"253\":1,\"254\":1,\"301\":1},\"1\":{\"3\":2,\"27\":17,\"53\":1,\"63\":1,\"155\":2,\"250\":4,\"288\":1,\"301\":2,\"317\":2,\"331\":2,\"332\":2,\"334\":1,\"336\":2,\"341\":1,\"342\":1,\"344\":2,\"347\":1,\"348\":2,\"351\":2,\"356\":2,\"359\":1,\"361\":2,\"366\":1,\"367\":1,\"526\":7,\"564\":2,\"638\":3,\"639\":1,\"789\":10}}],[\"ini|grep\",{\"1\":{\"870\":1}}],[\"ini存放的路径\",{\"1\":{\"837\":1}}],[\"ini\",{\"0\":{\"870\":2},\"1\":{\"837\":1,\"838\":2,\"843\":1,\"845\":1,\"853\":1,\"854\":1,\"869\":2,\"870\":4,\"874\":2,\"892\":2,\"893\":12}}],[\"initdb\",{\"1\":{\"837\":1}}],[\"initchannel\",{\"1\":{\"612\":1}}],[\"initconfig\",{\"1\":{\"564\":3}}],[\"inittime\",{\"1\":{\"388\":1}}],[\"init输出的kubeadm\",{\"1\":{\"294\":1}}],[\"initial\",{\"1\":{\"444\":1}}],[\"initialize\",{\"1\":{\"321\":1}}],[\"initialized\",{\"1\":{\"217\":1}}],[\"initialvalue\",{\"1\":{\"217\":2,\"444\":3}}],[\"initialdelay+period\",{\"1\":{\"774\":1}}],[\"initialdelayseconds\",{\"1\":{\"263\":1}}],[\"initialdelay\",{\"1\":{\"214\":2,\"774\":2}}],[\"initetcdclient\",{\"1\":{\"214\":2}}],[\"init\",{\"1\":{\"59\":1,\"74\":1,\"229\":1,\"293\":1,\"321\":3,\"332\":2,\"337\":1,\"345\":1,\"349\":1,\"357\":2,\"362\":1,\"380\":2,\"439\":1,\"497\":3,\"502\":1,\"845\":3}}],[\"indate\",{\"1\":{\"626\":2}}],[\"inde\",{\"1\":{\"477\":1}}],[\"indexoutofboundsexception\",{\"1\":{\"413\":1}}],[\"index=master\",{\"1\":{\"323\":1}}],[\"indexes\",{\"1\":{\"74\":2}}],[\"indexed\",{\"1\":{\"28\":1}}],[\"indexrequest\",{\"1\":{\"3\":4}}],[\"index\",{\"1\":{\"3\":3,\"28\":11,\"58\":4,\"101\":2,\"104\":1,\"111\":1,\"113\":3,\"127\":2,\"243\":1,\"272\":1,\"280\":1,\"298\":3,\"323\":1,\"433\":3,\"479\":1,\"480\":1,\"490\":2,\"500\":1,\"887\":1}}],[\"invoke\",{\"1\":{\"444\":1,\"523\":1}}],[\"invocation\",{\"1\":{\"217\":1}}],[\"invalid\",{\"1\":{\"317\":2,\"664\":1}}],[\"inheritablethreadlocal\",{\"1\":{\"217\":1}}],[\"incrbyfloat\",{\"1\":{\"134\":1}}],[\"incrby\",{\"1\":{\"134\":2}}],[\"incr\",{\"1\":{\"134\":2,\"894\":5}}],[\"incrementandget\",{\"1\":{\"214\":1,\"440\":1,\"441\":1,\"444\":1}}],[\"increment\",{\"1\":{\"92\":1,\"133\":1,\"137\":3,\"893\":1,\"894\":4}}],[\"includes>\",{\"1\":{\"389\":1}}],[\"includescope>\",{\"1\":{\"389\":1}}],[\"include>\",{\"1\":{\"389\":1}}],[\"include\",{\"1\":{\"59\":1,\"317\":4,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1,\"845\":2}}],[\"inetface\",{\"1\":{\"472\":1}}],[\"inet\",{\"1\":{\"82\":2}}],[\"inf\",{\"1\":{\"707\":1,\"708\":1,\"715\":1}}],[\"infinity\",{\"1\":{\"549\":3}}],[\"infile会用到\",{\"1\":{\"74\":1}}],[\"info的异常处理程序的便捷实现\",{\"1\":{\"472\":1}}],[\"info请求获取\",{\"1\":{\"414\":1}}],[\"information\",{\"1\":{\"74\":1}}],[\"infos\",{\"1\":{\"63\":3}}],[\"info和course\",{\"1\":{\"13\":1}}],[\"info\",{\"1\":{\"3\":1,\"13\":14,\"20\":1,\"63\":4,\"155\":1,\"214\":4,\"297\":3,\"399\":1,\"414\":2,\"418\":2,\"779\":1,\"845\":2}}],[\"innodb为例\",{\"1\":{\"728\":1}}],[\"innodb默认事务隔离级别\",{\"0\":{\"107\":1}}],[\"innodb和bdb提供事务安全表\",{\"1\":{\"90\":1}}],[\"innodb中的主键是聚簇索引\",{\"1\":{\"85\":1}}],[\"innodb也会自动生成一个隐藏列\",{\"1\":{\"84\":1}}],[\"innodb用lock\",{\"1\":{\"74\":1}}],[\"innodb在它自己的锁定表中自动检测事务死锁并且回滚事务\",{\"1\":{\"74\":1}}],[\"innodb事务在被回滚之前可以等待一个锁定的超时秒数\",{\"1\":{\"74\":1}}],[\"innodb使用一个缓冲池来保存索引和原始数据\",{\"1\":{\"74\":1}}],[\"innodb设置\",{\"1\":{\"74\":1}}],[\"innodb\",{\"0\":{\"97\":1},\"1\":{\"74\":10,\"90\":1,\"91\":2,\"93\":1,\"116\":1,\"321\":1}}],[\"inner\",{\"1\":{\"23\":4,\"53\":1,\"410\":1,\"626\":1}}],[\"instruction\",{\"1\":{\"809\":1}}],[\"instrumentation\",{\"1\":{\"709\":2,\"717\":2,\"721\":1}}],[\"instrument\",{\"1\":{\"709\":1,\"717\":1}}],[\"inst\",{\"1\":{\"709\":1,\"717\":2,\"721\":1}}],[\"instantiationexception\",{\"1\":{\"733\":1}}],[\"instance\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"410\":5,\"411\":4,\"651\":1,\"715\":1,\"837\":2,\"838\":2,\"841\":4}}],[\"instanceof\",{\"1\":{\"63\":1,\"650\":1}}],[\"installer\",{\"1\":{\"834\":1,\"838\":1}}],[\"installon\",{\"1\":{\"717\":1}}],[\"install将此jar包放到maven指定的仓库\",{\"1\":{\"584\":1}}],[\"installing\",{\"1\":{\"265\":1}}],[\"install\",{\"1\":{\"57\":1,\"224\":2,\"228\":1,\"230\":1,\"243\":3,\"266\":1,\"268\":1,\"288\":1,\"290\":1,\"292\":1,\"319\":2,\"321\":2,\"343\":1,\"352\":1,\"353\":1,\"379\":1,\"566\":3,\"579\":1,\"833\":1,\"834\":4}}],[\"insecure\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"insertfill\",{\"1\":{\"64\":1}}],[\"insertbatch\",{\"1\":{\"61\":2}}],[\"insert\",{\"1\":{\"22\":2,\"27\":11,\"58\":2,\"61\":5,\"64\":6,\"427\":1,\"843\":2,\"893\":2}}],[\"insufficientcapacityexception\",{\"1\":{\"472\":1}}],[\"inspect\",{\"1\":{\"258\":1,\"259\":1}}],[\"inputstream\",{\"1\":{\"63\":8}}],[\"inputsplit\",{\"1\":{\"39\":1}}],[\"inputavg\",{\"1\":{\"32\":1}}],[\"input\",{\"1\":{\"23\":1,\"32\":1,\"59\":9,\"280\":1,\"626\":3,\"652\":1}}],[\"inpath\",{\"1\":{\"22\":1,\"27\":2}}],[\"in\",{\"1\":{\"23\":2,\"27\":7,\"28\":1,\"58\":5,\"61\":2,\"62\":3,\"107\":1,\"126\":1,\"155\":1,\"217\":3,\"328\":1,\"342\":1,\"389\":1,\"612\":1,\"613\":7,\"626\":3,\"802\":1,\"805\":1,\"837\":1,\"854\":1,\"890\":1}}],[\"int和float是4个字节\",{\"1\":{\"722\":1}}],[\"int和byte\",{\"1\":{\"722\":1}}],[\"int类型最常用\",{\"1\":{\"549\":1}}],[\"intsumreducer\",{\"1\":{\"652\":3}}],[\"intsummarystatistics\",{\"1\":{\"527\":2}}],[\"ints\",{\"1\":{\"527\":2}}],[\"intset\",{\"0\":{\"158\":1},\"1\":{\"158\":6}}],[\"introduction\",{\"1\":{\"458\":1}}],[\"introduce\",{\"1\":{\"58\":1}}],[\"intvalue\",{\"1\":{\"445\":1}}],[\"intunaryoperator\",{\"1\":{\"444\":3}}],[\"intbinaryoperator\",{\"1\":{\"444\":1}}],[\"int64\",{\"1\":{\"58\":1,\"60\":1,\"125\":2}}],[\"intwritable>\",{\"1\":{\"32\":4,\"652\":2}}],[\"intwritable\",{\"1\":{\"32\":7,\"652\":12}}],[\"into\",{\"1\":{\"22\":1,\"27\":1,\"243\":1,\"843\":2,\"893\":2}}],[\"int>\",{\"1\":{\"21\":1,\"28\":1}}],[\"integration\",{\"1\":{\"566\":1}}],[\"integers\",{\"1\":{\"118\":4}}],[\"integer\",{\"1\":{\"3\":2,\"32\":2,\"118\":1,\"134\":4,\"135\":2,\"219\":2,\"413\":1,\"419\":1,\"427\":1,\"527\":7,\"612\":1,\"613\":1,\"652\":1,\"773\":2}}],[\"interoperability\",{\"1\":{\"898\":1}}],[\"internet\",{\"1\":{\"515\":1}}],[\"internal\",{\"1\":{\"444\":1,\"518\":1}}],[\"internalclass\",{\"1\":{\"3\":2}}],[\"interest\",{\"1\":{\"445\":2}}],[\"interestrate\",{\"1\":{\"445\":3}}],[\"intercept\",{\"1\":{\"317\":1,\"716\":1,\"717\":1}}],[\"interceptor\",{\"1\":{\"64\":8}}],[\"interface\",{\"1\":{\"215\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"398\":1,\"404\":1,\"408\":1,\"409\":1,\"410\":1,\"414\":1,\"416\":1,\"437\":1,\"472\":16,\"527\":2,\"733\":1}}],[\"interprocessmutex\",{\"1\":{\"214\":1}}],[\"interprocesslock\",{\"1\":{\"214\":2}}],[\"interrupted\",{\"1\":{\"767\":1}}],[\"interruptedexception\",{\"1\":{\"32\":3,\"214\":6,\"218\":1,\"440\":2,\"446\":1,\"475\":1,\"531\":1,\"533\":1,\"552\":2,\"554\":1,\"564\":1,\"650\":2,\"652\":4,\"765\":1,\"776\":1,\"814\":1,\"930\":1}}],[\"interruptontimeout\",{\"1\":{\"402\":1}}],[\"interruption\",{\"1\":{\"139\":1}}],[\"interactive\",{\"1\":{\"74\":2}}],[\"interval\",{\"1\":{\"73\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"435\":1,\"564\":1}}],[\"int\",{\"1\":{\"3\":1,\"21\":2,\"25\":3,\"26\":9,\"27\":5,\"32\":3,\"63\":1,\"82\":5,\"92\":1,\"104\":1,\"115\":1,\"119\":1,\"126\":3,\"213\":4,\"214\":6,\"263\":2,\"297\":1,\"317\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"413\":1,\"439\":1,\"440\":3,\"441\":2,\"443\":3,\"444\":23,\"445\":2,\"446\":9,\"517\":5,\"518\":2,\"527\":2,\"533\":4,\"539\":1,\"541\":1,\"549\":3,\"552\":3,\"554\":1,\"563\":4,\"612\":3,\"613\":1,\"616\":2,\"650\":2,\"652\":2,\"723\":1,\"734\":3,\"735\":1,\"768\":2,\"771\":1,\"776\":2,\"779\":4,\"814\":2,\"820\":9,\"821\":2,\"822\":4,\"823\":4,\"906\":1,\"924\":2,\"930\":2}}],[\"io密集型可以配置较多的线程\",{\"1\":{\"769\":1}}],[\"io密集型或者混合型\",{\"1\":{\"769\":1}}],[\"io异常\",{\"1\":{\"652\":2}}],[\"io中用一行代码实现文件读写操作\",{\"0\":{\"548\":1}}],[\"io包中\",{\"1\":{\"538\":1}}],[\"io包\",{\"0\":{\"536\":1}}],[\"ioc中的基本反射步骤\",{\"0\":{\"523\":1}}],[\"ioc容器也只有\",{\"1\":{\"381\":1}}],[\"ioc\",{\"1\":{\"381\":2}}],[\"io国内无法访问\",{\"1\":{\"293\":1}}],[\"io子系统\",{\"1\":{\"250\":1}}],[\"ioexception\",{\"1\":{\"3\":5,\"32\":4,\"297\":2,\"518\":3,\"539\":1,\"548\":2,\"652\":5,\"712\":1}}],[\"io\",{\"0\":{\"859\":1},\"1\":{\"3\":1,\"23\":1,\"32\":4,\"50\":1,\"56\":1,\"63\":8,\"74\":2,\"228\":1,\"297\":2,\"352\":2,\"414\":1,\"420\":1,\"427\":3,\"440\":1,\"444\":1,\"472\":1,\"475\":1,\"517\":1,\"518\":2,\"537\":3,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"546\":1,\"547\":1,\"548\":2,\"611\":1,\"612\":8,\"613\":5,\"652\":3,\"683\":1,\"863\":3,\"872\":2}}],[\"imax\",{\"1\":{\"472\":6}}],[\"imagepullsecrets\",{\"1\":{\"263\":1}}],[\"imagepullpolicy\",{\"1\":{\"263\":1}}],[\"image=nginx\",{\"1\":{\"296\":1}}],[\"image=registry\",{\"1\":{\"263\":1}}],[\"image=\",{\"1\":{\"263\":1}}],[\"imageid\",{\"1\":{\"263\":1}}],[\"images这些制作好的系统盘\",{\"1\":{\"234\":1}}],[\"images的基础上运行你需要的代码\",{\"1\":{\"234\":1}}],[\"images的仓库\",{\"1\":{\"234\":1}}],[\"images启动\",{\"1\":{\"234\":1}}],[\"images\",{\"1\":{\"229\":1,\"230\":1,\"234\":1,\"240\":1,\"246\":1,\"263\":1}}],[\"imagenet\",{\"1\":{\"59\":1}}],[\"image\",{\"1\":{\"2\":1,\"4\":2,\"8\":1,\"14\":1,\"22\":10,\"25\":4,\"31\":4,\"32\":1,\"34\":1,\"37\":1,\"59\":5,\"61\":1,\"63\":1,\"72\":1,\"73\":6,\"74\":2,\"113\":2,\"120\":1,\"155\":1,\"157\":1,\"161\":1,\"174\":1,\"191\":1,\"194\":1,\"222\":2,\"230\":4,\"232\":1,\"233\":1,\"235\":1,\"238\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":5,\"245\":1,\"246\":2,\"247\":1,\"248\":1,\"249\":1,\"263\":6,\"275\":1,\"293\":2,\"294\":1,\"297\":1,\"394\":1,\"403\":1,\"405\":1,\"406\":2,\"407\":1,\"408\":2,\"409\":1,\"411\":1,\"412\":1,\"415\":1,\"417\":4,\"477\":1,\"479\":1,\"480\":2,\"530\":1,\"549\":3,\"557\":4,\"559\":2,\"625\":1,\"627\":2,\"629\":1,\"631\":2,\"642\":1,\"645\":1,\"650\":1,\"653\":1,\"662\":3,\"665\":2,\"667\":1,\"669\":2,\"708\":1,\"719\":2,\"722\":7,\"748\":3,\"783\":2,\"786\":2,\"787\":1,\"788\":1}}],[\"immutable\",{\"1\":{\"445\":1}}],[\"immediate\",{\"1\":{\"435\":1}}],[\"implementation\",{\"1\":{\"716\":3,\"717\":1}}],[\"implementation=\",{\"1\":{\"707\":1,\"715\":1}}],[\"implements\",{\"1\":{\"64\":1,\"214\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"399\":1,\"404\":1,\"437\":1,\"440\":1,\"444\":1,\"475\":2,\"517\":1,\"527\":1,\"533\":1,\"650\":1,\"703\":2,\"734\":1}}],[\"impl\",{\"1\":{\"437\":1,\"518\":2}}],[\"import\",{\"1\":{\"3\":15,\"32\":13,\"58\":2,\"59\":6,\"60\":4,\"61\":6,\"62\":6,\"63\":27,\"213\":7,\"218\":7,\"297\":20,\"427\":1,\"437\":8,\"438\":8,\"439\":5,\"440\":5,\"444\":4,\"446\":2,\"517\":1,\"518\":14,\"523\":6,\"527\":15,\"537\":3,\"539\":2,\"541\":1,\"542\":1,\"544\":2,\"545\":2,\"612\":8,\"613\":5,\"626\":3,\"650\":3,\"652\":12,\"709\":1,\"716\":5,\"717\":11,\"721\":2,\"733\":8,\"779\":7}}],[\"im\",{\"1\":{\"61\":2}}],[\"img\",{\"1\":{\"59\":12,\"62\":1,\"104\":1,\"119\":2,\"129\":1,\"265\":2,\"283\":1,\"284\":2,\"285\":4,\"321\":1,\"371\":1,\"373\":1,\"374\":1,\"378\":1,\"381\":2,\"431\":1,\"449\":1,\"451\":1,\"452\":2,\"454\":1,\"455\":1,\"456\":1,\"457\":1,\"458\":2,\"472\":1,\"522\":1,\"616\":2,\"617\":1,\"618\":8,\"619\":4,\"621\":3,\"622\":3,\"623\":2,\"624\":1,\"638\":1,\"650\":1,\"672\":1,\"809\":4,\"820\":1}}],[\"sf\",{\"1\":{\"872\":4,\"894\":4}}],[\"s50\",{\"1\":{\"744\":1}}],[\"s>\",{\"1\":{\"738\":1,\"743\":1}}],[\"s4\",{\"1\":{\"661\":1}}],[\"s1\",{\"1\":{\"619\":6,\"661\":1,\"744\":1}}],[\"svc\",{\"1\":{\"296\":1,\"834\":1,\"835\":1,\"842\":2}}],[\"switch语句常常根据类型码进行选择\",{\"1\":{\"916\":1}}],[\"switch语句的问题在于重复\",{\"1\":{\"916\":1}}],[\"switch惊悚现身\",{\"0\":{\"916\":1}}],[\"switch这段逻辑泥团抽离为函数\",{\"1\":{\"900\":1}}],[\"switch\",{\"1\":{\"871\":1}}],[\"swap\",{\"1\":{\"288\":1,\"673\":1}}],[\"swapoff\",{\"1\":{\"288\":1}}],[\"swarm\",{\"1\":{\"261\":1}}],[\"swwlj\",{\"1\":{\"278\":1}}],[\"sbin\",{\"1\":{\"243\":1,\"247\":1,\"331\":1,\"332\":1,\"333\":1,\"336\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"343\":3,\"344\":1,\"345\":3,\"346\":1,\"348\":1,\"349\":3,\"350\":1,\"380\":1}}],[\"snapshot<\",{\"1\":{\"715\":1}}],[\"snapshot\",{\"1\":{\"712\":1,\"719\":1}}],[\"snowflake\",{\"0\":{\"205\":1}}],[\"sniffonfailurelistener\",{\"1\":{\"3\":5}}],[\"sniff\",{\"1\":{\"3\":1}}],[\"sniffer<\",{\"1\":{\"3\":1}}],[\"sdstrim\",{\"1\":{\"622\":3}}],[\"sdscat\",{\"1\":{\"619\":7,\"621\":5,\"622\":2}}],[\"sdshdr\",{\"1\":{\"616\":2}}],[\"sds\",{\"0\":{\"617\":1},\"1\":{\"616\":21,\"617\":2,\"618\":14,\"619\":17,\"620\":4,\"621\":22,\"622\":15,\"623\":7,\"624\":13,\"625\":2}}],[\"sds的定义\",{\"0\":{\"616\":1}}],[\"sdfdsfsdfdsf\",{\"1\":{\"480\":1}}],[\"sdfdsf\",{\"1\":{\"480\":1}}],[\"sdch\",{\"1\":{\"477\":1}}],[\"sdb1为例\",{\"1\":{\"371\":1}}],[\"sdb为例\",{\"1\":{\"370\":1}}],[\"sdiffstore\",{\"1\":{\"136\":1}}],[\"sdiff\",{\"1\":{\"136\":1}}],[\"sdk\",{\"1\":{\"63\":1}}],[\"sdkconstant\",{\"1\":{\"63\":8}}],[\"sr3<\",{\"1\":{\"414\":1}}],[\"srandmember\",{\"1\":{\"135\":1}}],[\"srem\",{\"1\":{\"135\":1}}],[\"src\",{\"1\":{\"24\":1,\"243\":4,\"331\":2,\"336\":2,\"344\":2,\"348\":2,\"356\":2,\"361\":2,\"502\":1,\"537\":1,\"539\":2,\"541\":2,\"542\":1,\"544\":1,\"545\":1,\"619\":3}}],[\"s64\",{\"1\":{\"125\":1}}],[\"skip=true\",{\"1\":{\"566\":1}}],[\"skip>true<\",{\"1\":{\"707\":1,\"715\":1}}],[\"skip>\",{\"1\":{\"389\":1,\"707\":1,\"715\":1}}],[\"skiplist\",{\"1\":{\"157\":1}}],[\"skip\",{\"1\":{\"74\":1,\"321\":1}}],[\"sleepingwaitstrategy的实现方法是先自旋\",{\"1\":{\"469\":1}}],[\"sleepingwaitstrategy\",{\"0\":{\"469\":1},\"1\":{\"472\":1}}],[\"sleepingwaitstrategy是另一种较为平衡cpu消耗与延迟的waitstrategy在不同次数的重试后采用不同的策略选择继续尝试或者让出cpu或者sleep\",{\"1\":{\"458\":1}}],[\"sleepwindowinmilliseconds\",{\"1\":{\"402\":2}}],[\"sleep\",{\"1\":{\"218\":3,\"332\":2,\"337\":1,\"345\":1,\"349\":1,\"357\":2,\"362\":1,\"389\":2,\"440\":2,\"446\":1,\"475\":4,\"552\":1,\"554\":1,\"564\":1,\"650\":2,\"765\":1,\"776\":1}}],[\"slot\",{\"1\":{\"161\":1}}],[\"slow\",{\"1\":{\"74\":5}}],[\"slavery\",{\"1\":{\"155\":1}}],[\"slaves\",{\"1\":{\"155\":4}}],[\"slaveof\",{\"1\":{\"155\":5,\"364\":1}}],[\"slave启动\",{\"0\":{\"80\":1}}],[\"slave\",{\"1\":{\"79\":2,\"80\":1,\"155\":2,\"329\":3,\"339\":2,\"341\":1,\"342\":3}}],[\"slf4j\",{\"1\":{\"63\":2,\"213\":2,\"218\":2}}],[\"s3objectsummary\",{\"1\":{\"63\":7}}],[\"s3<\",{\"1\":{\"63\":1}}],[\"s3fileinfo中只有两个字段\",{\"1\":{\"63\":1}}],[\"s3fileinfo\",{\"1\":{\"63\":2}}],[\"s3accesssecret\",{\"1\":{\"63\":2}}],[\"s3accesskey\",{\"1\":{\"63\":2}}],[\"s3client\",{\"1\":{\"63\":13}}],[\"s3utils\",{\"1\":{\"63\":4}}],[\"s3\",{\"1\":{\"63\":12,\"661\":1}}],[\"schnorr数字签名算法\",{\"0\":{\"742\":1}}],[\"scheduling\",{\"1\":{\"779\":1}}],[\"schedulewithfixeddelay\",{\"1\":{\"774\":1}}],[\"schedule\",{\"1\":{\"721\":2,\"774\":5,\"799\":1}}],[\"scheduler\",{\"1\":{\"654\":1}}],[\"scheduled\",{\"1\":{\"721\":1,\"774\":1}}],[\"scheduledthreadpoolexecutor\",{\"1\":{\"721\":1,\"774\":1,\"779\":1}}],[\"scheduledtasks\",{\"1\":{\"418\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"214\":1,\"721\":1,\"774\":1,\"779\":1}}],[\"scheduleatfixedrate\",{\"1\":{\"214\":1,\"721\":1,\"774\":1}}],[\"scheme\",{\"1\":{\"263\":1}}],[\"schemalocation=\",{\"1\":{\"715\":1}}],[\"schema=schema\",{\"1\":{\"60\":1}}],[\"schema\",{\"1\":{\"58\":2,\"60\":1,\"62\":1,\"74\":1}}],[\"sc\",{\"1\":{\"518\":1}}],[\"scripts\",{\"1\":{\"836\":3}}],[\"script\",{\"1\":{\"331\":3,\"336\":3,\"344\":3,\"348\":3,\"356\":4,\"357\":2,\"358\":1,\"361\":5,\"362\":2,\"363\":1,\"364\":1,\"365\":1,\"834\":1,\"838\":1}}],[\"scretname\",{\"1\":{\"263\":1}}],[\"scope>\",{\"1\":{\"297\":2,\"414\":2,\"434\":1,\"611\":1,\"712\":1,\"715\":1}}],[\"score\",{\"1\":{\"133\":1,\"137\":2}}],[\"scard\",{\"1\":{\"135\":1}}],[\"scan\",{\"1\":{\"13\":3}}],[\"squareslist\",{\"1\":{\"527\":2}}],[\"squareup\",{\"1\":{\"63\":2}}],[\"sq8是基于量化的索引\",{\"1\":{\"52\":1}}],[\"sq8\",{\"1\":{\"52\":1}}],[\"sql>\",{\"1\":{\"838\":3,\"841\":6,\"843\":14,\"869\":6,\"883\":4,\"884\":1,\"885\":1,\"887\":3,\"893\":9}}],[\"sql进行指标统计进行去重\",{\"1\":{\"789\":1}}],[\"sqlcontext\",{\"1\":{\"627\":2}}],[\"sql和oracle就是保证了可用性和数据一致性\",{\"1\":{\"196\":1}}],[\"sql查询中的序列号\",{\"1\":{\"113\":1}}],[\"sql语句中尽量避免出现\",{\"1\":{\"82\":1}}],[\"sql数据包发送的大小\",{\"1\":{\"74\":1}}],[\"sql\",{\"0\":{\"869\":1,\"876\":1},\"1\":{\"23\":2,\"326\":1,\"327\":2,\"342\":2,\"627\":2,\"854\":4,\"857\":1,\"863\":10,\"869\":1,\"874\":1,\"894\":1}}],[\"speed\",{\"1\":{\"892\":1,\"893\":4}}],[\"special\",{\"1\":{\"458\":1}}],[\"specify\",{\"1\":{\"293\":1}}],[\"specified\",{\"1\":{\"217\":1,\"341\":1}}],[\"spec\",{\"1\":{\"263\":3,\"275\":2}}],[\"sp\",{\"1\":{\"865\":1,\"888\":1}}],[\"spfile\",{\"1\":{\"865\":1}}],[\"space进行清理\",{\"1\":{\"651\":1}}],[\"space中\",{\"1\":{\"651\":1}}],[\"space的全称是permanent\",{\"1\":{\"651\":1}}],[\"space\",{\"1\":{\"651\":4,\"865\":1,\"869\":2,\"870\":1}}],[\"space引起的\",{\"1\":{\"651\":1}}],[\"sparkscheduler\",{\"1\":{\"627\":3}}],[\"spark使用有向无环图进行任务调度\",{\"1\":{\"627\":1}}],[\"spark\",{\"1\":{\"627\":6,\"783\":1,\"788\":1}}],[\"spark相关概述\",{\"0\":{\"627\":1}}],[\"spanner\",{\"1\":{\"196\":1}}],[\"spans\",{\"1\":{\"108\":1}}],[\"sp1使用msie6参数来禁止gzip压缩\",{\"1\":{\"317\":1}}],[\"spotify<\",{\"1\":{\"230\":1}}],[\"spop\",{\"1\":{\"135\":1}}],[\"spinlock\",{\"0\":{\"811\":1}}],[\"spins\",{\"1\":{\"454\":1}}],[\"spin\",{\"1\":{\"218\":2,\"471\":1,\"472\":1}}],[\"spill\",{\"0\":{\"42\":1}}],[\"spring提供了对\",{\"1\":{\"419\":1}}],[\"springmvc全局异常处理器\",{\"0\":{\"419\":1}}],[\"spring表达式\",{\"1\":{\"388\":1}}],[\"spring会继续去完成bean的实例化和依赖注入\",{\"1\":{\"381\":1}}],[\"springapplication\",{\"1\":{\"297\":3,\"393\":1,\"397\":1,\"408\":1,\"409\":1,\"415\":1,\"416\":1}}],[\"spring\",{\"0\":{\"381\":1,\"383\":2,\"386\":1,\"936\":1},\"1\":{\"297\":5,\"381\":3,\"384\":5,\"388\":1,\"389\":1,\"392\":1,\"393\":1,\"394\":2,\"396\":1,\"397\":1,\"401\":7,\"404\":1,\"408\":2,\"409\":2,\"410\":2,\"411\":1,\"414\":9,\"415\":3,\"416\":5,\"417\":7,\"418\":1,\"425\":1,\"427\":1,\"435\":1,\"523\":7,\"733\":7}}],[\"springboot线程池threadpooltaskexecutor以及\",{\"1\":{\"777\":1}}],[\"springboot工程中对controller配置全局异常处理\",{\"1\":{\"419\":1}}],[\"springboot启动类\",{\"0\":{\"393\":1}}],[\"springboot打jar包分离资源文件\",{\"0\":{\"389\":1}}],[\"springbootapplication\",{\"1\":{\"297\":2,\"393\":1,\"397\":1,\"408\":1,\"409\":1,\"415\":1,\"416\":1}}],[\"springboot\",{\"0\":{\"385\":1},\"1\":{\"230\":2,\"435\":1}}],[\"springcloud运维接口\",{\"0\":{\"418\":1}}],[\"springcloud管理配置页面\",{\"0\":{\"417\":1}}],[\"springcloud服务消费\",{\"0\":{\"416\":1}}],[\"springcloud服务注册\",{\"0\":{\"415\":1}}],[\"springcloud服务构建\",{\"0\":{\"414\":1}}],[\"springcloud异常配置\",{\"0\":{\"413\":1}}],[\"springcloud健康检查\",{\"0\":{\"412\":1}}],[\"springcloud使用resttemplate\",{\"0\":{\"411\":1}}],[\"springcloud使用nacos多人开发负载调用问题实践\",{\"0\":{\"410\":1}}],[\"springcloud使用feign\",{\"0\":{\"409\":1}}],[\"springcloud使用feign+ribbon\",{\"0\":{\"408\":1}}],[\"springcloud使用feign+ribbon+hystrix\",{\"0\":{\"404\":1}}],[\"springcloud\",{\"0\":{\"390\":1,\"401\":1,\"402\":1,\"403\":1,\"420\":1},\"1\":{\"230\":1,\"423\":1,\"427\":1}}],[\"spring定义了七种传播行为\",{\"1\":{\"72\":1}}],[\"spring并不直接管理事务\",{\"1\":{\"72\":1}}],[\"springframework\",{\"1\":{\"63\":1,\"213\":4,\"218\":3,\"297\":4,\"389\":1,\"391\":1,\"395\":4,\"401\":2,\"404\":3,\"408\":1,\"409\":1,\"412\":1,\"414\":2,\"415\":2,\"416\":4,\"434\":2,\"437\":6,\"438\":5,\"439\":2,\"596\":1,\"779\":3}}],[\"spm=1000\",{\"1\":{\"63\":1}}],[\"split\",{\"1\":{\"3\":2,\"32\":1,\"63\":1,\"652\":1,\"749\":1}}],[\"suspend\",{\"1\":{\"843\":5}}],[\"sun<\",{\"1\":{\"712\":1}}],[\"sun\",{\"1\":{\"626\":2,\"669\":1}}],[\"sunionstore\",{\"1\":{\"136\":1}}],[\"sunion\",{\"1\":{\"136\":1}}],[\"survivor\",{\"1\":{\"722\":1}}],[\"survivor+to\",{\"1\":{\"722\":1}}],[\"survivorratio=30\",{\"1\":{\"389\":1}}],[\"surefire\",{\"1\":{\"389\":1}}],[\"su\",{\"1\":{\"268\":1,\"833\":1,\"834\":2}}],[\"success\",{\"1\":{\"389\":1,\"837\":1,\"845\":5}}],[\"successthreshold\",{\"1\":{\"263\":1}}],[\"successfully\",{\"1\":{\"214\":1,\"892\":1,\"893\":5}}],[\"succeed\",{\"1\":{\"194\":1}}],[\"sudo\",{\"1\":{\"56\":4,\"268\":1,\"293\":2,\"319\":3,\"320\":2,\"321\":1,\"322\":1,\"367\":1}}],[\"subparse\",{\"1\":{\"626\":1}}],[\"subpath\",{\"1\":{\"275\":1}}],[\"subscribe\",{\"1\":{\"564\":1}}],[\"substring\",{\"1\":{\"63\":2,\"523\":2}}],[\"substructure\",{\"1\":{\"54\":1}}],[\"subnet\",{\"1\":{\"526\":4}}],[\"submodule\",{\"0\":{\"502\":1},\"1\":{\"502\":4}}],[\"submit\",{\"1\":{\"213\":2,\"214\":2,\"440\":2,\"475\":3,\"762\":1,\"776\":1,\"779\":1,\"814\":1,\"930\":1}}],[\"subtract\",{\"1\":{\"445\":1}}],[\"subdir\",{\"1\":{\"307\":5}}],[\"sub\",{\"1\":{\"243\":1}}],[\"subclasses\",{\"1\":{\"217\":1}}],[\"subquery\",{\"1\":{\"113\":2}}],[\"subordinates\",{\"1\":{\"21\":1,\"22\":1,\"25\":1,\"28\":1}}],[\"supplier<car>\",{\"1\":{\"527\":1}}],[\"supplier<t>\",{\"1\":{\"527\":1}}],[\"supplier是jdk1\",{\"1\":{\"527\":1}}],[\"supplier是一个函数接口\",{\"1\":{\"475\":1}}],[\"supplier方法定义异步任务链可以解决之前使用future\",{\"1\":{\"475\":1}}],[\"supplier\",{\"1\":{\"475\":5,\"527\":2}}],[\"supplier只有在optional为空的时候才会执行\",{\"1\":{\"475\":1}}],[\"supplyasync\",{\"1\":{\"475\":9}}],[\"supply\",{\"1\":{\"26\":5}}],[\"support\",{\"1\":{\"321\":1,\"437\":1,\"438\":2}}],[\"suppresswarnings\",{\"1\":{\"217\":1}}],[\"supercall\",{\"1\":{\"716\":2}}],[\"supervision\",{\"1\":{\"417\":1}}],[\"super\",{\"1\":{\"214\":4,\"613\":2}}],[\"superstructure\",{\"1\":{\"54\":1}}],[\"summary\",{\"1\":{\"613\":1}}],[\"summarystatistics\",{\"1\":{\"527\":1}}],[\"sum|min|max\",{\"1\":{\"138\":2}}],[\"sum\",{\"1\":{\"32\":3,\"82\":1,\"527\":2,\"652\":3}}],[\"ssh会生成一个id\",{\"1\":{\"495\":1}}],[\"ssh\",{\"1\":{\"495\":2,\"497\":2}}],[\"ssl+http\",{\"1\":{\"522\":1}}],[\"ssl\",{\"1\":{\"243\":1,\"317\":8,\"343\":1,\"521\":1,\"522\":2}}],[\"ss\",{\"1\":{\"25\":1,\"626\":3}}],[\"ssn\",{\"1\":{\"20\":1}}],[\"soi\",{\"1\":{\"888\":1}}],[\"sonatype是非营利组织sonatype\",{\"1\":{\"587\":1}}],[\"sonatype\",{\"1\":{\"587\":2}}],[\"soberh\",{\"1\":{\"502\":1}}],[\"so\",{\"1\":{\"458\":1,\"612\":2,\"897\":1}}],[\"software\",{\"1\":{\"343\":1}}],[\"soft\",{\"1\":{\"270\":4}}],[\"solely\",{\"1\":{\"217\":1}}],[\"sock\",{\"1\":{\"74\":1,\"230\":2,\"321\":3,\"322\":1,\"332\":2,\"337\":2}}],[\"socket通讯模型\",{\"0\":{\"637\":1}}],[\"socket是一种抽象层\",{\"1\":{\"636\":1}}],[\"socketchannel\",{\"1\":{\"612\":2}}],[\"socket的开发\",{\"1\":{\"607\":1}}],[\"socketserver\",{\"1\":{\"433\":1}}],[\"socketserver和kafkarequesthandlerpool是其中最重要的两个组件\",{\"1\":{\"433\":1}}],[\"socket=\",{\"1\":{\"321\":3}}],[\"socket\",{\"1\":{\"74\":1,\"230\":1,\"278\":1,\"433\":1,\"518\":5,\"564\":1,\"612\":3,\"636\":2}}],[\"something\",{\"1\":{\"554\":1,\"777\":1}}],[\"some\",{\"1\":{\"25\":1,\"28\":1,\"924\":2}}],[\"sort或arrays\",{\"1\":{\"735\":1}}],[\"sorted\",{\"1\":{\"527\":4,\"735\":1}}],[\"sortedmerge=true\",{\"1\":{\"23\":1}}],[\"sort\",{\"0\":{\"47\":1},\"1\":{\"23\":4,\"74\":1,\"139\":2,\"321\":1,\"734\":1,\"735\":6,\"855\":1}}],[\"source>\",{\"1\":{\"715\":1}}],[\"sources\",{\"1\":{\"566\":2}}],[\"source=dra\",{\"1\":{\"534\":1}}],[\"sourceencoding>\",{\"1\":{\"297\":1,\"707\":1,\"715\":1}}],[\"sourceencoding>utf\",{\"1\":{\"297\":1,\"707\":1,\"715\":1}}],[\"sourcebuilder\",{\"1\":{\"3\":3}}],[\"source\",{\"1\":{\"3\":3,\"22\":1,\"27\":4,\"135\":3,\"139\":1,\"327\":1,\"342\":1,\"343\":2,\"377\":1,\"566\":1,\"576\":1,\"833\":1}}],[\"smtp\",{\"1\":{\"638\":1}}],[\"smove\",{\"1\":{\"135\":1}}],[\"smembers\",{\"1\":{\"135\":1}}],[\"smhasher\",{\"1\":{\"127\":1}}],[\"smalltable\",{\"1\":{\"23\":1}}],[\"smith\",{\"1\":{\"22\":2}}],[\"sig\",{\"1\":{\"743\":1}}],[\"signature\",{\"1\":{\"705\":1}}],[\"signal\",{\"1\":{\"446\":1}}],[\"simplespinlocktest\",{\"1\":{\"814\":1}}],[\"simplespinlock\",{\"1\":{\"814\":7,\"930\":1}}],[\"simplest\",{\"1\":{\"58\":1}}],[\"simpledateformat禁止使用static进行修饰\",{\"1\":{\"650\":1}}],[\"simpledateformat\",{\"1\":{\"626\":22}}],[\"simpledateformat引发的线程安全问题\",{\"0\":{\"626\":1},\"1\":{\"650\":1}}],[\"simplechannelinboundhandler\",{\"1\":{\"613\":2}}],[\"since\",{\"1\":{\"444\":4}}],[\"singlethreadexecutor\",{\"0\":{\"772\":1}}],[\"singletonlist\",{\"1\":{\"564\":1}}],[\"singleproducersequencer\",{\"1\":{\"450\":1,\"472\":1}}],[\"single\",{\"1\":{\"270\":1,\"326\":1,\"342\":1}}],[\"sinterstore\",{\"1\":{\"136\":1}}],[\"sinter\",{\"1\":{\"136\":1}}],[\"sismember\",{\"1\":{\"135\":1}}],[\"side\",{\"1\":{\"23\":1,\"29\":1}}],[\"size来说\",{\"1\":{\"722\":1}}],[\"size为16\",{\"1\":{\"722\":1}}],[\"size比较简单\",{\"1\":{\"722\":1}}],[\"size最大不要超过可用物理内存的80\",{\"1\":{\"651\":1}}],[\"size不足2\",{\"1\":{\"651\":1}}],[\"size的大小是young\",{\"1\":{\"651\":1}}],[\"size的值\",{\"1\":{\"651\":1}}],[\"size设置\",{\"1\":{\"651\":1}}],[\"sizemask\",{\"1\":{\"124\":2,\"127\":3}}],[\"size大小32k\",{\"1\":{\"74\":1}}],[\"size=64\",{\"1\":{\"869\":1}}],[\"size=shallow\",{\"1\":{\"722\":1}}],[\"size=2m\",{\"1\":{\"321\":2}}],[\"size=16\",{\"1\":{\"837\":1}}],[\"size=128m\",{\"1\":{\"321\":1}}],[\"size=1g\",{\"1\":{\"321\":1}}],[\"size=\",{\"1\":{\"59\":1}}],[\"size\",{\"0\":{\"152\":1},\"1\":{\"3\":1,\"74\":10,\"124\":4,\"146\":1,\"152\":1,\"230\":1,\"317\":6,\"435\":1,\"530\":1,\"532\":1,\"651\":2,\"722\":1,\"837\":1,\"855\":2,\"864\":1,\"865\":2,\"866\":1,\"870\":2}}],[\"s\",{\"1\":{\"23\":30,\"24\":9,\"25\":1,\"62\":5,\"73\":1,\"214\":1,\"217\":4,\"234\":1,\"243\":1,\"288\":2,\"321\":2,\"322\":1,\"343\":1,\"345\":1,\"349\":1,\"353\":2,\"380\":4,\"445\":1,\"475\":2,\"564\":2,\"616\":4,\"619\":5,\"620\":7,\"621\":4,\"622\":4,\"664\":1,\"717\":3,\"740\":4,\"743\":1,\"744\":1,\"745\":3,\"831\":1,\"845\":1,\"892\":2,\"893\":8}}],[\"s2\",{\"1\":{\"22\":4,\"619\":4,\"661\":1}}],[\"syn标志位为0\",{\"1\":{\"648\":1}}],[\"syn=1\",{\"1\":{\"648\":2}}],[\"synchornized\",{\"1\":{\"671\":1}}],[\"synchronize\",{\"1\":{\"723\":1}}],[\"synchronize是非公平锁\",{\"1\":{\"723\":1}}],[\"synchronizedqueue\",{\"1\":{\"759\":1}}],[\"synchronized就是一种独占锁\",{\"1\":{\"727\":1}}],[\"synchronized通过在对象头中设置标记实现了这一目的\",{\"1\":{\"723\":1}}],[\"synchronized可重入锁\",{\"1\":{\"723\":1}}],[\"synchronized可以保证可见性\",{\"1\":{\"440\":1}}],[\"synchronized修饰的方法可正常被调用\",{\"1\":{\"723\":1}}],[\"synchronized锁对象\",{\"1\":{\"723\":1}}],[\"synchronized锁非公平锁\",{\"1\":{\"703\":1}}],[\"synchronized是由jvm实现的一种实现互斥同步的一种方式\",{\"1\":{\"723\":1}}],[\"synchronizedtest\",{\"1\":{\"703\":7}}],[\"synchronized和reentrantlock\",{\"0\":{\"703\":1}}],[\"synchronized的优化我感觉就借鉴了reentrantlock中的cas技术\",{\"1\":{\"703\":1}}],[\"synchronized的性能是比reentrantlock差很多的\",{\"1\":{\"703\":1}}],[\"synchronized的使用方式无非有两个\",{\"1\":{\"671\":1}}],[\"synchronized的用法\",{\"0\":{\"661\":1}}],[\"synchronizeddemo\",{\"1\":{\"661\":2}}],[\"synchronized\",{\"1\":{\"63\":1,\"218\":1,\"626\":1,\"661\":4,\"671\":1,\"673\":1,\"703\":3,\"723\":4,\"924\":5,\"926\":1}}],[\"synchronousqueue<runnable>\",{\"1\":{\"773\":2}}],[\"synchronousqueue\",{\"0\":{\"534\":1},\"1\":{\"530\":1}}],[\"sync\",{\"1\":{\"155\":1,\"446\":4,\"612\":2}}],[\"symlink\",{\"1\":{\"834\":1,\"836\":1,\"838\":2}}],[\"symantec\",{\"1\":{\"522\":1}}],[\"symbolic\",{\"1\":{\"500\":1}}],[\"symbol\",{\"1\":{\"22\":4,\"23\":18}}],[\"sy\",{\"1\":{\"297\":5,\"397\":2,\"580\":1}}],[\"sysobjects\",{\"1\":{\"883\":2}}],[\"sysuserprofiles\",{\"1\":{\"883\":1}}],[\"sysusers\",{\"1\":{\"877\":1}}],[\"syssso\",{\"1\":{\"873\":1,\"888\":1}}],[\"sysdbo\",{\"1\":{\"873\":1}}],[\"sysdba\",{\"1\":{\"837\":3,\"838\":1,\"841\":2,\"843\":2,\"873\":1,\"888\":1,\"893\":3}}],[\"sysdate\",{\"1\":{\"872\":1}}],[\"systables\",{\"1\":{\"845\":1}}],[\"systempath>\",{\"1\":{\"712\":1}}],[\"systemdefault\",{\"1\":{\"527\":1}}],[\"systemd\",{\"1\":{\"230\":1,\"353\":1,\"834\":2,\"835\":1,\"836\":3,\"838\":4}}],[\"system32\",{\"1\":{\"222\":1}}],[\"systemctl\",{\"1\":{\"78\":2,\"229\":3,\"230\":1,\"237\":1,\"273\":4,\"281\":2,\"282\":1,\"288\":2,\"290\":2,\"292\":1,\"321\":4,\"323\":1,\"325\":1,\"332\":1,\"337\":1,\"342\":9,\"354\":1,\"355\":4,\"357\":2,\"360\":2,\"362\":1,\"366\":1,\"367\":4,\"380\":1,\"836\":2,\"838\":2,\"839\":2,\"844\":2}}],[\"system\",{\"1\":{\"3\":2,\"32\":3,\"63\":1,\"113\":1,\"195\":2,\"213\":2,\"214\":4,\"222\":1,\"230\":1,\"275\":2,\"276\":2,\"277\":1,\"288\":1,\"295\":1,\"297\":2,\"321\":1,\"353\":1,\"388\":1,\"408\":1,\"409\":1,\"416\":1,\"418\":1,\"437\":3,\"438\":1,\"440\":4,\"445\":11,\"446\":2,\"475\":9,\"523\":2,\"527\":28,\"530\":3,\"531\":1,\"532\":1,\"533\":3,\"537\":8,\"539\":3,\"542\":1,\"545\":1,\"548\":1,\"549\":5,\"552\":3,\"554\":4,\"558\":1,\"563\":2,\"564\":2,\"593\":1,\"613\":6,\"626\":2,\"650\":2,\"652\":3,\"661\":4,\"703\":4,\"709\":1,\"716\":3,\"717\":1,\"734\":2,\"776\":2,\"777\":4,\"814\":1,\"834\":2,\"835\":1,\"836\":3,\"838\":4,\"843\":1,\"845\":1,\"864\":3,\"865\":1,\"871\":2,\"875\":1,\"887\":1,\"893\":1,\"929\":1,\"930\":1}}],[\"sys\",{\"1\":{\"845\":4,\"854\":1,\"873\":1,\"887\":1,\"888\":1,\"894\":1}}],[\"sysauditor\",{\"1\":{\"837\":2,\"873\":1,\"888\":1}}],[\"sysconfig\",{\"1\":{\"380\":2}}],[\"sysctl\",{\"1\":{\"271\":1,\"288\":2}}],[\"safe\",{\"1\":{\"623\":1}}],[\"safer\",{\"1\":{\"20\":1}}],[\"safari\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"saga模式是seata提供的长事务解决方案\",{\"1\":{\"423\":1}}],[\"saga\",{\"0\":{\"423\":1},\"1\":{\"420\":1}}],[\"sa\",{\"1\":{\"297\":4,\"580\":1}}],[\"same\",{\"1\":{\"192\":2}}],[\"samples\",{\"1\":{\"58\":1,\"427\":1}}],[\"save\",{\"0\":{\"143\":1},\"1\":{\"141\":3,\"143\":1,\"144\":1,\"352\":4}}],[\"sadd\",{\"1\":{\"135\":1}}],[\"sales\",{\"1\":{\"27\":2}}],[\"salary\",{\"1\":{\"21\":1,\"22\":11,\"24\":2,\"25\":1,\"28\":1}}],[\"shift\",{\"1\":{\"820\":2}}],[\"sh\",{\"1\":{\"262\":1,\"331\":1,\"332\":1,\"333\":1,\"336\":2,\"337\":1,\"338\":1,\"339\":1,\"340\":1,\"344\":1,\"345\":1,\"346\":1,\"348\":1,\"349\":1,\"350\":1,\"356\":1,\"357\":1,\"358\":1,\"361\":2,\"362\":1,\"363\":1,\"364\":1,\"365\":1,\"389\":2,\"651\":2,\"834\":1,\"835\":5,\"836\":2,\"838\":2,\"842\":1,\"844\":1}}],[\"shut\",{\"1\":{\"612\":1}}],[\"shutdown只是将线程池的状态设置成shutdown状态\",{\"1\":{\"764\":1}}],[\"shutdownnow首先将线程池状态设置成stop\",{\"1\":{\"764\":1}}],[\"shutdownnow\",{\"1\":{\"764\":1}}],[\"shutdowngracefully\",{\"1\":{\"612\":2}}],[\"shutdown\",{\"1\":{\"213\":2,\"214\":3,\"418\":1,\"446\":1,\"475\":2,\"764\":1,\"843\":1}}],[\"shujuku\",{\"1\":{\"132\":1}}],[\"shuffle\",{\"0\":{\"45\":1}}],[\"shenjian\",{\"1\":{\"104\":1}}],[\"shell操作\",{\"0\":{\"5\":1,\"13\":1}}],[\"shallow\",{\"1\":{\"722\":1}}],[\"shade\",{\"1\":{\"583\":1,\"707\":2,\"715\":5}}],[\"shanghai\",{\"1\":{\"389\":1,\"527\":1}}],[\"sha256\",{\"1\":{\"294\":1,\"317\":1}}],[\"sharedcount\",{\"1\":{\"820\":1,\"822\":1}}],[\"shared\",{\"1\":{\"664\":1,\"820\":3,\"822\":1,\"823\":1}}],[\"share\",{\"1\":{\"282\":1}}],[\"shares参数\",{\"1\":{\"263\":1}}],[\"shards\",{\"1\":{\"60\":1}}],[\"sha1\",{\"1\":{\"208\":1}}],[\"shape=\",{\"1\":{\"59\":1}}],[\"shape\",{\"1\":{\"59\":6}}],[\"short和char是2个字节\",{\"1\":{\"722\":1}}],[\"short\",{\"1\":{\"549\":1}}],[\"shorter\",{\"1\":{\"20\":2}}],[\"show\",{\"1\":{\"21\":6,\"28\":1,\"74\":4,\"80\":1,\"111\":1,\"328\":1,\"329\":1,\"341\":1,\"342\":2,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1,\"893\":2}}],[\"segment\",{\"1\":{\"433\":2,\"649\":1,\"853\":1}}],[\"segment方案直接取一批号段\",{\"1\":{\"211\":1}}],[\"seata<\",{\"1\":{\"425\":1}}],[\"seata\",{\"0\":{\"420\":1},\"1\":{\"420\":4,\"423\":1,\"425\":1,\"426\":1,\"427\":6}}],[\"searchhit\",{\"1\":{\"3\":6}}],[\"searchsourcebuilder\",{\"1\":{\"3\":7}}],[\"searchresponse\",{\"1\":{\"3\":5}}],[\"searchrequest\",{\"1\":{\"3\":11}}],[\"search\",{\"1\":{\"3\":10,\"58\":9,\"60\":1,\"62\":5,\"63\":2,\"238\":1}}],[\"semaphore=new\",{\"1\":{\"554\":1}}],[\"semaphore\",{\"0\":{\"554\":1},\"1\":{\"402\":3,\"550\":1,\"554\":10}}],[\"semi\",{\"1\":{\"23\":4}}],[\"sensitive\",{\"1\":{\"837\":1}}],[\"sendresult<string\",{\"1\":{\"437\":1}}],[\"sendresult\",{\"1\":{\"437\":1}}],[\"sendmessagetest\",{\"1\":{\"439\":1}}],[\"sendmessage\",{\"1\":{\"437\":2,\"439\":1}}],[\"sendurl\",{\"1\":{\"410\":4,\"411\":2}}],[\"send\",{\"1\":{\"317\":1,\"437\":2,\"439\":1,\"564\":1,\"648\":1}}],[\"sendfile\",{\"1\":{\"317\":1,\"433\":1}}],[\"sent\",{\"1\":{\"315\":1}}],[\"sentinel\",{\"1\":{\"153\":1,\"161\":1}}],[\"sed命令修改为docker\",{\"1\":{\"295\":1}}],[\"sed\",{\"1\":{\"288\":2}}],[\"sequenced接口提供的方法都是用来给生产者使用\",{\"1\":{\"472\":1}}],[\"sequenced\",{\"1\":{\"472\":1}}],[\"sequencegroups\",{\"1\":{\"472\":1}}],[\"sequencegroup\",{\"1\":{\"472\":1}}],[\"sequence类的其他set\",{\"1\":{\"472\":1}}],[\"sequencebarrier的具体实现\",{\"1\":{\"472\":1}}],[\"sequencebarrier\",{\"1\":{\"450\":1,\"472\":1}}],[\"sequencereportingeventhandler\",{\"1\":{\"472\":1}}],[\"sequencer\",{\"1\":{\"450\":2,\"472\":1}}],[\"sequence\",{\"1\":{\"450\":1,\"472\":1,\"648\":1,\"868\":1}}],[\"sequencefile\",{\"1\":{\"21\":1}}],[\"seq=w\",{\"1\":{\"649\":1}}],[\"seq=y\",{\"1\":{\"648\":1}}],[\"seq=x\",{\"1\":{\"648\":1,\"649\":1}}],[\"seq=1\",{\"1\":{\"262\":1}}],[\"seq=0\",{\"1\":{\"262\":1}}],[\"seettings\",{\"1\":{\"576\":2}}],[\"see\",{\"1\":{\"192\":1}}],[\"serialversionuid\",{\"1\":{\"444\":1,\"446\":1,\"517\":1}}],[\"serialization\",{\"1\":{\"435\":4,\"564\":4}}],[\"serializable\",{\"0\":{\"71\":1},\"1\":{\"106\":1,\"440\":1,\"444\":1,\"517\":2}}],[\"serializer\",{\"1\":{\"435\":2,\"564\":2}}],[\"servletutils\",{\"1\":{\"650\":3}}],[\"serve\",{\"1\":{\"155\":1}}],[\"serverbootstrap\",{\"1\":{\"612\":4}}],[\"servers\",{\"1\":{\"435\":1,\"564\":1}}],[\"server里的配置类似\",{\"1\":{\"424\":1}}],[\"serverlistrefreshinterval\",{\"1\":{\"403\":1}}],[\"server的地址\",{\"1\":{\"392\":1,\"396\":1,\"415\":1,\"416\":1,\"435\":1}}],[\"server=utf8mb4\",{\"1\":{\"321\":2}}],[\"server和location模块下\",{\"1\":{\"317\":1}}],[\"server块\",{\"1\":{\"305\":1}}],[\"server上面的过期时间\",{\"1\":{\"222\":1}}],[\"server上\",{\"1\":{\"222\":1}}],[\"server会把指定域名的a记录或者cname返回给local\",{\"1\":{\"222\":1}}],[\"server会根据请求的url\",{\"1\":{\"222\":1}}],[\"server是由域名提供商维护的\",{\"1\":{\"222\":1}}],[\"server就是网站注册的域名服务器\",{\"1\":{\"222\":1}}],[\"server服务器地址\",{\"1\":{\"222\":1}}],[\"server顶级域名服务器的地址\",{\"1\":{\"222\":1}}],[\"server进行解析\",{\"1\":{\"222\":1}}],[\"server缓存了大量的dns解析结果\",{\"1\":{\"222\":1}}],[\"server时\",{\"1\":{\"199\":1}}],[\"server对应\",{\"1\":{\"74\":1}}],[\"server\",{\"1\":{\"21\":2,\"22\":1,\"27\":1,\"63\":1,\"74\":2,\"77\":1,\"79\":2,\"199\":1,\"214\":2,\"222\":5,\"229\":1,\"272\":3,\"293\":1,\"297\":3,\"298\":4,\"300\":4,\"301\":4,\"302\":4,\"304\":4,\"305\":4,\"307\":4,\"317\":9,\"321\":4,\"323\":1,\"325\":1,\"353\":1,\"392\":2,\"396\":2,\"401\":1,\"404\":3,\"408\":2,\"409\":2,\"410\":1,\"411\":4,\"414\":1,\"415\":1,\"416\":1,\"478\":1,\"518\":1,\"522\":1,\"564\":3,\"612\":2,\"613\":4,\"650\":1,\"651\":2,\"845\":1}}],[\"servicefield\",{\"1\":{\"523\":3}}],[\"serviceexception\",{\"1\":{\"419\":2}}],[\"serviceexception等\",{\"1\":{\"413\":1}}],[\"servicename\",{\"1\":{\"410\":4}}],[\"servicenameconstants\",{\"1\":{\"410\":1}}],[\"services\",{\"1\":{\"63\":4}}],[\"service\",{\"1\":{\"61\":1,\"62\":1,\"214\":4,\"218\":2,\"230\":1,\"293\":1,\"334\":2,\"341\":3,\"347\":2,\"351\":4,\"353\":2,\"359\":2,\"366\":2,\"410\":1,\"426\":2,\"437\":5,\"439\":3,\"523\":3,\"610\":1,\"733\":2,\"834\":2,\"835\":1,\"836\":6,\"838\":7,\"844\":1}}],[\"selinux\",{\"1\":{\"225\":1,\"288\":1}}],[\"self\",{\"1\":{\"59\":13}}],[\"select和poll的性能可能比epoll好\",{\"1\":{\"807\":1}}],[\"selected\",{\"1\":{\"505\":1}}],[\"selectonehealthyinstance\",{\"1\":{\"410\":1,\"411\":1}}],[\"selector\",{\"1\":{\"263\":1,\"275\":1,\"276\":1}}],[\"selectbyids\",{\"1\":{\"62\":2}}],[\"select是sql中的映射算子\",{\"1\":{\"22\":1}}],[\"select\",{\"0\":{\"797\":1,\"798\":1},\"1\":{\"20\":6,\"21\":1,\"22\":16,\"23\":7,\"24\":11,\"26\":3,\"27\":12,\"29\":1,\"72\":1,\"73\":1,\"74\":1,\"78\":1,\"82\":5,\"103\":1,\"104\":1,\"107\":1,\"113\":1,\"727\":1,\"728\":1,\"732\":1,\"789\":6,\"795\":1,\"802\":1,\"808\":1,\"838\":2,\"841\":4,\"843\":9,\"865\":1,\"869\":4,\"872\":2,\"874\":1,\"877\":2,\"883\":2,\"885\":1,\"886\":1,\"887\":7,\"888\":3,\"890\":1,\"893\":6,\"894\":5}}],[\"se\",{\"1\":{\"22\":5}}],[\"section\",{\"1\":{\"673\":1}}],[\"securityconstants\",{\"1\":{\"650\":12}}],[\"securitycontextholder\",{\"1\":{\"650\":6}}],[\"securitycontext\",{\"1\":{\"263\":1,\"275\":1}}],[\"security\",{\"1\":{\"270\":2,\"684\":1,\"834\":1,\"898\":1}}],[\"securityutils\",{\"1\":{\"64\":2,\"650\":1}}],[\"secure\",{\"1\":{\"208\":1,\"243\":1,\"521\":1}}],[\"sec\",{\"1\":{\"107\":1,\"328\":1,\"341\":1,\"342\":1,\"837\":1}}],[\"secretkey格式指定\",{\"1\":{\"263\":1}}],[\"secretkey\",{\"1\":{\"63\":2}}],[\"secret\",{\"1\":{\"63\":1,\"263\":1}}],[\"secs\",{\"1\":{\"21\":1}}],[\"second\",{\"1\":{\"25\":1}}],[\"seconds\",{\"1\":{\"21\":3,\"139\":1,\"213\":1,\"214\":2,\"527\":2,\"531\":1,\"773\":2,\"814\":1,\"930\":1}}],[\"secondarynamenode把fsimage和edits文件合并成新的fsimage文件\",{\"1\":{\"19\":1}}],[\"secondarynamenode从namenode请求fsimage和edits文件\",{\"1\":{\"19\":1}}],[\"secondarynamenode的角色就是定期合并edits和fsimage文件\",{\"1\":{\"19\":1}}],[\"secondarynamenode就是为了解决这个问题\",{\"1\":{\"19\":1}}],[\"secondarynamenode运行再master节点\",{\"1\":{\"15\":1}}],[\"secondarynamenode\",{\"0\":{\"19\":1},\"1\":{\"15\":1}}],[\"session\",{\"1\":{\"21\":2,\"59\":1,\"317\":1,\"564\":2,\"854\":1,\"855\":1,\"857\":1,\"886\":1,\"897\":1}}],[\"severity\",{\"1\":{\"21\":3}}],[\"severe\",{\"1\":{\"3\":2,\"472\":1}}],[\"sex\",{\"1\":{\"13\":4,\"104\":1}}],[\"setexclusiveownerthread\",{\"1\":{\"820\":1,\"821\":1}}],[\"setentity\",{\"1\":{\"518\":1}}],[\"setenforce\",{\"1\":{\"288\":1}}],[\"set从内核空间拷贝到用户空间\",{\"1\":{\"799\":1}}],[\"set赋值\",{\"1\":{\"799\":1}}],[\"set到内核空间\",{\"1\":{\"799\":1}}],[\"setkeepaliveseconds\",{\"1\":{\"779\":1}}],[\"setqueuecapacity\",{\"1\":{\"779\":1}}],[\"setpermission\",{\"1\":{\"650\":1}}],[\"setproperty\",{\"1\":{\"564\":1}}],[\"setparameter\",{\"1\":{\"518\":1}}],[\"setpassword\",{\"1\":{\"213\":1}}],[\"set同一级别\",{\"1\":{\"528\":1}}],[\"setuserkey\",{\"1\":{\"650\":2}}],[\"setusername\",{\"1\":{\"650\":2}}],[\"setuserservice\",{\"1\":{\"523\":1}}],[\"setuserid\",{\"1\":{\"427\":1,\"650\":2}}],[\"setheader\",{\"1\":{\"518\":1}}],[\"sethttpclientconfigcallback\",{\"1\":{\"3\":1}}],[\"set<map\",{\"1\":{\"518\":3}}],[\"setmethodname\",{\"1\":{\"523\":2}}],[\"setmoney\",{\"1\":{\"427\":1}}],[\"setmaxpoolsize\",{\"1\":{\"779\":1}}],[\"setmaximumfractiondigits\",{\"1\":{\"445\":1}}],[\"setmaxlimit\",{\"1\":{\"64\":1}}],[\"setmaxconnperroute\",{\"1\":{\"3\":1}}],[\"setmaxconntotal\",{\"1\":{\"3\":1}}],[\"setmapperclass\",{\"1\":{\"32\":1,\"652\":1}}],[\"setcorepoolsize\",{\"1\":{\"779\":1}}],[\"setcombinerclass\",{\"1\":{\"652\":1}}],[\"setcommoditycode\",{\"1\":{\"427\":1}}],[\"setconfig\",{\"1\":{\"518\":4}}],[\"setcontent\",{\"1\":{\"517\":1}}],[\"setconnectionpoolsize\",{\"1\":{\"213\":2}}],[\"setconnectionminimumidlesize\",{\"1\":{\"213\":1}}],[\"setconnectionrequesttimeout\",{\"1\":{\"3\":1,\"518\":2}}],[\"setconnecttimeout\",{\"1\":{\"3\":1,\"518\":6}}],[\"setcode\",{\"1\":{\"517\":1}}],[\"setcount\",{\"1\":{\"427\":1}}],[\"set=utf8mb4\",{\"1\":{\"321\":1}}],[\"settings\",{\"1\":{\"495\":1,\"572\":3}}],[\"setting\",{\"1\":{\"230\":2}}],[\"settime\",{\"1\":{\"63\":1}}],[\"setsockettimeout\",{\"1\":{\"518\":6}}],[\"setstate\",{\"1\":{\"446\":1,\"820\":1,\"821\":1}}],[\"sets\",{\"1\":{\"217\":1}}],[\"setservice\",{\"1\":{\"214\":1}}],[\"setlocalmap\",{\"1\":{\"650\":1}}],[\"setlocksuccess\",{\"1\":{\"214\":1}}],[\"setleaseid\",{\"1\":{\"214\":1}}],[\"setaccessible\",{\"1\":{\"523\":1,\"733\":1}}],[\"setapplicationcontext\",{\"1\":{\"381\":1}}],[\"setaddress\",{\"1\":{\"213\":2}}],[\"setage\",{\"1\":{\"3\":1}}],[\"set命令查看所有mysql支持\",{\"1\":{\"99\":1}}],[\"setdbtype\",{\"1\":{\"64\":1}}],[\"setdirectory\",{\"1\":{\"63\":1}}],[\"setfilename\",{\"1\":{\"63\":1}}],[\"setfailurelistener\",{\"1\":{\"3\":1}}],[\"setoutputpath\",{\"1\":{\"32\":1,\"652\":1}}],[\"setoutputformatclass\",{\"1\":{\"32\":1}}],[\"setoutputvalueclass\",{\"1\":{\"32\":1,\"652\":1}}],[\"setoutputkeyclass\",{\"1\":{\"32\":1,\"652\":1}}],[\"setrejectedexecutionhandler\",{\"1\":{\"779\":1}}],[\"setreducerclass\",{\"1\":{\"32\":1,\"652\":1}}],[\"setrequestconfigcallback\",{\"1\":{\"3\":1}}],[\"setjarbyclass\",{\"1\":{\"32\":1,\"652\":1}}],[\"set\",{\"1\":{\"21\":5,\"22\":4,\"23\":4,\"27\":1,\"29\":4,\"32\":1,\"63\":1,\"73\":3,\"74\":3,\"78\":1,\"107\":1,\"133\":1,\"134\":3,\"150\":2,\"158\":2,\"217\":4,\"218\":4,\"219\":2,\"288\":1,\"310\":1,\"313\":1,\"317\":8,\"321\":3,\"328\":2,\"339\":1,\"341\":1,\"342\":2,\"355\":1,\"366\":1,\"444\":1,\"478\":1,\"499\":1,\"523\":1,\"650\":9,\"651\":1,\"652\":2,\"703\":4,\"728\":1,\"732\":1,\"733\":1,\"814\":1,\"822\":1,\"865\":1,\"875\":1,\"887\":1,\"888\":1,\"929\":2}}],[\"setinitialvalue\",{\"1\":{\"217\":1}}],[\"setinputformatclass\",{\"1\":{\"32\":1}}],[\"setifabsent\",{\"1\":{\"213\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":2}}],[\"setisneighbourhood\",{\"1\":{\"3\":1}}],[\"setid\",{\"1\":{\"3\":1,\"533\":4}}],[\"setnameformat\",{\"1\":{\"440\":2,\"446\":1,\"721\":1,\"754\":1,\"774\":1,\"776\":1}}],[\"setname\",{\"1\":{\"3\":1,\"533\":4}}],[\"still\",{\"1\":{\"824\":1}}],[\"stdio\",{\"1\":{\"616\":1}}],[\"stdout\",{\"1\":{\"280\":1}}],[\"storm\",{\"1\":{\"788\":1}}],[\"stored\",{\"1\":{\"217\":1}}],[\"store\",{\"1\":{\"139\":1,\"317\":3}}],[\"stockfeignclient\",{\"1\":{\"427\":3}}],[\"stocks\",{\"1\":{\"22\":4,\"23\":7}}],[\"stopping\",{\"1\":{\"845\":1}}],[\"stopped\",{\"1\":{\"389\":1}}],[\"stop之间的成员\",{\"1\":{\"137\":1}}],[\"stop\",{\"1\":{\"137\":1,\"138\":2,\"141\":2,\"288\":1,\"329\":1,\"332\":2,\"334\":1,\"337\":1,\"339\":1,\"341\":2,\"342\":5,\"343\":1,\"345\":1,\"347\":1,\"349\":1,\"351\":2,\"357\":2,\"359\":1,\"360\":1,\"362\":1,\"366\":2,\"367\":2,\"389\":6,\"451\":1,\"566\":1,\"839\":1,\"845\":1}}],[\"stevenczp\",{\"1\":{\"816\":1}}],[\"step8\",{\"0\":{\"906\":1}}],[\"step7\",{\"0\":{\"905\":1}}],[\"step6\",{\"0\":{\"904\":1},\"1\":{\"80\":1}}],[\"step5\",{\"0\":{\"80\":1,\"903\":1}}],[\"step4\",{\"0\":{\"79\":1,\"427\":1,\"902\":1},\"1\":{\"563\":1}}],[\"step3\",{\"0\":{\"78\":1,\"426\":1,\"901\":1},\"1\":{\"563\":2}}],[\"step2\",{\"0\":{\"77\":1,\"425\":1,\"900\":1},\"1\":{\"410\":1,\"563\":2}}],[\"step1\",{\"0\":{\"76\":1,\"424\":1,\"899\":1},\"1\":{\"410\":1,\"563\":2}}],[\"stereotype\",{\"1\":{\"63\":1,\"213\":1,\"218\":1,\"437\":1,\"438\":1,\"439\":1}}],[\"stu\",{\"1\":{\"734\":2}}],[\"stu4\",{\"1\":{\"734\":2,\"735\":2}}],[\"stu3\",{\"1\":{\"734\":2,\"735\":2}}],[\"stu2\",{\"1\":{\"734\":2,\"735\":2}}],[\"stu1\",{\"1\":{\"734\":2,\"735\":2}}],[\"stub\",{\"1\":{\"243\":1}}],[\"stubbleine\",{\"1\":{\"22\":2}}],[\"stuff\",{\"1\":{\"27\":2}}],[\"studentstream\",{\"1\":{\"735\":1}}],[\"students\",{\"1\":{\"734\":3,\"735\":9}}],[\"student\",{\"1\":{\"7\":1,\"13\":28,\"734\":13,\"735\":12}}],[\"star\",{\"1\":{\"626\":1}}],[\"starting\",{\"1\":{\"845\":2,\"893\":1}}],[\"startup\",{\"1\":{\"845\":2}}],[\"start|status|stop|enable|disable\",{\"1\":{\"844\":1}}],[\"start|stop|restart|status\",{\"1\":{\"389\":1}}],[\"startssl\",{\"1\":{\"522\":1}}],[\"starter\",{\"1\":{\"297\":1,\"391\":1,\"395\":4,\"401\":2,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"415\":2,\"416\":4,\"425\":1}}],[\"started\",{\"1\":{\"214\":1,\"779\":1}}],[\"start\",{\"1\":{\"64\":1,\"78\":1,\"135\":2,\"137\":1,\"138\":2,\"214\":4,\"229\":2,\"237\":1,\"273\":2,\"281\":1,\"282\":1,\"290\":1,\"321\":1,\"329\":1,\"334\":1,\"341\":1,\"342\":4,\"347\":1,\"351\":2,\"355\":1,\"357\":1,\"359\":1,\"366\":1,\"367\":2,\"389\":6,\"414\":1,\"427\":1,\"552\":1,\"554\":1,\"564\":2,\"566\":1,\"650\":2,\"703\":6,\"716\":2,\"836\":1,\"838\":1,\"845\":2,\"893\":1,\"894\":1}}],[\"stale\",{\"1\":{\"155\":1}}],[\"standardcharsets\",{\"1\":{\"297\":3}}],[\"standard\",{\"1\":{\"63\":1}}],[\"standalone\",{\"1\":{\"56\":2}}],[\"staged\",{\"1\":{\"22\":1}}],[\"stats\",{\"1\":{\"527\":5}}],[\"statistics\",{\"1\":{\"527\":1}}],[\"static\",{\"1\":{\"3\":6,\"32\":3,\"63\":19,\"213\":2,\"214\":2,\"218\":4,\"243\":1,\"297\":10,\"306\":2,\"393\":1,\"397\":1,\"408\":1,\"409\":1,\"415\":1,\"416\":1,\"419\":1,\"436\":2,\"440\":4,\"441\":2,\"442\":1,\"443\":1,\"444\":3,\"445\":4,\"446\":4,\"475\":6,\"517\":1,\"518\":17,\"523\":1,\"527\":3,\"530\":2,\"531\":1,\"532\":1,\"533\":2,\"537\":2,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"548\":2,\"549\":1,\"554\":2,\"563\":8,\"564\":9,\"612\":1,\"626\":9,\"650\":17,\"652\":4,\"661\":2,\"703\":2,\"709\":2,\"712\":1,\"716\":1,\"717\":2,\"721\":2,\"733\":1,\"734\":3,\"735\":1,\"771\":1,\"772\":2,\"773\":2,\"814\":3,\"820\":3,\"929\":3,\"930\":2}}],[\"state为int类型\",{\"1\":{\"820\":1}}],[\"state变量\",{\"1\":{\"723\":1}}],[\"state=\",{\"1\":{\"21\":1}}],[\"state=ak\",{\"1\":{\"21\":1}}],[\"state=al\",{\"1\":{\"21\":1}}],[\"state=ab\",{\"1\":{\"21\":1}}],[\"state=bc\",{\"1\":{\"21\":1}}],[\"state\",{\"1\":{\"20\":2,\"21\":3,\"22\":5,\"25\":1,\"27\":8,\"28\":2,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"824\":2}}],[\"status$\",{\"1\":{\"843\":12}}],[\"status=2\",{\"1\":{\"732\":1}}],[\"status状态值描述\",{\"1\":{\"412\":1}}],[\"status这种字段\",{\"1\":{\"82\":1}}],[\"status\",{\"1\":{\"3\":1,\"74\":1,\"80\":1,\"243\":1,\"263\":1,\"278\":1,\"295\":1,\"321\":1,\"328\":1,\"329\":1,\"341\":1,\"342\":4,\"355\":1,\"360\":1,\"380\":1,\"389\":4,\"412\":3,\"732\":2,\"839\":1,\"845\":1}}],[\"st\",{\"1\":{\"22\":2}}],[\"strcasecmp\",{\"1\":{\"624\":2}}],[\"strcat\",{\"1\":{\"619\":6,\"620\":2,\"624\":2}}],[\"strcmp\",{\"1\":{\"100\":1}}],[\"strlen\",{\"1\":{\"618\":2}}],[\"str=f1\",{\"1\":{\"542\":1}}],[\"str=null\",{\"1\":{\"542\":1}}],[\"str=\",{\"1\":{\"539\":1,\"541\":1}}],[\"strategy\",{\"1\":{\"263\":1,\"402\":1,\"471\":1,\"472\":1}}],[\"streams\",{\"1\":{\"802\":2}}],[\"stream流\",{\"0\":{\"538\":1,\"540\":1}}],[\"stream\",{\"1\":{\"63\":8,\"317\":1,\"475\":1,\"527\":7,\"636\":1,\"733\":3,\"735\":1,\"805\":2}}],[\"street\",{\"1\":{\"22\":4}}],[\"str\",{\"1\":{\"62\":1,\"388\":2,\"541\":2,\"542\":1}}],[\"strong\",{\"1\":{\"62\":1}}],[\"strting\",{\"1\":{\"25\":1}}],[\"strut\",{\"1\":{\"25\":1}}],[\"struct<street\",{\"1\":{\"21\":1,\"25\":1,\"28\":1}}],[\"struct\",{\"1\":{\"20\":1,\"119\":4,\"124\":1,\"125\":2,\"126\":2,\"616\":1}}],[\"stripprefix=1\",{\"1\":{\"410\":2}}],[\"stripversion>\",{\"1\":{\"389\":1}}],[\"strictmath\",{\"1\":{\"549\":1}}],[\"strictinsertfill\",{\"1\":{\"64\":6}}],[\"strict\",{\"1\":{\"21\":1}}],[\"stringtokenizer\",{\"1\":{\"652\":3}}],[\"string为字符串常量\",{\"1\":{\"629\":1}}],[\"stringbuffer对方法加了同步锁或者对调用的方法加了同步锁\",{\"1\":{\"630\":1}}],[\"stringbuffer\",{\"1\":{\"629\":1}}],[\"stringbuffer区别\",{\"0\":{\"628\":1}}],[\"stringbuilder\",{\"0\":{\"628\":1},\"1\":{\"629\":1}}],[\"strings\",{\"1\":{\"527\":6}}],[\"stringserializer\",{\"1\":{\"435\":2,\"564\":2}}],[\"stringobjectsendresult\",{\"1\":{\"437\":1}}],[\"stringdeserializer\",{\"1\":{\"435\":2,\"564\":2}}],[\"string=\",{\"1\":{\"399\":1}}],[\"stringredistemplate\",{\"1\":{\"213\":6,\"216\":4,\"217\":5,\"218\":6,\"219\":6}}],[\"string字符串命令\",{\"0\":{\"134\":1}}],[\"stringutils\",{\"1\":{\"63\":2,\"213\":2,\"419\":1,\"527\":2,\"650\":5,\"652\":1,\"749\":1}}],[\"string>>\",{\"1\":{\"518\":3}}],[\"string>\",{\"1\":{\"25\":2,\"518\":14,\"564\":9,\"749\":1}}],[\"string\",{\"0\":{\"628\":1},\"1\":{\"3\":9,\"20\":4,\"21\":9,\"24\":3,\"25\":2,\"26\":4,\"27\":13,\"28\":6,\"32\":6,\"63\":29,\"64\":5,\"133\":1,\"213\":8,\"214\":8,\"215\":2,\"216\":2,\"217\":3,\"218\":3,\"219\":3,\"263\":35,\"297\":13,\"387\":1,\"388\":2,\"393\":1,\"397\":1,\"398\":6,\"399\":5,\"400\":5,\"401\":2,\"402\":12,\"404\":2,\"408\":3,\"409\":3,\"410\":7,\"411\":5,\"415\":6,\"416\":7,\"419\":6,\"427\":2,\"436\":2,\"437\":2,\"438\":1,\"440\":2,\"445\":9,\"446\":4,\"475\":11,\"517\":5,\"518\":12,\"523\":5,\"527\":10,\"530\":1,\"531\":1,\"532\":1,\"533\":5,\"537\":2,\"539\":3,\"541\":2,\"542\":2,\"544\":1,\"545\":1,\"548\":1,\"549\":1,\"552\":1,\"554\":1,\"563\":1,\"564\":6,\"612\":1,\"624\":1,\"626\":4,\"629\":1,\"650\":13,\"652\":2,\"703\":2,\"709\":2,\"712\":1,\"717\":5,\"721\":2,\"733\":4,\"734\":4,\"735\":1,\"749\":3,\"779\":1,\"814\":1,\"921\":2,\"930\":1}}],[\"hrtest\",{\"1\":{\"876\":1,\"878\":1,\"881\":1,\"883\":3,\"884\":1,\"885\":1,\"887\":9,\"888\":1}}],[\"hr\",{\"1\":{\"874\":1,\"879\":2,\"880\":1,\"882\":2,\"883\":1}}],[\"hj\",{\"1\":{\"855\":1}}],[\"h50\",{\"1\":{\"744\":1}}],[\"h1\",{\"1\":{\"744\":1}}],[\"h>\",{\"1\":{\"619\":1,\"624\":3}}],[\"hypertext\",{\"1\":{\"520\":1,\"521\":1}}],[\"hystrixproperty\",{\"1\":{\"402\":4}}],[\"hystrixcommand\",{\"1\":{\"402\":2}}],[\"hystrixclientfallbackfactory\",{\"1\":{\"398\":1,\"399\":1,\"404\":2,\"416\":1}}],[\"hystrix修改默认配置有两种方式\",{\"1\":{\"402\":1}}],[\"hystrix参数配置\",{\"0\":{\"402\":1}}],[\"hystrix\",{\"1\":{\"396\":2,\"402\":1,\"404\":2,\"416\":1}}],[\"hystrix<\",{\"1\":{\"395\":1,\"404\":1,\"416\":1}}],[\"hup\",{\"1\":{\"353\":1}}],[\"hub镜像仓库\",{\"1\":{\"295\":1}}],[\"hub\",{\"1\":{\"234\":2}}],[\"hgetall\",{\"1\":{\"137\":1}}],[\"hvals\",{\"1\":{\"137\":1}}],[\"hkeys\",{\"1\":{\"137\":1}}],[\"hlen\",{\"1\":{\"136\":1}}],[\"hdel\",{\"1\":{\"136\":1}}],[\"hdfs返回该文件具体的\",{\"1\":{\"627\":1}}],[\"hdfs会对数据块和保存的校验和文件匹配\",{\"1\":{\"19\":1}}],[\"hdfs可以允许datanode失败\",{\"1\":{\"19\":1}}],[\"hdfs的rpc对client\",{\"1\":{\"19\":1}}],[\"hdfs通过备份数据块的形式来实现容错\",{\"1\":{\"19\":1}}],[\"hdfs通过rpc调用namenode获取文件块的位置信息\",{\"1\":{\"14\":1}}],[\"hdfs以主从模式运行\",{\"1\":{\"15\":1}}],[\"hdfs是专门针对吞吐量而不是用户低延迟\",{\"1\":{\"15\":1}}],[\"hdfs不适合的场景\",{\"1\":{\"15\":1}}],[\"hdfs使应用计算移动到离他最近数据位置的接口\",{\"1\":{\"15\":1}}],[\"hdfs支持gb级别大小的文件\",{\"1\":{\"15\":1}}],[\"hdfs概述\",{\"0\":{\"15\":1}}],[\"hdfs文件写入的详细步骤\",{\"1\":{\"627\":1}}],[\"hdfs文件系统显示空间增加\",{\"1\":{\"14\":1}}],[\"hdfs文件操作\",{\"0\":{\"14\":1}}],[\"hdfs有一个分布式系统\",{\"1\":{\"14\":1}}],[\"hdfs有一个文件系统实例\",{\"1\":{\"14\":1}}],[\"hdfs\",{\"0\":{\"5\":1},\"1\":{\"6\":1,\"7\":3,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1,\"21\":2,\"22\":1,\"28\":1,\"32\":1,\"433\":1,\"627\":2,\"657\":1}}],[\"hmain\",{\"1\":{\"864\":1}}],[\"hm\",{\"1\":{\"738\":2,\"739\":1,\"740\":4,\"743\":1}}],[\"hmget\",{\"1\":{\"136\":1}}],[\"hmset\",{\"1\":{\"136\":1}}],[\"hms\",{\"1\":{\"21\":1}}],[\"h\",{\"1\":{\"73\":1,\"119\":2,\"124\":2,\"126\":1,\"230\":4,\"357\":2,\"362\":2,\"364\":1,\"374\":1,\"616\":2,\"738\":1,\"743\":2,\"744\":1,\"745\":3}}],[\"here\",{\"1\":{\"554\":1}}],[\"help\",{\"1\":{\"837\":1}}],[\"help等新顶级域名\",{\"1\":{\"222\":1}}],[\"helloworld\",{\"1\":{\"580\":1}}],[\"hellohystirxb\",{\"1\":{\"402\":1}}],[\"hellohystirxa\",{\"1\":{\"402\":1}}],[\"hellohystrixb\",{\"1\":{\"402\":1}}],[\"hellohystrixa\",{\"1\":{\"402\":1}}],[\"hellocontroller\",{\"1\":{\"401\":1}}],[\"hello\",{\"1\":{\"58\":11,\"134\":4,\"229\":1,\"311\":1,\"398\":4,\"399\":2,\"400\":1,\"401\":3,\"402\":2,\"404\":1,\"408\":1,\"409\":1,\"410\":1,\"411\":1,\"414\":1,\"415\":1,\"416\":4,\"475\":2,\"527\":1,\"564\":1,\"624\":1,\"779\":1}}],[\"health\",{\"1\":{\"404\":2,\"408\":2,\"409\":2,\"412\":2,\"414\":2,\"418\":1}}],[\"heads\",{\"1\":{\"500\":2}}],[\"headerinterceptor\",{\"1\":{\"650\":1}}],[\"headers\",{\"1\":{\"518\":6}}],[\"header和data一并发送出去\",{\"1\":{\"482\":1}}],[\"header\",{\"1\":{\"317\":13,\"438\":2,\"483\":1,\"486\":4}}],[\"header头中不包含\",{\"1\":{\"317\":1}}],[\"header头中包含\",{\"1\":{\"317\":3}}],[\"head\",{\"1\":{\"119\":3,\"476\":1,\"500\":1}}],[\"heapdump\",{\"1\":{\"418\":1}}],[\"heap\",{\"1\":{\"74\":1,\"651\":4}}],[\"hexdump\",{\"1\":{\"613\":1}}],[\"hexists\",{\"1\":{\"137\":1}}],[\"hex\",{\"1\":{\"73\":1}}],[\"htm\",{\"1\":{\"222\":1}}],[\"htmlhttps\",{\"1\":{\"132\":1,\"189\":2}}],[\"html\",{\"1\":{\"63\":1,\"64\":3,\"211\":2,\"222\":1,\"265\":1,\"285\":1,\"298\":1,\"375\":1,\"420\":1,\"427\":1,\"458\":1,\"475\":1,\"477\":1,\"478\":1,\"479\":2,\"480\":2,\"520\":1,\"527\":1,\"611\":1,\"674\":1,\"741\":1,\"748\":1,\"816\":1}}],[\"ht\",{\"1\":{\"126\":6,\"127\":3}}],[\"http协议不适合传输一些敏感信息\",{\"1\":{\"520\":1}}],[\"http和https的区别\",{\"0\":{\"519\":1}}],[\"http和location中\",{\"1\":{\"317\":1}}],[\"http客户端\",{\"1\":{\"518\":2}}],[\"httpentityenclosingrequestbase\",{\"1\":{\"518\":1}}],[\"httpmethod\",{\"1\":{\"518\":9}}],[\"httpdelete\",{\"1\":{\"518\":5}}],[\"httpput\",{\"1\":{\"518\":6}}],[\"httppost\",{\"1\":{\"518\":7}}],[\"httprequestbase\",{\"1\":{\"518\":2}}],[\"httprequestmethodnotsupportedexception\",{\"1\":{\"419\":2}}],[\"httpresponse\",{\"1\":{\"518\":24}}],[\"httpcomponents<\",{\"1\":{\"516\":1}}],[\"httpcomponents\",{\"1\":{\"515\":1}}],[\"httpclientutils\",{\"1\":{\"518\":1}}],[\"httpclients\",{\"1\":{\"518\":5}}],[\"httpclientresult\",{\"1\":{\"517\":4,\"518\":14}}],[\"httpclient组件\",{\"1\":{\"516\":1}}],[\"httpclient已经应用在很多的项目中\",{\"1\":{\"515\":1}}],[\"httpclient\",{\"0\":{\"515\":1},\"1\":{\"515\":5,\"516\":2,\"518\":19}}],[\"httpclientbuilder\",{\"1\":{\"3\":4}}],[\"httponly\",{\"1\":{\"478\":1}}],[\"httptrace\",{\"1\":{\"418\":1}}],[\"http块\",{\"1\":{\"305\":2}}],[\"httpheaders\",{\"1\":{\"263\":1}}],[\"httphosts\",{\"1\":{\"3\":3}}],[\"httphost\",{\"1\":{\"3\":4}}],[\"httpget\",{\"1\":{\"263\":1,\"518\":6}}],[\"httpget和tcpsocket\",{\"1\":{\"263\":1}}],[\"https发送信息至服务器时的内容编码类型\",{\"1\":{\"747\":1}}],[\"https协议\",{\"1\":{\"705\":1}}],[\"httpservletresponse\",{\"1\":{\"650\":2}}],[\"httpservletrequest\",{\"1\":{\"419\":5,\"650\":2}}],[\"https除了\",{\"1\":{\"522\":1}}],[\"https和http的区别\",{\"0\":{\"522\":1}}],[\"httpstatus\",{\"1\":{\"419\":1,\"518\":2}}],[\"https\",{\"0\":{\"521\":1},\"1\":{\"50\":1,\"56\":1,\"58\":1,\"63\":3,\"64\":3,\"82\":1,\"132\":1,\"189\":1,\"211\":5,\"222\":1,\"236\":2,\"243\":1,\"265\":2,\"285\":1,\"290\":2,\"291\":1,\"295\":2,\"317\":3,\"319\":1,\"375\":1,\"401\":1,\"414\":1,\"415\":1,\"420\":1,\"427\":5,\"433\":1,\"458\":3,\"472\":1,\"475\":4,\"485\":1,\"497\":1,\"521\":3,\"522\":9,\"527\":1,\"534\":1,\"537\":1,\"576\":1,\"611\":1,\"613\":1,\"626\":2,\"631\":1,\"650\":1,\"662\":1,\"664\":1,\"674\":3,\"683\":2,\"741\":1,\"789\":1,\"816\":1,\"818\":2,\"825\":4,\"924\":2}}],[\"http\",{\"0\":{\"520\":1},\"1\":{\"3\":3,\"63\":3,\"67\":1,\"127\":1,\"214\":1,\"226\":1,\"234\":1,\"243\":18,\"270\":1,\"272\":1,\"273\":1,\"280\":1,\"296\":1,\"297\":1,\"298\":1,\"307\":4,\"312\":1,\"315\":1,\"316\":1,\"317\":14,\"343\":3,\"402\":2,\"410\":5,\"411\":1,\"412\":1,\"413\":1,\"418\":3,\"472\":1,\"477\":1,\"478\":1,\"479\":3,\"480\":3,\"484\":1,\"485\":2,\"486\":1,\"497\":2,\"499\":1,\"515\":9,\"518\":10,\"520\":4,\"521\":1,\"522\":6,\"564\":2,\"609\":1,\"638\":1,\"650\":1,\"715\":4,\"722\":1}}],[\"hnsw\",{\"1\":{\"52\":2}}],[\"h是第0个字符\",{\"1\":{\"34\":1}}],[\"hh\",{\"1\":{\"25\":1,\"626\":3}}],[\"hold\",{\"1\":{\"824\":1}}],[\"holdcounter\",{\"1\":{\"822\":1,\"823\":1}}],[\"hollischuang\",{\"1\":{\"67\":1}}],[\"hotspotintrinsiccandidate\",{\"1\":{\"443\":1}}],[\"hotfix\",{\"1\":{\"410\":1}}],[\"hostname\",{\"1\":{\"288\":1,\"343\":1}}],[\"hostnamectl\",{\"1\":{\"288\":1}}],[\"hostnetwork\",{\"1\":{\"263\":1}}],[\"hosts\",{\"1\":{\"272\":1,\"275\":1,\"277\":1,\"280\":1,\"288\":1,\"343\":1}}],[\"hosts文件来设置的\",{\"1\":{\"222\":1}}],[\"hostpath\",{\"1\":{\"263\":1,\"275\":1}}],[\"hostport\",{\"0\":{\"252\":1,\"253\":1},\"1\":{\"263\":1}}],[\"host|container\",{\"1\":{\"255\":1}}],[\"host=tcp\",{\"1\":{\"230\":1}}],[\"host=\",{\"1\":{\"58\":1,\"80\":1,\"329\":1,\"342\":1}}],[\"host\",{\"0\":{\"255\":1},\"1\":{\"22\":2,\"78\":2,\"155\":2,\"222\":1,\"250\":1,\"255\":1,\"258\":1,\"263\":1,\"270\":1,\"272\":1,\"293\":1,\"317\":2,\"329\":1,\"342\":1,\"477\":2,\"479\":1,\"480\":1,\"834\":1,\"893\":1}}],[\"home=`pwd`\",{\"1\":{\"389\":1}}],[\"home=\",{\"1\":{\"377\":1}}],[\"home\",{\"1\":{\"22\":1,\"29\":1,\"63\":2,\"74\":9,\"377\":4,\"389\":1,\"572\":1,\"576\":2,\"651\":2,\"712\":1,\"831\":1,\"838\":1,\"840\":1}}],[\"hour\",{\"1\":{\"21\":1}}],[\"hours\",{\"1\":{\"21\":3,\"213\":2,\"214\":2,\"230\":1,\"758\":1}}],[\"hbase具有以下特点\",{\"1\":{\"199\":1}}],[\"hbase是强一致性系统\",{\"0\":{\"199\":1}}],[\"hbase这种分布式存储系统\",{\"1\":{\"197\":1}}],[\"hbase等\",{\"1\":{\"197\":1}}],[\"hbase\",{\"0\":{\"13\":1},\"1\":{\"788\":1}}],[\"happen\",{\"1\":{\"612\":1}}],[\"hao\",{\"1\":{\"527\":1}}],[\"handle\",{\"1\":{\"537\":1,\"539\":2,\"541\":2,\"542\":2,\"544\":2,\"545\":2,\"777\":1}}],[\"handlermethod\",{\"1\":{\"650\":1}}],[\"handler\",{\"0\":{\"761\":1},\"1\":{\"438\":1,\"650\":3}}],[\"handleruntimeexception\",{\"1\":{\"419\":1}}],[\"handlemethodargumentnotvalidexception\",{\"1\":{\"419\":1}}],[\"handlebindexception\",{\"1\":{\"419\":1}}],[\"handleexception\",{\"1\":{\"419\":1}}],[\"handleserviceexception\",{\"1\":{\"419\":1}}],[\"handlehttprequestmethodnotsupported\",{\"1\":{\"419\":1}}],[\"handleaccessdeniedexception\",{\"1\":{\"419\":1}}],[\"handshake=false\",{\"1\":{\"321\":1}}],[\"hangzhou\",{\"1\":{\"293\":1}}],[\"hard\",{\"1\":{\"270\":2,\"503\":1}}],[\"hardcore\",{\"1\":{\"242\":1}}],[\"havenext\",{\"1\":{\"444\":6}}],[\"have\",{\"1\":{\"217\":1,\"475\":3,\"824\":1}}],[\"hasmoretokens\",{\"1\":{\"652\":1}}],[\"hashmap<string\",{\"1\":{\"518\":1,\"749\":1}}],[\"hashmap<>\",{\"1\":{\"3\":1}}],[\"hash解决冲突的方法\",{\"0\":{\"506\":1}}],[\"hash不能与backup同时使用\",{\"1\":{\"301\":1}}],[\"hash中使用权重\",{\"1\":{\"301\":1}}],[\"hash结合使用\",{\"1\":{\"300\":1}}],[\"hashtable\",{\"1\":{\"157\":1,\"158\":1}}],[\"hashfunction\",{\"1\":{\"126\":1}}],[\"hash索引虽然在等值查询上较快\",{\"1\":{\"102\":1}}],[\"hash索引任何时候都避免不了回表查询数据\",{\"1\":{\"102\":1}}],[\"hash索引不支持模糊查询以及多列索引的最左前缀匹配\",{\"1\":{\"102\":1}}],[\"hash索引不支持使用索引进行排序\",{\"1\":{\"102\":1}}],[\"hash索引进行等值查询更快\",{\"1\":{\"102\":1}}],[\"hash索引底层就是hash表\",{\"1\":{\"102\":1}}],[\"hash索引和b+树索引的底层实现原理\",{\"0\":{\"102\":1}}],[\"hash\",{\"0\":{\"301\":1,\"305\":1},\"1\":{\"101\":1,\"127\":4,\"133\":1,\"158\":4,\"208\":1,\"221\":2,\"294\":1,\"301\":1,\"305\":2,\"317\":1,\"506\":4,\"507\":1,\"855\":6,\"863\":3}}],[\"has\",{\"1\":{\"60\":1,\"214\":1,\"217\":1,\"802\":1,\"823\":1}}],[\"hamming\",{\"1\":{\"54\":1}}],[\"hadoop大数据挖掘入门到放弃\",{\"1\":{\"789\":1}}],[\"hadoop更喜欢大文件\",{\"1\":{\"17\":1}}],[\"hadoop的网络拓扑\",{\"1\":{\"14\":1}}],[\"hadoop\",{\"0\":{\"8\":1,\"9\":1,\"12\":1},\"1\":{\"6\":1,\"7\":5,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"12\":1,\"14\":1,\"22\":1,\"23\":1,\"28\":1,\"32\":10,\"610\":1,\"652\":12,\"781\":2,\"782\":1}}],[\"hincrbyfloat\",{\"1\":{\"137\":1}}],[\"hincrby\",{\"1\":{\"137\":1}}],[\"hit\",{\"1\":{\"27\":6}}],[\"hitmap\",{\"1\":{\"3\":5}}],[\"history\",{\"1\":{\"27\":3}}],[\"hive调优\",{\"0\":{\"29\":1}}],[\"hive没有键的概念\",{\"1\":{\"28\":1}}],[\"hive索引\",{\"0\":{\"28\":1}}],[\"hiveconf\",{\"1\":{\"27\":5,\"29\":1}}],[\"hive模式设计\",{\"0\":{\"26\":1}}],[\"hive中默认的记录和\",{\"1\":{\"25\":1}}],[\"hive中用户必须能够访问整个底层的原始表的权限\",{\"1\":{\"20\":1}}],[\"hive可以通过对表进行分桶抽样来满足这个需求\",{\"1\":{\"24\":1}}],[\"hive会返回null\",{\"1\":{\"24\":1}}],[\"hive会对每对\",{\"1\":{\"23\":1}}],[\"hive同时假定查询中最后一个表是对打的那个表\",{\"1\":{\"23\":1}}],[\"hive聚合函数\",{\"1\":{\"22\":1}}],[\"hive支持的算数运算符\",{\"1\":{\"22\":1}}],[\"hive将会以追加的方式写入数据而不会覆盖之前已经存在的内容\",{\"1\":{\"22\":1}}],[\"hive数据类型和文件格式\",{\"0\":{\"25\":1}}],[\"hive数据操作\",{\"0\":{\"22\":1,\"23\":1,\"24\":1}}],[\"hive数据定义\",{\"0\":{\"21\":1}}],[\"hive不支持事务\",{\"1\":{\"21\":1}}],[\"hive不支持行级插入操作\",{\"1\":{\"21\":1}}],[\"hive目前不支持的功能\",{\"1\":{\"20\":1}}],[\"hive>set\",{\"1\":{\"23\":1}}],[\"hive>select\",{\"1\":{\"23\":1}}],[\"hive>\",{\"1\":{\"20\":2,\"22\":14,\"23\":4,\"24\":9,\"26\":11,\"27\":22,\"29\":5}}],[\"hive\",{\"1\":{\"20\":3,\"21\":8,\"22\":7,\"23\":17,\"24\":2,\"25\":5,\"26\":2,\"27\":2,\"28\":1,\"29\":2,\"783\":1}}],[\"hiveql视图\",{\"0\":{\"20\":1}}],[\"high\",{\"1\":{\"3\":1,\"22\":3,\"317\":1}}],[\"hs\",{\"1\":{\"3\":4}}],[\"a与线程\",{\"1\":{\"809\":1}}],[\"a君就开吃了\",{\"1\":{\"791\":1}}],[\"a君一直坐在座位上等待厨师炒菜\",{\"1\":{\"791\":1}}],[\"a君喜欢下馆子吃饭\",{\"1\":{\"791\":1}}],[\"aqs内部定义了一个volatile\",{\"1\":{\"723\":1}}],[\"aqs\",{\"1\":{\"723\":1,\"820\":1}}],[\"aqs框架\",{\"1\":{\"723\":1}}],[\"aop\",{\"1\":{\"706\":1}}],[\"aof\",{\"0\":{\"147\":1,\"150\":1,\"152\":2},\"1\":{\"140\":11,\"141\":1,\"146\":13,\"147\":2,\"148\":1,\"149\":2,\"150\":5,\"151\":4,\"152\":8,\"352\":4}}],[\"a必须先得做完\",{\"1\":{\"659\":1}}],[\"a说\",{\"1\":{\"648\":1}}],[\"a和b打电话\",{\"1\":{\"648\":1}}],[\"a和b的账户中共有400+600=1000元\",{\"1\":{\"66\":1}}],[\"a和b的账户中共有500+500=1000元钱\",{\"1\":{\"66\":1}}],[\"a城的发信能力和收信能力都是没问题的\",{\"1\":{\"647\":1}}],[\"a城的发信能力和自己的收信能力是没问题的\",{\"1\":{\"647\":1}}],[\"a城收到了\",{\"1\":{\"647\":1}}],[\"a城发信\",{\"1\":{\"647\":2}}],[\"a对于c是传递性依赖\",{\"1\":{\"594\":1}}],[\"a对于b是第一直接依赖\",{\"1\":{\"594\":1}}],[\"a依赖b\",{\"1\":{\"594\":1}}],[\"a类为255\",{\"1\":{\"526\":2}}],[\"a++\",{\"1\":{\"440\":1}}],[\"ajaxresult\",{\"1\":{\"419\":14}}],[\"a=`\",{\"1\":{\"357\":1,\"362\":1}}],[\"aes\",{\"1\":{\"317\":1}}],[\"aes128\",{\"1\":{\"317\":1}}],[\"a中是user\",{\"1\":{\"297\":1}}],[\"a|grep\",{\"1\":{\"276\":1,\"332\":2}}],[\"aio\",{\"1\":{\"243\":1}}],[\"a3562aa0b991\",{\"1\":{\"230\":1}}],[\"a记录\",{\"1\":{\"222\":1}}],[\"abstractqueue接口\",{\"1\":{\"529\":1}}],[\"abstractqueuedsynchronizer类\",{\"1\":{\"723\":1}}],[\"abstractqueuedsynchronizer\",{\"1\":{\"446\":1}}],[\"abstractsequencer实现了sequencer\",{\"1\":{\"472\":1}}],[\"abstractsequencer\",{\"1\":{\"472\":1}}],[\"abstractlock\",{\"1\":{\"214\":2}}],[\"abortpolicy\",{\"1\":{\"440\":2,\"446\":1,\"754\":1,\"761\":1,\"776\":1}}],[\"abcd\",{\"1\":{\"527\":1}}],[\"abc\",{\"1\":{\"307\":5,\"315\":2,\"527\":1}}],[\"abraham\",{\"1\":{\"155\":1}}],[\"await就不会阻塞当前线程\",{\"1\":{\"551\":1}}],[\"await\",{\"1\":{\"446\":3,\"551\":2,\"552\":1,\"776\":1,\"814\":1,\"930\":1}}],[\"awaittermination\",{\"1\":{\"213\":2,\"214\":2}}],[\"awss3util\",{\"1\":{\"63\":11}}],[\"awsstaticcredentialsprovider\",{\"1\":{\"63\":2}}],[\"awsclientbuilder\",{\"1\":{\"63\":1}}],[\"ahead\",{\"1\":{\"199\":1}}],[\"audit\",{\"1\":{\"888\":1}}],[\"auditevents\",{\"1\":{\"418\":1}}],[\"aud\",{\"1\":{\"845\":2}}],[\"austin\",{\"1\":{\"127\":1}}],[\"authutil\",{\"1\":{\"650\":2}}],[\"authentication\",{\"1\":{\"321\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"auth\",{\"1\":{\"63\":2,\"243\":1,\"317\":2,\"331\":2,\"336\":2,\"344\":2,\"348\":2,\"356\":2,\"361\":2,\"410\":3}}],[\"authority\",{\"1\":{\"522\":1,\"705\":1}}],[\"authorization\",{\"1\":{\"317\":1}}],[\"author\",{\"1\":{\"3\":1,\"446\":1,\"517\":1,\"518\":1,\"533\":1,\"563\":1,\"626\":3,\"709\":1,\"716\":1,\"717\":1,\"721\":1,\"734\":1}}],[\"autorefresh=1\",{\"1\":{\"267\":1}}],[\"autoconfigure\",{\"1\":{\"297\":1}}],[\"autoconf\",{\"1\":{\"243\":1}}],[\"autowired\",{\"1\":{\"213\":2,\"216\":1,\"217\":1,\"218\":2,\"219\":1,\"400\":1,\"410\":2,\"411\":2,\"437\":2,\"439\":2,\"523\":1,\"733\":5,\"779\":1}}],[\"auto\",{\"0\":{\"152\":2},\"1\":{\"23\":1,\"58\":1,\"92\":1,\"146\":2,\"152\":3,\"329\":1,\"342\":1,\"435\":3,\"539\":1,\"564\":4}}],[\"aaa\",{\"1\":{\"544\":1}}],[\"aaaa\",{\"1\":{\"307\":1}}],[\"aaaa和aaaab的索引没有相关性\",{\"1\":{\"102\":1}}],[\"aa\",{\"1\":{\"306\":2,\"315\":3,\"537\":1,\"539\":2}}],[\"aapl\",{\"1\":{\"22\":3,\"23\":11}}],[\"a账户向b账号汇钱\",{\"1\":{\"66\":1}}],[\"affero\",{\"1\":{\"63\":1}}],[\"aftercompletion\",{\"1\":{\"650\":1}}],[\"after=syslog\",{\"1\":{\"353\":1}}],[\"after\",{\"1\":{\"21\":1,\"451\":1}}],[\"axis=0\",{\"1\":{\"59\":1}}],[\"any\",{\"1\":{\"717\":1,\"834\":1,\"887\":6}}],[\"analyze\",{\"1\":{\"597\":1}}],[\"another\",{\"1\":{\"527\":2,\"824\":1}}],[\"anp|grep\",{\"1\":{\"357\":2}}],[\"anull\",{\"1\":{\"317\":1}}],[\"an\",{\"1\":{\"217\":1}}],[\"annotations\",{\"1\":{\"263\":1,\"419\":2}}],[\"annotation\",{\"1\":{\"213\":1,\"218\":1,\"408\":1,\"427\":1,\"437\":1,\"438\":2,\"439\":2,\"716\":3,\"733\":6,\"779\":2}}],[\"annoy是基于树的索引\",{\"1\":{\"52\":1}}],[\"annoy\",{\"1\":{\"52\":1}}],[\"anns\",{\"1\":{\"52\":1,\"62\":1}}],[\"and\",{\"1\":{\"21\":2,\"22\":5,\"23\":4,\"26\":2,\"28\":1,\"194\":1,\"243\":1,\"493\":1,\"526\":2,\"673\":2,\"732\":1,\"789\":6,\"820\":1,\"823\":1,\"824\":1,\"883\":1,\"897\":1}}],[\"attemps\",{\"1\":{\"883\":2}}],[\"attachnotsupportedexception\",{\"1\":{\"712\":1}}],[\"attach\",{\"1\":{\"712\":3}}],[\"attacks\",{\"1\":{\"897\":1}}],[\"attack\",{\"1\":{\"64\":1}}],[\"atomicreferencefieldupdater是一个基于反射的工具类\",{\"1\":{\"929\":1}}],[\"atomicreferencefieldupdater\",{\"1\":{\"929\":1}}],[\"atomicreferencefieldupdater<clhlock\",{\"1\":{\"929\":1}}],[\"atomicreference<>\",{\"1\":{\"814\":1}}],[\"atomicreference<thread>\",{\"1\":{\"814\":1}}],[\"atomic\",{\"1\":{\"440\":1,\"444\":1}}],[\"atomiclong\",{\"1\":{\"221\":1}}],[\"atomicinteger的原理就是这\",{\"1\":{\"443\":1}}],[\"atomicinteger使用了incrementandget函数\",{\"1\":{\"441\":1}}],[\"atomicinteger作用是保证原子性\",{\"1\":{\"440\":1}}],[\"atomicinteger属于juc并发包下的原子类\",{\"1\":{\"440\":1}}],[\"atomicinteger\",{\"0\":{\"440\":1},\"1\":{\"214\":1,\"440\":4,\"441\":1,\"443\":1,\"444\":4}}],[\"atomicity\",{\"1\":{\"65\":1,\"105\":1}}],[\"aton\",{\"1\":{\"82\":1}}],[\"at\",{\"0\":{\"421\":1},\"1\":{\"28\":1,\"192\":1,\"420\":1,\"626\":8}}],[\"avro\",{\"1\":{\"610\":1}}],[\"avoidscan注解修饰的策略设为全局默认策略\",{\"1\":{\"408\":1}}],[\"avoidscan\",{\"1\":{\"408\":2}}],[\"avoidscan避免该配置类成为全局的负载均衡策略\",{\"1\":{\"408\":1}}],[\"availableprocessors\",{\"1\":{\"769\":1}}],[\"availablepermits\",{\"1\":{\"554\":1}}],[\"availableseq\",{\"1\":{\"452\":1}}],[\"available\",{\"1\":{\"276\":1,\"278\":1}}],[\"availability\",{\"0\":{\"194\":1},\"1\":{\"191\":1}}],[\"average\",{\"1\":{\"32\":2}}],[\"ave\",{\"1\":{\"22\":4}}],[\"avgscore<int><out>\",{\"1\":{\"32\":1}}],[\"avgscore\",{\"1\":{\"32\":3}}],[\"avg\",{\"1\":{\"22\":9}}],[\"ago\",{\"1\":{\"230\":2}}],[\"aggregate\",{\"1\":{\"138\":2}}],[\"aggr=true\",{\"1\":{\"22\":1}}],[\"agg\",{\"1\":{\"63\":1}}],[\"aggpage\",{\"1\":{\"63\":1}}],[\"age=0\",{\"1\":{\"479\":1,\"480\":1}}],[\"agentbuilder\",{\"1\":{\"717\":5}}],[\"agent<\",{\"1\":{\"715\":2}}],[\"agentinitializationexception\",{\"1\":{\"712\":1}}],[\"agentloadexception\",{\"1\":{\"712\":1}}],[\"agentargs\",{\"1\":{\"709\":3,\"711\":1,\"717\":3,\"721\":2}}],[\"agentmain\",{\"1\":{\"709\":1,\"710\":1,\"712\":1}}],[\"agenttest\",{\"1\":{\"708\":1,\"709\":1}}],[\"agenttest<\",{\"1\":{\"707\":1}}],[\"agents进行匹配\",{\"1\":{\"317\":1}}],[\"agent\",{\"1\":{\"315\":1,\"477\":1,\"479\":1,\"480\":1,\"706\":3,\"709\":3,\"710\":2,\"711\":1,\"712\":4,\"715\":1,\"717\":3,\"718\":1,\"719\":2,\"721\":1}}],[\"age\",{\"1\":{\"3\":2,\"13\":4,\"103\":2,\"276\":2,\"278\":2,\"295\":1,\"734\":7}}],[\"ak\",{\"1\":{\"21\":1}}],[\"adaptability\",{\"1\":{\"898\":1}}],[\"advert\",{\"1\":{\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"advertise\",{\"1\":{\"293\":1}}],[\"adh\",{\"1\":{\"317\":1}}],[\"admin\",{\"1\":{\"293\":1,\"495\":1}}],[\"adlist\",{\"1\":{\"119\":2}}],[\"adress\",{\"1\":{\"21\":1,\"22\":1,\"25\":1}}],[\"addnode\",{\"1\":{\"734\":4}}],[\"addlast\",{\"1\":{\"612\":1}}],[\"addlistener\",{\"1\":{\"297\":1}}],[\"add方法添加元素时\",{\"1\":{\"533\":1}}],[\"added\",{\"1\":{\"495\":1}}],[\"addandget\",{\"1\":{\"444\":1}}],[\"addcallback\",{\"1\":{\"437\":1}}],[\"addr=nacos\",{\"1\":{\"401\":1}}],[\"addr\",{\"1\":{\"297\":2,\"315\":1,\"317\":3,\"392\":1,\"396\":1,\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"415\":1,\"416\":1}}],[\"address=192\",{\"1\":{\"293\":1}}],[\"address\",{\"1\":{\"13\":4,\"22\":6,\"28\":1,\"63\":1,\"222\":1}}],[\"addition\",{\"1\":{\"243\":1}}],[\"addinputformat\",{\"1\":{\"652\":1}}],[\"addinputpath\",{\"1\":{\"32\":1,\"652\":1}}],[\"addinnerinterceptor\",{\"1\":{\"64\":3}}],[\"add\",{\"1\":{\"3\":2,\"21\":2,\"26\":3,\"27\":1,\"32\":1,\"63\":4,\"226\":1,\"230\":1,\"243\":1,\"263\":1,\"317\":2,\"380\":1,\"445\":1,\"488\":1,\"497\":3,\"499\":1,\"502\":2,\"503\":2,\"518\":1,\"527\":4,\"531\":3,\"532\":3,\"533\":3,\"544\":3,\"548\":3,\"549\":3,\"734\":4,\"735\":4,\"839\":1,\"869\":1,\"894\":2}}],[\"already\",{\"1\":{\"389\":1}}],[\"alive\",{\"1\":{\"317\":2,\"477\":2,\"479\":1,\"480\":1}}],[\"alias\",{\"0\":{\"317\":1},\"1\":{\"317\":3}}],[\"alibaba的0\",{\"1\":{\"414\":1}}],[\"alibaba依赖管理\",{\"1\":{\"414\":1}}],[\"alibaba整合nacos服务注册发现\",{\"0\":{\"390\":1}}],[\"alibaba\",{\"1\":{\"297\":14,\"391\":1,\"395\":1,\"401\":2,\"404\":2,\"408\":2,\"409\":2,\"411\":2,\"414\":5,\"415\":2,\"416\":1,\"425\":3,\"650\":1}}],[\"aliyuncs\",{\"1\":{\"236\":1,\"263\":6,\"290\":1,\"293\":1}}],[\"aliyun\",{\"1\":{\"226\":1,\"290\":1,\"291\":3}}],[\"alawys表示下载镜像\",{\"1\":{\"263\":1}}],[\"alpine\",{\"1\":{\"230\":2}}],[\"alpha\",{\"1\":{\"139\":1}}],[\"algorithm\",{\"1\":{\"208\":1}}],[\"all<\",{\"1\":{\"611\":1}}],[\"allof\",{\"1\":{\"475\":1}}],[\"allow\",{\"1\":{\"404\":1,\"823\":1}}],[\"allowed\",{\"1\":{\"74\":2}}],[\"allbackup\",{\"1\":{\"342\":2}}],[\"all\",{\"1\":{\"24\":1,\"26\":1,\"82\":1,\"113\":1,\"192\":1,\"320\":1,\"322\":1,\"326\":2,\"327\":1,\"339\":1,\"342\":1,\"435\":2,\"503\":1,\"894\":1}}],[\"always表示一旦不管以何种方式终止运行\",{\"1\":{\"263\":1}}],[\"always\",{\"1\":{\"21\":1,\"148\":1,\"194\":1,\"263\":2,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1}}],[\"alter\",{\"1\":{\"21\":9,\"26\":3,\"27\":1,\"28\":2,\"78\":1,\"322\":1,\"843\":4,\"865\":1,\"867\":1,\"869\":9,\"871\":3,\"875\":1,\"879\":2,\"880\":1,\"881\":1,\"883\":3,\"887\":1}}],[\"async\",{\"1\":{\"779\":1}}],[\"async注解\",{\"1\":{\"778\":1}}],[\"async异步注解使用方法\",{\"1\":{\"777\":1}}],[\"asynchandlerinterceptor\",{\"1\":{\"650\":1}}],[\"asia\",{\"1\":{\"527\":1}}],[\"asia$request\",{\"1\":{\"317\":2}}],[\"aslist\",{\"1\":{\"527\":4}}],[\"assert\",{\"1\":{\"823\":1}}],[\"assembly\",{\"1\":{\"709\":1}}],[\"assignabletypes\",{\"1\":{\"419\":2}}],[\"associated\",{\"1\":{\"217\":1}}],[\"ascii\",{\"1\":{\"613\":1,\"623\":1}}],[\"asc\",{\"1\":{\"139\":1}}],[\"asc|desc\",{\"1\":{\"139\":1}}],[\"as\",{\"1\":{\"20\":3,\"22\":6,\"24\":2,\"25\":1,\"27\":2,\"28\":2,\"59\":2,\"61\":1,\"73\":1}}],[\"acquiring\",{\"1\":{\"824\":2}}],[\"acquired\",{\"1\":{\"824\":1}}],[\"acquires\",{\"1\":{\"446\":1,\"820\":4}}],[\"acquire\",{\"1\":{\"214\":3,\"554\":2,\"820\":1}}],[\"account\",{\"1\":{\"650\":2,\"727\":1,\"879\":2}}],[\"account邮件\",{\"1\":{\"495\":1}}],[\"acceptcount指定当所有可以使用的处理请求的线程数都被使用时\",{\"1\":{\"651\":1}}],[\"acceptor接收客户端发来的请求\",{\"1\":{\"433\":1}}],[\"accept\",{\"1\":{\"317\":1,\"475\":1,\"477\":6,\"479\":3,\"480\":3}}],[\"accessdeniedexception\",{\"1\":{\"419\":2}}],[\"accesskey\",{\"1\":{\"63\":2}}],[\"access\",{\"1\":{\"63\":1,\"317\":1,\"834\":1}}],[\"actuator\",{\"1\":{\"412\":1,\"414\":2,\"418\":4}}],[\"actuator端口\",{\"1\":{\"412\":1,\"414\":1}}],[\"actuator组件\",{\"1\":{\"412\":1}}],[\"actuator<\",{\"1\":{\"404\":1,\"412\":1}}],[\"active=prod\",{\"1\":{\"389\":1}}],[\"active=dev\",{\"1\":{\"384\":1}}],[\"active\",{\"1\":{\"384\":2,\"385\":1,\"410\":1,\"417\":3,\"433\":1,\"805\":2,\"845\":6,\"864\":1}}],[\"action=\",{\"1\":{\"27\":4}}],[\"action\",{\"1\":{\"3\":2,\"613\":1}}],[\"acid\",{\"1\":{\"93\":1,\"105\":1,\"421\":1}}],[\"ack标志位为1\",{\"1\":{\"648\":1}}],[\"acknum=w+1\",{\"1\":{\"649\":1}}],[\"acknum=y+1\",{\"1\":{\"648\":1}}],[\"acknum=x+1\",{\"1\":{\"648\":1,\"649\":1}}],[\"acknowledgment\",{\"1\":{\"438\":2}}],[\"acknowledgement\",{\"1\":{\"648\":1}}],[\"acknowledge\",{\"1\":{\"14\":1,\"438\":1}}],[\"ack=1\",{\"1\":{\"648\":2,\"649\":2}}],[\"acks\",{\"1\":{\"435\":1}}],[\"ack\",{\"1\":{\"14\":1,\"435\":1,\"438\":2,\"644\":1,\"648\":2,\"649\":1}}],[\"apwithoutc示例说明\",{\"0\":{\"202\":1,\"203\":1}}],[\"ap\",{\"0\":{\"201\":1,\"891\":1},\"1\":{\"890\":2,\"891\":1,\"894\":1}}],[\"appointribbonmetric\",{\"1\":{\"404\":1,\"408\":2}}],[\"appname=app\",{\"1\":{\"389\":1}}],[\"apps\",{\"1\":{\"263\":1,\"275\":1,\"276\":2}}],[\"applied\",{\"1\":{\"893\":9}}],[\"applicationcontextaware\",{\"1\":{\"381\":2}}],[\"applicationcontext\",{\"1\":{\"297\":3,\"381\":3}}],[\"applications\",{\"1\":{\"59\":2,\"654\":1}}],[\"application\",{\"0\":{\"426\":1,\"655\":1},\"1\":{\"21\":1,\"297\":1,\"317\":7,\"385\":2,\"392\":1,\"396\":1,\"404\":1,\"408\":2,\"409\":2,\"411\":1,\"414\":1,\"415\":1,\"416\":2,\"417\":1,\"418\":1,\"435\":1,\"477\":2,\"479\":3,\"480\":2,\"653\":1,\"655\":1,\"657\":1,\"748\":3,\"749\":1}}],[\"applewebkit\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"appleby\",{\"1\":{\"127\":1}}],[\"applyasint\",{\"1\":{\"444\":2}}],[\"apply\",{\"1\":{\"295\":1,\"870\":1}}],[\"appendfsync\",{\"0\":{\"148\":1,\"149\":1},\"1\":{\"146\":2}}],[\"appendfilename\",{\"1\":{\"146\":1}}],[\"appendonly\",{\"1\":{\"146\":2,\"352\":1}}],[\"append\",{\"1\":{\"61\":5,\"62\":2,\"140\":1,\"620\":1}}],[\"appendtofile\",{\"1\":{\"10\":1}}],[\"app\",{\"1\":{\"21\":1,\"230\":2,\"263\":3,\"275\":3,\"277\":1,\"389\":2,\"414\":2,\"500\":1,\"503\":2}}],[\"api提供的io复用方式\",{\"1\":{\"795\":1}}],[\"api中\",{\"1\":{\"475\":1}}],[\"apiversion\",{\"1\":{\"263\":2,\"275\":2}}],[\"apimodelproperty\",{\"1\":{\"64\":4}}],[\"apiserver\",{\"1\":{\"293\":1}}],[\"apis\",{\"1\":{\"58\":1}}],[\"api\",{\"0\":{\"120\":1},\"1\":{\"13\":1,\"63\":2,\"118\":1,\"120\":2,\"229\":2,\"230\":1,\"297\":5,\"413\":1,\"618\":1,\"619\":4,\"621\":3,\"622\":2,\"623\":2,\"624\":2,\"712\":3}}],[\"apache的\",{\"1\":{\"626\":1}}],[\"apache\",{\"1\":{\"3\":1,\"23\":1,\"28\":1,\"32\":10,\"63\":1,\"389\":4,\"435\":4,\"438\":1,\"478\":1,\"516\":2,\"518\":10,\"546\":1,\"547\":1,\"548\":2,\"564\":6,\"652\":12,\"707\":2,\"715\":6,\"779\":1}}],[\"a\",{\"0\":{\"38\":1,\"39\":1,\"45\":1,\"197\":1,\"499\":1,\"689\":1,\"697\":1},\"1\":{\"7\":2,\"9\":1,\"10\":1,\"11\":1,\"13\":2,\"14\":2,\"16\":1,\"19\":1,\"20\":3,\"23\":6,\"72\":1,\"73\":5,\"104\":3,\"196\":1,\"217\":1,\"222\":1,\"288\":1,\"297\":1,\"334\":1,\"341\":1,\"342\":1,\"347\":1,\"351\":2,\"359\":1,\"366\":1,\"367\":1,\"401\":1,\"440\":5,\"445\":8,\"495\":1,\"497\":1,\"501\":1,\"507\":1,\"527\":5,\"531\":2,\"549\":3,\"576\":1,\"626\":1,\"627\":1,\"653\":1,\"673\":1,\"679\":2,\"680\":1,\"682\":1,\"683\":1,\"712\":1,\"783\":1,\"785\":1,\"788\":1,\"789\":1,\"809\":3,\"827\":1,\"828\":1,\"874\":1,\"877\":3,\"883\":5,\"893\":1,\"894\":5}}],[\"amd64\",{\"1\":{\"229\":2,\"295\":1}}],[\"amount\",{\"1\":{\"134\":4,\"728\":3}}],[\"amazons3clientbuilder\",{\"1\":{\"63\":2}}],[\"amazons3\",{\"1\":{\"63\":2}}],[\"amazons3客户端\",{\"1\":{\"63\":1}}],[\"amazonaws\",{\"1\":{\"63\":7}}],[\"amazonaws<\",{\"1\":{\"63\":1}}],[\"amazon\",{\"1\":{\"63\":1}}],[\"am\",{\"1\":{\"7\":2,\"653\":1,\"654\":1}}],[\"are\",{\"1\":{\"823\":1}}],[\"arr\",{\"1\":{\"722\":1}}],[\"arrayblockingqueuedemo\",{\"1\":{\"531\":1}}],[\"arrayblockingqueue是以先进先出的方式存储数据\",{\"1\":{\"531\":1}}],[\"arrayblockingqueue是一个有边界的阻塞队列\",{\"1\":{\"531\":1}}],[\"arrayblockingqueue\",{\"0\":{\"531\":1},\"1\":{\"530\":1,\"531\":2,\"759\":1}}],[\"arrays\",{\"1\":{\"527\":6,\"734\":1}}],[\"arraylist<namevaluepair>\",{\"1\":{\"518\":1}}],[\"arraylist<string>\",{\"1\":{\"32\":1,\"544\":1}}],[\"arraylist<>\",{\"1\":{\"3\":1,\"63\":4,\"527\":1,\"548\":1,\"735\":1}}],[\"arraylist\",{\"1\":{\"32\":1,\"63\":2,\"527\":1}}],[\"array<string>\",{\"1\":{\"21\":1,\"25\":1,\"28\":1}}],[\"array\",{\"1\":{\"20\":1,\"25\":1,\"59\":1,\"531\":5}}],[\"argline>\",{\"1\":{\"707\":1,\"715\":1}}],[\"arguments中输入\",{\"1\":{\"651\":1}}],[\"arguments中的vm\",{\"1\":{\"651\":1}}],[\"args\",{\"1\":{\"3\":2,\"32\":1,\"63\":1,\"263\":1,\"275\":1,\"297\":3,\"393\":2,\"397\":2,\"408\":2,\"409\":2,\"415\":2,\"416\":2,\"440\":2,\"445\":2,\"446\":1,\"475\":6,\"523\":1,\"530\":1,\"531\":1,\"532\":1,\"533\":1,\"537\":2,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"549\":1,\"554\":1,\"563\":1,\"564\":2,\"612\":3,\"626\":1,\"650\":1,\"652\":2,\"703\":2,\"707\":1,\"712\":2,\"715\":1,\"733\":1,\"734\":2,\"735\":1,\"814\":1,\"930\":1}}],[\"arithmeticexception\",{\"1\":{\"445\":2}}],[\"archetype\",{\"1\":{\"566\":3}}],[\"arch\",{\"1\":{\"229\":2,\"869\":8,\"870\":9,\"893\":4}}],[\"archivedir\",{\"1\":{\"893\":4}}],[\"archivelog\",{\"1\":{\"869\":4,\"871\":1,\"872\":4,\"894\":1}}],[\"archive\",{\"1\":{\"90\":1,\"870\":2,\"871\":1}}],[\"archives\",{\"1\":{\"67\":1}}],[\"arthas\",{\"1\":{\"706\":1}}],[\"art\",{\"1\":{\"222\":1}}],[\"artifact\",{\"1\":{\"401\":1,\"415\":1,\"566\":1,\"569\":1}}],[\"artifacts\",{\"1\":{\"267\":2}}],[\"artifactid定义到项目其中的一个模块\",{\"0\":{\"588\":1}}],[\"artifactid定义了当前maven项目在组中唯一的id\",{\"1\":{\"578\":1}}],[\"artifactid和version三行\",{\"1\":{\"578\":1}}],[\"artifactid\",{\"1\":{\"230\":1,\"389\":1,\"586\":1}}],[\"artifactid>\",{\"1\":{\"3\":3,\"63\":4,\"230\":1,\"297\":4,\"389\":6,\"391\":1,\"395\":4,\"401\":1,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1,\"434\":2,\"516\":1,\"611\":1,\"707\":1,\"712\":1,\"715\":7}}],[\"articles\",{\"1\":{\"662\":1}}],[\"article\",{\"1\":{\"63\":2,\"82\":1,\"132\":2,\"211\":1,\"427\":1,\"576\":1,\"626\":1,\"631\":1,\"650\":1,\"664\":1,\"683\":1,\"789\":1,\"818\":1,\"825\":4,\"924\":1}}],[\"arbitrary\",{\"1\":{\"195\":1}}],[\"c1\",{\"1\":{\"893\":1}}],[\"cmt\",{\"1\":{\"845\":4}}],[\"cmd\",{\"1\":{\"839\":3}}],[\"cmd等等信息\",{\"0\":{\"259\":1}}],[\"c7d17b5c6be3\",{\"1\":{\"674\":1}}],[\"ctrl+c\",{\"1\":{\"845\":1}}],[\"ctl\",{\"1\":{\"837\":1,\"843\":1}}],[\"ctx\",{\"1\":{\"613\":9}}],[\"cty\",{\"1\":{\"22\":1}}],[\"cf\",{\"1\":{\"612\":2}}],[\"cfit\",{\"1\":{\"366\":1,\"367\":6}}],[\"c类为255\",{\"1\":{\"526\":2}}],[\"custom\",{\"1\":{\"518\":4}}],[\"cur\",{\"1\":{\"892\":1,\"893\":4}}],[\"cursored接口只有一个方法\",{\"1\":{\"472\":1}}],[\"cursored\",{\"1\":{\"472\":1}}],[\"cursor\",{\"1\":{\"452\":1}}],[\"currency\",{\"1\":{\"445\":3}}],[\"currentzone\",{\"1\":{\"527\":2}}],[\"currenttime\",{\"1\":{\"527\":7}}],[\"currenttimemillis\",{\"1\":{\"214\":2,\"388\":1,\"716\":2}}],[\"currentthread\",{\"1\":{\"214\":10,\"217\":2,\"475\":3,\"552\":2,\"554\":3,\"650\":2,\"703\":4,\"767\":1,\"777\":2,\"814\":6,\"820\":1,\"822\":1,\"823\":1,\"929\":1}}],[\"currentvalue\",{\"1\":{\"213\":3}}],[\"current\",{\"1\":{\"21\":2,\"217\":6,\"265\":1,\"276\":1,\"278\":1,\"505\":1,\"820\":3,\"822\":6,\"823\":3,\"871\":2}}],[\"curatorframeworkstate\",{\"1\":{\"214\":1}}],[\"curatorframeworkfactory\",{\"1\":{\"214\":1}}],[\"curatorframework\",{\"1\":{\"214\":1}}],[\"cyclicbarrier默认构造放时cyclicbarrier\",{\"1\":{\"552\":1}}],[\"cyclicbarrier\",{\"0\":{\"552\":1},\"1\":{\"446\":1,\"550\":1,\"552\":4,\"553\":1}}],[\"cyclicbarrier的计数器可以被重置后使用\",{\"1\":{\"446\":1}}],[\"ccc\",{\"1\":{\"544\":1}}],[\"ccff7f62596ebe95207ec22d3d32fa9183a0200d7cfc50b6a10cfa1626593a2e\",{\"1\":{\"294\":1}}],[\"cc\",{\"1\":{\"285\":1,\"541\":2,\"542\":1}}],[\"cctld\",{\"1\":{\"222\":2}}],[\"cctld和new\",{\"1\":{\"222\":1}}],[\"certificate\",{\"1\":{\"317\":2,\"522\":1,\"705\":2}}],[\"cert\",{\"1\":{\"294\":1}}],[\"centos6\",{\"1\":{\"844\":1}}],[\"centos7\",{\"1\":{\"287\":1}}],[\"centos镜像启动容器\",{\"0\":{\"241\":1}}],[\"centos\",{\"0\":{\"239\":1},\"1\":{\"226\":1,\"227\":2,\"239\":1,\"241\":1,\"243\":1,\"244\":1,\"247\":1,\"255\":2,\"256\":3,\"257\":1,\"290\":1}}],[\"ce\",{\"0\":{\"228\":1},\"1\":{\"226\":2,\"228\":2,\"290\":6}}],[\"c++\",{\"1\":{\"214\":1,\"224\":1,\"243\":1}}],[\"c必须保证\",{\"1\":{\"203\":1}}],[\"crash\",{\"1\":{\"845\":10}}],[\"critical\",{\"1\":{\"673\":1}}],[\"crt\",{\"1\":{\"317\":1}}],[\"crc32\",{\"1\":{\"161\":1}}],[\"crc64\",{\"1\":{\"141\":1}}],[\"credible\",{\"1\":{\"712\":1,\"719\":1}}],[\"credits\",{\"1\":{\"27\":2}}],[\"credentials\",{\"1\":{\"63\":1}}],[\"creationtimestamp\",{\"1\":{\"263\":2}}],[\"creators\",{\"1\":{\"73\":1}}],[\"creator\",{\"1\":{\"28\":1}}],[\"createnewfile\",{\"1\":{\"537\":1}}],[\"createconfigservice\",{\"1\":{\"297\":1}}],[\"createmap\",{\"1\":{\"217\":1}}],[\"createtime\",{\"1\":{\"64\":2,\"665\":1}}],[\"createby\",{\"0\":{\"64\":1},\"1\":{\"64\":3}}],[\"createbucket\",{\"1\":{\"63\":2}}],[\"createdefault\",{\"1\":{\"518\":4}}],[\"created\",{\"1\":{\"28\":1,\"230\":1,\"276\":2,\"834\":1,\"836\":1,\"838\":2}}],[\"create\",{\"1\":{\"13\":1,\"20\":4,\"21\":4,\"22\":1,\"25\":2,\"26\":5,\"27\":5,\"28\":2,\"58\":1,\"60\":1,\"61\":3,\"62\":1,\"64\":2,\"73\":1,\"89\":1,\"92\":1,\"104\":1,\"213\":6,\"261\":1,\"263\":3,\"276\":1,\"294\":1,\"296\":1,\"322\":1,\"399\":1,\"404\":1,\"527\":3,\"566\":1,\"837\":1,\"866\":2,\"874\":1,\"876\":1,\"878\":1,\"883\":1,\"884\":1,\"887\":3,\"888\":2}}],[\"cst\",{\"1\":{\"834\":2}}],[\"cs可信计算技术委员会\",{\"1\":{\"684\":1}}],[\"css\",{\"1\":{\"222\":1,\"317\":3,\"748\":1}}],[\"csv\",{\"1\":{\"90\":1}}],[\"csdn博客\",{\"1\":{\"526\":2}}],[\"csdn\",{\"1\":{\"63\":2,\"82\":1,\"132\":2,\"211\":1,\"427\":1,\"576\":1,\"626\":1,\"631\":1,\"650\":1,\"664\":1,\"683\":1,\"789\":1,\"818\":1,\"825\":4,\"924\":1}}],[\"cd\",{\"1\":{\"77\":1,\"186\":1,\"243\":1,\"319\":1,\"321\":1,\"326\":1,\"327\":1,\"342\":2,\"343\":1,\"352\":1,\"355\":2,\"366\":1,\"372\":1,\"376\":1,\"379\":1,\"833\":1,\"834\":2,\"836\":1,\"838\":1,\"840\":1,\"841\":1,\"845\":1}}],[\"circuitbreaker\",{\"1\":{\"402\":5}}],[\"ciphers\",{\"1\":{\"317\":2}}],[\"cidr=10\",{\"1\":{\"293\":2}}],[\"ci\",{\"1\":{\"74\":1,\"321\":1}}],[\"ci是不区分大小写\",{\"1\":{\"73\":1}}],[\"city\",{\"1\":{\"20\":2,\"21\":1,\"22\":1,\"25\":1,\"27\":8,\"28\":1}}],[\"cv\",{\"1\":{\"53\":1}}],[\"cname\",{\"1\":{\"222\":1}}],[\"cn域名\",{\"1\":{\"222\":1}}],[\"cnblogs\",{\"1\":{\"211\":1,\"221\":1,\"458\":1,\"674\":1,\"741\":1,\"816\":1}}],[\"cnf配置\",{\"0\":{\"79\":1}}],[\"cnf\",{\"0\":{\"323\":1},\"1\":{\"74\":2,\"79\":1,\"321\":1,\"323\":1,\"325\":1}}],[\"cnt\",{\"1\":{\"61\":3}}],[\"cn\",{\"1\":{\"32\":1,\"63\":2,\"75\":2,\"222\":1,\"236\":1,\"263\":6,\"265\":1,\"272\":1,\"293\":1,\"419\":3,\"420\":1,\"427\":1,\"440\":2,\"475\":1,\"477\":1,\"479\":1,\"480\":1,\"485\":1,\"497\":1,\"517\":1,\"518\":2,\"523\":7,\"613\":1,\"650\":1,\"708\":1,\"716\":1,\"717\":4,\"718\":1,\"721\":1,\"722\":1,\"733\":7,\"842\":1}}],[\"cpwithouta示例说明\",{\"0\":{\"198\":1,\"200\":1}}],[\"cppcns\",{\"1\":{\"132\":1}}],[\"cpu占用率过高\",{\"1\":{\"927\":1}}],[\"cpu密集型可以配置可能小的线程\",{\"1\":{\"769\":1}}],[\"cpu存取缓存都是按照一行\",{\"1\":{\"662\":1}}],[\"cpu市场正以前所未有的速度向前发展\",{\"1\":{\"662\":1}}],[\"cpu请求\",{\"1\":{\"263\":1}}],[\"cpu的限制\",{\"1\":{\"263\":1}}],[\"cpu子系统\",{\"1\":{\"250\":1}}],[\"cpu多核处理能力设置\",{\"1\":{\"74\":1}}],[\"cpu\",{\"1\":{\"52\":1,\"263\":3,\"275\":2,\"418\":1,\"475\":1,\"689\":2}}],[\"cp\",{\"0\":{\"197\":1},\"1\":{\"22\":1,\"243\":2,\"282\":1,\"293\":1,\"321\":1,\"352\":1,\"367\":1,\"576\":1}}],[\"can\",{\"1\":{\"612\":1,\"708\":1,\"718\":1,\"834\":1}}],[\"cancel\",{\"1\":{\"475\":1}}],[\"cause\",{\"1\":{\"399\":2,\"613\":3}}],[\"cap的c变成最终一致性\",{\"1\":{\"203\":1}}],[\"cap三者中\",{\"1\":{\"196\":1}}],[\"cap理论\",{\"1\":{\"196\":1}}],[\"cap理论正式成为分布式计算领域的公认理论\",{\"1\":{\"190\":1}}],[\"cap之父在\",{\"1\":{\"196\":1}}],[\"cap中说\",{\"1\":{\"193\":1}}],[\"cap原理概述\",{\"0\":{\"191\":1}}],[\"captured\",{\"1\":{\"21\":1}}],[\"cachevalid\",{\"1\":{\"824\":3}}],[\"cachedholdcounter\",{\"1\":{\"822\":2,\"823\":1}}],[\"cachedthreadpool\",{\"0\":{\"773\":1}}],[\"cached\",{\"1\":{\"502\":1}}],[\"cacherequestfilter\",{\"1\":{\"410\":1}}],[\"cache\",{\"1\":{\"74\":4,\"317\":6,\"479\":1,\"480\":1,\"663\":4}}],[\"callerrunspolicy\",{\"1\":{\"761\":1,\"779\":1}}],[\"callable<\",{\"1\":{\"716\":1}}],[\"callable<string>\",{\"1\":{\"475\":2}}],[\"callable方法引入的一些问题\",{\"1\":{\"475\":1}}],[\"callable\",{\"1\":{\"474\":1,\"475\":1,\"716\":3}}],[\"call\",{\"1\":{\"288\":2,\"475\":1,\"564\":1,\"716\":1}}],[\"calendar\",{\"1\":{\"63\":5}}],[\"california\",{\"1\":{\"22\":1}}],[\"car\",{\"1\":{\"527\":16}}],[\"cars\",{\"1\":{\"27\":2,\"527\":4}}],[\"cart\",{\"1\":{\"20\":4}}],[\"cas\",{\"1\":{\"444\":1}}],[\"cas算法是乐观锁的一种\",{\"1\":{\"443\":1}}],[\"cas操作包含三个操作数\",{\"1\":{\"442\":1}}],[\"cast\",{\"1\":{\"24\":4,\"25\":1,\"650\":1}}],[\"case\",{\"1\":{\"22\":1,\"74\":1,\"82\":1,\"321\":1,\"389\":1,\"789\":2,\"837\":1}}],[\"cascade\",{\"1\":{\"21\":1,\"882\":1,\"888\":2}}],[\"ca\",{\"0\":{\"196\":1},\"1\":{\"22\":7,\"294\":1,\"522\":1}}],[\"catalina\",{\"1\":{\"651\":3}}],[\"cat\",{\"1\":{\"9\":3,\"27\":2,\"62\":1,\"78\":1,\"275\":1,\"277\":1,\"280\":1,\"288\":2,\"290\":1,\"291\":1,\"321\":1,\"842\":1,\"870\":2}}],[\"catch\",{\"1\":{\"3\":5,\"63\":2,\"213\":5,\"214\":9,\"218\":1,\"297\":4,\"410\":1,\"411\":1,\"413\":7,\"440\":2,\"446\":1,\"475\":4,\"531\":1,\"533\":1,\"537\":1,\"539\":4,\"541\":2,\"542\":2,\"544\":2,\"545\":2,\"548\":2,\"552\":3,\"554\":1,\"564\":1,\"626\":1,\"650\":2,\"733\":2,\"765\":2,\"776\":2,\"777\":1}}],[\"ch+\",{\"1\":{\"539\":1}}],[\"ch=\",{\"1\":{\"539\":1}}],[\"chrome\",{\"1\":{\"477\":1,\"479\":1,\"480\":1,\"486\":1}}],[\"chkconfig\",{\"1\":{\"380\":2}}],[\"chk\",{\"1\":{\"356\":3,\"357\":1,\"358\":1,\"361\":3,\"362\":1,\"363\":1}}],[\"checkpoint\",{\"1\":{\"712\":2,\"719\":2}}],[\"checkparam\",{\"1\":{\"413\":1}}],[\"checkout\",{\"1\":{\"500\":4}}],[\"checkoout\",{\"1\":{\"493\":1}}],[\"checked\",{\"1\":{\"413\":1}}],[\"check\",{\"1\":{\"331\":3,\"332\":1,\"333\":1,\"336\":3,\"337\":1,\"338\":1,\"344\":3,\"345\":1,\"346\":1,\"348\":3,\"349\":1,\"350\":1,\"893\":2,\"894\":1}}],[\"chmod\",{\"1\":{\"321\":3,\"333\":1,\"334\":1,\"338\":1,\"340\":1,\"341\":1,\"346\":1,\"347\":1,\"350\":1,\"351\":1,\"352\":2,\"358\":1,\"359\":1,\"363\":1,\"365\":1,\"366\":1,\"834\":1}}],[\"chown\",{\"1\":{\"293\":1,\"321\":3,\"832\":1,\"834\":1}}],[\"childhandler\",{\"1\":{\"612\":1}}],[\"childoption\",{\"1\":{\"612\":1}}],[\"chicago|ontario\",{\"1\":{\"22\":1}}],[\"chicago\",{\"1\":{\"22\":2}}],[\"chinese\",{\"1\":{\"13\":4}}],[\"chains如果频繁出现\",{\"1\":{\"921\":1}}],[\"channelhandlercontext\",{\"1\":{\"613\":4}}],[\"channelread0\",{\"1\":{\"613\":1}}],[\"channelread\",{\"1\":{\"613\":5}}],[\"channeloption\",{\"1\":{\"612\":3}}],[\"channelinitializer<socketchannel>\",{\"1\":{\"612\":1}}],[\"channelinitializer\",{\"1\":{\"612\":1}}],[\"channelfuture\",{\"1\":{\"612\":2}}],[\"channel\",{\"1\":{\"612\":11,\"613\":2}}],[\"channel等\",{\"1\":{\"527\":1}}],[\"changed\",{\"1\":{\"824\":1}}],[\"change\",{\"1\":{\"21\":1,\"80\":1,\"243\":1,\"329\":2,\"342\":2}}],[\"char类型\",{\"1\":{\"549\":1}}],[\"charsetutil\",{\"1\":{\"613\":3}}],[\"charset=utf\",{\"1\":{\"478\":1}}],[\"charset\",{\"1\":{\"73\":1,\"214\":1,\"297\":1,\"837\":1}}],[\"char`\",{\"1\":{\"73\":2}}],[\"char\",{\"0\":{\"98\":1},\"1\":{\"73\":7,\"97\":1,\"100\":1,\"539\":2,\"549\":3,\"616\":2,\"619\":3,\"837\":1}}],[\"character\",{\"1\":{\"14\":1,\"74\":1,\"99\":2,\"321\":3}}],[\"c\",{\"0\":{\"41\":1,\"47\":1,\"201\":1,\"501\":1,\"617\":1,\"624\":1,\"691\":1,\"699\":1},\"1\":{\"7\":3,\"9\":1,\"13\":2,\"14\":2,\"16\":1,\"19\":1,\"63\":1,\"72\":1,\"73\":1,\"118\":1,\"196\":1,\"218\":1,\"234\":1,\"243\":1,\"275\":1,\"343\":1,\"345\":1,\"349\":1,\"428\":1,\"446\":4,\"495\":2,\"549\":4,\"576\":1,\"616\":2,\"617\":5,\"618\":5,\"619\":5,\"620\":8,\"622\":2,\"623\":5,\"624\":7,\"625\":2,\"673\":1,\"783\":1,\"785\":1,\"788\":1,\"789\":1,\"820\":12,\"822\":5,\"823\":3,\"827\":1,\"828\":1,\"883\":3}}],[\"clhnode>\",{\"1\":{\"929\":1}}],[\"clhnode\",{\"1\":{\"929\":7}}],[\"clhlocktest\",{\"1\":{\"930\":1}}],[\"clhlock\",{\"1\":{\"816\":1,\"929\":2,\"930\":5}}],[\"clazzloadsequence\",{\"1\":{\"563\":1}}],[\"clazz\",{\"1\":{\"523\":3,\"563\":1,\"650\":1,\"733\":2}}],[\"claimstrategy\",{\"1\":{\"458\":1}}],[\"classloader\",{\"1\":{\"717\":11}}],[\"classloader类的方式实现\",{\"1\":{\"558\":1}}],[\"classes\",{\"1\":{\"708\":1,\"718\":1}}],[\"classes目录\",{\"1\":{\"580\":1}}],[\"class>\",{\"1\":{\"707\":1,\"715\":1}}],[\"class>cn\",{\"1\":{\"707\":1,\"715\":1}}],[\"class在被loader时就会被放到permgen\",{\"1\":{\"651\":1}}],[\"classname\",{\"1\":{\"651\":1}}],[\"classnotfoundexception\",{\"1\":{\"32\":1}}],[\"classifier为\",{\"0\":{\"591\":1}}],[\"classifier\",{\"1\":{\"586\":1}}],[\"classworlds\",{\"1\":{\"572\":1}}],[\"class的加载顺序\",{\"1\":{\"563\":1}}],[\"class的命名规则保证全局唯一性\",{\"1\":{\"417\":1}}],[\"class文件\",{\"1\":{\"563\":1}}],[\"class文件按照需求和一定的规则加载到内存中\",{\"1\":{\"558\":1}}],[\"classpath\",{\"1\":{\"558\":1}}],[\"classpath=\",{\"1\":{\"377\":1}}],[\"class<t>\",{\"1\":{\"650\":1}}],[\"class<\",{\"1\":{\"523\":1,\"733\":2}}],[\"class\",{\"1\":{\"3\":3,\"32\":10,\"59\":1,\"63\":4,\"64\":9,\"213\":2,\"214\":4,\"216\":1,\"217\":1,\"218\":2,\"219\":1,\"297\":5,\"393\":2,\"397\":2,\"398\":1,\"399\":1,\"400\":1,\"401\":1,\"402\":2,\"403\":2,\"404\":3,\"408\":5,\"409\":2,\"410\":2,\"411\":1,\"415\":3,\"416\":3,\"417\":1,\"419\":17,\"427\":1,\"436\":1,\"437\":1,\"438\":1,\"439\":1,\"440\":3,\"441\":1,\"443\":1,\"444\":2,\"445\":2,\"446\":3,\"472\":26,\"475\":2,\"517\":1,\"518\":1,\"523\":4,\"527\":6,\"530\":1,\"531\":1,\"532\":1,\"533\":2,\"537\":2,\"539\":2,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"549\":2,\"554\":1,\"558\":3,\"560\":1,\"563\":6,\"564\":5,\"612\":2,\"613\":1,\"626\":1,\"650\":3,\"652\":9,\"661\":2,\"672\":1,\"703\":2,\"708\":1,\"709\":1,\"716\":1,\"717\":2,\"718\":1,\"721\":1,\"733\":4,\"734\":6,\"779\":1,\"814\":2,\"929\":4,\"930\":1}}],[\"clone\",{\"1\":{\"493\":1,\"497\":3,\"499\":1}}],[\"cloud和spring\",{\"1\":{\"414\":1}}],[\"cloud体系\",{\"1\":{\"412\":1}}],[\"cloud<\",{\"1\":{\"297\":3,\"391\":1,\"395\":4,\"401\":1,\"404\":3,\"408\":2,\"409\":2,\"411\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1}}],[\"cloud\",{\"1\":{\"297\":11,\"391\":1,\"392\":1,\"393\":1,\"394\":2,\"395\":4,\"396\":1,\"397\":1,\"401\":8,\"404\":4,\"408\":3,\"409\":3,\"410\":1,\"411\":2,\"412\":1,\"414\":12,\"415\":5,\"416\":8,\"417\":3,\"425\":2}}],[\"closefuture\",{\"1\":{\"612\":1}}],[\"closed\",{\"1\":{\"612\":1}}],[\"closeablehttpresponse\",{\"1\":{\"518\":6}}],[\"closeablehttpclient\",{\"1\":{\"518\":7}}],[\"close\",{\"1\":{\"22\":4,\"23\":7,\"518\":2,\"539\":2,\"541\":2,\"542\":2,\"544\":2,\"545\":2,\"564\":1,\"613\":1}}],[\"clean任务\",{\"1\":{\"580\":1}}],[\"clean告诉maven清理输出目录target\",{\"1\":{\"580\":1}}],[\"clean\",{\"1\":{\"230\":1,\"500\":1,\"566\":2,\"576\":1,\"579\":4,\"580\":2,\"581\":2,\"582\":1,\"584\":1,\"604\":1,\"710\":1}}],[\"clear\",{\"1\":{\"59\":1}}],[\"clustered\",{\"1\":{\"27\":1,\"101\":2}}],[\"cluster\",{\"1\":{\"23\":2,\"90\":1,\"158\":1,\"161\":3,\"619\":5,\"620\":4,\"621\":1,\"623\":1,\"627\":1}}],[\"cli\",{\"1\":{\"21\":1,\"228\":1,\"355\":4,\"357\":2,\"362\":2,\"364\":1,\"366\":1}}],[\"clients\",{\"1\":{\"438\":1,\"834\":1}}],[\"client配置\",{\"0\":{\"401\":1}}],[\"client发过来的指令\",{\"1\":{\"234\":1}}],[\"client提供给用户一个终端\",{\"1\":{\"234\":1}}],[\"client\",{\"1\":{\"3\":13,\"63\":1,\"77\":1,\"213\":2,\"214\":19,\"225\":2,\"229\":1,\"234\":1,\"297\":1,\"317\":3,\"321\":2,\"518\":6,\"564\":1}}],[\"client<\",{\"1\":{\"3\":3,\"297\":1}}],[\"correctness\",{\"1\":{\"898\":1}}],[\"corepoolsize设置为0\",{\"1\":{\"773\":1}}],[\"corepoolsize和maxnumpoolsize被设置为1\",{\"1\":{\"772\":1}}],[\"corepoolsize和maxpoolsize都被设置成我们设置的nthreads\",{\"1\":{\"771\":1}}],[\"corepoolsize\",{\"0\":{\"755\":1},\"1\":{\"779\":2}}],[\"core1上的l1\",{\"1\":{\"663\":1}}],[\"coreos\",{\"1\":{\"295\":2}}],[\"core\",{\"1\":{\"213\":1,\"218\":1,\"437\":1}}],[\"cost\",{\"1\":{\"892\":1,\"893\":4}}],[\"coyote\",{\"1\":{\"478\":1}}],[\"cookie\",{\"1\":{\"477\":1,\"478\":1,\"479\":1,\"480\":1}}],[\"co\",{\"1\":{\"265\":2,\"267\":2,\"275\":1}}],[\"copy资源文件\",{\"1\":{\"389\":1}}],[\"copy\",{\"1\":{\"217\":3}}],[\"copyfromlocal\",{\"1\":{\"7\":1}}],[\"codis\",{\"1\":{\"158\":1,\"161\":19}}],[\"coding\",{\"1\":{\"59\":1,\"539\":1}}],[\"code=\",{\"1\":{\"517\":1}}],[\"codec=>\",{\"1\":{\"280\":1}}],[\"code\",{\"0\":{\"427\":1},\"1\":{\"127\":1,\"222\":1,\"315\":2,\"401\":1,\"419\":3,\"517\":12,\"907\":1}}],[\"concurrency\",{\"1\":{\"435\":1}}],[\"concurrent包下提供的一套互斥锁\",{\"1\":{\"703\":1}}],[\"concurrenthashmap<string\",{\"1\":{\"650\":1}}],[\"concurrenthashmap\",{\"1\":{\"650\":1,\"669\":1}}],[\"concurrentlinkedqueuedemo\",{\"1\":{\"530\":1}}],[\"concurrentlinkedqueue\",{\"1\":{\"529\":4,\"530\":3}}],[\"concurrentmap<thread\",{\"1\":{\"214\":1}}],[\"concurrent\",{\"1\":{\"63\":1,\"213\":1,\"218\":1,\"297\":2,\"437\":2,\"440\":5,\"444\":1,\"446\":2,\"530\":1,\"650\":1,\"716\":1,\"717\":2,\"721\":2,\"779\":5}}],[\"connnection\",{\"1\":{\"651\":1}}],[\"conn这种方式就可以达到更好的负载均衡效果\",{\"1\":{\"302\":1}}],[\"conn\",{\"0\":{\"302\":1},\"1\":{\"302\":1,\"317\":2,\"883\":1}}],[\"conn和ip\",{\"1\":{\"300\":1}}],[\"connector\",{\"1\":{\"651\":1}}],[\"connect等\",{\"1\":{\"476\":1}}],[\"connecttimeout\",{\"1\":{\"396\":1}}],[\"connectiontimeout\",{\"1\":{\"403\":1}}],[\"connection\",{\"1\":{\"293\":1,\"317\":2,\"477\":2,\"479\":1,\"480\":1,\"683\":1}}],[\"connections\",{\"1\":{\"58\":2,\"74\":2}}],[\"connect=\",{\"1\":{\"74\":1}}],[\"connect\",{\"1\":{\"58\":1,\"60\":3,\"62\":3,\"74\":1,\"214\":2,\"317\":1,\"321\":1,\"518\":5,\"834\":1,\"894\":3}}],[\"condition\",{\"1\":{\"214\":1}}],[\"continue\",{\"1\":{\"482\":1}}],[\"continues\",{\"1\":{\"195\":1}}],[\"controller\",{\"1\":{\"419\":8,\"523\":2,\"733\":2}}],[\"controlleradvice\",{\"1\":{\"419\":10}}],[\"controlleradvice对指定的exception拦截\",{\"1\":{\"419\":1}}],[\"controlleradvice注解的配置\",{\"1\":{\"419\":1}}],[\"control\",{\"1\":{\"317\":3,\"479\":1,\"480\":1,\"834\":1}}],[\"containers\",{\"1\":{\"262\":1,\"263\":2,\"275\":1,\"293\":1}}],[\"containerport\",{\"0\":{\"252\":1,\"253\":1,\"254\":1},\"1\":{\"263\":1}}],[\"containerid\",{\"1\":{\"243\":1,\"248\":1}}],[\"container提供了系统硬件环境\",{\"1\":{\"234\":1}}],[\"container通过docker\",{\"1\":{\"234\":1}}],[\"container是真正跑项目程序\",{\"1\":{\"234\":1}}],[\"container\",{\"0\":{\"256\":1,\"657\":1},\"1\":{\"234\":1,\"250\":1,\"657\":1}}],[\"containerd=\",{\"1\":{\"230\":2}}],[\"containerd\",{\"1\":{\"228\":1,\"229\":1,\"230\":4}}],[\"contended\",{\"1\":{\"669\":1}}],[\"contended注解方式\",{\"0\":{\"669\":1}}],[\"contenttype用于表明发送数据流的类型\",{\"1\":{\"747\":1}}],[\"content=\",{\"1\":{\"517\":1}}],[\"content\",{\"0\":{\"747\":1},\"1\":{\"157\":1,\"189\":2,\"297\":5,\"478\":2,\"479\":3,\"480\":4,\"515\":1,\"517\":9,\"518\":3,\"747\":1}}],[\"contextid\",{\"1\":{\"410\":1}}],[\"context\",{\"1\":{\"32\":6,\"229\":1,\"408\":2,\"409\":2,\"416\":2,\"652\":8,\"779\":2}}],[\"conv\",{\"1\":{\"73\":1}}],[\"convert\",{\"1\":{\"23\":1,\"73\":1,\"650\":2}}],[\"consumes\",{\"1\":{\"410\":1}}],[\"consumer<string\",{\"1\":{\"564\":1}}],[\"consumertest\",{\"1\":{\"564\":1}}],[\"consumertrackingproducerbarrier对象拥有所有正在访问\",{\"1\":{\"454\":1}}],[\"consumerbarrier返回ringbuffer的最大可访问序号\",{\"1\":{\"452\":1}}],[\"consumerbarrier\",{\"1\":{\"452\":1,\"456\":1}}],[\"consumerrecords<string\",{\"1\":{\"564\":1}}],[\"consumerrecord<string\",{\"1\":{\"564\":1}}],[\"consumerrecord<\",{\"1\":{\"438\":1}}],[\"consumerrecord\",{\"1\":{\"438\":1}}],[\"consumerribbonapplication\",{\"1\":{\"408\":2}}],[\"consumerfeignapplication\",{\"1\":{\"409\":2}}],[\"consumer\",{\"1\":{\"401\":1,\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"416\":1,\"433\":1,\"435\":1,\"438\":2,\"452\":2,\"453\":2,\"475\":1,\"564\":7,\"898\":1}}],[\"consumercontroller\",{\"1\":{\"400\":1}}],[\"consumerservice\",{\"1\":{\"398\":1,\"399\":2,\"400\":3}}],[\"const\",{\"1\":{\"113\":1,\"126\":5,\"619\":1}}],[\"constantutils\",{\"1\":{\"626\":3}}],[\"constanttest\",{\"1\":{\"549\":1}}],[\"constants\",{\"1\":{\"3\":4,\"297\":6}}],[\"constant\",{\"1\":{\"3\":1,\"297\":2,\"436\":2,\"437\":3,\"438\":4}}],[\"consolefullbak\",{\"1\":{\"893\":2}}],[\"console\",{\"0\":{\"847\":1},\"1\":{\"63\":1,\"321\":1,\"847\":1}}],[\"consistency\",{\"0\":{\"192\":1},\"1\":{\"62\":1,\"65\":1,\"105\":1,\"191\":1}}],[\"conf目录\",{\"1\":{\"572\":1}}],[\"conf配置文件\",{\"1\":{\"355\":1}}],[\"conf主要由三部分组成\",{\"1\":{\"305\":1}}],[\"confg文件\",{\"1\":{\"222\":1}}],[\"config<\",{\"1\":{\"401\":1}}],[\"configapplication\",{\"1\":{\"297\":1}}],[\"configinfo\",{\"1\":{\"297\":2}}],[\"configservice\",{\"1\":{\"297\":7}}],[\"configmap\",{\"1\":{\"263\":1,\"275\":2,\"276\":2,\"280\":1}}],[\"configurableapplicationcontext\",{\"1\":{\"297\":1,\"408\":1,\"409\":1,\"416\":1}}],[\"configuration>\",{\"1\":{\"230\":1,\"389\":5,\"707\":1,\"715\":2}}],[\"configuration\",{\"1\":{\"32\":3,\"64\":1,\"331\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1,\"403\":2,\"404\":1,\"408\":2,\"652\":3,\"707\":2,\"715\":2,\"779\":2,\"870\":1}}],[\"configure\",{\"1\":{\"243\":1,\"343\":1,\"379\":1}}],[\"config\",{\"1\":{\"63\":1,\"213\":10,\"226\":1,\"275\":4,\"276\":2,\"288\":1,\"293\":2,\"297\":8,\"320\":2,\"401\":6,\"403\":1,\"417\":2,\"426\":1,\"495\":2,\"496\":1,\"502\":1,\"518\":1,\"564\":2}}],[\"conf\",{\"0\":{\"424\":1},\"1\":{\"32\":4,\"155\":1,\"270\":2,\"280\":1,\"282\":4,\"288\":1,\"293\":1,\"317\":3,\"331\":1,\"334\":1,\"336\":1,\"341\":1,\"343\":2,\"344\":1,\"345\":2,\"347\":1,\"348\":1,\"349\":2,\"351\":1,\"352\":2,\"353\":1,\"355\":1,\"356\":1,\"359\":1,\"361\":1,\"366\":1,\"424\":1,\"572\":2,\"576\":2,\"652\":4,\"834\":2,\"835\":1,\"842\":2}}],[\"countdown\",{\"1\":{\"446\":2,\"551\":1,\"776\":1,\"814\":1,\"930\":1}}],[\"countdownlatch实现所有线程达到某一个目标后\",{\"0\":{\"776\":1}}],[\"countdownlatch和cyclicbarrier区别\",{\"0\":{\"553\":1}}],[\"countdownlatch和cyclicbarrier的区别\",{\"1\":{\"446\":1}}],[\"countdownlatch是一次性的\",{\"1\":{\"446\":1}}],[\"countdownlatch是一个同步辅助类\",{\"1\":{\"446\":1}}],[\"countdownlatchtest\",{\"1\":{\"446\":1}}],[\"countdownlatch的计数器需要和任务数相同\",{\"1\":{\"776\":1}}],[\"countdownlatch的计数器无法被重置\",{\"1\":{\"446\":1}}],[\"countdownlatch的构造函数接受一个int类型的参数作为计数器\",{\"1\":{\"551\":1}}],[\"countdownlatch的作用是允许1或n个线程等待其他线程完成执行\",{\"1\":{\"446\":1}}],[\"countdownlatch函数列表\",{\"1\":{\"446\":1}}],[\"countdownlatch\",{\"0\":{\"446\":1,\"551\":1},\"1\":{\"446\":9,\"550\":1,\"553\":1,\"723\":1,\"776\":2,\"814\":5,\"930\":5}}],[\"count++\",{\"1\":{\"32\":1,\"219\":1,\"563\":2,\"822\":1}}],[\"count\",{\"0\":{\"116\":1},\"1\":{\"22\":2,\"32\":2,\"82\":3,\"88\":1,\"116\":2,\"135\":1,\"138\":4,\"139\":1,\"213\":6,\"214\":4,\"219\":4,\"418\":1,\"427\":4,\"446\":8,\"527\":3,\"563\":10,\"652\":1,\"776\":3,\"789\":8,\"820\":3,\"822\":2,\"823\":5,\"893\":6}}],[\"country=\",{\"1\":{\"21\":2}}],[\"country=us\",{\"1\":{\"21\":2}}],[\"country=ca\",{\"1\":{\"21\":2}}],[\"country\",{\"1\":{\"21\":2,\"22\":2,\"28\":5,\"222\":1}}],[\"course\",{\"1\":{\"13\":12}}],[\"course包括3个版本数据\",{\"1\":{\"13\":1}}],[\"colloded\",{\"1\":{\"527\":1}}],[\"collide\",{\"1\":{\"527\":2}}],[\"collision\",{\"1\":{\"125\":1}}],[\"coll\",{\"1\":{\"82\":1}}],[\"collation\",{\"1\":{\"74\":1,\"99\":1,\"321\":1}}],[\"collector\",{\"1\":{\"706\":1}}],[\"collectors\",{\"1\":{\"475\":1,\"527\":4,\"735\":1}}],[\"collections\",{\"1\":{\"564\":1,\"735\":4}}],[\"collectionschema\",{\"1\":{\"58\":2,\"60\":2}}],[\"collection\",{\"1\":{\"58\":3,\"60\":10,\"61\":3,\"62\":9,\"133\":1,\"529\":1}}],[\"collect\",{\"0\":{\"41\":1},\"1\":{\"41\":1,\"475\":1,\"527\":3,\"735\":1,\"845\":2}}],[\"columns\",{\"1\":{\"21\":2,\"27\":1}}],[\"column\",{\"1\":{\"21\":2}}],[\"cols\",{\"1\":{\"20\":4}}],[\"comodo\",{\"1\":{\"522\":1}}],[\"com这个url时\",{\"1\":{\"308\":1}}],[\"com>\",{\"1\":{\"230\":1}}],[\"com的dns\",{\"1\":{\"222\":1}}],[\"com的域名服务器\",{\"1\":{\"222\":1}}],[\"comprehensibility\",{\"1\":{\"898\":1}}],[\"complie\",{\"1\":{\"579\":1}}],[\"completed\",{\"1\":{\"475\":3}}],[\"completionstage\",{\"1\":{\"475\":2}}],[\"completablefuture的runasync\",{\"1\":{\"475\":1}}],[\"completablefuture<void>\",{\"1\":{\"475\":1}}],[\"completablefuture<string>\",{\"1\":{\"475\":7}}],[\"completablefuture\",{\"1\":{\"475\":13}}],[\"comparingint\",{\"1\":{\"735\":2}}],[\"comparator<student>\",{\"1\":{\"735\":1}}],[\"comparator\",{\"1\":{\"529\":1,\"735\":3}}],[\"comparable<t>\",{\"1\":{\"734\":3}}],[\"comparable<task>\",{\"1\":{\"533\":1}}],[\"comparable<student>\",{\"1\":{\"734\":1}}],[\"comparable接口对实现它的每个类的对象强加一个整体排序\",{\"1\":{\"735\":1}}],[\"comparable接口的方式让对象进行排序\",{\"1\":{\"734\":1}}],[\"comparable接口\",{\"1\":{\"533\":1}}],[\"comparable\",{\"1\":{\"529\":1,\"734\":2,\"735\":1}}],[\"compare\",{\"1\":{\"673\":1,\"735\":1}}],[\"compareto返回值\",{\"1\":{\"735\":1}}],[\"compareto\",{\"1\":{\"445\":5,\"533\":1,\"734\":3,\"735\":1}}],[\"compareandsetstate\",{\"1\":{\"446\":1,\"820\":1,\"822\":1,\"823\":1}}],[\"compareandsetint\",{\"1\":{\"444\":1}}],[\"compareandset\",{\"1\":{\"444\":1,\"814\":1,\"929\":1}}],[\"compactindexhandler\",{\"1\":{\"28\":1}}],[\"compact\",{\"1\":{\"28\":1}}],[\"comp\",{\"1\":{\"317\":3}}],[\"compiler\",{\"1\":{\"581\":1,\"715\":4}}],[\"compile任务\",{\"1\":{\"580\":1}}],[\"compile告诉maven编译项目主代码\",{\"1\":{\"580\":1}}],[\"compile运行步骤\",{\"1\":{\"580\":1}}],[\"compile\",{\"1\":{\"243\":1,\"566\":2,\"580\":1,\"593\":1}}],[\"computersocietytechnical\",{\"1\":{\"684\":1}}],[\"computing\",{\"1\":{\"208\":1,\"684\":5,\"687\":1}}],[\"compuse\",{\"1\":{\"56\":1}}],[\"componentscan中的属性配置用于在spring进行扫描时\",{\"1\":{\"408\":1}}],[\"componentscan\",{\"1\":{\"381\":1,\"397\":1,\"408\":2,\"416\":1}}],[\"component\",{\"1\":{\"63\":1,\"213\":2,\"381\":1,\"398\":1,\"399\":1,\"404\":1,\"438\":2}}],[\"compose\",{\"1\":{\"56\":7}}],[\"combined\",{\"1\":{\"475\":2}}],[\"combinedfuture\",{\"1\":{\"475\":2}}],[\"combine\",{\"0\":{\"43\":1},\"1\":{\"652\":1}}],[\"commoditycode\",{\"1\":{\"427\":3}}],[\"common\",{\"1\":{\"77\":1,\"225\":2,\"297\":3,\"435\":4,\"440\":2,\"446\":1,\"527\":1,\"564\":4,\"652\":1,\"717\":1,\"721\":1}}],[\"commonsmultipartfile\",{\"1\":{\"749\":1}}],[\"commons\",{\"0\":{\"548\":1},\"1\":{\"63\":1,\"546\":1,\"547\":1,\"548\":2,\"779\":1}}],[\"community\",{\"1\":{\"77\":4,\"229\":2,\"319\":2,\"320\":3,\"321\":2}}],[\"committeeon\",{\"1\":{\"684\":1}}],[\"committed\",{\"1\":{\"74\":1,\"106\":1}}],[\"commited\",{\"0\":{\"69\":1}}],[\"commit\",{\"1\":{\"66\":1,\"229\":2,\"421\":1,\"422\":2,\"435\":2,\"454\":2,\"488\":1,\"493\":1,\"497\":1,\"503\":1,\"564\":2,\"728\":1,\"843\":1,\"863\":1,\"893\":2}}],[\"comments\",{\"1\":{\"870\":1}}],[\"comment\",{\"1\":{\"21\":6,\"28\":1}}],[\"commandkey\",{\"1\":{\"402\":4}}],[\"commandproperties\",{\"1\":{\"402\":1}}],[\"command\",{\"1\":{\"243\":2,\"263\":2,\"294\":1,\"396\":1,\"402\":1}}],[\"comma\",{\"1\":{\"3\":1}}],[\"com\",{\"1\":{\"3\":2,\"56\":1,\"58\":1,\"63\":7,\"64\":3,\"67\":1,\"75\":1,\"113\":1,\"127\":1,\"132\":3,\"189\":3,\"211\":4,\"221\":1,\"222\":6,\"226\":1,\"234\":1,\"236\":1,\"243\":2,\"263\":7,\"288\":1,\"290\":2,\"291\":3,\"293\":1,\"295\":2,\"297\":10,\"308\":1,\"312\":1,\"315\":2,\"319\":1,\"375\":1,\"397\":2,\"401\":2,\"403\":1,\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"415\":2,\"416\":3,\"427\":2,\"436\":1,\"437\":4,\"438\":2,\"439\":2,\"440\":2,\"446\":2,\"458\":5,\"472\":5,\"475\":2,\"495\":2,\"502\":1,\"526\":1,\"527\":9,\"534\":1,\"537\":1,\"563\":1,\"580\":1,\"612\":1,\"613\":2,\"626\":1,\"650\":2,\"674\":3,\"717\":1,\"721\":1,\"734\":2,\"741\":1,\"816\":1,\"818\":1,\"924\":1}}],[\">b1\",{\"1\":{\"893\":1}}],[\">buf\",{\"1\":{\"616\":1,\"624\":2}}],[\">open\",{\"1\":{\"843\":1}}],[\">mount\",{\"1\":{\"843\":1}}],[\">没必要分解\",{\"1\":{\"769\":1}}],[\">分解后执行吞吐量将高于串行执行吞吐量\",{\"1\":{\"769\":1}}],[\">创建一个新的工作线程来执行任务\",{\"1\":{\"753\":1}}],[\">创建一个新工作线程来执行任务\",{\"1\":{\"753\":1}}],[\">新任务存储在这个工作队列里\",{\"1\":{\"753\":1}}],[\">走下个流程\",{\"1\":{\"753\":3}}],[\">替换为metaspace\",{\"1\":{\"722\":1}}],[\">对\",{\"1\":{\"652\":1}}],[\">对的value值\",{\"1\":{\"652\":1}}],[\">对的key值\",{\"1\":{\"652\":3}}],[\">对的\",{\"1\":{\"652\":3}}],[\">run\",{\"1\":{\"651\":1}}],[\">0\",{\"1\":{\"445\":1}}],[\">>>\",{\"1\":{\"820\":1}}],[\">>\",{\"1\":{\"288\":1}}],[\">容器镜像服务\",{\"1\":{\"263\":1}}],[\">ht\",{\"1\":{\"127\":2}}],[\">hashfunction\",{\"1\":{\"127\":2}}],[\">having\",{\"1\":{\"22\":1}}],[\">type\",{\"1\":{\"127\":2}}],[\">非聚簇索引\",{\"1\":{\"110\":2}}],[\">聚簇索引\",{\"1\":{\"110\":1}}],[\">partitioned\",{\"1\":{\"27\":1}}],[\">from\",{\"1\":{\"23\":2}}],[\">group\",{\"1\":{\"22\":3}}],[\">where\",{\"1\":{\"22\":4,\"23\":2}}],[\">=\",{\"1\":{\"22\":2,\"23\":1,\"734\":2}}],[\">\",{\"1\":{\"3\":3,\"7\":3,\"20\":2,\"22\":15,\"23\":4,\"26\":4,\"27\":24,\"58\":2,\"63\":2,\"74\":1,\"100\":2,\"213\":2,\"214\":3,\"218\":1,\"230\":9,\"263\":2,\"277\":2,\"278\":7,\"283\":6,\"284\":2,\"285\":6,\"288\":1,\"290\":1,\"291\":1,\"297\":1,\"306\":5,\"326\":1,\"342\":1,\"389\":8,\"395\":4,\"401\":1,\"404\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1,\"438\":1,\"440\":2,\"475\":8,\"495\":2,\"505\":5,\"516\":1,\"527\":5,\"533\":1,\"612\":1,\"626\":3,\"629\":2,\"647\":2,\"650\":2,\"707\":4,\"715\":7,\"716\":1,\"717\":1,\"721\":1,\"728\":1,\"733\":2,\"735\":1,\"814\":1,\"820\":1,\"823\":1,\"893\":2,\"930\":1}}],[\"<r\",{\"1\":{\"738\":1,\"743\":1}}],[\"<resource>\",{\"1\":{\"389\":1}}],[\"<resources>\",{\"1\":{\"389\":1}}],[\"<repository>$\",{\"1\":{\"230\":1}}],[\"<byte\",{\"1\":{\"715\":1}}],[\"<build>\",{\"1\":{\"389\":1,\"707\":1,\"715\":1}}],[\"<buildargs>\",{\"1\":{\"230\":1}}],[\"<modelversion>4\",{\"1\":{\"715\":1}}],[\"<manifestentries>\",{\"1\":{\"707\":1,\"715\":1}}],[\"<maven\",{\"1\":{\"707\":2,\"715\":4}}],[\"<updatereleaseinfo>true<\",{\"1\":{\"707\":1,\"715\":1}}],[\"<unionm\",{\"1\":{\"113\":1}}],[\"<argline>\",{\"1\":{\"707\":1,\"715\":1}}],[\"<artifactid>byte\",{\"1\":{\"715\":2}}],[\"<artifactid>guava<\",{\"1\":{\"715\":1}}],[\"<artifactid>javassist<\",{\"1\":{\"715\":1}}],[\"<artifactid>checkpoint\",{\"1\":{\"715\":1}}],[\"<artifactid>tools<\",{\"1\":{\"712\":1}}],[\"<artifactid>httpclient<\",{\"1\":{\"516\":1}}],[\"<artifactid>netty\",{\"1\":{\"611\":1}}],[\"<artifactid>non\",{\"1\":{\"389\":1}}],[\"<artifactid>nacos\",{\"1\":{\"297\":1}}],[\"<artifactid>maven\",{\"1\":{\"389\":4,\"707\":1,\"715\":2}}],[\"<artifactid>minio<\",{\"1\":{\"63\":1}}],[\"<artifactid>spring\",{\"1\":{\"297\":3,\"389\":1,\"391\":1,\"395\":4,\"401\":1,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1,\"434\":2}}],[\"<artifactid>dockerfile\",{\"1\":{\"230\":1}}],[\"<artifactid>aws\",{\"1\":{\"63\":1}}],[\"<artifactid>okhttp<\",{\"1\":{\"63\":2}}],[\"<artifactid>elasticsearch<\",{\"1\":{\"3\":1}}],[\"<artifactid>elasticsearch\",{\"1\":{\"3\":2}}],[\"<target>8<\",{\"1\":{\"715\":1}}],[\"<transformer\",{\"1\":{\"707\":1,\"715\":1}}],[\"<transformers>\",{\"1\":{\"707\":1,\"715\":1}}],[\"<t>\",{\"1\":{\"650\":1}}],[\"<type>pom<\",{\"1\":{\"297\":2,\"414\":2}}],[\"<httpclient\",{\"1\":{\"516\":1}}],[\"<hostname>\",{\"1\":{\"288\":1}}],[\"<0\",{\"1\":{\"445\":1}}],[\"<负责人姓名>\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"414\":1,\"415\":1,\"416\":1}}],[\"<layout>zip<\",{\"1\":{\"389\":1}}],[\"<directory>src\",{\"1\":{\"389\":1}}],[\"<dependencymanagement>\",{\"1\":{\"297\":1,\"414\":1}}],[\"<dependency>\",{\"1\":{\"3\":3,\"63\":3,\"297\":4,\"391\":1,\"395\":4,\"401\":1,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"414\":2,\"415\":1,\"416\":4,\"425\":1,\"434\":2,\"516\":1,\"611\":1,\"712\":1,\"715\":4}}],[\"<dependencies>\",{\"1\":{\"297\":2,\"414\":1,\"715\":1}}],[\"<deployment名>\",{\"1\":{\"263\":1}}],[\"<in>\",{\"1\":{\"652\":2}}],[\"<include>\",{\"1\":{\"389\":1}}],[\"<includes>\",{\"1\":{\"389\":1}}],[\"<includescope>runtime<\",{\"1\":{\"389\":1}}],[\"<id>copy\",{\"1\":{\"389\":2}}],[\"<out>\",{\"1\":{\"652\":1}}],[\"<outputdirectory>$\",{\"1\":{\"389\":2}}],[\"<optional>false<\",{\"1\":{\"63\":1}}],[\"<guava\",{\"1\":{\"715\":1}}],[\"<goal>shade<\",{\"1\":{\"707\":1,\"715\":1}}],[\"<goal>repackage<\",{\"1\":{\"389\":1}}],[\"<goal>copy\",{\"1\":{\"389\":2}}],[\"<goals>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"<groupid>net\",{\"1\":{\"715\":2}}],[\"<groupid>non\",{\"1\":{\"389\":1}}],[\"<groupid>javassist<\",{\"1\":{\"715\":1}}],[\"<groupid>cn\",{\"1\":{\"715\":1}}],[\"<groupid>com\",{\"1\":{\"63\":3,\"230\":1,\"297\":3,\"404\":1,\"408\":1,\"409\":1,\"411\":1,\"425\":1,\"712\":1,\"715\":1}}],[\"<groupid>io\",{\"1\":{\"63\":1,\"611\":1}}],[\"<groupid>org\",{\"1\":{\"3\":3,\"297\":1,\"389\":5,\"391\":1,\"395\":4,\"401\":1,\"404\":3,\"408\":1,\"409\":1,\"412\":1,\"414\":2,\"415\":1,\"416\":4,\"434\":2,\"516\":1,\"707\":1,\"715\":2}}],[\"<exclude>\",{\"1\":{\"389\":2}}],[\"<excludes>\",{\"1\":{\"389\":1}}],[\"<excludetransitive>false<\",{\"1\":{\"389\":1}}],[\"<exclusion>\",{\"1\":{\"63\":1}}],[\"<exclusions>\",{\"1\":{\"63\":1}}],[\"<execution>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"<executions>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"<finalname>$\",{\"1\":{\"389\":1}}],[\"<source>8<\",{\"1\":{\"715\":1}}],[\"<systempath>$\",{\"1\":{\"712\":1}}],[\"<string\",{\"1\":{\"619\":1,\"624\":3}}],[\"<stripversion>false<\",{\"1\":{\"389\":1}}],[\"<scope>system<\",{\"1\":{\"712\":1}}],[\"<scope>compile<\",{\"1\":{\"611\":1,\"715\":1}}],[\"<scope>test<\",{\"1\":{\"434\":1}}],[\"<scope>import<\",{\"1\":{\"297\":2,\"414\":2}}],[\"<skip>true<\",{\"1\":{\"389\":1}}],[\"<springframework\",{\"1\":{\"596\":1}}],[\"<spring\",{\"1\":{\"297\":2,\"414\":2}}],[\"<javassist\",{\"1\":{\"715\":1}}],[\"<java\",{\"1\":{\"297\":1,\"414\":1,\"707\":1,\"715\":1}}],[\"<jar\",{\"1\":{\"230\":1}}],[\"<premain\",{\"1\":{\"707\":1,\"715\":1}}],[\"<project\",{\"1\":{\"297\":2,\"707\":2,\"715\":3}}],[\"<properties>\",{\"1\":{\"297\":1,\"414\":1,\"596\":1,\"707\":1,\"715\":1}}],[\"<p>\",{\"1\":{\"533\":2,\"652\":1}}],[\"<phase>package<\",{\"1\":{\"389\":2,\"707\":1,\"715\":1}}],[\"<plugins>\",{\"1\":{\"389\":1,\"707\":1,\"715\":1}}],[\"<plugin>\",{\"1\":{\"230\":1,\"389\":5,\"707\":1,\"715\":2}}],[\"<none>\",{\"1\":{\"276\":1}}],[\"<namespace>\",{\"1\":{\"263\":1}}],[\"<270490096\",{\"1\":{\"230\":1}}],[\"<configuration>\",{\"1\":{\"230\":1,\"389\":5,\"707\":1,\"715\":2}}],[\"<=\",{\"1\":{\"219\":1,\"823\":2}}],[\"<<\",{\"1\":{\"205\":1,\"288\":2,\"290\":1,\"291\":1,\"820\":1}}],[\"<>character\",{\"1\":{\"73\":1}}],[\"<version>3\",{\"1\":{\"389\":1}}],[\"<version>2\",{\"1\":{\"389\":4,\"707\":1}}],[\"<version>$\",{\"1\":{\"297\":2,\"414\":2,\"425\":1,\"516\":1,\"715\":6}}],[\"<version>1\",{\"1\":{\"63\":1,\"230\":1,\"297\":1,\"712\":1,\"715\":1}}],[\"<version>8\",{\"1\":{\"63\":1}}],[\"<version>4\",{\"1\":{\"63\":1,\"611\":1}}],[\"<version>7\",{\"1\":{\"3\":3}}],[\"<\",{\"1\":{\"3\":5,\"22\":3,\"24\":1,\"26\":1,\"63\":5,\"100\":2,\"103\":1,\"213\":2,\"214\":3,\"230\":5,\"297\":11,\"389\":34,\"391\":1,\"395\":8,\"401\":2,\"404\":4,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"414\":9,\"415\":2,\"416\":8,\"425\":3,\"434\":2,\"439\":1,\"440\":2,\"446\":2,\"516\":3,\"533\":1,\"539\":1,\"541\":1,\"552\":1,\"596\":1,\"611\":1,\"650\":2,\"652\":2,\"707\":14,\"712\":1,\"715\":30,\"734\":1,\"768\":1,\"776\":1,\"814\":1,\"822\":1,\"930\":1}}],[\"1表示小于\",{\"1\":{\"734\":1}}],[\"1表示大于\",{\"1\":{\"734\":1}}],[\"1表示不敏感\",{\"1\":{\"74\":1}}],[\"1才进入更新库存操作\",{\"1\":{\"728\":1}}],[\"1级\",{\"1\":{\"662\":1}}],[\"1设置仓库\",{\"0\":{\"603\":1}}],[\"1概念\",{\"0\":{\"599\":1}}],[\"1引入相同版本的依赖\",{\"0\":{\"596\":1}}],[\"1使用maven编译项目\",{\"0\":{\"580\":1}}],[\"1中有\",{\"1\":{\"549\":1}}],[\"1转换为二进制\",{\"1\":{\"526\":4}}],[\"1无法准确地表示为\",{\"1\":{\"445\":1}}],[\"1s\",{\"1\":{\"435\":1}}],[\"1g的内存上能监听约10万个端口\",{\"1\":{\"806\":1}}],[\"1gb\",{\"1\":{\"433\":1}}],[\"1g\",{\"1\":{\"433\":1}}],[\"1秒\",{\"1\":{\"402\":1}}],[\"1内容的这行\",{\"1\":{\"343\":1}}],[\"1k\",{\"1\":{\"317\":2}}],[\"1>\",{\"1\":{\"307\":1}}],[\"1之前\",{\"1\":{\"301\":1}}],[\"1那么整个架构就变成了如下图所示\",{\"1\":{\"211\":1}}],[\"1位标识\",{\"1\":{\"205\":1}}],[\"1年一18个月\",{\"1\":{\"178\":1}}],[\"1869\",{\"1\":{\"626\":1}}],[\"180\",{\"1\":{\"883\":1}}],[\"1807887\",{\"1\":{\"458\":1}}],[\"1800\",{\"1\":{\"74\":2}}],[\"189\",{\"1\":{\"356\":1,\"361\":1}}],[\"18938\",{\"1\":{\"189\":1}}],[\"184\",{\"1\":{\"344\":1,\"348\":1,\"883\":1}}],[\"183\",{\"1\":{\"344\":1,\"348\":1}}],[\"188\",{\"1\":{\"331\":1,\"336\":1}}],[\"187\",{\"1\":{\"331\":1,\"332\":2,\"336\":1}}],[\"18个月一2年\",{\"1\":{\"178\":1}}],[\"18\",{\"0\":{\"103\":1},\"1\":{\"189\":1,\"290\":2,\"292\":3,\"623\":1,\"626\":3,\"705\":1,\"832\":2,\"833\":1,\"834\":1,\"845\":1}}],[\"175\",{\"1\":{\"887\":1}}],[\"1706\",{\"1\":{\"887\":1}}],[\"1705\",{\"1\":{\"887\":1}}],[\"1704\",{\"1\":{\"887\":1}}],[\"1703\",{\"1\":{\"885\":1}}],[\"1700\",{\"1\":{\"884\":1}}],[\"1765168\",{\"1\":{\"458\":1}}],[\"171行\",{\"1\":{\"352\":1}}],[\"172\",{\"1\":{\"213\":1,\"262\":3,\"275\":1,\"277\":1}}],[\"178\",{\"1\":{\"161\":2}}],[\"17\",{\"0\":{\"102\":1},\"1\":{\"623\":1,\"626\":1,\"705\":1}}],[\"1个对象引用它们\",{\"1\":{\"93\":1}}],[\"1m\",{\"1\":{\"74\":1,\"435\":1}}],[\"1l\",{\"1\":{\"64\":1,\"205\":1,\"517\":1}}],[\"162\",{\"1\":{\"883\":1}}],[\"16t\",{\"1\":{\"866\":1}}],[\"169\",{\"1\":{\"626\":1}}],[\"16代码单元\",{\"1\":{\"549\":1}}],[\"1618677203153\",{\"1\":{\"917\":1}}],[\"1618676526483\",{\"1\":{\"906\":1}}],[\"1618676506490\",{\"1\":{\"906\":1}}],[\"1618676461026\",{\"1\":{\"905\":1}}],[\"1618676411155\",{\"1\":{\"904\":1}}],[\"1618676358941\",{\"1\":{\"903\":1}}],[\"1618676280257\",{\"1\":{\"902\":1}}],[\"1618676232016\",{\"1\":{\"901\":1}}],[\"1618676190337\",{\"1\":{\"900\":1}}],[\"1618676025236\",{\"1\":{\"898\":1}}],[\"1618675987731\",{\"1\":{\"898\":1}}],[\"1618675966507\",{\"1\":{\"898\":1}}],[\"1618244623527\",{\"1\":{\"605\":1}}],[\"1618244592782\",{\"1\":{\"604\":1}}],[\"1618244566899\",{\"1\":{\"603\":1}}],[\"1618244544994\",{\"1\":{\"603\":1}}],[\"1618244522945\",{\"1\":{\"603\":1}}],[\"1618244497271\",{\"1\":{\"601\":1}}],[\"1618244387386\",{\"1\":{\"594\":1}}],[\"1618244361109\",{\"1\":{\"593\":1}}],[\"1618244289269\",{\"1\":{\"586\":1}}],[\"1618244251013\",{\"1\":{\"584\":1}}],[\"1618244193984\",{\"1\":{\"583\":1}}],[\"1618244166891\",{\"1\":{\"582\":1}}],[\"1618244137853\",{\"1\":{\"581\":1}}],[\"1618244110010\",{\"1\":{\"581\":1}}],[\"1618244073306\",{\"1\":{\"580\":1}}],[\"1618244002479\",{\"1\":{\"578\":1}}],[\"1618295759372\",{\"1\":{\"472\":1}}],[\"16122\",{\"1\":{\"845\":1}}],[\"16117\",{\"1\":{\"845\":1}}],[\"161\",{\"1\":{\"526\":2}}],[\"160可以分成5\",{\"1\":{\"526\":1}}],[\"160\",{\"1\":{\"526\":1}}],[\"1604195\",{\"1\":{\"342\":1}}],[\"16384\",{\"1\":{\"435\":1}}],[\"16k\",{\"1\":{\"317\":3}}],[\"164\",{\"1\":{\"213\":1}}],[\"16字节128位\",{\"1\":{\"210\":1}}],[\"168\",{\"1\":{\"80\":1,\"230\":2,\"236\":1,\"241\":1,\"288\":6,\"293\":2,\"294\":2,\"297\":1,\"331\":3,\"332\":2,\"336\":3,\"344\":3,\"348\":3,\"356\":3,\"361\":3,\"367\":1,\"526\":65}}],[\"16m\",{\"1\":{\"74\":1}}],[\"16\",{\"0\":{\"101\":1},\"1\":{\"21\":1,\"73\":1,\"114\":1,\"213\":1,\"272\":2,\"273\":1,\"275\":1,\"277\":1,\"293\":1,\"297\":1,\"526\":1,\"549\":1,\"622\":1,\"626\":2,\"705\":1,\"837\":3,\"858\":1,\"874\":1,\"893\":1}}],[\"1507247\",{\"1\":{\"893\":4}}],[\"15000\",{\"1\":{\"396\":1}}],[\"1569332579189\",{\"1\":{\"705\":1}}],[\"1569332532928\",{\"1\":{\"705\":1}}],[\"1569332511083\",{\"1\":{\"705\":1}}],[\"1569332492570\",{\"1\":{\"705\":1}}],[\"1569332470793\",{\"1\":{\"705\":1}}],[\"1569332446930\",{\"1\":{\"705\":1}}],[\"1569332424970\",{\"1\":{\"705\":1}}],[\"1569332395630\",{\"1\":{\"705\":1}}],[\"1569332371090\",{\"1\":{\"705\":1}}],[\"1569332348936\",{\"1\":{\"705\":1}}],[\"1569332325389\",{\"1\":{\"705\":1}}],[\"1569332297876\",{\"1\":{\"705\":1}}],[\"1569332274920\",{\"1\":{\"705\":1}}],[\"1569332255195\",{\"1\":{\"705\":1}}],[\"1569332234555\",{\"1\":{\"705\":1}}],[\"1569332213926\",{\"1\":{\"705\":1}}],[\"1569332191207\",{\"1\":{\"705\":1}}],[\"1569332140572\",{\"1\":{\"705\":1}}],[\"1569332117257\",{\"1\":{\"705\":1}}],[\"1569664589958\",{\"1\":{\"684\":1}}],[\"15408标准定义\",{\"1\":{\"684\":1}}],[\"1571142451345\",{\"1\":{\"682\":1}}],[\"1571144092579\",{\"1\":{\"673\":1}}],[\"1571144064662\",{\"1\":{\"673\":1}}],[\"1570600564344\",{\"1\":{\"211\":1}}],[\"1570599617667\",{\"1\":{\"205\":1}}],[\"1514\",{\"1\":{\"626\":1}}],[\"158\",{\"1\":{\"526\":2}}],[\"159\",{\"1\":{\"526\":1}}],[\"155\",{\"1\":{\"328\":1}}],[\"152753\",{\"1\":{\"892\":1}}],[\"152\",{\"1\":{\"317\":1}}],[\"15\",{\"0\":{\"100\":1,\"923\":1},\"1\":{\"21\":1,\"82\":2,\"222\":1,\"229\":2,\"527\":4,\"533\":1,\"622\":1,\"705\":1,\"875\":1}}],[\"140\",{\"1\":{\"893\":1}}],[\"14110\",{\"1\":{\"845\":1}}],[\"14850\",{\"1\":{\"845\":1}}],[\"14d\",{\"1\":{\"549\":1}}],[\"14220760\",{\"1\":{\"534\":1}}],[\"147\",{\"1\":{\"288\":2}}],[\"146029\",{\"1\":{\"845\":1}}],[\"146\",{\"1\":{\"288\":2,\"294\":1}}],[\"145\",{\"1\":{\"80\":1,\"288\":2,\"293\":2,\"294\":1}}],[\"14\",{\"0\":{\"99\":1,\"922\":1},\"1\":{\"21\":1,\"58\":1,\"82\":1,\"458\":1,\"549\":2,\"622\":1,\"705\":1,\"833\":2,\"834\":2,\"868\":4,\"891\":1}}],[\"13827\",{\"1\":{\"845\":1}}],[\"139\",{\"1\":{\"732\":1}}],[\"135\",{\"1\":{\"526\":4}}],[\"131830\",{\"1\":{\"433\":1}}],[\"13655\",{\"1\":{\"845\":1}}],[\"136行\",{\"1\":{\"352\":1}}],[\"136\",{\"1\":{\"317\":1}}],[\"1306581155184674\",{\"1\":{\"475\":1}}],[\"130\",{\"1\":{\"23\":1,\"74\":1,\"525\":1}}],[\"132\",{\"1\":{\"23\":1}}],[\"13\",{\"0\":{\"98\":1,\"921\":1},\"1\":{\"21\":1,\"82\":1,\"229\":2,\"272\":2,\"273\":1,\"294\":1,\"413\":1,\"435\":1,\"455\":1,\"456\":3,\"458\":2,\"619\":2,\"621\":8,\"705\":1,\"834\":2,\"868\":2}}],[\"129\",{\"1\":{\"526\":2}}],[\"126\",{\"1\":{\"526\":2}}],[\"12<\",{\"1\":{\"516\":1}}],[\"1252599548343744\",{\"1\":{\"475\":1}}],[\"121\",{\"1\":{\"317\":1}}],[\"12位的计数顺序号支持每个节点每毫秒\",{\"1\":{\"205\":1}}],[\"12位序列\",{\"1\":{\"205\":1}}],[\"127038874\",{\"1\":{\"650\":1}}],[\"127\",{\"1\":{\"134\":11,\"135\":9,\"139\":2,\"213\":4,\"253\":1,\"254\":2,\"280\":1,\"282\":1,\"297\":2,\"317\":1,\"343\":1,\"352\":1,\"355\":2,\"357\":2,\"362\":2,\"364\":1,\"366\":1,\"392\":1,\"396\":1,\"526\":1,\"564\":1,\"842\":2,\"843\":1}}],[\"123\",{\"1\":{\"548\":1,\"563\":1,\"727\":1,\"881\":1,\"883\":3}}],[\"123131592\",{\"1\":{\"427\":1}}],[\"123145234131\",{\"1\":{\"22\":1}}],[\"123142341341\",{\"1\":{\"22\":1}}],[\"123456\",{\"1\":{\"331\":1,\"344\":1,\"348\":1}}],[\"12306的买票\",{\"1\":{\"201\":1}}],[\"123702217\",{\"1\":{\"132\":1}}],[\"120\",{\"1\":{\"74\":1}}],[\"122025869\",{\"1\":{\"63\":1}}],[\"12856278\",{\"1\":{\"427\":1}}],[\"128k\",{\"1\":{\"317\":1}}],[\"128m\",{\"1\":{\"74\":2}}],[\"128\",{\"1\":{\"58\":1,\"158\":1,\"275\":2,\"276\":3,\"277\":2,\"280\":1,\"282\":4,\"526\":1,\"612\":1}}],[\"12为偏移量\",{\"1\":{\"34\":1}}],[\"12\",{\"0\":{\"94\":1,\"920\":1},\"1\":{\"21\":1,\"23\":1,\"58\":1,\"82\":1,\"229\":1,\"243\":4,\"293\":1,\"297\":1,\"389\":1,\"454\":1,\"456\":1,\"457\":1,\"458\":1,\"522\":1,\"527\":2,\"564\":2,\"621\":1,\"626\":4,\"705\":1,\"715\":1,\"722\":1,\"789\":12,\"832\":2,\"834\":1,\"837\":1,\"838\":1,\"841\":1,\"845\":6,\"893\":1}}],[\"11转为二进制是1011\",{\"1\":{\"896\":1}}],[\"118\",{\"1\":{\"841\":1,\"843\":1,\"893\":3}}],[\"110\",{\"1\":{\"626\":1}}],[\"11000000\",{\"1\":{\"526\":9}}],[\"11111100\",{\"1\":{\"526\":1}}],[\"11111111\",{\"1\":{\"526\":30}}],[\"11111000\",{\"1\":{\"526\":3}}],[\"11100000\",{\"1\":{\"526\":2}}],[\"111\",{\"1\":{\"475\":1}}],[\"11和12\",{\"1\":{\"452\":1}}],[\"116\",{\"1\":{\"297\":1}}],[\"119229\",{\"1\":{\"282\":2}}],[\"11\",{\"0\":{\"93\":1,\"919\":1},\"1\":{\"21\":1,\"23\":2,\"63\":1,\"82\":1,\"118\":2,\"229\":2,\"263\":3,\"285\":1,\"297\":1,\"344\":1,\"348\":1,\"413\":1,\"618\":1,\"621\":1,\"705\":1,\"893\":1}}],[\"19转换为二进制\",{\"1\":{\"526\":1}}],[\"193\",{\"1\":{\"526\":2}}],[\"191\",{\"1\":{\"526\":1}}],[\"196\",{\"1\":{\"478\":1}}],[\"1962\",{\"1\":{\"23\":4}}],[\"190\",{\"1\":{\"356\":1,\"361\":1,\"367\":1,\"526\":2}}],[\"192转换为二进制\",{\"1\":{\"526\":1}}],[\"192\",{\"1\":{\"23\":1,\"80\":1,\"230\":1,\"236\":1,\"241\":1,\"288\":6,\"294\":1,\"297\":1,\"331\":3,\"332\":2,\"336\":3,\"344\":3,\"348\":3,\"356\":3,\"361\":3,\"367\":1,\"526\":60}}],[\"19530\",{\"1\":{\"58\":1}}],[\"195\",{\"1\":{\"23\":1,\"230\":2}}],[\"194\",{\"1\":{\"23\":1,\"275\":1,\"277\":1}}],[\"1987\",{\"1\":{\"22\":1,\"23\":3}}],[\"1985\",{\"1\":{\"22\":1}}],[\"1984\",{\"1\":{\"22\":1}}],[\"19\",{\"0\":{\"104\":1},\"1\":{\"13\":2,\"229\":1,\"262\":3,\"343\":2,\"526\":1,\"624\":1,\"705\":1,\"734\":1,\"735\":1,\"837\":1,\"845\":5}}],[\"103\",{\"1\":{\"893\":1}}],[\"10365109\",{\"1\":{\"674\":1}}],[\"102\",{\"1\":{\"843\":1,\"893\":1}}],[\"10240\",{\"1\":{\"870\":1}}],[\"1024\",{\"1\":{\"118\":2,\"161\":1,\"440\":2,\"446\":1,\"754\":1,\"776\":1}}],[\"10倍\",{\"1\":{\"674\":1}}],[\"10人都已到达游戏战场\",{\"1\":{\"552\":1}}],[\"10m\",{\"1\":{\"317\":2}}],[\"10k\",{\"1\":{\"317\":1}}],[\"10101000\",{\"1\":{\"526\":8}}],[\"101\",{\"1\":{\"236\":1}}],[\"101645621https\",{\"1\":{\"132\":1}}],[\"105mb\",{\"1\":{\"230\":1}}],[\"10位机器标识码\",{\"1\":{\"205\":1}}],[\"109601131\",{\"1\":{\"63\":2}}],[\"10485760\",{\"1\":{\"63\":2,\"412\":1}}],[\"10\",{\"0\":{\"92\":1,\"115\":2,\"918\":1},\"1\":{\"3\":1,\"21\":1,\"24\":7,\"58\":2,\"62\":1,\"73\":1,\"82\":1,\"100\":1,\"115\":1,\"118\":3,\"139\":2,\"155\":3,\"213\":4,\"229\":2,\"255\":1,\"256\":2,\"257\":1,\"272\":2,\"273\":1,\"343\":2,\"352\":1,\"402\":3,\"417\":1,\"435\":1,\"452\":1,\"475\":2,\"526\":3,\"527\":3,\"552\":1,\"554\":2,\"619\":2,\"626\":5,\"705\":1,\"734\":1,\"735\":1,\"777\":1,\"836\":6,\"872\":1,\"883\":1}}],[\"10013\",{\"1\":{\"845\":1}}],[\"100次\",{\"1\":{\"458\":1}}],[\"100mi\",{\"1\":{\"275\":1}}],[\"100m\",{\"1\":{\"275\":1}}],[\"100万的并发全部打入\",{\"1\":{\"221\":1}}],[\"10001\",{\"1\":{\"221\":13}}],[\"10000111\",{\"1\":{\"526\":4}}],[\"10000次\",{\"1\":{\"458\":1,\"468\":1,\"472\":1}}],[\"10000\",{\"1\":{\"214\":1,\"352\":1,\"402\":3,\"554\":1}}],[\"1000000000000000055511151231257827021181583404541015625\",{\"1\":{\"445\":2}}],[\"100000\",{\"1\":{\"22\":2,\"24\":1}}],[\"1000l\",{\"1\":{\"205\":1,\"721\":1,\"765\":1}}],[\"1000\",{\"1\":{\"74\":1,\"218\":1,\"221\":1,\"297\":1,\"433\":1,\"445\":1,\"446\":1,\"564\":1,\"779\":1,\"883\":1,\"930\":4}}],[\"100\",{\"1\":{\"3\":1,\"22\":1,\"61\":1,\"66\":1,\"74\":3,\"146\":1,\"150\":1,\"214\":1,\"331\":1,\"344\":1,\"356\":1,\"361\":1,\"417\":1,\"439\":1,\"486\":1,\"526\":1,\"549\":1,\"564\":2,\"650\":2,\"768\":1,\"814\":4,\"837\":1,\"892\":1,\"893\":5}}],[\"1<\",{\"1\":{\"3\":3,\"63\":1,\"715\":1}}],[\"1\",{\"0\":{\"5\":1,\"6\":1,\"16\":1,\"22\":1,\"31\":1,\"34\":1,\"56\":1,\"59\":1,\"68\":1,\"84\":1,\"129\":1,\"133\":1,\"134\":1,\"205\":1,\"206\":1,\"209\":1,\"213\":1,\"215\":1,\"224\":1,\"252\":1,\"266\":1,\"274\":1,\"275\":2,\"276\":1,\"277\":1,\"278\":1,\"280\":1,\"283\":1,\"287\":1,\"290\":1,\"299\":1,\"304\":1,\"306\":1,\"369\":1,\"375\":1,\"379\":1,\"382\":1,\"383\":1,\"387\":1,\"391\":1,\"395\":1,\"405\":1,\"429\":1,\"434\":1,\"441\":1,\"442\":1,\"481\":1,\"483\":1,\"488\":1,\"492\":1,\"495\":1,\"507\":1,\"511\":1,\"516\":1,\"520\":1,\"529\":1,\"531\":1,\"536\":1,\"546\":1,\"560\":1,\"567\":1,\"568\":2,\"569\":1,\"571\":1,\"578\":1,\"586\":1,\"587\":2,\"588\":1,\"589\":1,\"590\":1,\"591\":1,\"593\":1,\"611\":1,\"629\":1,\"633\":1,\"639\":1,\"643\":1,\"647\":1,\"654\":1,\"659\":1,\"665\":1,\"667\":1,\"672\":1,\"676\":1,\"686\":1,\"695\":1,\"702\":1,\"706\":1,\"707\":1,\"711\":1,\"714\":1,\"721\":1,\"725\":1,\"730\":1,\"737\":1,\"747\":1,\"748\":2,\"749\":1,\"751\":1,\"755\":1,\"764\":1,\"772\":1,\"781\":1,\"784\":1,\"786\":1,\"788\":1,\"791\":1,\"798\":1,\"804\":1,\"811\":1,\"818\":1,\"827\":1,\"831\":1,\"839\":1,\"907\":1,\"909\":1,\"926\":1},\"1\":{\"3\":2,\"14\":4,\"15\":2,\"19\":1,\"21\":4,\"22\":4,\"24\":4,\"25\":1,\"27\":5,\"29\":1,\"32\":3,\"33\":1,\"50\":1,\"56\":1,\"57\":1,\"58\":2,\"59\":3,\"61\":3,\"63\":7,\"64\":1,\"65\":1,\"66\":1,\"73\":2,\"74\":6,\"76\":1,\"77\":5,\"82\":3,\"91\":1,\"101\":1,\"104\":2,\"107\":2,\"109\":1,\"113\":1,\"115\":1,\"118\":3,\"119\":4,\"120\":2,\"124\":3,\"126\":5,\"127\":1,\"132\":1,\"133\":1,\"134\":15,\"135\":26,\"139\":7,\"141\":2,\"172\":1,\"175\":1,\"176\":1,\"189\":2,\"194\":1,\"204\":1,\"208\":2,\"211\":1,\"213\":7,\"214\":7,\"218\":3,\"221\":3,\"222\":1,\"229\":5,\"243\":4,\"253\":1,\"254\":2,\"256\":2,\"263\":5,\"266\":1,\"276\":5,\"277\":1,\"278\":3,\"280\":1,\"282\":1,\"288\":2,\"290\":2,\"292\":3,\"295\":2,\"297\":9,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":2,\"317\":13,\"318\":1,\"321\":1,\"328\":1,\"331\":1,\"332\":1,\"336\":1,\"337\":1,\"342\":1,\"343\":3,\"344\":1,\"345\":1,\"348\":1,\"349\":1,\"352\":2,\"355\":3,\"356\":1,\"357\":3,\"361\":1,\"362\":2,\"364\":1,\"366\":1,\"379\":2,\"389\":4,\"392\":1,\"396\":1,\"398\":1,\"403\":2,\"412\":1,\"413\":3,\"414\":1,\"417\":1,\"427\":1,\"428\":1,\"431\":1,\"432\":1,\"433\":4,\"435\":2,\"440\":4,\"441\":3,\"443\":3,\"444\":13,\"445\":15,\"446\":4,\"448\":1,\"452\":1,\"454\":1,\"456\":1,\"458\":2,\"461\":1,\"475\":5,\"477\":4,\"478\":4,\"479\":4,\"480\":4,\"502\":1,\"511\":2,\"522\":3,\"523\":2,\"526\":62,\"527\":1,\"530\":1,\"531\":1,\"533\":3,\"537\":1,\"549\":5,\"557\":1,\"558\":5,\"559\":1,\"563\":1,\"564\":3,\"580\":1,\"603\":1,\"604\":1,\"605\":4,\"611\":1,\"616\":4,\"618\":3,\"621\":7,\"625\":2,\"626\":9,\"627\":2,\"636\":1,\"649\":1,\"650\":2,\"651\":1,\"652\":5,\"657\":1,\"671\":1,\"673\":3,\"674\":1,\"675\":1,\"683\":3,\"684\":5,\"703\":1,\"705\":1,\"708\":1,\"712\":1,\"715\":2,\"718\":1,\"719\":1,\"721\":1,\"722\":6,\"723\":4,\"727\":1,\"728\":3,\"732\":1,\"734\":6,\"735\":3,\"749\":2,\"753\":1,\"759\":1,\"761\":1,\"771\":2,\"772\":4,\"773\":1,\"774\":1,\"789\":3,\"799\":1,\"806\":1,\"809\":5,\"814\":1,\"820\":4,\"821\":1,\"822\":5,\"823\":2,\"825\":2,\"833\":2,\"834\":8,\"836\":1,\"837\":4,\"838\":3,\"841\":5,\"842\":2,\"843\":11,\"844\":1,\"845\":7,\"864\":1,\"865\":1,\"866\":2,\"869\":1,\"870\":1,\"874\":1,\"883\":2,\"887\":3,\"891\":1,\"893\":10,\"898\":1,\"906\":1,\"930\":1}}],[\"2+4=6\",{\"1\":{\"874\":1}}],[\"2g\",{\"1\":{\"834\":1}}],[\"2gb或更多ram\",{\"1\":{\"287\":1}}],[\"2的内存占用\",{\"1\":{\"722\":1}}],[\"2<\",{\"1\":{\"596\":1}}],[\"2编写主代码\",{\"0\":{\"579\":1}}],[\"2^5\",{\"1\":{\"526\":1}}],[\"2^4\",{\"1\":{\"526\":1}}],[\"2^10=1024\",{\"1\":{\"205\":1}}],[\"2是除去一个网络地址\",{\"1\":{\"526\":1}}],[\"2h\",{\"1\":{\"435\":1}}],[\"2wsx\",{\"1\":{\"342\":1}}],[\"2>\",{\"1\":{\"307\":1,\"389\":1}}],[\"2pc95\",{\"1\":{\"295\":1}}],[\"2个cpu或更多cpu\",{\"1\":{\"287\":1}}],[\"2个或多个表进行合并\",{\"1\":{\"24\":1}}],[\"294\",{\"1\":{\"893\":1}}],[\"29\",{\"0\":{\"114\":1},\"1\":{\"789\":6,\"843\":1}}],[\"28292\",{\"1\":{\"845\":1}}],[\"2802237\",{\"1\":{\"834\":1}}],[\"2883\",{\"1\":{\"477\":1,\"479\":1,\"480\":1}}],[\"286行\",{\"1\":{\"355\":1}}],[\"28\",{\"0\":{\"113\":1},\"1\":{\"893\":2}}],[\"26222859\",{\"1\":{\"924\":1}}],[\"263行\",{\"1\":{\"352\":1}}],[\"26\",{\"0\":{\"111\":1},\"1\":{\"734\":2,\"735\":1,\"841\":1}}],[\"249786\",{\"1\":{\"892\":1}}],[\"2416470\",{\"1\":{\"534\":1}}],[\"248转换成二进制\",{\"1\":{\"526\":1}}],[\"248的广播地址是什么\",{\"1\":{\"526\":1}}],[\"240\",{\"1\":{\"526\":1}}],[\"244\",{\"1\":{\"293\":1}}],[\"24\",{\"0\":{\"109\":1},\"1\":{\"205\":1,\"229\":1,\"893\":1}}],[\"23034755\",{\"1\":{\"683\":1,\"825\":4}}],[\"230\",{\"1\":{\"435\":1}}],[\"2375\",{\"1\":{\"230\":4}}],[\"23\",{\"0\":{\"108\":1},\"1\":{\"222\":1,\"293\":1,\"526\":1,\"527\":2,\"789\":6,\"833\":2,\"834\":2}}],[\"221\",{\"1\":{\"626\":8}}],[\"221mb\",{\"1\":{\"230\":1}}],[\"220188e\",{\"1\":{\"626\":1}}],[\"220行\",{\"1\":{\"352\":1}}],[\"22形式的ip地址相信大家平时都见过\",{\"1\":{\"526\":1}}],[\"225\",{\"1\":{\"526\":1}}],[\"2255720\",{\"1\":{\"472\":1}}],[\"222\",{\"1\":{\"526\":2}}],[\"223\",{\"1\":{\"526\":1}}],[\"22\",{\"0\":{\"107\":1},\"1\":{\"189\":1,\"263\":1,\"379\":2,\"526\":3,\"527\":2,\"626\":1,\"893\":1}}],[\"224二进制为\",{\"1\":{\"526\":1}}],[\"224转化为二进制为\",{\"1\":{\"526\":1}}],[\"224\",{\"1\":{\"59\":4,\"526\":3}}],[\"2msl\",{\"1\":{\"649\":1}}],[\"2m\",{\"1\":{\"74\":2}}],[\"218\",{\"1\":{\"352\":1}}],[\"216行\",{\"1\":{\"352\":1}}],[\"21\",{\"0\":{\"106\":1},\"1\":{\"211\":1,\"263\":2,\"445\":1,\"734\":1,\"735\":1,\"845\":2}}],[\"2123\",{\"1\":{\"63\":1}}],[\"214\",{\"1\":{\"23\":2}}],[\"2~aggregatepage~first\",{\"1\":{\"63\":1}}],[\"278\",{\"1\":{\"893\":1}}],[\"2784248\",{\"1\":{\"833\":1,\"834\":1}}],[\"2701\",{\"1\":{\"843\":1}}],[\"2700\",{\"1\":{\"843\":1}}],[\"27049\",{\"1\":{\"63\":1}}],[\"27680317\",{\"1\":{\"664\":1}}],[\"276\",{\"1\":{\"297\":1}}],[\"27\",{\"0\":{\"112\":1},\"1\":{\"23\":1,\"621\":1}}],[\"250\",{\"1\":{\"893\":1}}],[\"254\",{\"1\":{\"526\":4}}],[\"252125\",{\"1\":{\"662\":1}}],[\"252\",{\"1\":{\"480\":1,\"526\":2}}],[\"25d\",{\"1\":{\"278\":1}}],[\"256k\",{\"1\":{\"317\":1}}],[\"256\",{\"1\":{\"194\":1,\"417\":1,\"526\":1}}],[\"255\",{\"1\":{\"73\":2,\"526\":46,\"892\":1}}],[\"257<\",{\"1\":{\"63\":1}}],[\"25\",{\"0\":{\"110\":1},\"1\":{\"22\":1,\"23\":2,\"27\":2,\"297\":1}}],[\"20<\",{\"1\":{\"715\":1}}],[\"2089\",{\"1\":{\"626\":1}}],[\"2043\",{\"1\":{\"626\":1}}],[\"2049`\",{\"1\":{\"357\":2}}],[\"20=160台\",{\"1\":{\"526\":1}}],[\"206\",{\"1\":{\"445\":1}}],[\"2022\",{\"1\":{\"834\":1,\"837\":1,\"845\":1}}],[\"20220122144100590\",{\"1\":{\"625\":1}}],[\"20220123235957505\",{\"1\":{\"120\":1}}],[\"20220404214514222\",{\"1\":{\"294\":1}}],[\"20220404214709099\",{\"1\":{\"293\":1}}],[\"20220411222247494\",{\"1\":{\"263\":1}}],[\"20220411221525635\",{\"1\":{\"263\":1}}],[\"20220411220547876\",{\"1\":{\"263\":1}}],[\"20220411212506831\",{\"1\":{\"263\":1}}],[\"20220414004546438\",{\"1\":{\"113\":1}}],[\"20220414004507836\",{\"1\":{\"113\":1}}],[\"20220322221741703\",{\"1\":{\"63\":1}}],[\"202\",{\"1\":{\"525\":1}}],[\"2023\",{\"1\":{\"475\":1}}],[\"20211222\",{\"1\":{\"892\":1}}],[\"20211014175135307\",{\"1\":{\"74\":1}}],[\"20210818\",{\"1\":{\"833\":1}}],[\"20210807123832574\",{\"1\":{\"559\":1}}],[\"20210802000916321\",{\"1\":{\"161\":1}}],[\"20210802000308665\",{\"1\":{\"157\":1}}],[\"20210802000052243\",{\"1\":{\"155\":1}}],[\"20210718193314796\",{\"1\":{\"230\":1}}],[\"20210718193618402\",{\"1\":{\"230\":1}}],[\"2021\",{\"1\":{\"229\":2,\"834\":1,\"837\":1,\"883\":1}}],[\"20201214114013294\",{\"1\":{\"412\":1}}],[\"20201214121721100\",{\"1\":{\"417\":1}}],[\"20201214121645728\",{\"1\":{\"417\":1}}],[\"20201214121613146\",{\"1\":{\"417\":1}}],[\"20201214121332594\",{\"1\":{\"417\":1}}],[\"20201214122255720\",{\"1\":{\"415\":1}}],[\"20201214124300675\",{\"1\":{\"411\":1}}],[\"20201214124603810\",{\"1\":{\"409\":1}}],[\"20201214125032862\",{\"1\":{\"408\":1}}],[\"20201214125020584\",{\"1\":{\"408\":1}}],[\"20201214125529023\",{\"1\":{\"407\":1}}],[\"20201214125504552\",{\"1\":{\"406\":1}}],[\"20201214125453643\",{\"1\":{\"406\":1}}],[\"20201214125402694\",{\"1\":{\"405\":1}}],[\"20201214123508379\",{\"1\":{\"403\":1}}],[\"20201214134235050\",{\"1\":{\"669\":1}}],[\"20201214134208507\",{\"1\":{\"669\":1}}],[\"20201214134132982\",{\"1\":{\"667\":1}}],[\"20201214134902337\",{\"1\":{\"191\":1}}],[\"20201214133955605\",{\"1\":{\"665\":1}}],[\"20201214133935704\",{\"1\":{\"665\":1}}],[\"20201214133830361\",{\"1\":{\"662\":1}}],[\"20201214133612299\",{\"1\":{\"662\":1}}],[\"20201214133601256\",{\"1\":{\"662\":1}}],[\"20201214130757812\",{\"1\":{\"530\":1}}],[\"20201214132416329\",{\"1\":{\"249\":1}}],[\"20201214132401207\",{\"1\":{\"248\":1}}],[\"20201214132343909\",{\"1\":{\"247\":1}}],[\"20201214132326043\",{\"1\":{\"246\":1}}],[\"20201214132309723\",{\"1\":{\"246\":1}}],[\"20201214132254636\",{\"1\":{\"245\":1}}],[\"20201214132215125\",{\"1\":{\"243\":1}}],[\"20201214132127621\",{\"1\":{\"243\":1}}],[\"20201214132059091\",{\"1\":{\"243\":1}}],[\"20201214132014480\",{\"1\":{\"242\":1}}],[\"20201214131948506\",{\"1\":{\"241\":1}}],[\"20201214131847691\",{\"1\":{\"240\":1}}],[\"20201214131814678\",{\"1\":{\"238\":1}}],[\"20201214131734289\",{\"1\":{\"235\":1}}],[\"20201214131543066\",{\"1\":{\"233\":1}}],[\"20201214131527522\",{\"1\":{\"232\":1}}],[\"20201214135053884\",{\"1\":{\"194\":1}}],[\"20201206122126739\",{\"1\":{\"32\":1}}],[\"20201206121829515\",{\"1\":{\"31\":1}}],[\"20201206121711716\",{\"1\":{\"31\":1}}],[\"20201206121650739\",{\"1\":{\"31\":1}}],[\"20201206121627187\",{\"1\":{\"31\":1}}],[\"20201206115459406\",{\"1\":{\"8\":1}}],[\"2020\",{\"1\":{\"26\":7,\"27\":3,\"28\":1,\"734\":1}}],[\"20200927113941669\",{\"1\":{\"559\":1}}],[\"20200918094003026\",{\"1\":{\"557\":1}}],[\"20200918092801239\",{\"1\":{\"557\":1}}],[\"20200918092729361\",{\"1\":{\"557\":1}}],[\"20200918092639589\",{\"1\":{\"557\":1}}],[\"20200331153816952\",{\"1\":{\"650\":1}}],[\"202003\",{\"1\":{\"222\":1}}],[\"20200527185020\",{\"1\":{\"189\":1}}],[\"20200527\",{\"1\":{\"189\":1}}],[\"20200719170325930\",{\"1\":{\"719\":1}}],[\"20200719170509172\",{\"1\":{\"719\":1}}],[\"20200717132223819\",{\"1\":{\"708\":1}}],[\"20200715110718600\",{\"1\":{\"4\":1}}],[\"20200715110330925\",{\"1\":{\"4\":1}}],[\"20200721082159974\",{\"1\":{\"645\":1}}],[\"20200721081546701\",{\"1\":{\"642\":1}}],[\"20200721091103941\",{\"1\":{\"480\":1}}],[\"20200721154514018\",{\"1\":{\"631\":1}}],[\"20200721154908228\",{\"1\":{\"629\":1}}],[\"20200721155019047\",{\"1\":{\"631\":1}}],[\"20200721195702373\",{\"1\":{\"222\":1}}],[\"20200721195559652\",{\"1\":{\"222\":1}}],[\"20200721113313947\",{\"1\":{\"72\":1}}],[\"20200106160423586\",{\"1\":{\"549\":1}}],[\"20200106152036190\",{\"1\":{\"549\":1}}],[\"20200106150945185\",{\"1\":{\"549\":1}}],[\"20200102\",{\"1\":{\"27\":2}}],[\"20200101\",{\"1\":{\"27\":6}}],[\"20200117113506023\",{\"1\":{\"25\":1}}],[\"20200117111045081\",{\"1\":{\"25\":1}}],[\"20200117105505918\",{\"1\":{\"25\":1}}],[\"20200117105348449\",{\"1\":{\"25\":1}}],[\"20200119145321380\",{\"1\":{\"22\":1}}],[\"20200119143709165\",{\"1\":{\"22\":1}}],[\"20200119143701027\",{\"1\":{\"22\":1}}],[\"20200119143648157\",{\"1\":{\"22\":1}}],[\"20200119143501626\",{\"1\":{\"22\":1}}],[\"20200119143405105\",{\"1\":{\"22\":1}}],[\"20200119143332168\",{\"1\":{\"22\":1}}],[\"20200119143246489\",{\"1\":{\"22\":1}}],[\"20200119143105348\",{\"1\":{\"22\":1}}],[\"20200119115936949\",{\"1\":{\"22\":1}}],[\"207\",{\"1\":{\"23\":1}}],[\"2001\",{\"1\":{\"715\":1}}],[\"200715714560\",{\"1\":{\"412\":1}}],[\"2008\",{\"1\":{\"127\":1}}],[\"200\",{\"1\":{\"22\":2,\"100\":1,\"221\":5,\"311\":1,\"313\":1,\"315\":1,\"478\":1,\"526\":1,\"650\":2,\"779\":1}}],[\"2000年左右\",{\"1\":{\"687\":1}}],[\"2000年7月\",{\"1\":{\"190\":1}}],[\"2000\",{\"1\":{\"3\":2,\"135\":1,\"475\":4}}],[\"20160617\",{\"1\":{\"605\":1}}],[\"2015\",{\"1\":{\"527\":1}}],[\"2014\",{\"1\":{\"527\":2}}],[\"2017\",{\"1\":{\"211\":1,\"478\":1,\"722\":1}}],[\"2019年10月12日\",{\"1\":{\"626\":1}}],[\"20190227\",{\"1\":{\"485\":1}}],[\"20191223115738971\",{\"1\":{\"788\":1}}],[\"20191223115309185\",{\"1\":{\"787\":1}}],[\"20191223114900518\",{\"1\":{\"786\":1}}],[\"20191223114826757\",{\"1\":{\"786\":1}}],[\"20191223112725005\",{\"1\":{\"783\":1}}],[\"20191223112428348\",{\"1\":{\"783\":1}}],[\"20191218091838954\",{\"1\":{\"653\":1}}],[\"20191218140600902\",{\"1\":{\"627\":1}}],[\"20191218134210879\",{\"1\":{\"627\":1}}],[\"20191216174856510\",{\"1\":{\"37\":1}}],[\"20191216173747383\",{\"1\":{\"34\":1}}],[\"20191216163905988\",{\"1\":{\"14\":1}}],[\"20191203152720691\",{\"1\":{\"394\":1}}],[\"20191120195845734\",{\"1\":{\"722\":1}}],[\"20191120195618441\",{\"1\":{\"722\":1}}],[\"20191120195453758\",{\"1\":{\"722\":1}}],[\"20191120195326698\",{\"1\":{\"722\":1}}],[\"20191120200152966\",{\"1\":{\"722\":1}}],[\"20191120200059442\",{\"1\":{\"722\":1}}],[\"20191120200005300\",{\"1\":{\"722\":1}}],[\"20191120205433980\",{\"1\":{\"73\":1}}],[\"20191120205015864\",{\"1\":{\"73\":1}}],[\"20191120204719806\",{\"1\":{\"73\":1}}],[\"20191120204623652\",{\"1\":{\"73\":1}}],[\"20191120204352223\",{\"1\":{\"73\":1}}],[\"20191120204232822\",{\"1\":{\"73\":1}}],[\"20191125164448760\",{\"1\":{\"297\":1}}],[\"2019\",{\"1\":{\"50\":1,\"189\":1,\"285\":1,\"297\":1,\"533\":1,\"626\":5,\"683\":1,\"789\":12}}],[\"2010\",{\"1\":{\"23\":6}}],[\"2012\",{\"1\":{\"21\":3,\"527\":1}}],[\"20\",{\"0\":{\"105\":1},\"1\":{\"13\":4,\"22\":1,\"28\":1,\"58\":1,\"100\":1,\"103\":1,\"104\":1,\"214\":1,\"229\":2,\"270\":1,\"306\":1,\"402\":2,\"446\":1,\"527\":1,\"754\":1,\"776\":1,\"832\":2,\"834\":1,\"837\":2,\"845\":8,\"893\":1}}],[\"2\",{\"0\":{\"7\":1,\"13\":1,\"17\":1,\"23\":1,\"32\":1,\"35\":1,\"57\":1,\"60\":1,\"69\":1,\"85\":1,\"130\":1,\"135\":1,\"139\":1,\"207\":1,\"208\":1,\"210\":1,\"214\":1,\"216\":1,\"225\":1,\"230\":1,\"253\":1,\"267\":1,\"276\":1,\"279\":1,\"280\":1,\"281\":2,\"282\":1,\"284\":1,\"288\":1,\"291\":1,\"300\":1,\"305\":1,\"307\":1,\"370\":1,\"376\":1,\"380\":1,\"384\":1,\"386\":1,\"388\":1,\"392\":1,\"396\":1,\"406\":1,\"430\":1,\"435\":1,\"443\":1,\"444\":1,\"482\":1,\"484\":1,\"489\":1,\"493\":1,\"496\":1,\"508\":1,\"512\":1,\"517\":1,\"521\":1,\"530\":1,\"532\":1,\"538\":1,\"547\":1,\"561\":1,\"569\":1,\"570\":1,\"571\":1,\"572\":2,\"573\":1,\"574\":1,\"575\":1,\"576\":1,\"580\":1,\"581\":2,\"582\":1,\"583\":1,\"584\":1,\"588\":1,\"594\":1,\"597\":1,\"600\":1,\"604\":1,\"612\":1,\"630\":1,\"634\":1,\"640\":1,\"644\":1,\"648\":1,\"649\":1,\"655\":1,\"660\":1,\"666\":1,\"668\":1,\"669\":1,\"673\":1,\"677\":1,\"687\":1,\"694\":1,\"696\":1,\"703\":1,\"708\":1,\"712\":1,\"713\":1,\"715\":1,\"726\":1,\"731\":1,\"742\":1,\"749\":1,\"752\":1,\"756\":1,\"765\":1,\"773\":1,\"782\":1,\"785\":1,\"787\":1,\"789\":1,\"792\":1,\"801\":1,\"812\":1,\"819\":1,\"828\":1,\"832\":1,\"908\":1,\"910\":1,\"927\":1},\"1\":{\"3\":4,\"13\":1,\"14\":4,\"15\":2,\"19\":1,\"21\":3,\"22\":3,\"24\":5,\"25\":2,\"27\":3,\"29\":1,\"32\":3,\"33\":1,\"58\":1,\"59\":1,\"61\":1,\"63\":3,\"65\":1,\"66\":1,\"73\":2,\"74\":1,\"80\":1,\"82\":1,\"91\":1,\"101\":1,\"104\":1,\"109\":1,\"113\":1,\"118\":2,\"119\":1,\"125\":1,\"126\":1,\"132\":1,\"133\":1,\"134\":4,\"135\":13,\"139\":7,\"155\":1,\"172\":1,\"175\":1,\"176\":1,\"189\":1,\"204\":1,\"208\":1,\"211\":1,\"213\":1,\"214\":1,\"221\":3,\"222\":1,\"229\":2,\"230\":3,\"236\":1,\"243\":4,\"256\":1,\"262\":3,\"263\":2,\"275\":1,\"276\":3,\"277\":1,\"288\":6,\"293\":2,\"294\":2,\"297\":2,\"300\":1,\"301\":1,\"302\":1,\"304\":1,\"305\":2,\"317\":3,\"331\":1,\"332\":1,\"336\":1,\"337\":1,\"344\":1,\"345\":1,\"348\":1,\"349\":1,\"357\":2,\"362\":1,\"379\":2,\"389\":1,\"398\":1,\"412\":1,\"413\":2,\"414\":2,\"417\":1,\"427\":1,\"428\":1,\"431\":1,\"432\":1,\"433\":4,\"435\":1,\"440\":3,\"445\":3,\"446\":1,\"448\":1,\"452\":1,\"454\":1,\"456\":1,\"458\":1,\"461\":1,\"475\":1,\"502\":1,\"511\":1,\"522\":2,\"526\":10,\"527\":4,\"530\":1,\"533\":1,\"537\":1,\"549\":4,\"557\":1,\"558\":4,\"559\":1,\"563\":6,\"564\":4,\"572\":2,\"576\":1,\"580\":1,\"596\":1,\"603\":1,\"604\":1,\"605\":2,\"616\":3,\"617\":1,\"618\":3,\"619\":5,\"621\":3,\"622\":3,\"623\":2,\"624\":1,\"625\":2,\"626\":1,\"627\":2,\"636\":1,\"649\":2,\"650\":2,\"651\":1,\"652\":2,\"657\":1,\"671\":1,\"673\":1,\"674\":1,\"675\":1,\"683\":3,\"684\":5,\"703\":1,\"705\":1,\"720\":1,\"722\":3,\"723\":3,\"727\":1,\"732\":1,\"734\":4,\"749\":1,\"753\":1,\"759\":1,\"761\":1,\"771\":2,\"773\":1,\"774\":1,\"799\":1,\"806\":1,\"809\":6,\"820\":2,\"821\":1,\"822\":1,\"825\":2,\"832\":2,\"833\":1,\"834\":2,\"836\":1,\"837\":2,\"838\":1,\"841\":1,\"843\":1,\"844\":1,\"845\":2,\"864\":1,\"865\":1,\"866\":1,\"874\":3,\"887\":1,\"893\":1,\"896\":1,\"898\":1,\"903\":1,\"906\":1}}],[\"each不会被修改\",{\"1\":{\"900\":1}}],[\"each\",{\"1\":{\"900\":1}}],[\"earliest\",{\"1\":{\"435\":2,\"564\":2}}],[\"ep\",{\"1\":{\"892\":1,\"893\":13}}],[\"epoll本质上都是同步i\",{\"1\":{\"808\":1}}],[\"epoll都是io多路复用的机制\",{\"1\":{\"808\":1}}],[\"epoll实际上是事件驱动\",{\"1\":{\"806\":1}}],[\"epoll会把哪个流发生了怎样的i\",{\"1\":{\"806\":1}}],[\"epoll可以理解为event\",{\"1\":{\"806\":1}}],[\"epollfd\",{\"1\":{\"805\":1}}],[\"epoll\",{\"0\":{\"797\":1,\"804\":1},\"1\":{\"795\":1,\"805\":1}}],[\"e2\",{\"1\":{\"541\":1,\"542\":1,\"544\":1,\"545\":1}}],[\"euc\",{\"1\":{\"837\":1}}],[\"euclidean\",{\"1\":{\"53\":1}}],[\"europe\",{\"1\":{\"527\":1}}],[\"efficiency\",{\"1\":{\"898\":2}}],[\"effect\",{\"1\":{\"823\":1}}],[\"ef|grep\",{\"1\":{\"891\":1}}],[\"efg\",{\"1\":{\"527\":1}}],[\"ef\",{\"1\":{\"332\":2,\"337\":2,\"343\":1,\"345\":2,\"349\":2,\"389\":3}}],[\"e68fc7a\",{\"1\":{\"290\":1}}],[\"eof\",{\"1\":{\"288\":4,\"290\":2,\"291\":2}}],[\"eval\",{\"1\":{\"837\":1}}],[\"eventloopgroup\",{\"1\":{\"612\":3}}],[\"eventtranslator\",{\"1\":{\"472\":1}}],[\"eventpoller\",{\"1\":{\"472\":1}}],[\"eventprocessor\",{\"1\":{\"450\":1,\"472\":1}}],[\"event事件\",{\"1\":{\"461\":1}}],[\"eventfactory\",{\"0\":{\"461\":1},\"1\":{\"461\":1,\"472\":1}}],[\"eventhandlergroup\",{\"1\":{\"451\":1}}],[\"eventhandler\",{\"1\":{\"450\":1,\"451\":1,\"472\":1}}],[\"event\",{\"1\":{\"450\":1}}],[\"eventsink主要是提供发布事件\",{\"1\":{\"472\":1}}],[\"eventsink\",{\"1\":{\"472\":2}}],[\"eventsequencer扩展了sequenced\",{\"1\":{\"472\":2}}],[\"eventsequencer\",{\"1\":{\"472\":2}}],[\"events\",{\"1\":{\"326\":1,\"342\":1,\"448\":1}}],[\"events块\",{\"1\":{\"305\":2}}],[\"everysec\",{\"1\":{\"146\":1,\"148\":1}}],[\"ev\",{\"1\":{\"270\":1,\"272\":1}}],[\"eq\",{\"1\":{\"113\":1}}],[\"equalsignorecase\",{\"1\":{\"218\":1}}],[\"equals\",{\"1\":{\"3\":1,\"32\":1,\"213\":1,\"217\":1,\"218\":1,\"219\":1,\"410\":1}}],[\"etag\",{\"1\":{\"317\":2}}],[\"etcddistributelock\",{\"1\":{\"214\":6}}],[\"etcdlocktest\",{\"1\":{\"214\":1}}],[\"etcdlock\",{\"1\":{\"214\":4}}],[\"etcd\",{\"1\":{\"214\":10}}],[\"etcd分布式锁的实现原理与zk锁类似\",{\"1\":{\"214\":1}}],[\"etcd分布式锁的实现\",{\"1\":{\"214\":1}}],[\"etc\",{\"0\":{\"323\":1},\"1\":{\"74\":2,\"79\":1,\"222\":2,\"236\":1,\"267\":1,\"270\":3,\"272\":1,\"275\":2,\"277\":1,\"282\":1,\"288\":4,\"290\":2,\"291\":1,\"293\":1,\"317\":2,\"321\":3,\"323\":1,\"325\":1,\"331\":1,\"332\":2,\"334\":1,\"336\":1,\"337\":1,\"341\":1,\"343\":2,\"344\":1,\"345\":1,\"347\":1,\"348\":1,\"349\":1,\"351\":1,\"356\":2,\"357\":4,\"358\":1,\"359\":1,\"361\":3,\"362\":3,\"363\":1,\"364\":1,\"365\":1,\"366\":1,\"373\":3,\"377\":3,\"380\":6,\"834\":3,\"835\":2,\"836\":1,\"838\":2,\"842\":1}}],[\"etl\",{\"1\":{\"27\":1}}],[\"eclipse是workspace下的project\",{\"1\":{\"576\":1}}],[\"eclipse\",{\"1\":{\"566\":3}}],[\"ecdh\",{\"1\":{\"317\":1}}],[\"ecdhe\",{\"1\":{\"317\":2}}],[\"ecpm\",{\"1\":{\"63\":2}}],[\"echoserverhandler\",{\"1\":{\"612\":1,\"613\":1}}],[\"echoserver\",{\"1\":{\"612\":3}}],[\"echocontroller\",{\"1\":{\"415\":1}}],[\"echo\",{\"1\":{\"7\":3,\"332\":2,\"337\":2,\"345\":2,\"349\":2,\"357\":2,\"389\":10,\"400\":1,\"404\":1,\"408\":1,\"409\":1,\"410\":3,\"411\":2,\"415\":2,\"612\":1,\"613\":1,\"651\":1,\"834\":1}}],[\"email\",{\"1\":{\"495\":1}}],[\"empty\",{\"1\":{\"341\":1,\"477\":1,\"478\":1,\"650\":2,\"845\":4}}],[\"emptydir\",{\"1\":{\"263\":1}}],[\"employee\",{\"1\":{\"103\":1,\"885\":1,\"887\":4,\"888\":1,\"894\":1}}],[\"employees\",{\"1\":{\"21\":11,\"22\":18,\"24\":1,\"25\":1,\"28\":10}}],[\"embeddings\",{\"1\":{\"58\":6}}],[\"errorthresholdpercentage\",{\"1\":{\"402\":2}}],[\"error=\",{\"1\":{\"321\":1}}],[\"errors\",{\"1\":{\"74\":1,\"317\":1}}],[\"error\",{\"1\":{\"63\":2,\"74\":6,\"141\":2,\"213\":1,\"214\":3,\"218\":1,\"297\":4,\"317\":2,\"321\":2,\"341\":1,\"419\":15,\"518\":1,\"626\":1,\"820\":1}}],[\"err\",{\"1\":{\"32\":1,\"214\":1,\"652\":1}}],[\"eden+from\",{\"1\":{\"722\":1}}],[\"edison\",{\"1\":{\"242\":1}}],[\"edit\",{\"1\":{\"278\":1}}],[\"edited\",{\"1\":{\"21\":1}}],[\"edits\",{\"1\":{\"19\":1,\"433\":1}}],[\"edits会和fsimage合并到一起\",{\"1\":{\"19\":1}}],[\"edits文件的目的是为了提高系统的操作效率\",{\"1\":{\"19\":1}}],[\"edu\",{\"1\":{\"32\":1,\"236\":1,\"440\":2,\"517\":1,\"518\":2,\"523\":7,\"650\":1,\"707\":1,\"708\":1,\"715\":2,\"716\":1,\"717\":4,\"718\":1,\"721\":1,\"733\":7}}],[\"edward\",{\"1\":{\"29\":1}}],[\"elementtype\",{\"1\":{\"733\":2}}],[\"elementmatchers\",{\"1\":{\"717\":3}}],[\"el\",{\"0\":{\"386\":1},\"1\":{\"388\":1}}],[\"elastic\",{\"1\":{\"265\":2,\"267\":2,\"275\":1}}],[\"elasticsearch和磁盘之间是文件系统缓存\",{\"1\":{\"4\":1}}],[\"elasticsearch是用java语言开发的\",{\"1\":{\"4\":1}}],[\"elasticsearch是一个基于lucene的搜索服务器\",{\"1\":{\"4\":1}}],[\"elasticsearch近实时性介绍\",{\"0\":{\"4\":1}}],[\"elasticsearch<\",{\"1\":{\"3\":1}}],[\"elasticsearch\",{\"1\":{\"3\":12,\"4\":4,\"267\":1,\"268\":1,\"270\":4,\"272\":1,\"273\":2,\"280\":1}}],[\"elasticsearch客户端\",{\"0\":{\"3\":1}}],[\"elk相关配置\",{\"0\":{\"269\":1}}],[\"elk官网\",{\"1\":{\"265\":1}}],[\"elk\",{\"1\":{\"265\":1,\"267\":1,\"275\":1,\"276\":3,\"277\":1,\"280\":1,\"282\":3}}],[\"el7\",{\"1\":{\"76\":1,\"77\":5,\"290\":1,\"291\":1,\"318\":1,\"319\":2}}],[\"elt\",{\"1\":{\"27\":1,\"73\":1}}],[\"else\",{\"1\":{\"22\":1,\"214\":1,\"217\":1,\"218\":1,\"219\":1,\"389\":3,\"410\":1,\"445\":2,\"537\":1,\"612\":1,\"734\":3,\"822\":3,\"823\":2}}],[\"ens33\",{\"1\":{\"331\":1,\"332\":1,\"336\":1,\"344\":1,\"348\":1,\"356\":1,\"361\":1}}],[\"enforcing\",{\"1\":{\"288\":1}}],[\"enforce\",{\"1\":{\"27\":1}}],[\"en\",{\"1\":{\"265\":1}}],[\"encoding=\",{\"1\":{\"715\":1}}],[\"encoding\",{\"1\":{\"157\":1,\"317\":1,\"477\":2,\"479\":1,\"480\":1,\"518\":3}}],[\"ent\",{\"1\":{\"833\":1,\"845\":1}}],[\"enter指令时\",{\"1\":{\"723\":2}}],[\"enter和monitor\",{\"1\":{\"723\":1}}],[\"entering\",{\"1\":{\"214\":1}}],[\"entityutils\",{\"1\":{\"518\":2}}],[\"entity\",{\"1\":{\"517\":1,\"518\":2}}],[\"entities\",{\"1\":{\"58\":3}}],[\"entries\",{\"1\":{\"158\":6}}],[\"entryset\",{\"1\":{\"518\":9}}],[\"entry<string\",{\"1\":{\"518\":6}}],[\"entry数据更改等api\",{\"1\":{\"451\":1}}],[\"entry元素获取\",{\"1\":{\"451\":1}}],[\"entrypoint\",{\"1\":{\"230\":1,\"263\":1}}],[\"entry\",{\"1\":{\"157\":2,\"217\":1,\"455\":4,\"456\":4,\"518\":9,\"650\":2}}],[\"engine启动容器时\",{\"1\":{\"250\":1}}],[\"engine\",{\"1\":{\"225\":2,\"229\":3,\"230\":1}}],[\"engine=innodb\",{\"1\":{\"92\":1,\"104\":1}}],[\"engine=xxx\",{\"1\":{\"92\":1}}],[\"english\",{\"1\":{\"13\":4}}],[\"enableasync\",{\"1\":{\"778\":1}}],[\"enablefeignclients\",{\"1\":{\"397\":1,\"408\":1,\"409\":1,\"416\":1}}],[\"enablecircuitbreaker\",{\"1\":{\"397\":2,\"416\":2}}],[\"enabled\",{\"1\":{\"320\":2,\"396\":2,\"402\":3,\"404\":1,\"410\":1,\"416\":1}}],[\"enablediscoveryclient\",{\"1\":{\"297\":1,\"393\":2,\"397\":2,\"408\":1,\"409\":1,\"415\":2,\"416\":2}}],[\"enabled=1\",{\"1\":{\"267\":1,\"291\":1}}],[\"enable\",{\"1\":{\"78\":1,\"229\":1,\"273\":2,\"290\":1,\"292\":1,\"320\":1,\"321\":1,\"355\":1,\"435\":1,\"564\":1,\"836\":1,\"838\":1,\"887\":3}}],[\"enabletransactionmanagement\",{\"1\":{\"64\":1}}],[\"enum\",{\"1\":{\"64\":1,\"472\":2,\"626\":2}}],[\"endpoints\",{\"1\":{\"214\":1,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1}}],[\"endpointurl\",{\"1\":{\"63\":2}}],[\"endpointconfiguration\",{\"1\":{\"63\":2}}],[\"endpoint\",{\"1\":{\"63\":3,\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1,\"418\":1}}],[\"end\",{\"1\":{\"22\":1,\"61\":2,\"64\":1,\"73\":2,\"135\":2,\"157\":1,\"270\":1,\"789\":2,\"845\":5}}],[\"environment\",{\"1\":{\"63\":2,\"77\":1,\"208\":1,\"564\":2}}],[\"env\",{\"1\":{\"22\":1,\"263\":1,\"410\":2,\"418\":2}}],[\"e\",{\"0\":{\"43\":1,\"49\":1,\"503\":1},\"1\":{\"3\":5,\"13\":1,\"62\":1,\"63\":6,\"73\":1,\"76\":1,\"213\":10,\"214\":18,\"217\":3,\"218\":1,\"275\":1,\"297\":8,\"318\":1,\"339\":3,\"389\":2,\"410\":2,\"411\":2,\"413\":1,\"419\":25,\"440\":4,\"446\":2,\"475\":5,\"531\":2,\"533\":2,\"537\":1,\"539\":4,\"541\":1,\"542\":1,\"544\":1,\"545\":1,\"548\":4,\"552\":6,\"554\":2,\"564\":2,\"566\":1,\"616\":1,\"626\":2,\"650\":4,\"664\":1,\"733\":4,\"765\":2,\"776\":4,\"777\":1,\"789\":1}}],[\"ex\",{\"1\":{\"650\":1}}],[\"exact\",{\"1\":{\"445\":2}}],[\"examined\",{\"1\":{\"74\":1}}],[\"examples\",{\"1\":{\"652\":1}}],[\"example\",{\"1\":{\"3\":2,\"90\":1,\"297\":1,\"416\":2,\"436\":1,\"437\":4,\"438\":2,\"439\":2,\"612\":2,\"613\":1}}],[\"ext4\",{\"1\":{\"371\":1}}],[\"extent\",{\"1\":{\"837\":1,\"853\":1}}],[\"extension\",{\"1\":{\"417\":4}}],[\"extension=properties\",{\"1\":{\"401\":1}}],[\"extensions\",{\"1\":{\"278\":2,\"558\":1}}],[\"extends\",{\"1\":{\"32\":2,\"214\":2,\"440\":1,\"444\":1,\"446\":2,\"523\":1,\"613\":1,\"652\":2,\"733\":1}}],[\"extended\",{\"1\":{\"29\":1}}],[\"extra\",{\"1\":{\"82\":1}}],[\"extract\",{\"1\":{\"59\":2,\"61\":1,\"62\":1}}],[\"expansion\",{\"1\":{\"445\":2}}],[\"expand\",{\"1\":{\"59\":1}}],[\"expectedvalue\",{\"1\":{\"444\":6}}],[\"experimental\",{\"1\":{\"229\":2}}],[\"exposure\",{\"1\":{\"404\":1,\"408\":1,\"409\":1,\"412\":1,\"414\":1}}],[\"expose命令将在下一篇dockerfile构建中说明\",{\"1\":{\"251\":1}}],[\"expose\",{\"1\":{\"230\":1,\"243\":1,\"263\":1,\"296\":1}}],[\"export\",{\"1\":{\"343\":1,\"377\":3,\"575\":1,\"834\":2}}],[\"expiration\",{\"1\":{\"139\":1}}],[\"expires\",{\"1\":{\"317\":1}}],[\"expired\",{\"1\":{\"317\":2,\"864\":1}}],[\"expireat\",{\"1\":{\"139\":1}}],[\"expire\",{\"1\":{\"74\":1,\"139\":2,\"837\":1,\"845\":1}}],[\"expiry\",{\"1\":{\"63\":1}}],[\"exploded\",{\"1\":{\"566\":2}}],[\"explicit\",{\"1\":{\"74\":1}}],[\"explain结果每个字段的含义说明\",{\"1\":{\"113\":1}}],[\"explain列有哪些\",{\"0\":{\"113\":1}}],[\"explain\",{\"1\":{\"29\":1}}],[\"explain命令可以查看某个查询语句是否用到了索引\",{\"1\":{\"28\":1}}],[\"expr\",{\"1\":{\"58\":2}}],[\"expr=none\",{\"1\":{\"62\":1}}],[\"expr=\",{\"1\":{\"58\":2}}],[\"exit两个字节码指令\",{\"1\":{\"723\":1}}],[\"exited\",{\"1\":{\"389\":1}}],[\"exiting\",{\"1\":{\"389\":1}}],[\"exit\",{\"1\":{\"32\":2,\"78\":1,\"297\":1,\"322\":2,\"324\":1,\"342\":1,\"389\":2,\"652\":2,\"841\":1,\"843\":1,\"845\":1,\"883\":1}}],[\"exists<\",{\"1\":{\"389\":2}}],[\"exists结构的\",{\"1\":{\"23\":1}}],[\"exists\",{\"1\":{\"21\":4,\"28\":1,\"73\":1,\"537\":2,\"882\":2}}],[\"exceeded\",{\"1\":{\"820\":1}}],[\"except\",{\"1\":{\"61\":1}}],[\"exceptioncaught\",{\"1\":{\"613\":3}}],[\"exceptionhandlersetting\",{\"1\":{\"472\":1}}],[\"exceptionhandlerwrapper\",{\"1\":{\"472\":1}}],[\"exceptionhandler\",{\"1\":{\"419\":7,\"472\":1,\"626\":1}}],[\"exception\",{\"1\":{\"3\":2,\"63\":11,\"213\":7,\"214\":9,\"218\":1,\"297\":2,\"413\":1,\"419\":2,\"427\":1,\"446\":1,\"475\":8,\"518\":22,\"523\":1,\"537\":3,\"539\":4,\"541\":4,\"542\":4,\"544\":4,\"545\":4,\"612\":2,\"613\":2,\"650\":3,\"652\":1,\"716\":1,\"765\":1,\"776\":1,\"777\":2}}],[\"exclusivecount\",{\"1\":{\"820\":3,\"821\":1,\"822\":1}}],[\"exclusive\",{\"1\":{\"664\":1,\"820\":3}}],[\"exclusions>\",{\"1\":{\"63\":1}}],[\"exclusion>\",{\"1\":{\"63\":1}}],[\"excludefilters\",{\"1\":{\"408\":1}}],[\"excludes>\",{\"1\":{\"389\":1}}],[\"exclude>\",{\"1\":{\"389\":2}}],[\"excludetransitive>\",{\"1\":{\"389\":1}}],[\"exchanger可以用于遗传算法\",{\"1\":{\"555\":1}}],[\"exchanger是一个用于线程间协作的工具类\",{\"1\":{\"555\":1}}],[\"exchanger\",{\"0\":{\"555\":1},\"1\":{\"550\":1}}],[\"exchange\",{\"1\":{\"22\":3,\"458\":1}}],[\"execstop=\",{\"1\":{\"353\":1}}],[\"execstart=\",{\"1\":{\"230\":2,\"353\":1}}],[\"execreload=\",{\"1\":{\"353\":1}}],[\"exec方式需要制定的命令或脚本\",{\"1\":{\"263\":1}}],[\"executor\",{\"1\":{\"297\":2,\"475\":4,\"627\":4,\"776\":2,\"779\":7}}],[\"executors\",{\"1\":{\"213\":2,\"214\":3,\"475\":3}}],[\"executorservice\",{\"1\":{\"213\":10,\"214\":10,\"440\":2,\"446\":1,\"475\":3,\"754\":1,\"764\":1,\"771\":1,\"772\":2,\"773\":2,\"776\":1}}],[\"execute方法执行完成\",{\"1\":{\"773\":1}}],[\"executed\",{\"1\":{\"328\":1,\"342\":1}}],[\"execute\",{\"1\":{\"243\":1,\"446\":7,\"518\":1,\"762\":1,\"773\":1}}],[\"executions>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"execution>\",{\"1\":{\"389\":3,\"707\":1,\"715\":1}}],[\"execution\",{\"1\":{\"230\":1,\"396\":1,\"402\":1}}],[\"executionexception\",{\"1\":{\"214\":2}}],[\"exec\",{\"1\":{\"22\":4,\"29\":1,\"139\":1,\"242\":1,\"255\":1,\"263\":1,\"277\":1}}],[\"essential\",{\"1\":{\"613\":1}}],[\"esac\",{\"1\":{\"389\":1}}],[\"es需要优化一些内核参数\",{\"1\":{\"270\":1}}],[\"es删除数据发生io异常\",{\"1\":{\"3\":1}}],[\"es发生异常\",{\"1\":{\"3\":1}}],[\"es发生io异常\",{\"1\":{\"3\":1}}],[\"es成功\",{\"1\":{\"3\":1}}],[\"esclient\",{\"1\":{\"3\":4}}],[\"es连接客户端\",{\"1\":{\"3\":1}}],[\"esresthighlevelclient\",{\"1\":{\"3\":5}}],[\"es\",{\"1\":{\"3\":3}}],[\"es版本为7\",{\"1\":{\"3\":1}}],[\"郑天祺\",{\"1\":{\"1\":1,\"734\":1}}]],\"serializationVersion\":2}";